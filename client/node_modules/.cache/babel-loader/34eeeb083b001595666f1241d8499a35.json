{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/ui/filedialogbuttonview\n */\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n/**\n * The file dialog button view.\n *\n * This component provides a button that opens the native file selection dialog.\n * It can be used to implement the UI of a file upload feature.\n *\n *\t\tconst view = new FileDialogButtonView( locale );\n *\n *\t\tview.set( {\n *\t\t\tacceptedType: 'image/*',\n *\t\t\tallowMultipleFiles: true\n *\t\t} );\n *\n *\t\tview.buttonView.set( {\n *\t\t\tlabel: t( 'Insert image' ),\n *\t\t\ticon: imageIcon,\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.on( 'done', ( evt, files ) => {\n *\t\t\tfor ( const file of Array.from( files ) ) {\n *\t\t\t\tconsole.log( 'Selected file', file );\n *\t\t\t}\n *\t\t} );\n *\n * @extends module:ui/view~View\n */\n\nexport default class FileDialogButtonView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * The button view of the component.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.buttonView = new ButtonView(locale);\n    /**\n     * A hidden `<input>` view used to execute file dialog.\n     *\n     * @protected\n     * @member {module:upload/ui/filedialogbuttonview~FileInputView}\n     */\n\n    this._fileInputView = new FileInputView(locale);\n    /**\n     * Accepted file types. Can be provided in form of file extensions, media type or one of:\n     * * `audio/*`,\n     * * `video/*`,\n     * * `image/*`.\n     *\n     * @observable\n     * @member {String} #acceptedType\n     */\n\n    this._fileInputView.bind('acceptedType').to(this);\n    /**\n     * Indicates if multiple files can be selected. Defaults to `true`.\n     *\n     * @observable\n     * @member {Boolean} #allowMultipleFiles\n     */\n\n\n    this._fileInputView.bind('allowMultipleFiles').to(this);\n    /**\n     * Fired when file dialog is closed with file selected.\n     *\n     *\t\tview.on( 'done', ( evt, files ) => {\n     *\t\t\tfor ( const file of files ) {\n     *\t\t\t\tconsole.log( 'Selected file', file );\n     *\t\t\t}\n     *\t\t}\n     *\n     * @event done\n     * @param {Array.<File>} files Array of selected files.\n     */\n\n\n    this._fileInputView.delegate('done').to(this);\n\n    this.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: 'ck-file-dialog-button'\n      },\n      children: [this.buttonView, this._fileInputView]\n    });\n    this.buttonView.on('execute', () => {\n      this._fileInputView.open();\n    });\n  }\n  /**\n   * Focuses the {@link #buttonView}.\n   */\n\n\n  focus() {\n    this.buttonView.focus();\n  }\n\n}\n/**\n * The hidden file input view class.\n *\n * @private\n * @extends module:ui/view~View\n */\n\nclass FileInputView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * Accepted file types. Can be provided in form of file extensions, media type or one of:\n     * * `audio/*`,\n     * * `video/*`,\n     * * `image/*`.\n     *\n     * @observable\n     * @member {String} #acceptedType\n     */\n\n    this.set('acceptedType');\n    /**\n     * Indicates if multiple files can be selected. Defaults to `false`.\n     *\n     * @observable\n     * @member {Boolean} #allowMultipleFiles\n     */\n\n    this.set('allowMultipleFiles', false);\n    const bind = this.bindTemplate;\n    this.setTemplate({\n      tag: 'input',\n      attributes: {\n        class: ['ck-hidden'],\n        type: 'file',\n        tabindex: '-1',\n        accept: bind.to('acceptedType'),\n        multiple: bind.to('allowMultipleFiles')\n      },\n      on: {\n        // Removing from code coverage since we cannot programmatically set input element files.\n        change: bind.to(\n        /* istanbul ignore next */\n        () => {\n          if (this.element && this.element.files && this.element.files.length) {\n            this.fire('done', this.element.files);\n          }\n\n          this.element.value = '';\n        })\n      }\n    });\n  }\n  /**\n   * Opens file dialog.\n   */\n\n\n  open() {\n    this.element.click();\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-upload/src/ui/filedialogbuttonview.js"],"names":["ButtonView","View","FileDialogButtonView","constructor","locale","buttonView","_fileInputView","FileInputView","bind","to","delegate","setTemplate","tag","attributes","class","children","on","open","focus","set","bindTemplate","type","tabindex","accept","multiple","change","element","files","length","fire","value","click"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/ui/filedialogbuttonview\n */\n\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n\n/**\n * The file dialog button view.\n *\n * This component provides a button that opens the native file selection dialog.\n * It can be used to implement the UI of a file upload feature.\n *\n *\t\tconst view = new FileDialogButtonView( locale );\n *\n *\t\tview.set( {\n *\t\t\tacceptedType: 'image/*',\n *\t\t\tallowMultipleFiles: true\n *\t\t} );\n *\n *\t\tview.buttonView.set( {\n *\t\t\tlabel: t( 'Insert image' ),\n *\t\t\ticon: imageIcon,\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.on( 'done', ( evt, files ) => {\n *\t\t\tfor ( const file of Array.from( files ) ) {\n *\t\t\t\tconsole.log( 'Selected file', file );\n *\t\t\t}\n *\t\t} );\n *\n * @extends module:ui/view~View\n */\nexport default class FileDialogButtonView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The button view of the component.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.buttonView = new ButtonView( locale );\n\n\t\t/**\n\t\t * A hidden `<input>` view used to execute file dialog.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:upload/ui/filedialogbuttonview~FileInputView}\n\t\t */\n\t\tthis._fileInputView = new FileInputView( locale );\n\n\t\t/**\n\t\t * Accepted file types. Can be provided in form of file extensions, media type or one of:\n\t\t * * `audio/*`,\n\t\t * * `video/*`,\n\t\t * * `image/*`.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #acceptedType\n\t\t */\n\t\tthis._fileInputView.bind( 'acceptedType' ).to( this );\n\n\t\t/**\n\t\t * Indicates if multiple files can be selected. Defaults to `true`.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #allowMultipleFiles\n\t\t */\n\t\tthis._fileInputView.bind( 'allowMultipleFiles' ).to( this );\n\n\t\t/**\n\t\t * Fired when file dialog is closed with file selected.\n\t\t *\n\t\t *\t\tview.on( 'done', ( evt, files ) => {\n\t\t *\t\t\tfor ( const file of files ) {\n\t\t *\t\t\t\tconsole.log( 'Selected file', file );\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t * @event done\n\t\t * @param {Array.<File>} files Array of selected files.\n\t\t */\n\t\tthis._fileInputView.delegate( 'done' ).to( this );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-file-dialog-button'\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis.buttonView,\n\t\t\t\tthis._fileInputView\n\t\t\t]\n\t\t} );\n\n\t\tthis.buttonView.on( 'execute', () => {\n\t\t\tthis._fileInputView.open();\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the {@link #buttonView}.\n\t */\n\tfocus() {\n\t\tthis.buttonView.focus();\n\t}\n}\n\n/**\n * The hidden file input view class.\n *\n * @private\n * @extends module:ui/view~View\n */\nclass FileInputView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Accepted file types. Can be provided in form of file extensions, media type or one of:\n\t\t * * `audio/*`,\n\t\t * * `video/*`,\n\t\t * * `image/*`.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #acceptedType\n\t\t */\n\t\tthis.set( 'acceptedType' );\n\n\t\t/**\n\t\t * Indicates if multiple files can be selected. Defaults to `false`.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #allowMultipleFiles\n\t\t */\n\t\tthis.set( 'allowMultipleFiles', false );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'input',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-hidden'\n\t\t\t\t],\n\t\t\t\ttype: 'file',\n\t\t\t\ttabindex: '-1',\n\t\t\t\taccept: bind.to( 'acceptedType' ),\n\t\t\t\tmultiple: bind.to( 'allowMultipleFiles' )\n\t\t\t},\n\n\t\t\ton: {\n\t\t\t\t// Removing from code coverage since we cannot programmatically set input element files.\n\t\t\t\tchange: bind.to( /* istanbul ignore next */ () => {\n\t\t\t\t\tif ( this.element && this.element.files && this.element.files.length ) {\n\t\t\t\t\t\tthis.fire( 'done', this.element.files );\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.element.value = '';\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Opens file dialog.\n\t */\n\topen() {\n\t\tthis.element.click();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}