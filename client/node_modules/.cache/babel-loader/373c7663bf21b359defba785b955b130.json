{"ast":null,"code":"/**\r\n * Copyright 2014-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactChildReconciler\r\n * @typechecks static-only\r\n */\n'use strict';\n\nvar ReactReconciler = require('./ReactReconciler');\n\nvar instantiateReactComponent = require('./instantiateReactComponent');\n\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\n\nvar traverseAllChildren = require('./traverseAllChildren');\n\nvar warning = require('fbjs/lib/warning');\n\nfunction instantiateChild(childInstances, child, name) {\n  // We found a component instance.\n  var keyUnique = childInstances[name] === undefined;\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;\n  }\n\n  if (child != null && keyUnique) {\n    childInstances[name] = instantiateReactComponent(child, null);\n  }\n}\n/**\r\n * ReactChildReconciler provides helpers for initializing or updating a set of\r\n * children. Its output is suitable for passing it onto ReactMultiChild which\r\n * does diffed reordering and insertion.\r\n */\n\n\nvar ReactChildReconciler = {\n  /**\r\n   * Generates a \"mount image\" for each of the supplied children. In the case\r\n   * of `ReactDOMComponent`, a mount image is a string of markup.\r\n   *\r\n   * @param {?object} nestedChildNodes Nested child maps.\r\n   * @return {?object} A set of child instances.\r\n   * @internal\r\n   */\n  instantiateChildren: function (nestedChildNodes, transaction, context) {\n    if (nestedChildNodes == null) {\n      return null;\n    }\n\n    var childInstances = {};\n    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);\n    return childInstances;\n  },\n\n  /**\r\n   * Updates the rendered children and returns a new set of children.\r\n   *\r\n   * @param {?object} prevChildren Previously initialized set of children.\r\n   * @param {?object} nextChildren Flat child element maps.\r\n   * @param {ReactReconcileTransaction} transaction\r\n   * @param {object} context\r\n   * @return {?object} A new set of child instances.\r\n   * @internal\r\n   */\n  updateChildren: function (prevChildren, nextChildren, transaction, context) {\n    // We currently don't have a way to track moves here but if we use iterators\n    // instead of for..in we can zip the iterators and check if an item has\n    // moved.\n    // TODO: If nothing has changed, return the prevChildren object so that we\n    // can quickly bailout if nothing has changed.\n    if (!nextChildren && !prevChildren) {\n      return null;\n    }\n\n    var name;\n\n    for (name in nextChildren) {\n      if (!nextChildren.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var prevChild = prevChildren && prevChildren[name];\n      var prevElement = prevChild && prevChild._currentElement;\n      var nextElement = nextChildren[name];\n\n      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {\n        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);\n        nextChildren[name] = prevChild;\n      } else {\n        if (prevChild) {\n          ReactReconciler.unmountComponent(prevChild, name);\n        } // The child must be instantiated before it's mounted.\n\n\n        var nextChildInstance = instantiateReactComponent(nextElement, null);\n        nextChildren[name] = nextChildInstance;\n      }\n    } // Unmount children that are no longer present.\n\n\n    for (name in prevChildren) {\n      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n        ReactReconciler.unmountComponent(prevChildren[name]);\n      }\n    }\n\n    return nextChildren;\n  },\n\n  /**\r\n   * Unmounts all rendered children. This should be used to clean up children\r\n   * when this component is unmounted.\r\n   *\r\n   * @param {?object} renderedChildren Previously initialized set of children.\r\n   * @internal\r\n   */\n  unmountChildren: function (renderedChildren) {\n    for (var name in renderedChildren) {\n      if (renderedChildren.hasOwnProperty(name)) {\n        var renderedChild = renderedChildren[name];\n        ReactReconciler.unmountComponent(renderedChild);\n      }\n    }\n  }\n};\nmodule.exports = ReactChildReconciler;","map":{"version":3,"sources":["C:/Users/nvtung/Các project thực hiện/RubyGYM/client/node_modules/jsx-to-string/node_modules/react/lib/ReactChildReconciler.js"],"names":["ReactReconciler","require","instantiateReactComponent","shouldUpdateReactComponent","traverseAllChildren","warning","instantiateChild","childInstances","child","name","keyUnique","undefined","process","env","NODE_ENV","ReactChildReconciler","instantiateChildren","nestedChildNodes","transaction","context","updateChildren","prevChildren","nextChildren","hasOwnProperty","prevChild","prevElement","_currentElement","nextElement","receiveComponent","unmountComponent","nextChildInstance","unmountChildren","renderedChildren","renderedChild","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright 2014-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactChildReconciler\r\n * @typechecks static-only\r\n */\r\n\r\n'use strict';\r\n\r\nvar ReactReconciler = require('./ReactReconciler');\r\n\r\nvar instantiateReactComponent = require('./instantiateReactComponent');\r\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\r\nvar traverseAllChildren = require('./traverseAllChildren');\r\nvar warning = require('fbjs/lib/warning');\r\n\r\nfunction instantiateChild(childInstances, child, name) {\r\n  // We found a component instance.\r\n  var keyUnique = childInstances[name] === undefined;\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;\r\n  }\r\n  if (child != null && keyUnique) {\r\n    childInstances[name] = instantiateReactComponent(child, null);\r\n  }\r\n}\r\n\r\n/**\r\n * ReactChildReconciler provides helpers for initializing or updating a set of\r\n * children. Its output is suitable for passing it onto ReactMultiChild which\r\n * does diffed reordering and insertion.\r\n */\r\nvar ReactChildReconciler = {\r\n  /**\r\n   * Generates a \"mount image\" for each of the supplied children. In the case\r\n   * of `ReactDOMComponent`, a mount image is a string of markup.\r\n   *\r\n   * @param {?object} nestedChildNodes Nested child maps.\r\n   * @return {?object} A set of child instances.\r\n   * @internal\r\n   */\r\n  instantiateChildren: function (nestedChildNodes, transaction, context) {\r\n    if (nestedChildNodes == null) {\r\n      return null;\r\n    }\r\n    var childInstances = {};\r\n    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);\r\n    return childInstances;\r\n  },\r\n\r\n  /**\r\n   * Updates the rendered children and returns a new set of children.\r\n   *\r\n   * @param {?object} prevChildren Previously initialized set of children.\r\n   * @param {?object} nextChildren Flat child element maps.\r\n   * @param {ReactReconcileTransaction} transaction\r\n   * @param {object} context\r\n   * @return {?object} A new set of child instances.\r\n   * @internal\r\n   */\r\n  updateChildren: function (prevChildren, nextChildren, transaction, context) {\r\n    // We currently don't have a way to track moves here but if we use iterators\r\n    // instead of for..in we can zip the iterators and check if an item has\r\n    // moved.\r\n    // TODO: If nothing has changed, return the prevChildren object so that we\r\n    // can quickly bailout if nothing has changed.\r\n    if (!nextChildren && !prevChildren) {\r\n      return null;\r\n    }\r\n    var name;\r\n    for (name in nextChildren) {\r\n      if (!nextChildren.hasOwnProperty(name)) {\r\n        continue;\r\n      }\r\n      var prevChild = prevChildren && prevChildren[name];\r\n      var prevElement = prevChild && prevChild._currentElement;\r\n      var nextElement = nextChildren[name];\r\n      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {\r\n        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);\r\n        nextChildren[name] = prevChild;\r\n      } else {\r\n        if (prevChild) {\r\n          ReactReconciler.unmountComponent(prevChild, name);\r\n        }\r\n        // The child must be instantiated before it's mounted.\r\n        var nextChildInstance = instantiateReactComponent(nextElement, null);\r\n        nextChildren[name] = nextChildInstance;\r\n      }\r\n    }\r\n    // Unmount children that are no longer present.\r\n    for (name in prevChildren) {\r\n      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\r\n        ReactReconciler.unmountComponent(prevChildren[name]);\r\n      }\r\n    }\r\n    return nextChildren;\r\n  },\r\n\r\n  /**\r\n   * Unmounts all rendered children. This should be used to clean up children\r\n   * when this component is unmounted.\r\n   *\r\n   * @param {?object} renderedChildren Previously initialized set of children.\r\n   * @internal\r\n   */\r\n  unmountChildren: function (renderedChildren) {\r\n    for (var name in renderedChildren) {\r\n      if (renderedChildren.hasOwnProperty(name)) {\r\n        var renderedChild = renderedChildren[name];\r\n        ReactReconciler.unmountComponent(renderedChild);\r\n      }\r\n    }\r\n  }\r\n\r\n};\r\n\r\nmodule.exports = ReactChildReconciler;"]},"metadata":{},"sourceType":"script"}