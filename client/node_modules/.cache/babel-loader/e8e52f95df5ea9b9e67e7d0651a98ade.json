{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/sizeview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n/**\n * A view displaying the proposed new element size during the resizing.\n *\n * @protected\n * @extends {module:ui/view~View}\n */\n\nexport default class SizeView extends View {\n  constructor() {\n    super();\n    /**\n     * The visibility of the view defined based on the existence of the host proposed dimensions.\n     *\n     * @private\n     * @observable\n     * @readonly\n     * @member {Boolean} #_isVisible\n     */\n\n    /**\n     * The text that will be displayed in the `SizeView` child.\n     * It can be formatted as the pixel values (e.g. 10x20) or the percentage value (e.g. 10%).\n     *\n     * @private\n     * @observable\n     * @readonly\n     * @member {Boolean} #_label\n     */\n\n    /**\n     * The position of the view defined based on the host size and active handle position.\n     *\n     * @private\n     * @observable\n     * @readonly\n     * @member {String} #_viewPosition\n     */\n\n    const bind = this.bindTemplate;\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-size-view', bind.to('_viewPosition', value => value ? `ck-orientation-${value}` : '')],\n        style: {\n          display: bind.if('_isVisible', 'none', visible => !visible)\n        }\n      },\n      children: [{\n        text: bind.to('_label')\n      }]\n    });\n  }\n  /**\n   * A method used for binding the `SizeView` instance properties to the `ResizeState` instance observable properties.\n   *\n   * @protected\n   * @param {module:widget/widgetresize~ResizerOptions} options\n   * An object defining the resizer options, used for setting the proper size label.\n   * @param {module:widget/widgetresize/resizerstate~ResizeState} resizeState\n   * The `ResizeState` class instance, used for keeping the `SizeView` state up to date.\n   */\n\n\n  _bindToState(options, resizeState) {\n    this.bind('_isVisible').to(resizeState, 'proposedWidth', resizeState, 'proposedHeight', (width, height) => width !== null && height !== null);\n    this.bind('_label').to(resizeState, 'proposedHandleHostWidth', resizeState, 'proposedHandleHostHeight', resizeState, 'proposedWidthPercents', (width, height, widthPercents) => {\n      if (options.unit === 'px') {\n        return `${width}×${height}`;\n      } else {\n        return `${widthPercents}%`;\n      }\n    });\n    this.bind('_viewPosition').to(resizeState, 'activeHandlePosition', resizeState, 'proposedHandleHostWidth', resizeState, 'proposedHandleHostHeight', // If the widget is too small to contain the size label, display the label above.\n    (position, width, height) => width < 50 || height < 50 ? 'above-center' : position);\n  }\n  /**\n   * A method used for cleaning up. It removes the bindings and hides the view.\n   *\n   * @protected\n   */\n\n\n  _dismiss() {\n    this.unbind();\n    this._isVisible = false;\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-widget/src/widgetresize/sizeview.js"],"names":["View","SizeView","constructor","bind","bindTemplate","setTemplate","tag","attributes","class","to","value","style","display","if","visible","children","text","_bindToState","options","resizeState","width","height","widthPercents","unit","position","_dismiss","unbind","_isVisible"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,iCAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,QAAN,SAAuBD,IAAvB,CAA4B;AAC1CE,EAAAA,WAAW,GAAG;AACb;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,UAAMC,IAAI,GAAG,KAAKC,YAAlB;AAEA,SAAKC,WAAL,CAAkB;AACjBC,MAAAA,GAAG,EAAE,KADY;AAEjBC,MAAAA,UAAU,EAAE;AACXC,QAAAA,KAAK,EAAE,CACN,IADM,EAEN,cAFM,EAGNL,IAAI,CAACM,EAAL,CAAS,eAAT,EAA0BC,KAAK,IAAIA,KAAK,GAAI,kBAAkBA,KAAO,EAA7B,GAAiC,EAAzE,CAHM,CADI;AAMXC,QAAAA,KAAK,EAAE;AACNC,UAAAA,OAAO,EAAET,IAAI,CAACU,EAAL,CAAS,YAAT,EAAuB,MAAvB,EAA+BC,OAAO,IAAI,CAACA,OAA3C;AADH;AANI,OAFK;AAYjBC,MAAAA,QAAQ,EAAE,CAAE;AACXC,QAAAA,IAAI,EAAEb,IAAI,CAACM,EAAL,CAAS,QAAT;AADK,OAAF;AAZO,KAAlB;AAgBA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCQ,EAAAA,YAAY,CAAEC,OAAF,EAAWC,WAAX,EAAyB;AACpC,SAAKhB,IAAL,CAAW,YAAX,EAA0BM,EAA1B,CAA8BU,WAA9B,EAA2C,eAA3C,EAA4DA,WAA5D,EAAyE,gBAAzE,EAA2F,CAAEC,KAAF,EAASC,MAAT,KAC1FD,KAAK,KAAK,IAAV,IAAkBC,MAAM,KAAK,IAD9B;AAGA,SAAKlB,IAAL,CAAW,QAAX,EAAsBM,EAAtB,CACCU,WADD,EACc,yBADd,EAECA,WAFD,EAEc,0BAFd,EAGCA,WAHD,EAGc,uBAHd,EAIC,CAAEC,KAAF,EAASC,MAAT,EAAiBC,aAAjB,KAAoC;AACnC,UAAKJ,OAAO,CAACK,IAAR,KAAiB,IAAtB,EAA6B;AAC5B,eAAQ,GAAGH,KAAO,IAAIC,MAAQ,EAA9B;AACA,OAFD,MAEO;AACN,eAAQ,GAAGC,aAAe,GAA1B;AACA;AACD,KAVF;AAaA,SAAKnB,IAAL,CAAW,eAAX,EAA6BM,EAA7B,CACCU,WADD,EACc,sBADd,EAECA,WAFD,EAEc,yBAFd,EAGCA,WAHD,EAGc,0BAHd,EAIC;AACA,KAAEK,QAAF,EAAYJ,KAAZ,EAAmBC,MAAnB,KAA+BD,KAAK,GAAG,EAAR,IAAcC,MAAM,GAAG,EAAvB,GAA4B,cAA5B,GAA6CG,QAL7E;AAOA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,QAAQ,GAAG;AACV,SAAKC,MAAL;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA;;AA/FyC","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/sizeview\n */\n\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n\n/**\n * A view displaying the proposed new element size during the resizing.\n *\n * @protected\n * @extends {module:ui/view~View}\n */\nexport default class SizeView extends View {\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * The visibility of the view defined based on the existence of the host proposed dimensions.\n\t\t *\n\t\t * @private\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #_isVisible\n\t\t */\n\n\t\t/**\n\t\t * The text that will be displayed in the `SizeView` child.\n\t\t * It can be formatted as the pixel values (e.g. 10x20) or the percentage value (e.g. 10%).\n\t\t *\n\t\t * @private\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #_label\n\t\t */\n\n\t\t/**\n\t\t * The position of the view defined based on the host size and active handle position.\n\t\t *\n\t\t * @private\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {String} #_viewPosition\n\t\t */\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-size-view',\n\t\t\t\t\tbind.to( '_viewPosition', value => value ? `ck-orientation-${ value }` : '' )\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\tdisplay: bind.if( '_isVisible', 'none', visible => !visible )\n\t\t\t\t}\n\t\t\t},\n\t\t\tchildren: [ {\n\t\t\t\ttext: bind.to( '_label' )\n\t\t\t} ]\n\t\t} );\n\t}\n\n\t/**\n\t * A method used for binding the `SizeView` instance properties to the `ResizeState` instance observable properties.\n\t *\n\t * @protected\n\t * @param {module:widget/widgetresize~ResizerOptions} options\n\t * An object defining the resizer options, used for setting the proper size label.\n\t * @param {module:widget/widgetresize/resizerstate~ResizeState} resizeState\n\t * The `ResizeState` class instance, used for keeping the `SizeView` state up to date.\n\t */\n\t_bindToState( options, resizeState ) {\n\t\tthis.bind( '_isVisible' ).to( resizeState, 'proposedWidth', resizeState, 'proposedHeight', ( width, height ) =>\n\t\t\twidth !== null && height !== null );\n\n\t\tthis.bind( '_label' ).to(\n\t\t\tresizeState, 'proposedHandleHostWidth',\n\t\t\tresizeState, 'proposedHandleHostHeight',\n\t\t\tresizeState, 'proposedWidthPercents',\n\t\t\t( width, height, widthPercents ) => {\n\t\t\t\tif ( options.unit === 'px' ) {\n\t\t\t\t\treturn `${ width }×${ height }`;\n\t\t\t\t} else {\n\t\t\t\t\treturn `${ widthPercents }%`;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\tthis.bind( '_viewPosition' ).to(\n\t\t\tresizeState, 'activeHandlePosition',\n\t\t\tresizeState, 'proposedHandleHostWidth',\n\t\t\tresizeState, 'proposedHandleHostHeight',\n\t\t\t// If the widget is too small to contain the size label, display the label above.\n\t\t\t( position, width, height ) => width < 50 || height < 50 ? 'above-center' : position\n\t\t);\n\t}\n\n\t/**\n\t * A method used for cleaning up. It removes the bindings and hides the view.\n\t *\n\t * @protected\n\t */\n\t_dismiss() {\n\t\tthis.unbind();\n\t\tthis._isVisible = false;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}