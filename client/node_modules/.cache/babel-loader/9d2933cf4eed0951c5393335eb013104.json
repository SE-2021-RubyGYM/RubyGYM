{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/text\n */\nimport Node from './node';\n/**\n * Tree view text node.\n *\n * The constructor of this class should not be used directly. To create a new text node instance\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\n\nexport default class Text extends Node {\n  /**\n   * Creates a tree view text node.\n   *\n   * @protected\n   * @param {module:engine/view/document~Document} document The document instance to which this text node belongs.\n   * @param {String} data The text's data.\n   */\n  constructor(document, data) {\n    super(document);\n    /**\n     * The text content.\n     *\n     * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n     *\n     * @protected\n     * @member {String} module:engine/view/text~Text#_textData\n     */\n\n    this._textData = data;\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   *\t\ttext.is( '$text' ); // -> true\n   *\t\ttext.is( 'node' ); // -> true\n   *\t\ttext.is( 'view:$text' ); // -> true\n   *\t\ttext.is( 'view:node' ); // -> true\n   *\n   *\t\ttext.is( 'model:$text' ); // -> false\n   *\t\ttext.is( 'element' ); // -> false\n   *\t\ttext.is( 'range' ); // -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * **Note:** Until version 20.0.0 this method wasn't accepting `'$text'` type. The legacy `'text'` type is still\n   * accepted for backward compatibility.\n   *\n   * @param {String} type Type to check.\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type === '$text' || type === 'view:$text' || // This are legacy values kept for backward compatibility.\n    type === 'text' || type === 'view:text' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n    type === 'node' || type === 'view:node';\n  }\n  /**\n   * The text content.\n   *\n   * @readonly\n   * @type {String}\n   */\n\n\n  get data() {\n    return this._textData;\n  }\n  /**\n   * The `_data` property is controlled by a getter and a setter.\n   *\n   * The getter is required when using the addition assignment operator on protected property:\n   *\n   *\t\tconst foo = downcastWriter.createText( 'foo' );\n   *\t\tconst bar = downcastWriter.createText( 'bar' );\n   *\n   *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n   *\t\tconsole.log( foo.data ); // prints: 'foobar'\n   *\n   * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n   *\n   * The setter sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n   *\n   * @protected\n   * @type {String}\n   */\n\n\n  get _data() {\n    return this.data;\n  }\n\n  set _data(data) {\n    this._fireChange('text', this);\n\n    this._textData = data;\n  }\n  /**\n   * Checks if this text node is similar to other text node.\n   * Both nodes should have the same data to be considered as similar.\n   *\n   * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n   * @returns {Boolean}\n   */\n\n\n  isSimilar(otherNode) {\n    if (!(otherNode instanceof Text)) {\n      return false;\n    }\n\n    return this === otherNode || this.data === otherNode.data;\n  }\n  /**\n   * Clones this node.\n   *\n   * @protected\n   * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n   */\n\n\n  _clone() {\n    return new Text(this.document, this.data);\n  } // @if CK_DEBUG_ENGINE // toString() {\n  // @if CK_DEBUG_ENGINE // \treturn `#${ this.data }`;\n  // @if CK_DEBUG_ENGINE // }\n  // @if CK_DEBUG_ENGINE // log() {\n  // @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewText: ' + this );\n  // @if CK_DEBUG_ENGINE // }\n  // @if CK_DEBUG_ENGINE // logExtended() {\n  // @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewText: ' + this );\n  // @if CK_DEBUG_ENGINE // }\n\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"],"names":["Node","Text","constructor","document","data","_textData","is","type","_data","_fireChange","isSimilar","otherNode","_clone"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,QAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,IAAN,SAAmBD,IAAnB,CAAwB;AACtC;AACD;AACA;AACA;AACA;AACA;AACA;AACCE,EAAAA,WAAW,CAAEC,QAAF,EAAYC,IAAZ,EAAmB;AAC7B,UAAOD,QAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKE,SAAL,GAAiBD,IAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCE,EAAAA,EAAE,CAAEC,IAAF,EAAS;AACV,WAAOA,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,YAA7B,IACN;AACAA,IAAAA,IAAI,KAAK,MAFH,IAEaA,IAAI,KAAK,WAFtB,IAGN;AACAA,IAAAA,IAAI,KAAK,MAJH,IAIaA,IAAI,KAAK,WAJ7B;AAKA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACS,MAAJH,IAAI,GAAG;AACV,WAAO,KAAKC,SAAZ;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACU,MAALG,KAAK,GAAG;AACX,WAAO,KAAKJ,IAAZ;AACA;;AAEQ,MAALI,KAAK,CAAEJ,IAAF,EAAS;AACjB,SAAKK,WAAL,CAAkB,MAAlB,EAA0B,IAA1B;;AAEA,SAAKJ,SAAL,GAAiBD,IAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCM,EAAAA,SAAS,CAAEC,SAAF,EAAc;AACtB,QAAK,EAAGA,SAAS,YAAYV,IAAxB,CAAL,EAAsC;AACrC,aAAO,KAAP;AACA;;AAED,WAAO,SAASU,SAAT,IAAsB,KAAKP,IAAL,KAAcO,SAAS,CAACP,IAArD;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCQ,EAAAA,MAAM,GAAG;AACR,WAAO,IAAIX,IAAJ,CAAU,KAAKE,QAAf,EAAyB,KAAKC,IAA9B,CAAP;AACA,GA/GqC,CAiHtC;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AA3HsC","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/text\n */\n\nimport Node from './node';\n\n/**\n * Tree view text node.\n *\n * The constructor of this class should not be used directly. To create a new text node instance\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a tree view text node.\n\t *\n\t * @protected\n\t * @param {module:engine/view/document~Document} document The document instance to which this text node belongs.\n\t * @param {String} data The text's data.\n\t */\n\tconstructor( document, data ) {\n\t\tsuper( document );\n\n\t\t/**\n\t\t * The text content.\n\t\t *\n\t\t * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t\t *\n\t\t * @protected\n\t\t * @member {String} module:engine/view/text~Text#_textData\n\t\t */\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\ttext.is( '$text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'view:$text' ); // -> true\n\t *\t\ttext.is( 'view:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'model:$text' ); // -> false\n\t *\t\ttext.is( 'element' ); // -> false\n\t *\t\ttext.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * **Note:** Until version 20.0.0 this method wasn't accepting `'$text'` type. The legacy `'text'` type is still\n\t * accepted for backward compatibility.\n\t *\n\t * @param {String} type Type to check.\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === '$text' || type === 'view:$text' ||\n\t\t\t// This are legacy values kept for backward compatibility.\n\t\t\ttype === 'text' || type === 'view:text' ||\n\t\t\t// From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n\t\t\ttype === 'node' || type === 'view:node';\n\t}\n\n\t/**\n\t * The text content.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._textData;\n\t}\n\n\t/**\n\t * The `_data` property is controlled by a getter and a setter.\n\t *\n\t * The getter is required when using the addition assignment operator on protected property:\n\t *\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst bar = downcastWriter.createText( 'bar' );\n\t *\n\t *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n\t *\t\tconsole.log( foo.data ); // prints: 'foobar'\n\t *\n\t * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n\t *\n\t * The setter sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t *\n\t * @protected\n\t * @type {String}\n\t */\n\tget _data() {\n\t\treturn this.data;\n\t}\n\n\tset _data( data ) {\n\t\tthis._fireChange( 'text', this );\n\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks if this text node is similar to other text node.\n\t * Both nodes should have the same data to be considered as similar.\n\t *\n\t * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherNode ) {\n\t\tif ( !( otherNode instanceof Text ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this === otherNode || this.data === otherNode.data;\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n\t */\n\t_clone() {\n\t\treturn new Text( this.document, this.data );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `#${ this.data }`;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // log() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewText: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logExtended() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewText: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]},"metadata":{},"sourceType":"module"}