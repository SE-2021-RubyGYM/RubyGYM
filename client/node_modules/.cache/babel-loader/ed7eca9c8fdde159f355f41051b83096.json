{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/createelement\n */\nimport isIterable from '../isiterable';\nimport { isString } from 'lodash-es';\n/**\n * Creates element with attributes and children.\n *\n *\t\tcreateElement( document, 'p' ); // <p>\n *\t\tcreateElement( document, 'p', { class: 'foo' } ); // <p class=\"foo\">\n *\t\tcreateElement( document, 'p', null, 'foo' ); // <p>foo</p>\n *\t\tcreateElement( document, 'p', null, [ 'foo', createElement( document, 'img' ) ] ); // <p>foo<img></p>\n *\n * @param {Document} doc Document used to create element.\n * @param {String} name Name of the element.\n * @param {Object} [attributes] Object keys will become attributes keys and object values will became attributes values.\n * @param {Node|String|Array.<Node|String>} [children] Child or array of children. Strings will be automatically turned\n * into Text nodes.\n * @returns {Element} Created element.\n */\n\nexport default function createElement(doc, name) {\n  let attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  const namespace = attributes && attributes.xmlns;\n  const element = namespace ? doc.createElementNS(namespace, name) : doc.createElement(name);\n\n  for (const key in attributes) {\n    element.setAttribute(key, attributes[key]);\n  }\n\n  if (isString(children) || !isIterable(children)) {\n    children = [children];\n  }\n\n  for (let child of children) {\n    if (isString(child)) {\n      child = doc.createTextNode(child);\n    }\n\n    element.appendChild(child);\n  }\n\n  return element;\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-utils/src/dom/createelement.js"],"names":["isIterable","isString","createElement","doc","name","attributes","children","namespace","xmlns","element","createElementNS","key","setAttribute","child","createTextNode","appendChild"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,UAAP,MAAuB,eAAvB;AACA,SAASC,QAAT,QAAyB,WAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,aAAT,CAAwBC,GAAxB,EAA6BC,IAA7B,EAAoE;AAAA,MAAjCC,UAAiC,uEAApB,EAAoB;AAAA,MAAhBC,QAAgB,uEAAL,EAAK;AAClF,QAAMC,SAAS,GAAGF,UAAU,IAAIA,UAAU,CAACG,KAA3C;AACA,QAAMC,OAAO,GAAGF,SAAS,GAAGJ,GAAG,CAACO,eAAJ,CAAqBH,SAArB,EAAgCH,IAAhC,CAAH,GAA4CD,GAAG,CAACD,aAAJ,CAAmBE,IAAnB,CAArE;;AAEA,OAAM,MAAMO,GAAZ,IAAmBN,UAAnB,EAAgC;AAC/BI,IAAAA,OAAO,CAACG,YAAR,CAAsBD,GAAtB,EAA2BN,UAAU,CAAEM,GAAF,CAArC;AACA;;AAED,MAAKV,QAAQ,CAAEK,QAAF,CAAR,IAAwB,CAACN,UAAU,CAAEM,QAAF,CAAxC,EAAuD;AACtDA,IAAAA,QAAQ,GAAG,CAAEA,QAAF,CAAX;AACA;;AAED,OAAM,IAAIO,KAAV,IAAmBP,QAAnB,EAA8B;AAC7B,QAAKL,QAAQ,CAAEY,KAAF,CAAb,EAAyB;AACxBA,MAAAA,KAAK,GAAGV,GAAG,CAACW,cAAJ,CAAoBD,KAApB,CAAR;AACA;;AAEDJ,IAAAA,OAAO,CAACM,WAAR,CAAqBF,KAArB;AACA;;AAED,SAAOJ,OAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/createelement\n */\n\nimport isIterable from '../isiterable';\nimport { isString } from 'lodash-es';\n\n/**\n * Creates element with attributes and children.\n *\n *\t\tcreateElement( document, 'p' ); // <p>\n *\t\tcreateElement( document, 'p', { class: 'foo' } ); // <p class=\"foo\">\n *\t\tcreateElement( document, 'p', null, 'foo' ); // <p>foo</p>\n *\t\tcreateElement( document, 'p', null, [ 'foo', createElement( document, 'img' ) ] ); // <p>foo<img></p>\n *\n * @param {Document} doc Document used to create element.\n * @param {String} name Name of the element.\n * @param {Object} [attributes] Object keys will become attributes keys and object values will became attributes values.\n * @param {Node|String|Array.<Node|String>} [children] Child or array of children. Strings will be automatically turned\n * into Text nodes.\n * @returns {Element} Created element.\n */\nexport default function createElement( doc, name, attributes = {}, children = [] ) {\n\tconst namespace = attributes && attributes.xmlns;\n\tconst element = namespace ? doc.createElementNS( namespace, name ) : doc.createElement( name );\n\n\tfor ( const key in attributes ) {\n\t\telement.setAttribute( key, attributes[ key ] );\n\t}\n\n\tif ( isString( children ) || !isIterable( children ) ) {\n\t\tchildren = [ children ];\n\t}\n\n\tfor ( let child of children ) {\n\t\tif ( isString( child ) ) {\n\t\t\tchild = doc.createTextNode( child );\n\t\t}\n\n\t\telement.appendChild( child );\n\t}\n\n\treturn element;\n}\n"]},"metadata":{},"sourceType":"module"}