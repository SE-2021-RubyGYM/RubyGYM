{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/markercollection\n */\nimport LiveRange from './liverange';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * The collection of all {@link module:engine/model/markercollection~Marker markers} attached to the document.\n * It lets you {@link module:engine/model/markercollection~MarkerCollection#get get} markers or track them using\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} event.\n *\n * To create, change or remove makers use {@link module:engine/model/writer~Writer model writers'} methods:\n * {@link module:engine/model/writer~Writer#addMarker} or {@link module:engine/model/writer~Writer#removeMarker}. Since\n * the writer is the only proper way to change the data model it is not possible to change markers directly using this\n * collection. All markers created by the writer will be automatically added to this collection.\n *\n * By default there is one marker collection available as {@link module:engine/model/model~Model#markers model property}.\n *\n * @see module:engine/model/markercollection~Marker\n */\n\nexport default class MarkerCollection {\n  /**\n   * Creates a markers collection.\n   */\n  constructor() {\n    /**\n     * Stores {@link ~Marker markers} added to the collection.\n     *\n     * @private\n     * @member {Map} #_markers\n     */\n    this._markers = new Map();\n  }\n  /**\n   * Iterable interface.\n   *\n   * Iterates over all {@link ~Marker markers} added to the collection.\n   *\n   * @returns {Iterable}\n   */\n\n\n  [Symbol.iterator]() {\n    return this._markers.values();\n  }\n  /**\n   * Checks if given {@link ~Marker marker} or marker name is in the collection.\n   *\n   * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of marker or marker instance to check.\n   * @returns {Boolean} `true` if marker is in the collection, `false` otherwise.\n   */\n\n\n  has(markerOrName) {\n    const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n    return this._markers.has(markerName);\n  }\n  /**\n   * Returns {@link ~Marker marker} with given `markerName`.\n   *\n   * @param {String} markerName Name of marker to get.\n   * @returns {module:engine/model/markercollection~Marker|null} Marker with given name or `null` if such marker was\n   * not added to the collection.\n   */\n\n\n  get(markerName) {\n    return this._markers.get(markerName) || null;\n  }\n  /**\n   * Creates and adds a {@link ~Marker marker} to the `MarkerCollection` with given name on given\n   * {@link module:engine/model/range~Range range}.\n   *\n   * If `MarkerCollection` already had a marker with given name (or {@link ~Marker marker} was passed), the marker in\n   * collection is updated and {@link module:engine/model/markercollection~MarkerCollection#event:update} event is fired\n   * but only if there was a change (marker range or {@link module:engine/model/markercollection~Marker#managedUsingOperations}\n   * flag has changed.\n   *\n   * @protected\n   * @fires module:engine/model/markercollection~MarkerCollection#event:update\n   * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of marker to set or marker instance to update.\n   * @param {module:engine/model/range~Range} range Marker range.\n   * @param {Boolean} [managedUsingOperations=false] Specifies whether the marker is managed using operations.\n   * @param {Boolean} [affectsData=false] Specifies whether the marker affects the data produced by the data pipeline\n   * (is persisted in the editor's data).\n   * @returns {module:engine/model/markercollection~Marker} `Marker` instance which was added or updated.\n   */\n\n\n  _set(markerOrName, range) {\n    let managedUsingOperations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let affectsData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\n    if (markerName.includes(',')) {\n      /**\n       * Marker name cannot contain the \",\" character.\n       *\n       * @error markercollection-incorrect-marker-name\n       */\n      throw new CKEditorError('markercollection-incorrect-marker-name', this);\n    }\n\n    const oldMarker = this._markers.get(markerName);\n\n    if (oldMarker) {\n      const oldRange = oldMarker.getRange();\n      let hasChanged = false;\n\n      if (!oldRange.isEqual(range)) {\n        oldMarker._attachLiveRange(LiveRange.fromRange(range));\n\n        hasChanged = true;\n      }\n\n      if (managedUsingOperations != oldMarker.managedUsingOperations) {\n        oldMarker._managedUsingOperations = managedUsingOperations;\n        hasChanged = true;\n      }\n\n      if (typeof affectsData === 'boolean' && affectsData != oldMarker.affectsData) {\n        oldMarker._affectsData = affectsData;\n        hasChanged = true;\n      }\n\n      if (hasChanged) {\n        this.fire('update:' + markerName, oldMarker, oldRange, range);\n      }\n\n      return oldMarker;\n    }\n\n    const liveRange = LiveRange.fromRange(range);\n    const marker = new Marker(markerName, liveRange, managedUsingOperations, affectsData);\n\n    this._markers.set(markerName, marker);\n\n    this.fire('update:' + markerName, marker, null, range);\n    return marker;\n  }\n  /**\n   * Removes given {@link ~Marker marker} or a marker with given name from the `MarkerCollection`.\n   *\n   * @protected\n   * @fires module:engine/model/markercollection~MarkerCollection#event:update\n   * @param {String} markerOrName Marker or name of a marker to remove.\n   * @returns {Boolean} `true` if marker was found and removed, `false` otherwise.\n   */\n\n\n  _remove(markerOrName) {\n    const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\n    const oldMarker = this._markers.get(markerName);\n\n    if (oldMarker) {\n      this._markers.delete(markerName);\n\n      this.fire('update:' + markerName, oldMarker, oldMarker.getRange(), null);\n\n      this._destroyMarker(oldMarker);\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Fires an {@link module:engine/model/markercollection~MarkerCollection#event:update} event for the given {@link ~Marker marker}\n   * but does not change the marker. Useful to force {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast\n   * conversion} for the marker.\n   *\n   * @protected\n   * @fires module:engine/model/markercollection~MarkerCollection#event:update\n   * @param {String} markerOrName Marker or name of a marker to refresh.\n   */\n\n\n  _refresh(markerOrName) {\n    const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\n    const marker = this._markers.get(markerName);\n\n    if (!marker) {\n      /**\n       * Marker with provided name does not exists.\n       *\n       * @error markercollection-refresh-marker-not-exists\n       */\n      throw new CKEditorError('markercollection-refresh-marker-not-exists', this);\n    }\n\n    const range = marker.getRange();\n    this.fire('update:' + markerName, marker, range, range, marker.managedUsingOperations, marker.affectsData);\n  }\n  /**\n   * Returns iterator that iterates over all markers, which ranges contain given {@link module:engine/model/position~Position position}.\n   *\n   * @param {module:engine/model/position~Position} position\n   * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n   */\n\n\n  *getMarkersAtPosition(position) {\n    for (const marker of this) {\n      if (marker.getRange().containsPosition(position)) {\n        yield marker;\n      }\n    }\n  }\n  /**\n   * Returns iterator that iterates over all markers, which intersects with given {@link module:engine/model/range~Range range}.\n   *\n   * @param {module:engine/model/range~Range} range\n   * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n   */\n\n\n  *getMarkersIntersectingRange(range) {\n    for (const marker of this) {\n      if (marker.getRange().getIntersection(range) !== null) {\n        yield marker;\n      }\n    }\n  }\n  /**\n   * Destroys marker collection and all markers inside it.\n   */\n\n\n  destroy() {\n    for (const marker of this._markers.values()) {\n      this._destroyMarker(marker);\n    }\n\n    this._markers = null;\n    this.stopListening();\n  }\n  /**\n   * Iterates over all markers that starts with given `prefix`.\n   *\n   *\t\tconst markerFooA = markersCollection.set( 'foo:a', rangeFooA );\n   *\t\tconst markerFooB = markersCollection.set( 'foo:b', rangeFooB );\n   *\t\tconst markerBarA = markersCollection.set( 'bar:a', rangeBarA );\n   *\t\tconst markerFooBarA = markersCollection.set( 'foobar:a', rangeFooBarA );\n   *\t\tArray.from( markersCollection.getMarkersGroup( 'foo' ) ); // [ markerFooA, markerFooB ]\n   *\t\tArray.from( markersCollection.getMarkersGroup( 'a' ) ); // []\n   *\n   * @param prefix\n   * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n   */\n\n\n  *getMarkersGroup(prefix) {\n    for (const marker of this._markers.values()) {\n      if (marker.name.startsWith(prefix + ':')) {\n        yield marker;\n      }\n    }\n  }\n  /**\n   * Destroys the marker.\n   *\n   * @private\n   * @param {module:engine/model/markercollection~Marker} marker Marker to destroy.\n   */\n\n\n  _destroyMarker(marker) {\n    marker.stopListening();\n\n    marker._detachLiveRange();\n  }\n  /**\n   * Fired whenever marker is added, updated or removed from `MarkerCollection`.\n   *\n   * @event update\n   * @param {module:engine/model/markercollection~Marker} marker Updated Marker.\n   * @param {module:engine/model/range~Range|null} oldRange Marker range before the update. When is not defined it\n   * means that marker is just added.\n   * @param {module:engine/model/range~Range|null} newRange Marker range after update. When is not defined it\n   * means that marker is just removed.\n   */\n\n\n}\nmix(MarkerCollection, EmitterMixin);\n/**\n * `Marker` is a continuous parts of model (like a range), is named and represent some kind of information about marked\n * part of model document. In contrary to {@link module:engine/model/node~Node nodes}, which are building blocks of\n * model document tree, markers are not stored directly in document tree but in\n * {@link module:engine/model/model~Model#markers model markers' collection}. Still, they are document data, by giving\n * additional meaning to the part of a model document between marker start and marker end.\n *\n * In this sense, markers are similar to adding and converting attributes on nodes. The difference is that attribute is\n * connected with a given node (e.g. a character is bold no matter if it gets moved or content around it changes).\n * Markers on the other hand are continuous ranges and are characterized by their start and end position. This means that\n * any character in the marker is marked by the marker. For example, if a character is moved outside of marker it stops being\n * \"special\" and the marker is shrunk. Similarly, when a character is moved into the marker from other place in document\n * model, it starts being \"special\" and the marker is enlarged.\n *\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\n * to the range which it is marking at the moment.\n *\n * Markers are built from a name and a range.\n *\n * Range of the marker is updated automatically when document changes, using\n * {@link module:engine/model/liverange~LiveRange live range} mechanism.\n *\n * Name is used to group and identify markers. Names have to be unique, but markers can be grouped by\n * using common prefixes, separated with `:`, for example: `user:john` or `search:3`. That's useful in term of creating\n * namespaces for custom elements (e.g. comments, highlights). You can use this prefixes in\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} listeners to listen on changes in a group of markers.\n * For instance: `model.markers.on( 'update:user', callback );` will be called whenever any `user:*` markers changes.\n *\n * There are two types of markers.\n *\n * 1. Markers managed directly, without using operations. They are added directly by {@link module:engine/model/writer~Writer}\n * to the {@link module:engine/model/markercollection~MarkerCollection} without any additional mechanism. They can be used\n * as bookmarks or visual markers. They are great for showing results of the find, or select link when the focus is in the input.\n *\n * 1. Markers managed using operations. These markers are also stored in {@link module:engine/model/markercollection~MarkerCollection}\n * but changes in these markers is managed the same way all other changes in the model structure - using operations.\n * Therefore, they are handled in the undo stack and synchronized between clients if the collaboration plugin is enabled.\n * This type of markers is useful for solutions like spell checking or comments.\n *\n * Both type of them should be added / updated by {@link module:engine/model/writer~Writer#addMarker}\n * and removed by {@link module:engine/model/writer~Writer#removeMarker} methods.\n *\n *\t\tmodel.change( ( writer ) => {\n * \t\t\tconst marker = writer.addMarker( name, { range, usingOperation: true } );\n *\n * \t\t\t// ...\n *\n * \t\t\twriter.removeMarker( marker );\n *\t\t} );\n *\n * See {@link module:engine/model/writer~Writer} to find more examples.\n *\n * Since markers need to track change in the document, for efficiency reasons, it is best to create and keep as little\n * markers as possible and remove them as soon as they are not needed anymore.\n *\n * Markers can be downcasted and upcasted.\n *\n * Markers downcast happens on {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} and\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} events.\n * Use {@link module:engine/conversion/downcasthelpers downcast converters} or attach a custom converter to mentioned events.\n * For {@link module:engine/controller/datacontroller~DataController data pipeline}, marker should be downcasted to an element.\n * Then, it can be upcasted back to a marker. Again, use {@link module:engine/conversion/upcasthelpers upcast converters} or\n * attach a custom converter to {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element}.\n *\n * `Marker` instances are created and destroyed only by {@link ~MarkerCollection MarkerCollection}.\n */\n\nclass Marker {\n  /**\n   * Creates a marker instance.\n   *\n   * @param {String} name Marker name.\n   * @param {module:engine/model/liverange~LiveRange} liveRange Range marked by the marker.\n   * @param {Boolean} managedUsingOperations Specifies whether the marker is managed using operations.\n   * @param {Boolean} affectsData Specifies whether the marker affects the data produced by the data pipeline\n   * (is persisted in the editor's data).\n   */\n  constructor(name, liveRange, managedUsingOperations, affectsData) {\n    /**\n     * Marker's name.\n     *\n     * @readonly\n     * @type {String}\n     */\n    this.name = name;\n    /**\n     * Range marked by the marker.\n     *\n     * @protected\n     * @member {module:engine/model/liverange~LiveRange}\n     */\n\n    this._liveRange = this._attachLiveRange(liveRange);\n    /**\n     * Flag indicates if the marker is managed using operations or not.\n     *\n     * @private\n     * @member {Boolean}\n     */\n\n    this._managedUsingOperations = managedUsingOperations;\n    /**\n     * Specifies whether the marker affects the data produced by the data pipeline\n     * (is persisted in the editor's data).\n     *\n     * @private\n     * @member {Boolean}\n     */\n\n    this._affectsData = affectsData;\n  }\n  /**\n   * A value indicating if the marker is managed using operations.\n   * See {@link ~Marker marker class description} to learn more about marker types.\n   * See {@link module:engine/model/writer~Writer#addMarker}.\n   *\n   * @returns {Boolean}\n   */\n\n\n  get managedUsingOperations() {\n    if (!this._liveRange) {\n      throw new CKEditorError('marker-destroyed', this);\n    }\n\n    return this._managedUsingOperations;\n  }\n  /**\n   * A value indicating if the marker changes the data.\n   *\n   * @returns {Boolean}\n   */\n\n\n  get affectsData() {\n    if (!this._liveRange) {\n      throw new CKEditorError('marker-destroyed', this);\n    }\n\n    return this._affectsData;\n  }\n  /**\n   * Returns current marker start position.\n   *\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  getStart() {\n    if (!this._liveRange) {\n      throw new CKEditorError('marker-destroyed', this);\n    }\n\n    return this._liveRange.start.clone();\n  }\n  /**\n   * Returns current marker end position.\n   *\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  getEnd() {\n    if (!this._liveRange) {\n      throw new CKEditorError('marker-destroyed', this);\n    }\n\n    return this._liveRange.end.clone();\n  }\n  /**\n   * Returns a range that represents the current state of the marker.\n   *\n   * Keep in mind that returned value is a {@link module:engine/model/range~Range Range}, not a\n   * {@link module:engine/model/liverange~LiveRange LiveRange}. This means that it is up-to-date and relevant only\n   * until next model document change. Do not store values returned by this method. Instead, store {@link ~Marker#name}\n   * and get `Marker` instance from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection} every\n   * time there is a need to read marker properties. This will guarantee that the marker has not been removed and\n   * that it's data is up-to-date.\n   *\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  getRange() {\n    if (!this._liveRange) {\n      throw new CKEditorError('marker-destroyed', this);\n    }\n\n    return this._liveRange.toRange();\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\tmarker.is( 'marker' ); // -> true\n   *\t\tmarker.is( 'model:marker' ); // -> true\n   *\n   *\t\tmarker.is( 'view:element' ); // -> false\n   *\t\tmarker.is( 'documentSelection' ); // -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type === 'marker' || type === 'model:marker';\n  }\n  /**\n   * Binds new live range to the marker and detach the old one if is attached.\n   *\n   * @protected\n   * @param {module:engine/model/liverange~LiveRange} liveRange Live range to attach\n   * @returns {module:engine/model/liverange~LiveRange} Attached live range.\n   */\n\n\n  _attachLiveRange(liveRange) {\n    if (this._liveRange) {\n      this._detachLiveRange();\n    } // Delegating does not work with namespaces. Alternatively, we could delegate all events (using `*`).\n\n\n    liveRange.delegate('change:range').to(this);\n    liveRange.delegate('change:content').to(this);\n    this._liveRange = liveRange;\n    return liveRange;\n  }\n  /**\n   * Unbinds and destroys currently attached live range.\n   *\n   * @protected\n   */\n\n\n  _detachLiveRange() {\n    this._liveRange.stopDelegating('change:range', this);\n\n    this._liveRange.stopDelegating('change:content', this);\n\n    this._liveRange.detach();\n\n    this._liveRange = null;\n  }\n  /**\n   * Fired whenever {@link ~Marker#_liveRange marker range} is changed due to changes on {@link module:engine/model/document~Document}.\n   * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:range LiveRange change:range event}.\n   *\n   * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n   * all event listeners listening to it should be removed. It is best to do it on\n   * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n   *\n   * @see module:engine/model/liverange~LiveRange#event:change:range\n   * @event change:range\n   * @param {module:engine/model/range~Range} oldRange\n   * @param {Object} data\n   */\n\n  /**\n   * Fired whenever change on {@link module:engine/model/document~Document} is done inside {@link ~Marker#_liveRange marker range}.\n   * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:content LiveRange change:content event}.\n   *\n   * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n   * all event listeners listening to it should be removed. It is best to do it on\n   * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n   *\n   * @see module:engine/model/liverange~LiveRange#event:change:content\n   * @event change:content\n   * @param {module:engine/model/range~Range} oldRange\n   * @param {Object} data\n   */\n\n\n}\n\nmix(Marker, EmitterMixin);\n/**\n * Cannot use a {@link module:engine/model/markercollection~MarkerCollection#destroy destroyed marker} instance.\n *\n * @error marker-destroyed\n */","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/model/markercollection.js"],"names":["LiveRange","EmitterMixin","CKEditorError","mix","MarkerCollection","constructor","_markers","Map","Symbol","iterator","values","has","markerOrName","markerName","Marker","name","get","_set","range","managedUsingOperations","affectsData","includes","oldMarker","oldRange","getRange","hasChanged","isEqual","_attachLiveRange","fromRange","_managedUsingOperations","_affectsData","fire","liveRange","marker","set","_remove","delete","_destroyMarker","_refresh","getMarkersAtPosition","position","containsPosition","getMarkersIntersectingRange","getIntersection","destroy","stopListening","getMarkersGroup","prefix","startsWith","_detachLiveRange","_liveRange","getStart","start","clone","getEnd","end","toRange","is","type","delegate","to","stopDelegating","detach"],"mappings":"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AN;AACA;AACD;AACD;AAED;AACD;AACA;;;AACCW,EAAAA,OAAO,GAAG;AACT,SAAM,MAAMX,MAAZ,IAAsB,KAAK3B,QAAL,CAAcI,MAAd,EAAtB,EAA+C;AAC9C,WAAK2B,cAAL,CAAqBJ,MAArB;AACA;;AAED,SAAK3B,QAAL,GAAgB,IAAhB;AAEA,SAAKuC,aAAL;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACkB,GAAfC,eAAe,CAAEC,MAAF,EAAW;AAC3B,SAAM,MAAMd,MAAZ,IAAsB,KAAK3B,QAAL,CAAcI,MAAd,EAAtB,EAA+C;AAC9C,UAAKuB,MAAM,CAAClB,IAAP,CAAYiC,UAAZ,CAAwBD,MAAM,GAAG,GAAjC,CAAL,EAA8C;AAC7C,cAAMd,MAAN;AACA;AACD;AACD;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCI,EAAAA,cAAc,CAAEJ,MAAF,EAAW;AACxBA,IAAAA,MAAM,CAACY,aAAP;;AACAZ,IAAAA,MAAM,CAACgB,gBAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAvPsC;AA0PtC9C,GAAG,CAAEC,gBAAF,EAAoBH,YAApB,CAAH;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMa,MAAN,CAAa;AACZ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCT,EAAAA,WAAW,CAAEU,IAAF,EAAQiB,SAAR,EAAmBb,sBAAnB,EAA2CC,WAA3C,EAAyD;AACnE;AACF;AAC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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/markercollection\n */\n\nimport LiveRange from './liverange';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The collection of all {@link module:engine/model/markercollection~Marker markers} attached to the document.\n * It lets you {@link module:engine/model/markercollection~MarkerCollection#get get} markers or track them using\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} event.\n *\n * To create, change or remove makers use {@link module:engine/model/writer~Writer model writers'} methods:\n * {@link module:engine/model/writer~Writer#addMarker} or {@link module:engine/model/writer~Writer#removeMarker}. Since\n * the writer is the only proper way to change the data model it is not possible to change markers directly using this\n * collection. All markers created by the writer will be automatically added to this collection.\n *\n * By default there is one marker collection available as {@link module:engine/model/model~Model#markers model property}.\n *\n * @see module:engine/model/markercollection~Marker\n */\nexport default class MarkerCollection {\n\t/**\n\t * Creates a markers collection.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Stores {@link ~Marker markers} added to the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} #_markers\n\t\t */\n\t\tthis._markers = new Map();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link ~Marker markers} added to the collection.\n\t *\n\t * @returns {Iterable}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._markers.values();\n\t}\n\n\t/**\n\t * Checks if given {@link ~Marker marker} or marker name is in the collection.\n\t *\n\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of marker or marker instance to check.\n\t * @returns {Boolean} `true` if marker is in the collection, `false` otherwise.\n\t */\n\thas( markerOrName ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\treturn this._markers.has( markerName );\n\t}\n\n\t/**\n\t * Returns {@link ~Marker marker} with given `markerName`.\n\t *\n\t * @param {String} markerName Name of marker to get.\n\t * @returns {module:engine/model/markercollection~Marker|null} Marker with given name or `null` if such marker was\n\t * not added to the collection.\n\t */\n\tget( markerName ) {\n\t\treturn this._markers.get( markerName ) || null;\n\t}\n\n\t/**\n\t * Creates and adds a {@link ~Marker marker} to the `MarkerCollection` with given name on given\n\t * {@link module:engine/model/range~Range range}.\n\t *\n\t * If `MarkerCollection` already had a marker with given name (or {@link ~Marker marker} was passed), the marker in\n\t * collection is updated and {@link module:engine/model/markercollection~MarkerCollection#event:update} event is fired\n\t * but only if there was a change (marker range or {@link module:engine/model/markercollection~Marker#managedUsingOperations}\n\t * flag has changed.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of marker to set or marker instance to update.\n\t * @param {module:engine/model/range~Range} range Marker range.\n\t * @param {Boolean} [managedUsingOperations=false] Specifies whether the marker is managed using operations.\n\t * @param {Boolean} [affectsData=false] Specifies whether the marker affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t * @returns {module:engine/model/markercollection~Marker} `Marker` instance which was added or updated.\n\t */\n\t_set( markerOrName, range, managedUsingOperations = false, affectsData = false ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\n\t\tif ( markerName.includes( ',' ) ) {\n\t\t\t/**\n\t\t\t * Marker name cannot contain the \",\" character.\n\t\t\t *\n\t\t\t * @error markercollection-incorrect-marker-name\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'markercollection-incorrect-marker-name', this );\n\t\t}\n\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tconst oldRange = oldMarker.getRange();\n\t\t\tlet hasChanged = false;\n\n\t\t\tif ( !oldRange.isEqual( range ) ) {\n\t\t\t\toldMarker._attachLiveRange( LiveRange.fromRange( range ) );\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( managedUsingOperations != oldMarker.managedUsingOperations ) {\n\t\t\t\toldMarker._managedUsingOperations = managedUsingOperations;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( typeof affectsData === 'boolean' && affectsData != oldMarker.affectsData ) {\n\t\t\t\toldMarker._affectsData = affectsData;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( hasChanged ) {\n\t\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldRange, range );\n\t\t\t}\n\n\t\t\treturn oldMarker;\n\t\t}\n\n\t\tconst liveRange = LiveRange.fromRange( range );\n\t\tconst marker = new Marker( markerName, liveRange, managedUsingOperations, affectsData );\n\n\t\tthis._markers.set( markerName, marker );\n\t\tthis.fire( 'update:' + markerName, marker, null, range );\n\n\t\treturn marker;\n\t}\n\n\t/**\n\t * Removes given {@link ~Marker marker} or a marker with given name from the `MarkerCollection`.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String} markerOrName Marker or name of a marker to remove.\n\t * @returns {Boolean} `true` if marker was found and removed, `false` otherwise.\n\t */\n\t_remove( markerOrName ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tthis._markers.delete( markerName );\n\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldMarker.getRange(), null );\n\n\t\t\tthis._destroyMarker( oldMarker );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Fires an {@link module:engine/model/markercollection~MarkerCollection#event:update} event for the given {@link ~Marker marker}\n\t * but does not change the marker. Useful to force {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast\n\t * conversion} for the marker.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String} markerOrName Marker or name of a marker to refresh.\n\t */\n\t_refresh( markerOrName ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst marker = this._markers.get( markerName );\n\n\t\tif ( !marker ) {\n\t\t\t/**\n\t\t\t * Marker with provided name does not exists.\n\t\t\t *\n\t\t\t * @error markercollection-refresh-marker-not-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'markercollection-refresh-marker-not-exists', this );\n\t\t}\n\n\t\tconst range = marker.getRange();\n\n\t\tthis.fire( 'update:' + markerName, marker, range, range, marker.managedUsingOperations, marker.affectsData );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over all markers, which ranges contain given {@link module:engine/model/position~Position position}.\n\t *\n\t * @param {module:engine/model/position~Position} position\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersAtPosition( position ) {\n\t\tfor ( const marker of this ) {\n\t\t\tif ( marker.getRange().containsPosition( position ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns iterator that iterates over all markers, which intersects with given {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {module:engine/model/range~Range} range\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersIntersectingRange( range ) {\n\t\tfor ( const marker of this ) {\n\t\t\tif ( marker.getRange().getIntersection( range ) !== null ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys marker collection and all markers inside it.\n\t */\n\tdestroy() {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tthis._destroyMarker( marker );\n\t\t}\n\n\t\tthis._markers = null;\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Iterates over all markers that starts with given `prefix`.\n\t *\n\t *\t\tconst markerFooA = markersCollection.set( 'foo:a', rangeFooA );\n\t *\t\tconst markerFooB = markersCollection.set( 'foo:b', rangeFooB );\n\t *\t\tconst markerBarA = markersCollection.set( 'bar:a', rangeBarA );\n\t *\t\tconst markerFooBarA = markersCollection.set( 'foobar:a', rangeFooBarA );\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'foo' ) ); // [ markerFooA, markerFooB ]\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'a' ) ); // []\n\t *\n\t * @param prefix\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersGroup( prefix ) {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tif ( marker.name.startsWith( prefix + ':' ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the marker.\n\t *\n\t * @private\n\t * @param {module:engine/model/markercollection~Marker} marker Marker to destroy.\n\t */\n\t_destroyMarker( marker ) {\n\t\tmarker.stopListening();\n\t\tmarker._detachLiveRange();\n\t}\n\n\t/**\n\t * Fired whenever marker is added, updated or removed from `MarkerCollection`.\n\t *\n\t * @event update\n\t * @param {module:engine/model/markercollection~Marker} marker Updated Marker.\n\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the update. When is not defined it\n\t * means that marker is just added.\n\t * @param {module:engine/model/range~Range|null} newRange Marker range after update. When is not defined it\n\t * means that marker is just removed.\n\t */\n}\n\nmix( MarkerCollection, EmitterMixin );\n\n/**\n * `Marker` is a continuous parts of model (like a range), is named and represent some kind of information about marked\n * part of model document. In contrary to {@link module:engine/model/node~Node nodes}, which are building blocks of\n * model document tree, markers are not stored directly in document tree but in\n * {@link module:engine/model/model~Model#markers model markers' collection}. Still, they are document data, by giving\n * additional meaning to the part of a model document between marker start and marker end.\n *\n * In this sense, markers are similar to adding and converting attributes on nodes. The difference is that attribute is\n * connected with a given node (e.g. a character is bold no matter if it gets moved or content around it changes).\n * Markers on the other hand are continuous ranges and are characterized by their start and end position. This means that\n * any character in the marker is marked by the marker. For example, if a character is moved outside of marker it stops being\n * \"special\" and the marker is shrunk. Similarly, when a character is moved into the marker from other place in document\n * model, it starts being \"special\" and the marker is enlarged.\n *\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\n * to the range which it is marking at the moment.\n *\n * Markers are built from a name and a range.\n *\n * Range of the marker is updated automatically when document changes, using\n * {@link module:engine/model/liverange~LiveRange live range} mechanism.\n *\n * Name is used to group and identify markers. Names have to be unique, but markers can be grouped by\n * using common prefixes, separated with `:`, for example: `user:john` or `search:3`. That's useful in term of creating\n * namespaces for custom elements (e.g. comments, highlights). You can use this prefixes in\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} listeners to listen on changes in a group of markers.\n * For instance: `model.markers.on( 'update:user', callback );` will be called whenever any `user:*` markers changes.\n *\n * There are two types of markers.\n *\n * 1. Markers managed directly, without using operations. They are added directly by {@link module:engine/model/writer~Writer}\n * to the {@link module:engine/model/markercollection~MarkerCollection} without any additional mechanism. They can be used\n * as bookmarks or visual markers. They are great for showing results of the find, or select link when the focus is in the input.\n *\n * 1. Markers managed using operations. These markers are also stored in {@link module:engine/model/markercollection~MarkerCollection}\n * but changes in these markers is managed the same way all other changes in the model structure - using operations.\n * Therefore, they are handled in the undo stack and synchronized between clients if the collaboration plugin is enabled.\n * This type of markers is useful for solutions like spell checking or comments.\n *\n * Both type of them should be added / updated by {@link module:engine/model/writer~Writer#addMarker}\n * and removed by {@link module:engine/model/writer~Writer#removeMarker} methods.\n *\n *\t\tmodel.change( ( writer ) => {\n * \t\t\tconst marker = writer.addMarker( name, { range, usingOperation: true } );\n *\n * \t\t\t// ...\n *\n * \t\t\twriter.removeMarker( marker );\n *\t\t} );\n *\n * See {@link module:engine/model/writer~Writer} to find more examples.\n *\n * Since markers need to track change in the document, for efficiency reasons, it is best to create and keep as little\n * markers as possible and remove them as soon as they are not needed anymore.\n *\n * Markers can be downcasted and upcasted.\n *\n * Markers downcast happens on {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} and\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} events.\n * Use {@link module:engine/conversion/downcasthelpers downcast converters} or attach a custom converter to mentioned events.\n * For {@link module:engine/controller/datacontroller~DataController data pipeline}, marker should be downcasted to an element.\n * Then, it can be upcasted back to a marker. Again, use {@link module:engine/conversion/upcasthelpers upcast converters} or\n * attach a custom converter to {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element}.\n *\n * `Marker` instances are created and destroyed only by {@link ~MarkerCollection MarkerCollection}.\n */\nclass Marker {\n\t/**\n\t * Creates a marker instance.\n\t *\n\t * @param {String} name Marker name.\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Range marked by the marker.\n\t * @param {Boolean} managedUsingOperations Specifies whether the marker is managed using operations.\n\t * @param {Boolean} affectsData Specifies whether the marker affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t */\n\tconstructor( name, liveRange, managedUsingOperations, affectsData ) {\n\t\t/**\n\t\t * Marker's name.\n\t\t *\n\t\t * @readonly\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Range marked by the marker.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/model/liverange~LiveRange}\n\t\t */\n\t\tthis._liveRange = this._attachLiveRange( liveRange );\n\n\t\t/**\n\t\t * Flag indicates if the marker is managed using operations or not.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._managedUsingOperations = managedUsingOperations;\n\n\t\t/**\n\t\t * Specifies whether the marker affects the data produced by the data pipeline\n\t\t * (is persisted in the editor's data).\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._affectsData = affectsData;\n\t}\n\n\t/**\n\t * A value indicating if the marker is managed using operations.\n\t * See {@link ~Marker marker class description} to learn more about marker types.\n\t * See {@link module:engine/model/writer~Writer#addMarker}.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget managedUsingOperations() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed', this );\n\t\t}\n\n\t\treturn this._managedUsingOperations;\n\t}\n\n\t/**\n\t * A value indicating if the marker changes the data.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget affectsData() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed', this );\n\t\t}\n\n\t\treturn this._affectsData;\n\t}\n\n\t/**\n\t * Returns current marker start position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetStart() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed', this );\n\t\t}\n\n\t\treturn this._liveRange.start.clone();\n\t}\n\n\t/**\n\t * Returns current marker end position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetEnd() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed', this );\n\t\t}\n\n\t\treturn this._liveRange.end.clone();\n\t}\n\n\t/**\n\t * Returns a range that represents the current state of the marker.\n\t *\n\t * Keep in mind that returned value is a {@link module:engine/model/range~Range Range}, not a\n\t * {@link module:engine/model/liverange~LiveRange LiveRange}. This means that it is up-to-date and relevant only\n\t * until next model document change. Do not store values returned by this method. Instead, store {@link ~Marker#name}\n\t * and get `Marker` instance from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection} every\n\t * time there is a need to read marker properties. This will guarantee that the marker has not been removed and\n\t * that it's data is up-to-date.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tgetRange() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed', this );\n\t\t}\n\n\t\treturn this._liveRange.toRange();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tmarker.is( 'marker' ); // -> true\n\t *\t\tmarker.is( 'model:marker' ); // -> true\n\t *\n\t *\t\tmarker.is( 'view:element' ); // -> false\n\t *\t\tmarker.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === 'marker' || type === 'model:marker';\n\t}\n\n\t/**\n\t * Binds new live range to the marker and detach the old one if is attached.\n\t *\n\t * @protected\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Live range to attach\n\t * @returns {module:engine/model/liverange~LiveRange} Attached live range.\n\t */\n\t_attachLiveRange( liveRange ) {\n\t\tif ( this._liveRange ) {\n\t\t\tthis._detachLiveRange();\n\t\t}\n\n\t\t// Delegating does not work with namespaces. Alternatively, we could delegate all events (using `*`).\n\t\tliveRange.delegate( 'change:range' ).to( this );\n\t\tliveRange.delegate( 'change:content' ).to( this );\n\n\t\tthis._liveRange = liveRange;\n\n\t\treturn liveRange;\n\t}\n\n\t/**\n\t * Unbinds and destroys currently attached live range.\n\t *\n\t * @protected\n\t */\n\t_detachLiveRange() {\n\t\tthis._liveRange.stopDelegating( 'change:range', this );\n\t\tthis._liveRange.stopDelegating( 'change:content', this );\n\t\tthis._liveRange.detach();\n\t\tthis._liveRange = null;\n\t}\n\n\t/**\n\t * Fired whenever {@link ~Marker#_liveRange marker range} is changed due to changes on {@link module:engine/model/document~Document}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:range LiveRange change:range event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:range\n\t * @event change:range\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n\n\t/**\n\t * Fired whenever change on {@link module:engine/model/document~Document} is done inside {@link ~Marker#_liveRange marker range}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:content LiveRange change:content event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:content\n\t * @event change:content\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n}\n\nmix( Marker, EmitterMixin );\n\n/**\n * Cannot use a {@link module:engine/model/markercollection~MarkerCollection#destroy destroyed marker} instance.\n *\n * @error marker-destroyed\n */\n"]},"metadata":{},"sourceType":"module"}