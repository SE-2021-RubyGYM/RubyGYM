{"ast":null,"code":"/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactDOMSelection\r\n */\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar getNodeForCharacterOffset = require('./getNodeForCharacterOffset');\n\nvar getTextContentAccessor = require('./getTextContentAccessor');\n/**\r\n * While `isCollapsed` is available on the Selection object and `collapsed`\r\n * is available on the Range object, IE11 sometimes gets them wrong.\r\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.\r\n */\n\n\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {\n  return anchorNode === focusNode && anchorOffset === focusOffset;\n}\n/**\r\n * Get the appropriate anchor and focus node/offset pairs for IE.\r\n *\r\n * The catch here is that IE's selection API doesn't provide information\r\n * about whether the selection is forward or backward, so we have to\r\n * behave as though it's always forward.\r\n *\r\n * IE text differs from modern selection in that it behaves as though\r\n * block elements end with a new line. This means character offsets will\r\n * differ between the two APIs.\r\n *\r\n * @param {DOMElement} node\r\n * @return {object}\r\n */\n\n\nfunction getIEOffsets(node) {\n  var selection = document.selection;\n  var selectedRange = selection.createRange();\n  var selectedLength = selectedRange.text.length; // Duplicate selection so we can move range without breaking user selection.\n\n  var fromStart = selectedRange.duplicate();\n  fromStart.moveToElementText(node);\n  fromStart.setEndPoint('EndToStart', selectedRange);\n  var startOffset = fromStart.text.length;\n  var endOffset = startOffset + selectedLength;\n  return {\n    start: startOffset,\n    end: endOffset\n  };\n}\n/**\r\n * @param {DOMElement} node\r\n * @return {?object}\r\n */\n\n\nfunction getModernOffsets(node) {\n  var selection = window.getSelection && window.getSelection();\n\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n\n  var anchorNode = selection.anchorNode;\n  var anchorOffset = selection.anchorOffset;\n  var focusNode = selection.focusNode;\n  var focusOffset = selection.focusOffset;\n  var currentRange = selection.getRangeAt(0); // In Firefox, range.startContainer and range.endContainer can be \"anonymous\n  // divs\", e.g. the up/down buttons on an <input type=\"number\">. Anonymous\n  // divs do not seem to expose properties, triggering a \"Permission denied\n  // error\" if any of its properties are accessed. The only seemingly possible\n  // way to avoid erroring is to access a property that typically works for\n  // non-anonymous divs and catch any error that may otherwise arise. See\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427\n\n  try {\n    /* eslint-disable no-unused-expressions */\n    currentRange.startContainer.nodeType;\n    currentRange.endContainer.nodeType;\n    /* eslint-enable no-unused-expressions */\n  } catch (e) {\n    return null;\n  } // If the node and offset values are the same, the selection is collapsed.\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets\n  // this value wrong.\n\n\n  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;\n  var tempRange = currentRange.cloneRange();\n  tempRange.selectNodeContents(node);\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);\n  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;\n  var end = start + rangeLength; // Detect whether the selection is backward.\n\n  var detectionRange = document.createRange();\n  detectionRange.setStart(anchorNode, anchorOffset);\n  detectionRange.setEnd(focusNode, focusOffset);\n  var isBackward = detectionRange.collapsed;\n  return {\n    start: isBackward ? end : start,\n    end: isBackward ? start : end\n  };\n}\n/**\r\n * @param {DOMElement|DOMTextNode} node\r\n * @param {object} offsets\r\n */\n\n\nfunction setIEOffsets(node, offsets) {\n  var range = document.selection.createRange().duplicate();\n  var start, end;\n\n  if (typeof offsets.end === 'undefined') {\n    start = offsets.start;\n    end = start;\n  } else if (offsets.start > offsets.end) {\n    start = offsets.end;\n    end = offsets.start;\n  } else {\n    start = offsets.start;\n    end = offsets.end;\n  }\n\n  range.moveToElementText(node);\n  range.moveStart('character', start);\n  range.setEndPoint('EndToStart', range);\n  range.moveEnd('character', end - start);\n  range.select();\n}\n/**\r\n * In modern non-IE browsers, we can support both forward and backward\r\n * selections.\r\n *\r\n * Note: IE10+ supports the Selection object, but it does not support\r\n * the `extend` method, which means that even in modern IE, it's not possible\r\n * to programatically create a backward selection. Thus, for all IE\r\n * versions, we use the old IE API to create our selections.\r\n *\r\n * @param {DOMElement|DOMTextNode} node\r\n * @param {object} offsets\r\n */\n\n\nfunction setModernOffsets(node, offsets) {\n  if (!window.getSelection) {\n    return;\n  }\n\n  var selection = window.getSelection();\n  var length = node[getTextContentAccessor()].length;\n  var start = Math.min(offsets.start, length);\n  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n\n  if (!selection.extend && start > end) {\n    var temp = end;\n    end = start;\n    start = temp;\n  }\n\n  var startMarker = getNodeForCharacterOffset(node, start);\n  var endMarker = getNodeForCharacterOffset(node, end);\n\n  if (startMarker && endMarker) {\n    var range = document.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\n\nvar useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);\nvar ReactDOMSelection = {\n  /**\r\n   * @param {DOMElement} node\r\n   */\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,\n\n  /**\r\n   * @param {DOMElement|DOMTextNode} node\r\n   * @param {object} offsets\r\n   */\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets\n};\nmodule.exports = ReactDOMSelection;","map":{"version":3,"sources":["C:/Users/nvtung/Các project thực hiện/RubyGYM-master_test_2/client/node_modules/jsx-to-string/node_modules/react/lib/ReactDOMSelection.js"],"names":["ExecutionEnvironment","require","getNodeForCharacterOffset","getTextContentAccessor","isCollapsed","anchorNode","anchorOffset","focusNode","focusOffset","getIEOffsets","node","selection","document","selectedRange","createRange","selectedLength","text","length","fromStart","duplicate","moveToElementText","setEndPoint","startOffset","endOffset","start","end","getModernOffsets","window","getSelection","rangeCount","currentRange","getRangeAt","startContainer","nodeType","endContainer","e","isSelectionCollapsed","rangeLength","toString","tempRange","cloneRange","selectNodeContents","setEnd","isTempRangeCollapsed","detectionRange","setStart","isBackward","collapsed","setIEOffsets","offsets","range","moveStart","moveEnd","select","setModernOffsets","Math","min","extend","temp","startMarker","endMarker","offset","removeAllRanges","addRange","useIEOffsets","canUseDOM","ReactDOMSelection","getOffsets","setOffsets","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactDOMSelection\r\n */\r\n\r\n'use strict';\r\n\r\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\r\n\r\nvar getNodeForCharacterOffset = require('./getNodeForCharacterOffset');\r\nvar getTextContentAccessor = require('./getTextContentAccessor');\r\n\r\n/**\r\n * While `isCollapsed` is available on the Selection object and `collapsed`\r\n * is available on the Range object, IE11 sometimes gets them wrong.\r\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.\r\n */\r\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {\r\n  return anchorNode === focusNode && anchorOffset === focusOffset;\r\n}\r\n\r\n/**\r\n * Get the appropriate anchor and focus node/offset pairs for IE.\r\n *\r\n * The catch here is that IE's selection API doesn't provide information\r\n * about whether the selection is forward or backward, so we have to\r\n * behave as though it's always forward.\r\n *\r\n * IE text differs from modern selection in that it behaves as though\r\n * block elements end with a new line. This means character offsets will\r\n * differ between the two APIs.\r\n *\r\n * @param {DOMElement} node\r\n * @return {object}\r\n */\r\nfunction getIEOffsets(node) {\r\n  var selection = document.selection;\r\n  var selectedRange = selection.createRange();\r\n  var selectedLength = selectedRange.text.length;\r\n\r\n  // Duplicate selection so we can move range without breaking user selection.\r\n  var fromStart = selectedRange.duplicate();\r\n  fromStart.moveToElementText(node);\r\n  fromStart.setEndPoint('EndToStart', selectedRange);\r\n\r\n  var startOffset = fromStart.text.length;\r\n  var endOffset = startOffset + selectedLength;\r\n\r\n  return {\r\n    start: startOffset,\r\n    end: endOffset\r\n  };\r\n}\r\n\r\n/**\r\n * @param {DOMElement} node\r\n * @return {?object}\r\n */\r\nfunction getModernOffsets(node) {\r\n  var selection = window.getSelection && window.getSelection();\r\n\r\n  if (!selection || selection.rangeCount === 0) {\r\n    return null;\r\n  }\r\n\r\n  var anchorNode = selection.anchorNode;\r\n  var anchorOffset = selection.anchorOffset;\r\n  var focusNode = selection.focusNode;\r\n  var focusOffset = selection.focusOffset;\r\n\r\n  var currentRange = selection.getRangeAt(0);\r\n\r\n  // In Firefox, range.startContainer and range.endContainer can be \"anonymous\r\n  // divs\", e.g. the up/down buttons on an <input type=\"number\">. Anonymous\r\n  // divs do not seem to expose properties, triggering a \"Permission denied\r\n  // error\" if any of its properties are accessed. The only seemingly possible\r\n  // way to avoid erroring is to access a property that typically works for\r\n  // non-anonymous divs and catch any error that may otherwise arise. See\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427\r\n  try {\r\n    /* eslint-disable no-unused-expressions */\r\n    currentRange.startContainer.nodeType;\r\n    currentRange.endContainer.nodeType;\r\n    /* eslint-enable no-unused-expressions */\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n\r\n  // If the node and offset values are the same, the selection is collapsed.\r\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets\r\n  // this value wrong.\r\n  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);\r\n\r\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;\r\n\r\n  var tempRange = currentRange.cloneRange();\r\n  tempRange.selectNodeContents(node);\r\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);\r\n\r\n  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);\r\n\r\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;\r\n  var end = start + rangeLength;\r\n\r\n  // Detect whether the selection is backward.\r\n  var detectionRange = document.createRange();\r\n  detectionRange.setStart(anchorNode, anchorOffset);\r\n  detectionRange.setEnd(focusNode, focusOffset);\r\n  var isBackward = detectionRange.collapsed;\r\n\r\n  return {\r\n    start: isBackward ? end : start,\r\n    end: isBackward ? start : end\r\n  };\r\n}\r\n\r\n/**\r\n * @param {DOMElement|DOMTextNode} node\r\n * @param {object} offsets\r\n */\r\nfunction setIEOffsets(node, offsets) {\r\n  var range = document.selection.createRange().duplicate();\r\n  var start, end;\r\n\r\n  if (typeof offsets.end === 'undefined') {\r\n    start = offsets.start;\r\n    end = start;\r\n  } else if (offsets.start > offsets.end) {\r\n    start = offsets.end;\r\n    end = offsets.start;\r\n  } else {\r\n    start = offsets.start;\r\n    end = offsets.end;\r\n  }\r\n\r\n  range.moveToElementText(node);\r\n  range.moveStart('character', start);\r\n  range.setEndPoint('EndToStart', range);\r\n  range.moveEnd('character', end - start);\r\n  range.select();\r\n}\r\n\r\n/**\r\n * In modern non-IE browsers, we can support both forward and backward\r\n * selections.\r\n *\r\n * Note: IE10+ supports the Selection object, but it does not support\r\n * the `extend` method, which means that even in modern IE, it's not possible\r\n * to programatically create a backward selection. Thus, for all IE\r\n * versions, we use the old IE API to create our selections.\r\n *\r\n * @param {DOMElement|DOMTextNode} node\r\n * @param {object} offsets\r\n */\r\nfunction setModernOffsets(node, offsets) {\r\n  if (!window.getSelection) {\r\n    return;\r\n  }\r\n\r\n  var selection = window.getSelection();\r\n  var length = node[getTextContentAccessor()].length;\r\n  var start = Math.min(offsets.start, length);\r\n  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);\r\n\r\n  // IE 11 uses modern selection, but doesn't support the extend method.\r\n  // Flip backward selections, so we can set with a single range.\r\n  if (!selection.extend && start > end) {\r\n    var temp = end;\r\n    end = start;\r\n    start = temp;\r\n  }\r\n\r\n  var startMarker = getNodeForCharacterOffset(node, start);\r\n  var endMarker = getNodeForCharacterOffset(node, end);\r\n\r\n  if (startMarker && endMarker) {\r\n    var range = document.createRange();\r\n    range.setStart(startMarker.node, startMarker.offset);\r\n    selection.removeAllRanges();\r\n\r\n    if (start > end) {\r\n      selection.addRange(range);\r\n      selection.extend(endMarker.node, endMarker.offset);\r\n    } else {\r\n      range.setEnd(endMarker.node, endMarker.offset);\r\n      selection.addRange(range);\r\n    }\r\n  }\r\n}\r\n\r\nvar useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);\r\n\r\nvar ReactDOMSelection = {\r\n  /**\r\n   * @param {DOMElement} node\r\n   */\r\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,\r\n\r\n  /**\r\n   * @param {DOMElement|DOMTextNode} node\r\n   * @param {object} offsets\r\n   */\r\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets\r\n};\r\n\r\nmodule.exports = ReactDOMSelection;"]},"metadata":{},"sourceType":"script"}