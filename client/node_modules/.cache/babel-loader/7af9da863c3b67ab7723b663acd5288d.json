{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, isUndefined, Browser, compile, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Property, NotifyPropertyChanges, ChildProperty, Complex } from '@syncfusion/ej2-base';\nimport { Event, EventHandler, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { rippleEffect, Animation, remove } from '@syncfusion/ej2-base';\nimport { Draggable, Droppable } from '@syncfusion/ej2-base';\nimport { getElement } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, closest, matches, detach, select, selectAll, isVisible, append } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { isNullOrUndefined as isNOU, Touch, getValue, setValue, extend, merge, attributes } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { createCheckBox, rippleMouseHandler } from '@syncfusion/ej2-buttons';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nvar ROOT = 'e-treeview';\nvar CONTROL = 'e-control';\nvar COLLAPSIBLE = 'e-icon-collapsible';\nvar EXPANDABLE = 'e-icon-expandable';\nvar LISTITEM = 'e-list-item';\nvar LISTTEXT = 'e-list-text';\nvar LISTWRAP = 'e-text-wrap';\nvar IELISTWRAP = 'e-ie-wrap';\nvar PARENTITEM = 'e-list-parent';\nvar HOVER = 'e-hover';\nvar ACTIVE = 'e-active';\nvar LOAD = 'e-icons-spinner';\nvar PROCESS = 'e-process';\nvar ICON = 'e-icons';\nvar TEXTWRAP = 'e-text-content';\nvar INPUT = 'e-input';\nvar INPUTGROUP = 'e-input-group';\nvar TREEINPUT = 'e-tree-input';\nvar EDITING = 'e-editing';\nvar RTL = 'e-rtl';\nvar INTERACTION = 'e-interaction';\nvar DRAGITEM = 'e-drag-item';\nvar DROPPABLE = 'e-droppable';\nvar DRAGGING = 'e-dragging';\nvar SIBLING = 'e-sibling';\nvar DROPIN = 'e-drop-in';\nvar DROPNEXT = 'e-drop-next';\nvar DROPOUT = 'e-drop-out';\nvar NODROP = 'e-no-drop';\nvar FULLROWWRAP = 'e-fullrow-wrap';\nvar FULLROW = 'e-fullrow';\nvar SELECTED = 'e-selected';\nvar EXPANDED = 'e-expanded';\nvar NODECOLLAPSED = 'e-node-collapsed';\nvar DISABLE = 'e-disable';\nvar DROPCOUNT = 'e-drop-count';\nvar CHECK = 'e-check';\nvar INDETERMINATE = 'e-stop';\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECKBOXRIPPLE = 'e-ripple-container';\nvar RIPPLE = 'e-ripple';\nvar RIPPLEELMENT = 'e-ripple-element';\nvar FOCUS = 'e-node-focus';\nvar IMAGE = 'e-list-img';\nvar BIGGER = 'e-bigger';\nvar SMALL = 'e-small';\nvar CHILD = 'e-has-child';\nvar ITEM_ANIMATION_ACTIVE = 'e-animation-active';\nvar DISABLED = 'e-disabled';\nvar treeAriaAttr = {\n  treeRole: 'tree',\n  itemRole: 'treeitem',\n  listRole: 'group',\n  itemText: '',\n  wrapperRole: ''\n};\n/**\r\n * Configures the fields to bind to the properties of node in the TreeView component.\r\n */\n\nvar FieldsSettings =\n/** @class */\nfunction (_super) {\n  __extends(FieldsSettings, _super);\n\n  function FieldsSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('child')], FieldsSettings.prototype, \"child\", void 0);\n\n  __decorate([Property([])], FieldsSettings.prototype, \"dataSource\", void 0);\n\n  __decorate([Property('expanded')], FieldsSettings.prototype, \"expanded\", void 0);\n\n  __decorate([Property('hasChildren')], FieldsSettings.prototype, \"hasChildren\", void 0);\n\n  __decorate([Property('htmlAttributes')], FieldsSettings.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property('iconCss')], FieldsSettings.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('id')], FieldsSettings.prototype, \"id\", void 0);\n\n  __decorate([Property('imageUrl')], FieldsSettings.prototype, \"imageUrl\", void 0);\n\n  __decorate([Property('isChecked')], FieldsSettings.prototype, \"isChecked\", void 0);\n\n  __decorate([Property('parentID')], FieldsSettings.prototype, \"parentID\", void 0);\n\n  __decorate([Property(null)], FieldsSettings.prototype, \"query\", void 0);\n\n  __decorate([Property('selected')], FieldsSettings.prototype, \"selected\", void 0);\n\n  __decorate([Property(null)], FieldsSettings.prototype, \"tableName\", void 0);\n\n  __decorate([Property('text')], FieldsSettings.prototype, \"text\", void 0);\n\n  __decorate([Property('tooltip')], FieldsSettings.prototype, \"tooltip\", void 0);\n\n  __decorate([Property('navigateUrl')], FieldsSettings.prototype, \"navigateUrl\", void 0);\n\n  return FieldsSettings;\n}(ChildProperty);\n\nexport { FieldsSettings };\n/**\r\n * Configures animation settings for the TreeView component.\r\n */\n\nvar ActionSettings =\n/** @class */\nfunction (_super) {\n  __extends(ActionSettings, _super);\n\n  function ActionSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('SlideDown')], ActionSettings.prototype, \"effect\", void 0);\n\n  __decorate([Property(400)], ActionSettings.prototype, \"duration\", void 0);\n\n  __decorate([Property('linear')], ActionSettings.prototype, \"easing\", void 0);\n\n  return ActionSettings;\n}(ChildProperty);\n\nexport { ActionSettings };\n/**\r\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\r\n */\n\nvar NodeAnimationSettings =\n/** @class */\nfunction (_super) {\n  __extends(NodeAnimationSettings, _super);\n\n  function NodeAnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Complex({\n    effect: 'SlideUp',\n    duration: 400,\n    easing: 'linear'\n  }, ActionSettings)], NodeAnimationSettings.prototype, \"collapse\", void 0);\n\n  __decorate([Complex({\n    effect: 'SlideDown',\n    duration: 400,\n    easing: 'linear'\n  }, ActionSettings)], NodeAnimationSettings.prototype, \"expand\", void 0);\n\n  return NodeAnimationSettings;\n}(ChildProperty);\n\nexport { NodeAnimationSettings };\n/**\r\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\r\n * functions to perform edit, drag and drop, selection with check-box, and more.\r\n * ```html\r\n *  <div id=\"tree\"></div>\r\n * ```\r\n * ```typescript\r\n *  let treeObj: TreeView = new TreeView();\r\n *  treeObj.appendTo('#tree');\r\n * ```\r\n */\n\nvar TreeView =\n/** @class */\nfunction (_super) {\n  __extends(TreeView, _super);\n\n  function TreeView(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isRefreshed = false;\n    _this.preventExpand = false;\n    _this.checkedElement = [];\n    _this.disableNode = []; // eslint-disable-next-line\n\n    _this.validArr = [];\n    _this.validNodes = [];\n    _this.expandChildren = [];\n    _this.isFieldChange = false;\n    _this.changeDataSource = false;\n    _this.hasTemplate = false;\n    _this.isFirstRender = false;\n    _this.mouseDownStatus = false;\n    return _this;\n  }\n\n  TreeView_1 = TreeView;\n  /**\r\n   * Get component name.\r\n   *\r\n   * @returns {string} - returns module name.\r\n   * @private\r\n   */\n\n  TreeView.prototype.getModuleName = function () {\n    return 'treeview';\n  };\n  /**\r\n   * Initialize the event handler\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  TreeView.prototype.preRender = function () {\n    var _this = this;\n\n    this.checkActionNodes = [];\n    this.parentNodeCheck = [];\n    this.dragStartAction = false;\n    this.isAnimate = false;\n    this.keyConfigs = {\n      escape: 'escape',\n      end: 'end',\n      enter: 'enter',\n      f2: 'f2',\n      home: 'home',\n      moveDown: 'downarrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      ctrlDown: 'ctrl+downarrow',\n      ctrlUp: 'ctrl+uparrow',\n      ctrlEnter: 'ctrl+enter',\n      ctrlHome: 'ctrl+home',\n      ctrlEnd: 'ctrl+end',\n      ctrlA: 'ctrl+A',\n      shiftDown: 'shift+downarrow',\n      shiftUp: 'shift+uparrow',\n      shiftEnter: 'shift+enter',\n      shiftHome: 'shift+home',\n      shiftEnd: 'shift+end',\n      csDown: 'ctrl+shift+downarrow',\n      csUp: 'ctrl+shift+uparrow',\n      csEnter: 'ctrl+shift+enter',\n      csHome: 'ctrl+shift+home',\n      csEnd: 'ctrl+shift+end',\n      space: 'space'\n    };\n    this.listBaseOption = {\n      expandCollapse: true,\n      showIcon: true,\n      expandIconClass: EXPANDABLE,\n      ariaAttributes: treeAriaAttr,\n      expandIconPosition: 'Left',\n      itemCreated: function (e) {\n        _this.beforeNodeCreate(e);\n      },\n      enableHtmlSanitizer: this.enableHtmlSanitizer,\n      itemNavigable: this.fullRowNavigable\n    };\n    this.updateListProp(this.fields);\n    this.aniObj = new Animation({});\n    this.treeList = [];\n    this.isLoaded = false;\n    this.isInitalExpand = false;\n    this.expandChildren = [];\n    this.index = 0;\n    this.setTouchClass();\n\n    if (isNOU(this.selectedNodes)) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n    }\n\n    if (isNOU(this.checkedNodes)) {\n      this.setProperties({\n        checkedNodes: []\n      }, true);\n    }\n\n    if (isNOU(this.expandedNodes)) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n    } else {\n      this.isInitalExpand = true;\n    }\n  };\n  /**\r\n   * Get the properties to be maintained in the persisted state.\r\n   *\r\n   * @returns {string} - returns the persisted data\r\n   * @hidden\r\n   */\n\n\n  TreeView.prototype.getPersistData = function () {\n    var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\r\n   * To Initialize the control rendering\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  TreeView.prototype.render = function () {\n    this.initialRender = true;\n    this.initialize();\n    this.setDataBinding(false);\n    this.setDisabledMode();\n    this.setExpandOnType();\n\n    if (!this.disabled) {\n      this.setRipple();\n    }\n\n    this.wireEditingEvents(this.allowEditing);\n    this.setDragAndDrop(this.allowDragAndDrop);\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    this.initialRender = false;\n    this.renderComplete();\n  };\n\n  TreeView.prototype.initialize = function () {\n    this.element.setAttribute('role', 'tree');\n    this.element.setAttribute('tabindex', '0');\n    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n    this.setCssClass(null, this.cssClass);\n    this.setEnableRtl();\n    this.setFullRow(this.fullRowSelect);\n    this.setTextWrap();\n    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n  };\n\n  TreeView.prototype.setDisabledMode = function () {\n    if (this.disabled) {\n      this.element.classList.add(DISABLED);\n    } else {\n      this.element.classList.remove(DISABLED);\n    }\n  };\n\n  TreeView.prototype.setEnableRtl = function () {\n    (this.enableRtl ? addClass : removeClass)([this.element], RTL);\n  };\n\n  TreeView.prototype.setRipple = function () {\n    var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\n    var rippleModel = {\n      selector: tempStr,\n      ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\n    };\n    this.rippleFn = rippleEffect(this.element, rippleModel);\n    var iconModel = {\n      selector: '.' + TEXTWRAP + ' > .' + ICON,\n      isCenterRipple: true\n    };\n    this.rippleIconFn = rippleEffect(this.element, iconModel);\n  };\n\n  TreeView.prototype.setFullRow = function (isEnabled) {\n    (isEnabled ? addClass : removeClass)([this.element], FULLROWWRAP);\n  };\n\n  TreeView.prototype.setMultiSelect = function (isEnabled) {\n    var firstUl = select('.' + PARENTITEM, this.element);\n\n    if (isEnabled) {\n      firstUl.setAttribute('aria-multiselectable', 'true');\n    } else {\n      firstUl.removeAttribute('aria-multiselectable');\n    }\n  }; // eslint-disable-next-line\n\n\n  TreeView.prototype.templateComplier = function (template) {\n    if (template) {\n      this.hasTemplate = true; // eslint-disable-next-line\n\n      var e = void 0;\n      this.element.classList.add(INTERACTION);\n\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        }\n      } catch (e) {\n        return compile(template);\n      }\n    }\n\n    this.element.classList.remove(INTERACTION);\n    return undefined;\n  };\n\n  TreeView.prototype.setDataBinding = function (changeDataSource) {\n    var _this = this;\n\n    this.treeList.push('false');\n\n    if (this.fields.dataSource instanceof DataManager) {\n      /* eslint-disable */\n      this.isOffline = this.fields.dataSource.dataSource.offline;\n\n      if (this.fields.dataSource.ready) {\n        this.fields.dataSource.ready.then(function (e) {\n          /* eslint-disable */\n          _this.isOffline = _this.fields.dataSource.dataSource.offline;\n\n          if (_this.fields.dataSource instanceof DataManager && _this.isOffline) {\n            _this.treeList.pop();\n\n            _this.treeData = e.result;\n            _this.isNumberTypeId = _this.getType();\n\n            _this.setRootData();\n\n            _this.renderItems(true);\n\n            if (_this.treeList.length === 0 && !_this.isLoaded) {\n              _this.finalize();\n            }\n          }\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      } else {\n        this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {\n          _this.treeList.pop();\n\n          _this.treeData = e.result;\n          _this.isNumberTypeId = _this.getType();\n\n          _this.setRootData();\n\n          if (changeDataSource) {\n            _this.changeDataSource = true;\n          }\n\n          _this.renderItems(true);\n\n          _this.changeDataSource = false;\n\n          if (_this.treeList.length === 0 && !_this.isLoaded) {\n            _this.finalize();\n          }\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      this.treeList.pop();\n\n      if (isNOU(this.fields.dataSource)) {\n        this.rootData = this.treeData = [];\n      } else {\n        this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n        this.setRootData();\n      }\n\n      this.isNumberTypeId = this.getType();\n      this.renderItems(false);\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  };\n\n  TreeView.prototype.getQuery = function (mapper, value) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    var columns = [];\n    var query;\n\n    if (!mapper.query) {\n      query = new Query();\n      var prop = this.getActualProperties(mapper);\n\n      for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {\n        var col = _a[_i];\n\n        if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col] && col !== 'url' && columns.indexOf(mapper[col]) === -1) {\n          columns.push(mapper[col]);\n        }\n      }\n\n      query.select(columns);\n\n      if (prop.hasOwnProperty('tableName')) {\n        query.from(mapper.tableName);\n      }\n    } else {\n      query = mapper.query.clone();\n    }\n\n    ListBase.addSorting(this.sortOrder, mapper.text, query);\n\n    if (!isNOU(value) && !isNOU(mapper.parentID)) {\n      query.where(mapper.parentID, 'equal', this.isNumberTypeId ? parseFloat(value) : value);\n    }\n\n    return query;\n  };\n\n  TreeView.prototype.getType = function () {\n    return this.treeData[0] ? typeof getValue(this.fields.id, this.treeData[0]) === 'number' ? true : false : false;\n  };\n\n  TreeView.prototype.setRootData = function () {\n    this.dataType = this.getDataType(this.treeData, this.fields);\n\n    if (this.dataType === 1) {\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n      var rootItems = this.getChildNodes(this.treeData, undefined, true);\n\n      if (isNOU(rootItems)) {\n        this.rootData = [];\n      } else {\n        this.rootData = rootItems;\n      }\n    } else {\n      this.rootData = this.treeData;\n    }\n  };\n\n  TreeView.prototype.renderItems = function (isSorted) {\n    /* eslint-disable */\n    this.listBaseOption.ariaAttributes.level = 1;\n    var sortedData = this.getSortedData(this.rootData);\n    this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);\n    this.element.appendChild(this.ulElement);\n    var rootNodes = this.ulElement.querySelectorAll('.e-list-item');\n\n    if (this.loadOnDemand === false) {\n      var i = 0;\n\n      while (i < rootNodes.length) {\n        this.renderChildNodes(rootNodes[i], true, null, true);\n        i++;\n      }\n    }\n\n    var parentEle = selectAll('.' + PARENTITEM, this.element);\n\n    if (parentEle.length === 1 && rootNodes && rootNodes.length !== 0 || this.loadOnDemand) {\n      this.finalizeNode(this.element);\n    }\n\n    this.parentNodeCheck = [];\n    this.parentCheckData = [];\n    this.updateCheckedStateFromDS();\n\n    if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\n      this.updateParentCheckState();\n    }\n  };\n  /**\r\n   * Update the checkedNodes from datasource at initial rendering\r\n   */\n\n\n  TreeView.prototype.updateCheckedStateFromDS = function (id) {\n    this.validNodes = [];\n\n    if (this.treeData && this.showCheckBox) {\n      if (this.dataType === 1) {\n        var mapper = this.fields;\n        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (var i = 0; i < resultData.length; i++) {\n          var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n          var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;\n\n          if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {\n            this.checkedNodes.push(resultId);\n          }\n\n          if (resultData[i][this.fields.hasChildren]) {\n            var id_1 = resultData[i][this.fields.id];\n            var childData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', id_1, false));\n\n            for (var child = 0; child < childData.length; child++) {\n              var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;\n\n              if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\n                this.checkedNodes.push(childId);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < this.checkedNodes.length; i++) {\n          var mapper_1 = this.fields;\n          var checkState = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.id, 'equal', this.checkedNodes[i], true));\n\n          if (checkState[0] && this.autoCheck) {\n            this.getCheckedNodeDetails(mapper_1, checkState);\n            this.checkIndeterminateState(checkState[0]);\n          }\n\n          if (checkState.length > 0) {\n            var checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n              this.validNodes.push(checkedId);\n            }\n          }\n\n          var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.parentID, 'equal', this.checkedNodes[i], true));\n\n          for (var index = 0; index < checkedData.length; index++) {\n            var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\n              this.checkedNodes.push(checkedId);\n            }\n\n            if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n              this.validNodes.push(checkedId);\n            }\n          }\n        }\n      } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {\n        for (var index = 0; index < this.treeData.length; index++) {\n          var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';\n\n          if (this.treeData[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {\n            this.checkedNodes.push(fieldId);\n          }\n\n          if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {\n            this.validNodes.push(fieldId);\n          }\n\n          var childItems = getValue(this.fields.child.toString(), this.treeData[index]);\n\n          if (childItems) {\n            this.updateChildCheckState(childItems, this.treeData[index]);\n          }\n        }\n      }\n\n      this.setProperties({\n        checkedNodes: this.validNodes\n      }, true);\n    }\n  };\n  /**\r\n   * To check whether the list data has sub child and to change the parent check state accordingly\r\n   */\n\n\n  TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {\n    var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\n    var count = 0;\n    var element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\n    var parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\n\n    if (!element && !parentEle) {\n      var len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(id) === -1) {\n        this.parentNodeCheck.push(id);\n      }\n\n      var childNodes = this.getChildNodes(this.treeData, id);\n\n      for (var i = 0; i < childNodes.length; i++) {\n        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n\n        if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\n          this.checkedNodes.push(id);\n        }\n      }\n\n      var preElement = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', id, true));\n      this.getCheckedNodeDetails(mapper, preElement);\n    } else if (parentEle) {\n      var check = select('.' + CHECK, parentEle);\n\n      if (!check) {\n        this.changeState(parentEle, 'indeterminate', null, true, true);\n      }\n    }\n  };\n  /**\r\n   * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\r\n   */\n\n\n  TreeView.prototype.updateParentCheckState = function () {\n    var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n    var childCheckedElement;\n\n    for (var i = 0; i < indeterminate.length; i++) {\n      var node = closest(indeterminate[i], '.' + LISTITEM);\n      var nodeId = node.getAttribute('data-uid').toString();\n\n      if (this.dataType === 1) {\n        childCheckedElement = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.parentID, 'equal', nodeId, true));\n      } else {\n        childCheckedElement = this.getChildNodes(this.treeData, nodeId);\n      }\n\n      var count = 0;\n\n      if (childCheckedElement) {\n        for (var j = 0; j < childCheckedElement.length; j++) {\n          var childId = childCheckedElement[j][this.fields.id].toString();\n\n          if (this.checkedNodes.indexOf(childId) !== -1) {\n            count++;\n          }\n        }\n\n        if (count === childCheckedElement.length) {\n          var nodeCheck = node.getAttribute('data-uid');\n\n          if (this.checkedNodes.indexOf(nodeCheck) === -1) {\n            this.checkedNodes.push(nodeCheck);\n          }\n\n          this.changeState(node, 'check', null, true, true);\n        } else if (count === 0 && this.checkedNodes.length === 0) {\n          this.changeState(node, 'uncheck', null, true, true);\n        }\n      }\n    }\n  };\n  /**\r\n   * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\r\n   */\n\n\n  TreeView.prototype.checkIndeterminateState = function (data) {\n    var element;\n\n    if (this.dataType === 1) {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\n    } else {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\n    }\n\n    if (element) {\n      var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');\n\n      if (ariaChecked !== 'true') {\n        this.changeState(element, 'indeterminate', null, true, true);\n      }\n    } else if (this.dataType === 2) {\n      var len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\n        this.parentNodeCheck.push(data[this.fields.id].toString());\n      }\n    }\n  };\n  /**\r\n   * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\r\n   */\n\n\n  TreeView.prototype.updateChildCheckState = function (childItems, treeData) {\n    var count = 0;\n    var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n\n    for (var index = 0; index < childItems.length; index++) {\n      var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n      if (childItems[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n        count++;\n      }\n\n      if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {\n        this.validNodes.push(checkedChild);\n      }\n\n      var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n      if (subChildItems) {\n        this.parentCheckData.push(treeData);\n        this.updateChildCheckState(subChildItems, childItems[index]);\n      }\n\n      if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\n        this.checkedNodes.push(checkedParent);\n      }\n    }\n\n    if (count !== 0 && this.autoCheck) {\n      this.checkIndeterminateState(treeData);\n\n      for (var len = 0; len < this.parentCheckData.length; len++) {\n        if (treeData !== this.parentCheckData[len] && this.parentCheckData[len]) {\n          this.checkIndeterminateState(this.parentCheckData[len]);\n        }\n      }\n    }\n\n    this.parentCheckData = [];\n  };\n\n  TreeView.prototype.beforeNodeCreate = function (e) {\n    if (this.showCheckBox) {\n      var checkboxEle = createCheckBox(this.createElement, true, {\n        cssClass: this.touchClass\n      });\n      checkboxEle.setAttribute('role', 'checkbox');\n      var icon = select('div.' + ICON, e.item);\n      var id = e.item.getAttribute('data-uid');\n      e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNOU(icon) ? 0 : 1]);\n      var checkValue = getValue(e.fields.isChecked, e.curData);\n\n      if (this.checkedNodes.indexOf(id) > -1) {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else if (!isNOU(checkValue) && checkValue.toString() === 'true') {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else {\n        checkboxEle.setAttribute('aria-checked', 'false');\n      }\n\n      var frame = select('.' + CHECKBOXFRAME, checkboxEle);\n      EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\n      EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\n    }\n\n    if (this.fullRowSelect) {\n      this.createFullRow(e.item);\n    }\n\n    if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {\n      e.item.setAttribute('aria-selected', 'false');\n    }\n\n    var fields = e.fields;\n    this.addActionClass(e, fields.selected, SELECTED);\n    this.addActionClass(e, fields.expanded, EXPANDED);\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      var textEle = e.item.querySelector('.' + LISTTEXT);\n      var dataId = e.item.getAttribute('data-uid');\n      textEle.innerHTML = '';\n      this.renderNodeTemplate(e.curData, textEle, dataId);\n    }\n\n    var eventArgs = {\n      node: e.item,\n      nodeData: e.curData,\n      text: e.text\n    };\n\n    if (!this.isRefreshed) {\n      this.trigger('drawNode', eventArgs);\n    }\n  };\n\n  TreeView.prototype.frameMouseHandler = function (e) {\n    var rippleSpan = select('.' + CHECKBOXRIPPLE, e.target.parentElement);\n    rippleMouseHandler(e, rippleSpan);\n  };\n\n  TreeView.prototype.addActionClass = function (e, action, cssClass) {\n    var data = e.curData;\n    var actionValue = getValue(action, data);\n\n    if (!isNOU(actionValue) && actionValue.toString() !== 'false') {\n      e.item.classList.add(cssClass);\n    }\n  };\n\n  TreeView.prototype.getDataType = function (ds, mapper) {\n    if (this.fields.dataSource instanceof DataManager) {\n      for (var i = 0; i < ds.length; i++) {\n        if (this.isOffline) {\n          if (typeof mapper.child === 'string' && isNOU(getValue(mapper.child, ds[i])) && !isNOU(getValue(mapper.parentID, ds[i]))) {\n            return 1;\n          }\n        } else if (typeof mapper.child === 'string' && isNOU(getValue(mapper.child, ds[i]))) {\n          return 1;\n        }\n      }\n\n      return 2;\n    }\n\n    for (var i = 0, len = ds.length; i < len; i++) {\n      if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, ds[i]))) {\n        return 2;\n      }\n\n      if (!isNOU(getValue(mapper.parentID, ds[i])) || !isNOU(getValue(mapper.hasChildren, ds[i]))) {\n        return 1;\n      }\n    }\n\n    return 1;\n  };\n\n  TreeView.prototype.getGroupedData = function (dataSource, groupBy) {\n    var cusQuery = new Query().group(groupBy);\n    var ds = ListBase.getDataSource(dataSource, cusQuery);\n    var grpItem = [];\n\n    for (var j = 0; j < ds.length; j++) {\n      var itemObj = ds[j].items;\n      grpItem.push(itemObj);\n    }\n\n    return grpItem;\n  };\n\n  TreeView.prototype.getSortedData = function (list) {\n    if (list && this.sortOrder !== 'None') {\n      list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));\n    }\n\n    return list;\n  };\n\n  TreeView.prototype.finalizeNode = function (element) {\n    var iNodes = selectAll('.' + IMAGE, element);\n\n    for (var k = 0; k < iNodes.length; k++) {\n      iNodes[k].setAttribute('alt', IMAGE);\n    }\n\n    if (this.isLoaded) {\n      var sNodes = selectAll('.' + SELECTED, element);\n\n      for (var i = 0; i < sNodes.length; i++) {\n        this.selectNode(sNodes[i], null);\n        break;\n      }\n\n      removeClass(sNodes, SELECTED);\n    }\n\n    var cNodes = selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\n\n    for (var j = 0; j < cNodes.length; j++) {\n      var icon = select('div.' + ICON, cNodes[j]);\n\n      if (icon && icon.classList.contains(EXPANDABLE)) {\n        this.disableExpandAttr(cNodes[j]);\n      }\n    }\n\n    var eNodes = selectAll('.' + EXPANDED, element);\n\n    if (!this.isInitalExpand) {\n      for (var i = 0; i < eNodes.length; i++) {\n        this.renderChildNodes(eNodes[i]);\n      }\n    }\n\n    removeClass(eNodes, EXPANDED);\n    this.updateList();\n\n    if (this.isLoaded) {\n      this.updateCheckedProp();\n    }\n  };\n\n  TreeView.prototype.updateCheckedProp = function () {\n    if (this.showCheckBox) {\n      var nodes = [].concat([], this.checkedNodes);\n      this.setProperties({\n        checkedNodes: nodes\n      }, true);\n    }\n  };\n\n  TreeView.prototype.ensureIndeterminate = function () {\n    if (this.autoCheck) {\n      var liElement = selectAll('li', this.element);\n      var ulElement = void 0;\n\n      for (var i = 0; i < liElement.length; i++) {\n        if (liElement[i].classList.contains(LISTITEM)) {\n          ulElement = select('.' + PARENTITEM, liElement[i]);\n\n          if (ulElement) {\n            this.ensureParentCheckState(liElement[i]);\n          } else {\n            this.ensureChildCheckState(liElement[i]);\n          }\n        }\n      }\n    } else {\n      var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n\n      for (var i = 0; i < indeterminate.length; i++) {\n        indeterminate[i].classList.remove(INDETERMINATE);\n      }\n    }\n  };\n\n  TreeView.prototype.ensureParentCheckState = function (element) {\n    if (!isNOU(element)) {\n      if (element.classList.contains(ROOT)) {\n        return;\n      }\n\n      var ulElement = element;\n\n      if (element.classList.contains(LISTITEM)) {\n        ulElement = select('.' + PARENTITEM, element);\n      }\n\n      var checkedNodes = selectAll('.' + CHECK, ulElement);\n      var indeterminateNodes = selectAll('.' + INDETERMINATE, ulElement);\n      var nodes = selectAll('.' + LISTITEM, ulElement);\n      var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\n\n      if (nodes.length === checkedNodes.length) {\n        this.changeState(checkBoxEle, 'check', null, true, true);\n      } else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {\n        this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n      } else if (checkedNodes.length === 0) {\n        this.changeState(checkBoxEle, 'uncheck', null, true, true);\n      }\n\n      var parentUL = closest(element, '.' + PARENTITEM);\n\n      if (!isNOU(parentUL)) {\n        var currentParent = closest(parentUL, '.' + LISTITEM);\n        this.ensureParentCheckState(currentParent);\n      }\n    }\n  };\n\n  TreeView.prototype.ensureChildCheckState = function (element, e) {\n    if (!isNOU(element)) {\n      var childElement = select('.' + PARENTITEM, element);\n      var checkBoxes = void 0;\n\n      if (!isNOU(childElement)) {\n        checkBoxes = selectAll('.' + CHECKBOXWRAP, childElement);\n        var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n        var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\n        var childCheck = childElement.querySelectorAll('li');\n        var expandState = childElement.parentElement.getAttribute('aria-expanded');\n        var checkedState = void 0;\n\n        for (var index = 0; index < checkBoxes.length; index++) {\n          var childId = childCheck[index].getAttribute('data-uid');\n\n          if (!isNOU(this.currentLoadData) && !isNOU(getValue(this.fields.isChecked, this.currentLoadData[index]))) {\n            checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';\n\n            if (this.ele !== -1) {\n              checkedState = isChecked ? 'check' : 'uncheck';\n            }\n\n            if (checkedState === 'uncheck' && !isUndefined(this.parentNodeCheck) && this.autoCheck && this.parentNodeCheck.indexOf(childId) !== -1) {\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n              checkedState = 'indeterminate';\n            }\n          } else {\n            var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n\n            if (isChecked) {\n              checkedState = 'check';\n            } else if (isNodeChecked && !this.isLoaded) {\n              checkedState = 'check';\n            } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\n              checkedState = 'check';\n            } else if (childCheck[index].classList.contains(CHILD) && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else if (this.dataType === 1 && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else {\n              checkedState = 'uncheck';\n            }\n          }\n\n          this.changeState(checkBoxes[index], checkedState, e, true, true);\n        }\n      }\n\n      if (this.autoCheck && this.isLoaded) {\n        this.updateParentCheckState();\n      }\n    }\n  };\n\n  TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {\n    var li = selectAll('.' + LISTITEM, this.element);\n\n    if (!isNOU(nodes)) {\n      for (var len = nodes.length; len >= 0; len--) {\n        var liEle = void 0;\n\n        if (nodes.length === 1) {\n          liEle = this.getElement(nodes[len - 1]);\n        } else {\n          liEle = this.getElement(nodes[len]);\n        }\n\n        if (isNOU(liEle)) {\n          var node = void 0;\n          node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;\n\n          if (node !== '' && doCheck && node) {\n            this.setValidCheckedNode(node);\n            this.dynamicCheckState(node, doCheck);\n          } else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\n            var childItems = this.getChildNodes(this.treeData, node);\n\n            if (childItems) {\n              for (var i = 0; i < childItems.length; i++) {\n                var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n                if (this.checkedNodes.indexOf(id) !== -1) {\n                  this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                  var ele = this.element.querySelector('[data-uid=\"' + id + '\"]');\n\n                  if (ele) {\n                    this.changeState(ele, 'uncheck', null);\n                  }\n                }\n              }\n\n              if (this.parentNodeCheck.indexOf(node) !== -1) {\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\n              }\n            }\n\n            if (node) {\n              this.dynamicCheckState(node, doCheck);\n            }\n\n            this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n          }\n\n          continue;\n        }\n\n        var checkBox = select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\n        this.validateCheckNode(checkBox, !doCheck, liEle, null);\n      }\n    } else {\n      var checkBoxes = selectAll('.' + CHECKBOXWRAP, this.element);\n\n      if (this.loadOnDemand) {\n        for (var index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\n        }\n      } else {\n        for (var index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');\n        }\n      }\n    }\n\n    if (nodes) {\n      for (var j = 0; j < nodes.length; j++) {\n        var node = nodes[j] ? nodes[j].toString() : '';\n\n        if (!doCheck) {\n          this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n        }\n      }\n    }\n\n    if (this.autoCheck) {\n      this.updateParentCheckState();\n    }\n  };\n\n  TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {\n    var currLi = closest(checkbox, '.' + LISTITEM);\n    var id = currLi.getAttribute('data-uid');\n    var nodeDetails = this.getNodeData(currLi);\n\n    if (nodeDetails.isChecked === 'true' && !doCheck) {\n      this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n    }\n  };\n  /**\r\n   * Changes the parent and child  check state while changing the checkedNodes via setmodel\r\n   */\n\n\n  TreeView.prototype.dynamicCheckState = function (node, doCheck) {\n    if (this.dataType === 1) {\n      var count = 0;\n      var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, 'equal', node, true));\n\n      if (resultId[0]) {\n        var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\n        var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\n        var parentElement = this.element.querySelector('[data-uid=\"' + parent_1 + '\"]');\n        var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n        var check = parentElement ? select('.' + CHECK, parentElement) : null;\n        var element = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        var childNodes = this.getChildNodes(this.treeData, parent_1);\n\n        if (childNodes) {\n          for (var i = 0; i < childNodes.length; i++) {\n            var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n        }\n\n        if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && element && id === node && !doCheck) {\n          this.changeState(element, 'uncheck', null);\n        } else if (this.checkedNodes.indexOf(node) !== -1 && element && id === node && doCheck) {\n          this.changeState(element, 'check', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count !== 0) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count === 0) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else if (!element && !parentElement && id === node && this.autoCheck) {\n          this.updateIndeterminate(node, doCheck);\n        }\n      }\n    } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {\n      var id = void 0;\n      var parentElement = void 0;\n      var check = void 0;\n\n      for (var i = 0; i < this.treeData.length; i++) {\n        id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';\n        parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        check = parentElement ? select('.' + CHECK, parentElement) : null;\n\n        if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        }\n\n        var subChild = getValue(this.fields.child.toString(), this.treeData[i]);\n\n        if (subChild) {\n          this.updateChildIndeterminate(subChild, id, node, doCheck, id);\n        }\n      }\n    }\n  };\n  /**\r\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\r\n   */\n\n\n  TreeView.prototype.updateIndeterminate = function (node, doCheck) {\n    var indeterminateData = this.getTreeData(node);\n    var count = 0;\n    var parent;\n\n    if (this.dataType === 1) {\n      parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\n    }\n\n    var childNodes = this.getChildNodes(this.treeData, parent);\n\n    if (childNodes) {\n      for (var i = 0; i < childNodes.length; i++) {\n        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n      }\n    }\n\n    var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n\n    if (parentElement && doCheck) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\n      this.changeState(parentElement, 'uncheck', null);\n    } else if (!parentElement) {\n      if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\n        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\n      } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\n        this.parentNodeCheck.push(parent);\n      } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n        this.parentNodeCheck.push(parent);\n      }\n\n      this.updateIndeterminate(parent, doCheck);\n\n      if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\n      }\n    }\n  };\n  /**\r\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\r\n   */\n\n\n  TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {\n    var count = 0;\n\n    for (var j = 0; j < subChild.length; j++) {\n      var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';\n\n      if (this.checkedNodes.indexOf(subId) !== -1) {\n        count++;\n      }\n\n      var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n      var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n      var check = parentElement ? select('.' + CHECK, parentElement) : null;\n      var element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\n      var childElementCheck = element ? select('.' + CHECK, element) : null;\n\n      if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {\n        this.changeState(parentElement, 'indeterminate', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && subId === node && !doCheck) {\n        if (this.autoCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else {\n          if (count !== 0) {\n            this.changeState(parentElement, 'indeterminate', null);\n          } else {\n            this.changeState(parentElement, 'uncheck', null);\n          }\n        }\n      } else if (this.checkedNodes.indexOf(node) === -1 && element && subId === node && !doCheck) {\n        this.changeState(element, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {\n        indeterminate.classList.remove(INDETERMINATE);\n      } else if (this.checkedNodes.indexOf(node) === -1 && !element && check && subId === node && count === 0) {\n        this.changeState(parentElement, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\n        this.changeState(element, 'uncheck', null);\n      } else if (!element && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {\n        var childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\n\n        if (doCheck && count !== 0) {\n          this.changeState(childElement, 'indeterminate', null);\n        } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\n          this.checkedNodes.push(parent);\n        } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\n          this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\n        }\n\n        if (this.parentNodeCheck.indexOf(parent) === -1) {\n          this.parentNodeCheck.push(parent);\n        }\n      }\n\n      var innerChild = getValue(this.fields.child.toString(), subChild[j]);\n\n      if (innerChild) {\n        this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\n      }\n    }\n  };\n\n  TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {\n    var _this = this;\n\n    var eventArgs;\n    var currLi = closest(wrapper, '.' + LISTITEM);\n\n    if (wrapper === currLi) {\n      wrapper = select('.' + CHECKBOXWRAP, currLi);\n    }\n\n    if (!isPrevent) {\n      this.checkActionNodes = [];\n      eventArgs = this.getCheckEvent(currLi, state, e);\n      this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\n        }\n      });\n    } else {\n      this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\n    }\n  };\n\n  TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\n    var ariaState;\n    var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n\n    if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n      frameSpan.classList.remove(INDETERMINATE);\n      frameSpan.classList.add(CHECK);\n      this.addCheck(currLi);\n      ariaState = 'true';\n    } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n      removeClass([frameSpan], [CHECK, INDETERMINATE]);\n      this.removeCheck(currLi);\n      ariaState = 'false';\n    } else if (state === 'indeterminate' && this.autoCheck) {\n      frameSpan.classList.remove(CHECK);\n      frameSpan.classList.add(INDETERMINATE);\n      this.removeCheck(currLi);\n      ariaState = 'mixed';\n    }\n\n    ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n\n    if (!isNOU(ariaState)) {\n      wrapper.setAttribute('aria-checked', ariaState);\n    }\n\n    if (isAdd) {\n      var data = [].concat([], this.checkActionNodes);\n      eventArgs = this.getCheckEvent(currLi, state, e);\n\n      if (isUndefined(isPrevent)) {\n        eventArgs.data = data;\n      }\n    }\n\n    if (doCheck !== undefined) {\n      this.ensureStateChange(currLi, doCheck);\n    }\n\n    if (!isPrevent) {\n      if (!isNOU(ariaState)) {\n        wrapper.setAttribute('aria-checked', ariaState);\n        eventArgs.data[0].checked = ariaState;\n        this.trigger('nodeChecked', eventArgs);\n        this.checkActionNodes = [];\n      }\n    }\n  };\n\n  TreeView.prototype.addCheck = function (liEle) {\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.checkedNodes.indexOf(id) === -1) {\n      this.checkedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.removeCheck = function (liEle) {\n    var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.checkedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.getCheckEvent = function (currLi, action, e) {\n    this.checkActionNodes.push(this.getNodeData(currLi));\n    var nodeData = this.checkActionNodes;\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      data: nodeData\n    };\n  };\n\n  TreeView.prototype.finalize = function () {\n    var firstUl = select('.' + PARENTITEM, this.element);\n\n    if (!isNullOrUndefined(firstUl)) {\n      firstUl.setAttribute('role', treeAriaAttr.treeRole);\n      this.setMultiSelect(this.allowMultiSelection);\n      var firstNode = select('.' + LISTITEM, this.element);\n\n      if (firstNode) {\n        addClass([firstNode], FOCUS);\n        this.updateIdAttr(null, firstNode);\n      }\n\n      if (this.allowTextWrap) {\n        this.updateWrap();\n      }\n\n      this.renderReactTemplates();\n      this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;\n      this.doExpandAction();\n    }\n  };\n\n  TreeView.prototype.setTextWrap = function () {\n    (this.allowTextWrap ? addClass : removeClass)([this.element], LISTWRAP);\n\n    if (Browser.isIE) {\n      (this.allowTextWrap ? addClass : removeClass)([this.element], IELISTWRAP);\n    }\n  };\n\n  TreeView.prototype.updateWrap = function (ulEle) {\n    if (!this.fullRowSelect) {\n      return;\n    }\n\n    var liEle = ulEle ? selectAll('.' + LISTITEM, ulEle) : this.liList;\n    var length = liEle.length;\n\n    for (var i = 0; i < length; i++) {\n      this.calculateWrap(liEle[i]);\n    }\n  };\n\n  TreeView.prototype.calculateWrap = function (liEle) {\n    var element = select('.' + FULLROW, liEle);\n\n    if (element && element.nextElementSibling) {\n      element.style.height = this.allowTextWrap ? element.nextElementSibling.offsetHeight + 'px' : '';\n    }\n  };\n\n  TreeView.prototype.doExpandAction = function () {\n    var eUids = this.expandedNodes;\n\n    if (this.isInitalExpand && eUids.length > 0) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n      /* eslint-disable */\n\n      if (this.fields.dataSource instanceof DataManager) {\n        this.expandGivenNodes(eUids);\n      } else {\n        for (var i = 0; i < eUids.length; i++) {\n          var eNode = select('[data-uid=\"' + eUids[i] + '\"]', this.element);\n\n          if (!isNOU(eNode)) {\n            var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n            if (!isNOU(icon)) {\n              this.expandAction(eNode, icon, null);\n            }\n          } else {\n            if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {\n              this.expandChildren.push(eUids[i].toString());\n            }\n\n            continue;\n          }\n        }\n\n        this.afterFinalized();\n      }\n    } else {\n      this.afterFinalized();\n    }\n  };\n\n  TreeView.prototype.expandGivenNodes = function (arr) {\n    var proxy = this;\n    this.expandCallback(arr[this.index], function () {\n      proxy.index++;\n\n      if (proxy.index < arr.length) {\n        proxy.expandGivenNodes(arr);\n      } else {\n        proxy.afterFinalized();\n      }\n    });\n  };\n\n  TreeView.prototype.expandCallback = function (eUid, callback) {\n    var eNode = select('[data-uid=\"' + eUid + '\"]', this.element);\n\n    if (!isNOU(eNode)) {\n      var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n      if (!isNOU(icon)) {\n        this.expandAction(eNode, icon, null, false, callback);\n      } else {\n        callback();\n      }\n    } else {\n      callback();\n    }\n  };\n\n  TreeView.prototype.afterFinalized = function () {\n    this.doSelectionAction();\n    this.updateCheckedProp();\n    this.isAnimate = true;\n    this.isInitalExpand = false;\n\n    if (!this.isLoaded || this.isFieldChange) {\n      var eventArgs = {\n        data: this.treeData\n      };\n      this.trigger('dataBound', eventArgs);\n    }\n\n    this.isLoaded = true;\n  };\n\n  TreeView.prototype.doSelectionAction = function () {\n    var sNodes = selectAll('.' + SELECTED, this.element);\n    var sUids = this.selectedNodes;\n\n    if (sUids.length > 0) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n\n      for (var i = 0; i < sUids.length; i++) {\n        var sNode = select('[data-uid=\"' + sUids[i] + '\"]', this.element);\n\n        if (sNode && !sNode.classList.contains('e-active')) {\n          this.selectNode(sNode, null, true);\n        } else {\n          this.selectedNodes.push(sUids[i]);\n        }\n\n        if (!this.allowMultiSelection) {\n          break;\n        }\n      }\n    } else {\n      this.selectGivenNodes(sNodes);\n    }\n\n    removeClass(sNodes, SELECTED);\n  };\n\n  TreeView.prototype.selectGivenNodes = function (sNodes) {\n    for (var i = 0; i < sNodes.length; i++) {\n      if (!sNodes[i].classList.contains('e-disable')) {\n        this.selectNode(sNodes[i], null, true);\n      }\n\n      if (!this.allowMultiSelection) {\n        break;\n      }\n    }\n  };\n\n  TreeView.prototype.clickHandler = function (event) {\n    var target = event.originalEvent.target;\n    EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\n\n    if (!target || this.dragStartAction) {\n      return;\n    } else {\n      var classList = target.classList;\n      var li = closest(target, '.' + LISTITEM);\n\n      if (!li) {\n        return;\n      } else if (event.originalEvent.which !== 3) {\n        var rippleElement = select('.' + RIPPLEELMENT, li);\n        var rippleIcons = select('.' + ICON, li);\n        this.removeHover();\n        this.setFocusElement(li);\n\n        if (this.showCheckBox && !li.classList.contains('e-disable')) {\n          var checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n\n          if (!isNOU(checkWrapper)) {\n            var checkElement = select('.' + CHECKBOXFRAME, checkWrapper);\n            this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\n            this.triggerClickEvent(event.originalEvent, li);\n            return;\n          }\n        }\n\n        if (classList.contains(EXPANDABLE)) {\n          this.expandAction(li, target, event);\n        } else if (classList.contains(COLLAPSIBLE)) {\n          this.collapseNode(li, target, event);\n        } else if (rippleElement && rippleIcons) {\n          if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\n            this.expandAction(li, rippleIcons, event);\n          } else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\n            this.collapseNode(li, rippleIcons, event);\n          } else if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        } else {\n          if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        }\n      }\n\n      this.triggerClickEvent(event.originalEvent, li);\n    }\n  };\n\n  TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {\n    var currLi = closest(wrapper, '.' + LISTITEM);\n    var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\n    eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\n    this.trigger('nodeChecked', eventArgs);\n  };\n\n  TreeView.prototype.triggerClickEvent = function (e, li) {\n    var eventArgs = {\n      event: e,\n      node: li\n    };\n    this.trigger('nodeClicked', eventArgs);\n  };\n\n  TreeView.prototype.expandNode = function (currLi, icon, loaded) {\n    var _this = this;\n\n    this.renderReactTemplates();\n\n    if (icon.classList.contains(LOAD)) {\n      this.hideSpinner(icon);\n    }\n\n    if (!this.initialRender) {\n      icon.classList.add('interaction');\n    }\n\n    if (loaded !== true || loaded === true && currLi.classList.contains('e-expanded')) {\n      if (this.preventExpand !== true) {\n        removeClass([icon], EXPANDABLE);\n        addClass([icon], COLLAPSIBLE);\n        var start_1 = 0;\n        var end_1 = 0;\n        var proxy_1 = this;\n        var ul_1 = select('.' + PARENTITEM, currLi);\n        var liEle_1 = currLi;\n        this.setHeight(liEle_1, ul_1);\n        var activeElement_1 = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n        if (this.isAnimate && !this.isRefreshed) {\n          this.aniObj.animate(ul_1, {\n            name: this.animation.expand.effect,\n            duration: this.animation.expand.duration,\n            timingFunction: this.animation.expand.easing,\n            begin: function (args) {\n              liEle_1.style.overflow = 'hidden';\n\n              if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);\n              }\n\n              start_1 = liEle_1.offsetHeight;\n              end_1 = select('.' + TEXTWRAP, currLi).offsetHeight;\n            },\n            progress: function (args) {\n              args.element.style.display = 'block';\n              proxy_1.animateHeight(args, start_1, end_1);\n            },\n            end: function (args) {\n              args.element.style.display = 'block';\n\n              if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);\n              }\n\n              _this.expandedNode(liEle_1, ul_1, icon);\n            }\n          });\n        } else {\n          this.expandedNode(liEle_1, ul_1, icon);\n        }\n      }\n    } else {\n      var ul = select('.' + PARENTITEM, currLi);\n      ul.style.display = 'none';\n\n      if (this.fields.dataSource instanceof DataManager === true) {\n        this.preventExpand = false;\n      }\n    }\n\n    if (this.initialRender) {\n      icon.classList.add('interaction');\n    }\n  };\n\n  TreeView.prototype.expandedNode = function (currLi, ul, icon) {\n    ul.style.display = 'block';\n    currLi.style.display = 'block';\n    currLi.style.overflow = '';\n    currLi.style.height = '';\n    removeClass([icon], PROCESS);\n    this.addExpand(currLi);\n\n    if (this.allowTextWrap && this.isLoaded && this.isFirstRender) {\n      this.updateWrap(currLi);\n      this.isFirstRender = false;\n    }\n\n    if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, null);\n      this.trigger('nodeExpanded', this.expandArgs);\n    }\n  };\n\n  TreeView.prototype.addExpand = function (liEle) {\n    liEle.setAttribute('aria-expanded', 'true');\n    removeClass([liEle], NODECOLLAPSED);\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.expandedNodes.indexOf(id) === -1) {\n      this.expandedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.collapseNode = function (currLi, icon, e) {\n    var _this = this;\n\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    var colArgs;\n\n    if (this.isLoaded) {\n      colArgs = this.getExpandEvent(currLi, e);\n      this.trigger('nodeCollapsing', colArgs, function (observedArgs) {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          _this.nodeCollapseAction(currLi, icon, observedArgs);\n        }\n      });\n    } else {\n      this.nodeCollapseAction(currLi, icon, colArgs);\n    }\n  };\n\n  TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {\n    var _this = this;\n\n    removeClass([icon], COLLAPSIBLE);\n    addClass([icon], EXPANDABLE);\n    var start = 0;\n    var end = 0;\n    var proxy = this;\n    var ul = select('.' + PARENTITEM, currLi);\n    var liEle = currLi;\n    var activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n    if (this.isAnimate) {\n      this.aniObj.animate(ul, {\n        name: this.animation.collapse.effect,\n        duration: this.animation.collapse.duration,\n        timingFunction: this.animation.collapse.easing,\n        begin: function (args) {\n          liEle.style.overflow = 'hidden';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n          }\n\n          start = select('.' + TEXTWRAP, currLi).offsetHeight;\n          end = liEle.offsetHeight;\n        },\n        progress: function (args) {\n          proxy.animateHeight(args, start, end);\n        },\n        end: function (args) {\n          args.element.style.display = 'none';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n          }\n\n          _this.collapsedNode(liEle, ul, icon, colArgs);\n        }\n      });\n    } else {\n      this.collapsedNode(liEle, ul, icon, colArgs);\n    }\n  };\n\n  TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {\n    ul.style.display = 'none';\n    liEle.style.overflow = '';\n    liEle.style.height = '';\n    removeClass([icon], PROCESS);\n    this.removeExpand(liEle);\n\n    if (this.isLoaded) {\n      colArgs = this.getExpandEvent(liEle, null);\n      this.trigger('nodeCollapsed', colArgs);\n    }\n  };\n\n  TreeView.prototype.removeExpand = function (liEle, toRemove) {\n    if (toRemove) {\n      liEle.removeAttribute('aria-expanded');\n    } else {\n      this.disableExpandAttr(liEle);\n    }\n\n    var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.expandedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.disableExpandAttr = function (liEle) {\n    liEle.setAttribute('aria-expanded', 'false');\n    addClass([liEle], NODECOLLAPSED);\n  };\n\n  TreeView.prototype.setHeight = function (currLi, ul) {\n    ul.style.display = 'block';\n    ul.style.visibility = 'hidden';\n    currLi.style.height = currLi.offsetHeight + 'px';\n    ul.style.display = 'none';\n    ul.style.visibility = '';\n  };\n\n  TreeView.prototype.animateHeight = function (args, start, end) {\n    var remaining = (args.duration - args.timeStamp) / args.duration;\n    var currentHeight = (end - start) * remaining + start;\n    args.element.parentElement.style.height = currentHeight + 'px';\n  };\n\n  TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded) {\n    var _this = this;\n\n    var eicon = select('div.' + ICON, parentLi);\n\n    if (isNOU(eicon)) {\n      return;\n    }\n\n    this.showSpinner(eicon);\n    var childItems;\n    /* eslint-disable */\n\n    if (this.fields.dataSource instanceof DataManager) {\n      var level = this.parents(parentLi, '.' + PARENTITEM).length;\n      var mapper_2 = this.getChildFields(this.fields, level, 1);\n\n      if (isNOU(mapper_2) || isNOU(mapper_2.dataSource)) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      }\n\n      this.treeList.push('false');\n\n      if (this.fields.dataSource instanceof DataManager && this.isOffline) {\n        this.treeList.pop();\n        childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n        this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n      } else {\n        mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {\n          _this.treeList.pop();\n\n          childItems = e.result;\n\n          if (_this.dataType === 1) {\n            _this.dataType = 2;\n          }\n\n          _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n      this.currentLoadData = this.getSortedData(childItems);\n\n      if (isNOU(childItems) || childItems.length === 0) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      } else {\n        this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n        parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));\n        this.expandNode(parentLi, eicon, loaded);\n        this.setSelectionForChildNodes(childItems);\n        this.ensureCheckNode(parentLi);\n        this.finalizeNode(parentLi);\n        this.disableTreeNodes(childItems);\n        this.renderSubChild(parentLi, expandChild, loaded);\n      }\n    }\n  };\n\n  TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\n    this.currentLoadData = childItems;\n\n    if (isNOU(childItems) || childItems.length === 0) {\n      detach(eicon);\n      this.removeExpand(parentLi, true);\n    } else {\n      this.updateListProp(mapper);\n\n      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n        var id = parentLi.getAttribute('data-uid');\n        var nodeData = this.getNodeObject(id);\n        setValue('child', childItems, nodeData);\n      }\n\n      this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n      parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));\n      this.expandNode(parentLi, eicon, loaded);\n      this.setSelectionForChildNodes(childItems);\n      this.ensureCheckNode(parentLi);\n      this.finalizeNode(parentLi);\n      this.disableTreeNodes(childItems);\n      this.renderSubChild(parentLi, expandChild, loaded);\n    }\n\n    if (callback) {\n      callback();\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  };\n\n  TreeView.prototype.disableTreeNodes = function (childItems) {\n    var i = 0;\n\n    while (i < childItems.length) {\n      var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n      if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\n        this.doDisableAction([id]);\n      }\n\n      i++;\n    }\n  };\n  /**\r\n   * Sets the child Item in selectedState while rendering the child node\r\n   */\n\n\n  TreeView.prototype.setSelectionForChildNodes = function (nodes) {\n    var i;\n\n    for (i = 0; i < nodes.length; i++) {\n      var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;\n\n      if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\n        this.doSelectionAction();\n      }\n    }\n  };\n\n  TreeView.prototype.ensureCheckNode = function (element) {\n    if (this.showCheckBox) {\n      this.ele = this.checkedElement ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\n\n      if (this.autoCheck) {\n        this.ensureChildCheckState(element);\n        this.ensureParentCheckState(element);\n      }\n    }\n\n    this.currentLoadData = null;\n  };\n\n  TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {\n    if (nodeLevel === dataLevel) {\n      return mapper;\n    } else {\n      return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  };\n\n  TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {\n    var childData;\n\n    if (nodeLevel === dataLevel) {\n      return this.getChildMapper(mapper);\n    } else {\n      return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  };\n\n  TreeView.prototype.getChildMapper = function (mapper) {\n    return typeof mapper.child === 'string' || isNOU(mapper.child) ? mapper : mapper.child;\n  };\n\n  TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {\n    if (isRoot === void 0) {\n      isRoot = false;\n    }\n\n    var childNodes;\n\n    if (isNOU(obj)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      return this.getChildGroup(this.groupedData, parentId, isRoot);\n    } else {\n      if (typeof this.fields.child === 'string') {\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n          var dataId = getValue(this.fields.id, obj[i]);\n\n          if (dataId && dataId.toString() === parentId) {\n            return getValue(this.fields.child, obj[i]);\n          } else if (!isNOU(getValue(this.fields.child, obj[i]))) {\n            childNodes = this.getChildNodes(getValue(this.fields.child, obj[i]), parentId);\n\n            if (childNodes !== undefined) {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {\n    var childNodes;\n\n    if (isNOU(data)) {\n      return childNodes;\n    }\n\n    for (var i = 0, objlen = data.length; i < objlen; i++) {\n      if (!isNOU(data[i][0]) && !isNOU(getValue(this.fields.parentID, data[i][0]))) {\n        if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {\n          return data[i];\n        }\n      } else if (isRoot) {\n        return data[i];\n      } else {\n        return [];\n      }\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.renderSubChild = function (element, expandChild, loaded) {\n    if (expandChild) {\n      var cIcons = selectAll('.' + EXPANDABLE, element);\n\n      for (var i = 0, len = cIcons.length; i < len; i++) {\n        var icon = cIcons[i];\n\n        if (element.querySelector('.e-icons') !== cIcons[i]) {\n          var curLi = closest(icon, '.' + LISTITEM);\n          this.expandArgs = this.getExpandEvent(curLi, null);\n\n          if (loaded !== true) {\n            this.trigger('nodeExpanding', this.expandArgs);\n          }\n\n          this.renderChildNodes(curLi, expandChild, null, loaded);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.toggleSelect = function (li, e, multiSelect) {\n    if (!li.classList.contains('e-disable')) {\n      if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {\n        this.unselectNode(li, e);\n      } else {\n        this.selectNode(li, e, multiSelect);\n      }\n    }\n  };\n\n  TreeView.prototype.isActive = function (li) {\n    return li.classList.contains(ACTIVE) ? true : false;\n  };\n\n  TreeView.prototype.selectNode = function (li, e, multiSelect) {\n    var _this = this;\n\n    if (isNOU(li) || !this.allowMultiSelection && this.isActive(li) && !isNOU(e)) {\n      this.setFocusElement(li);\n      return;\n    }\n\n    var eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'select', e);\n      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeSelectAction(li, e, observedArgs, multiSelect);\n        }\n      });\n    } else {\n      this.nodeSelectAction(li, e, eventArgs, multiSelect);\n    }\n  };\n\n  TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {\n    if (!this.allowMultiSelection || !multiSelect && (!e || e && !e.ctrlKey)) {\n      this.removeSelectAll();\n    }\n\n    if (this.allowMultiSelection && e && e.shiftKey) {\n      if (!this.startNode) {\n        this.startNode = li;\n      }\n\n      var startIndex = this.liList.indexOf(this.startNode);\n      var endIndex = this.liList.indexOf(li);\n\n      if (startIndex > endIndex) {\n        var temp = startIndex;\n        startIndex = endIndex;\n        endIndex = temp;\n      }\n\n      for (var i = startIndex; i <= endIndex; i++) {\n        var currNode = this.liList[i];\n\n        if (isVisible(currNode) && !currNode.classList.contains('e-disable')) {\n          this.addSelect(currNode);\n        }\n      }\n    } else {\n      this.startNode = li;\n      this.addSelect(li);\n    }\n\n    this.setFocusElement(li);\n\n    if (this.isLoaded) {\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n    }\n  };\n\n  TreeView.prototype.unselectNode = function (li, e) {\n    var _this = this;\n\n    var eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'un-select', e);\n      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeUnselectAction(li, observedArgs);\n        }\n      });\n    } else {\n      this.nodeUnselectAction(li, eventArgs);\n    }\n  };\n\n  TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {\n    this.removeSelect(li);\n    this.setFocusElement(li);\n\n    if (this.isLoaded) {\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n    }\n  };\n\n  TreeView.prototype.setFocusElement = function (li) {\n    if (!isNOU(li)) {\n      var focusedNode = this.getFocusedNode();\n\n      if (focusedNode) {\n        removeClass([focusedNode], FOCUS);\n      }\n\n      addClass([li], FOCUS);\n      this.updateIdAttr(focusedNode, li);\n    }\n  };\n\n  TreeView.prototype.addSelect = function (liEle) {\n    liEle.setAttribute('aria-selected', 'true');\n    addClass([liEle], ACTIVE);\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.selectedNodes.indexOf(id) === -1) {\n      this.selectedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.removeSelect = function (liEle) {\n    if (this.allowMultiSelection) {\n      liEle.setAttribute('aria-selected', 'false');\n    } else {\n      liEle.removeAttribute('aria-selected');\n    }\n\n    removeClass([liEle], ACTIVE);\n    var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.selectedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.removeSelectAll = function () {\n    var selectedLI = this.element.querySelectorAll('.' + ACTIVE);\n\n    for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {\n      var ele = selectedLI_1[_i];\n\n      if (this.allowMultiSelection) {\n        ele.setAttribute('aria-selected', 'false');\n      } else {\n        ele.removeAttribute('aria-selected');\n      }\n    }\n\n    removeClass(selectedLI, ACTIVE);\n    this.setProperties({\n      selectedNodes: []\n    }, true);\n  };\n\n  TreeView.prototype.getSelectEvent = function (currLi, action, e) {\n    var nodeData = this.getNodeData(currLi);\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData\n    };\n  };\n\n  TreeView.prototype.setExpandOnType = function () {\n    this.expandOnType = this.expandOn === 'Auto' ? Browser.isDevice ? 'Click' : 'DblClick' : this.expandOn;\n  };\n\n  TreeView.prototype.expandHandler = function (e) {\n    var target = e.originalEvent.target;\n\n    if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || this.showCheckBox && closest(target, '.' + CHECKBOXWRAP)) {\n      return;\n    } else {\n      this.expandCollapseAction(closest(target, '.' + LISTITEM), e);\n    }\n  };\n\n  TreeView.prototype.expandCollapseAction = function (currLi, e) {\n    var icon = select('div.' + ICON, currLi);\n\n    if (!icon || icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      var classList = icon.classList;\n\n      if (classList.contains(EXPANDABLE)) {\n        this.expandAction(currLi, icon, e);\n      } else if (classList.contains(COLLAPSIBLE)) {\n        this.collapseNode(currLi, icon, e);\n      }\n    }\n  };\n\n  TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback) {\n    var _this = this;\n\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    if (this.isLoaded && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, e);\n      this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          _this.nodeExpandAction(currLi, icon, expandChild, callback);\n        }\n      });\n    } else {\n      this.nodeExpandAction(currLi, icon, expandChild, callback);\n    }\n  };\n\n  TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback) {\n    var ul = select('.' + PARENTITEM, currLi);\n\n    if (ul && ul.nodeName === 'UL') {\n      this.expandNode(currLi, icon);\n    } else {\n      this.isFirstRender = true;\n      this.renderChildNodes(currLi, expandChild, callback);\n      var liEles = selectAll('.' + LISTITEM, currLi);\n\n      for (var i = 0; i < liEles.length; i++) {\n        var id = this.getId(liEles[i]);\n\n        if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\n          var icon_1 = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEles[i]));\n\n          if (!isNOU(icon_1)) {\n            this.expandAction(liEles[i], icon_1, null);\n          }\n\n          this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.keyActionHandler = function (e) {\n    var _this = this;\n\n    var target = e.target;\n    var focusedNode = this.getFocusedNode();\n\n    if (target && target.classList.contains(INPUT)) {\n      var inpEle = target;\n\n      if (e.action === 'enter') {\n        inpEle.blur();\n        this.element.focus();\n        addClass([focusedNode], HOVER);\n      } else if (e.action === 'escape') {\n        inpEle.value = this.oldText;\n        inpEle.blur();\n        this.element.focus();\n        addClass([focusedNode], HOVER);\n      }\n\n      return;\n    }\n\n    e.preventDefault();\n    var eventArgs = {\n      cancel: false,\n      event: e,\n      node: focusedNode\n    };\n    this.trigger('keyPress', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        switch (e.action) {\n          case 'space':\n            if (_this.showCheckBox) {\n              _this.checkNode(e);\n            }\n\n            break;\n\n          case 'moveRight':\n            _this.openNode(_this.enableRtl ? false : true, e);\n\n            break;\n\n          case 'moveLeft':\n            _this.openNode(_this.enableRtl ? true : false, e);\n\n            break;\n\n          case 'shiftDown':\n            _this.shiftKeySelect(true, e);\n\n            break;\n\n          case 'moveDown':\n          case 'ctrlDown':\n          case 'csDown':\n            _this.navigateNode(true);\n\n            break;\n\n          case 'shiftUp':\n            _this.shiftKeySelect(false, e);\n\n            break;\n\n          case 'moveUp':\n          case 'ctrlUp':\n          case 'csUp':\n            _this.navigateNode(false);\n\n            break;\n\n          case 'home':\n          case 'shiftHome':\n          case 'ctrlHome':\n          case 'csHome':\n            _this.navigateRootNode(true);\n\n            break;\n\n          case 'end':\n          case 'shiftEnd':\n          case 'ctrlEnd':\n          case 'csEnd':\n            _this.navigateRootNode(false);\n\n            break;\n\n          case 'enter':\n          case 'ctrlEnter':\n          case 'shiftEnter':\n          case 'csEnter':\n            _this.toggleSelect(focusedNode, e);\n\n            break;\n\n          case 'f2':\n            if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {\n              _this.createTextbox(focusedNode, e);\n            }\n\n            break;\n\n          case 'ctrlA':\n            if (_this.allowMultiSelection) {\n              var sNodes = selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);\n\n              _this.selectGivenNodes(sNodes);\n            }\n\n            break;\n        }\n      }\n    });\n  };\n\n  TreeView.prototype.navigateToFocus = function (isUp) {\n    var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\n    var pos = focusNode.getBoundingClientRect();\n    var parent = this.getScrollParent(this.element);\n\n    if (!isNOU(parent)) {\n      var parentPos = parent.getBoundingClientRect();\n\n      if (pos.bottom > parentPos.bottom) {\n        parent.scrollTop += pos.bottom - parentPos.bottom;\n      } else if (pos.top < parentPos.top) {\n        parent.scrollTop -= parentPos.top - pos.top;\n      }\n    }\n\n    var isVisible = this.isVisibleInViewport(focusNode);\n\n    if (!isVisible) {\n      focusNode.scrollIntoView(isUp);\n    }\n  };\n\n  TreeView.prototype.isVisibleInViewport = function (txtWrap) {\n    var pos = txtWrap.getBoundingClientRect();\n    return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);\n  };\n\n  TreeView.prototype.getScrollParent = function (node) {\n    if (isNOU(node)) {\n      return null;\n    }\n\n    return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);\n  };\n\n  TreeView.prototype.shiftKeySelect = function (isTowards, e) {\n    if (this.allowMultiSelection) {\n      var focusedNode = this.getFocusedNode();\n      var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\n      this.removeHover();\n      this.setFocusElement(nextNode);\n      this.toggleSelect(nextNode, e, false);\n      this.navigateToFocus(!isTowards);\n    } else {\n      this.navigateNode(isTowards);\n    }\n  };\n\n  TreeView.prototype.checkNode = function (e) {\n    var focusedNode = this.getFocusedNode();\n    var checkWrap = select('.' + CHECKBOXWRAP, focusedNode);\n    var isChecked = select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\n\n    if (!focusedNode.classList.contains('e-disable')) {\n      if (focusedNode.getElementsByClassName(\"e-checkbox-disabled\").length == 0) {\n        this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\n      }\n    }\n  };\n\n  TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {\n    var _this = this;\n\n    var currLi = closest(checkWrap, '.' + LISTITEM);\n    this.checkActionNodes = [];\n    var ariaState = !isCheck ? 'true' : 'false';\n\n    if (!isNOU(ariaState)) {\n      checkWrap.setAttribute('aria-checked', ariaState);\n    }\n\n    var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\n    this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\n      }\n    });\n  };\n\n  TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {\n    if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\n      this.checkedElement.push(li.getAttribute('data-uid'));\n\n      if (this.autoCheck) {\n        var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\n        child !== null ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;\n      }\n    }\n\n    this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\n\n    if (this.autoCheck) {\n      this.ensureChildCheckState(li);\n      this.ensureParentCheckState(closest(closest(li, '.' + PARENTITEM), '.' + LISTITEM));\n      var doCheck = void 0;\n\n      if (eventArgs.action === 'check') {\n        doCheck = true;\n      } else if (eventArgs.action === 'uncheck') {\n        doCheck = false;\n      }\n\n      this.ensureStateChange(li, doCheck);\n    }\n\n    this.nodeCheckedEvent(checkWrap, isCheck, e);\n  };\n  /**\r\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM\r\n   */\n\n\n  TreeView.prototype.ensureStateChange = function (li, doCheck) {\n    var childElement = select('.' + PARENTITEM, li);\n    var parentIndex = li.getAttribute('data-uid');\n    var mapper = this.fields;\n\n    if (this.dataType === 1 && this.autoCheck) {\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', parentIndex, true));\n\n      for (var i = 0; i < resultData.length; i++) {\n        var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n        var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;\n\n        if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\n          this.checkedNodes.push(resultId);\n          var childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n\n          if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\n          }\n\n          if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {\n            var childNodes = this.getChildNodes(this.treeData, resultId);\n            this.getChildItems(childNodes, doCheck);\n\n            if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n            }\n          }\n        } else {\n          var childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n        }\n      }\n    } else if (this.dataType === 1 && !this.autoCheck) {\n      if (!doCheck) {\n        var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (var i = 0; i < checkedData.length; i++) {\n          var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(id) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n        }\n\n        this.checkedNodes = [];\n      } else {\n        for (var i = 0; i < this.treeData.length; i++) {\n          var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(checkedId) === -1) {\n            this.checkedNodes.push(checkedId);\n          }\n        }\n      }\n    } else {\n      var childItems = this.getChildNodes(this.treeData, parentIndex);\n\n      if (childItems) {\n        this.childStateChange(childItems, parentIndex, childElement, doCheck);\n      }\n    }\n  };\n\n  TreeView.prototype.getChildItems = function (childItems, doCheck) {\n    for (var i = 0; i < childItems.length; i++) {\n      var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n      var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\n      }\n\n      if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\n        this.checkedNodes.push(childId);\n      }\n\n      if (childIsCheck === 'true' && !doCheck) {\n        this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\n      }\n\n      var subChildItems = this.getChildNodes(this.treeData, childId);\n\n      if (subChildItems.length > 0) {\n        this.getChildItems(subChildItems, doCheck);\n      }\n    }\n  };\n  /**\r\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\r\n   */\n\n\n  TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {\n    for (var i = 0; i < childItems.length; i++) {\n      var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';\n      var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.autoCheck) {\n        if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n          this.checkedNodes.push(checkedChild);\n\n          if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          }\n        }\n      } else if (!this.autoCheck) {\n        if (!doCheck) {\n          if (this.checkedNodes.indexOf(checkedChild) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          this.checkedNodes = [];\n        } else {\n          if (this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n      }\n\n      var subChild = this.getChildNodes([childItems[i]], checkedChild);\n\n      if (subChild) {\n        this.childStateChange(subChild, parent, childElement, doCheck);\n      }\n    }\n  }; //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\n\n\n  TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {\n    if (child) {\n      for (var length_1 = 0; length_1 < child.length; length_1++) {\n        var childId = getValue(this.fields.id, child[length_1]);\n        var check = this.element.querySelector('[data-uid=\"' + childId + '\"]'); //Validates isChecked case while no UI interaction has been performed on the node or it's parent\n\n        if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\n          if (check === null && !isNOU(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {\n            child[length_1][this.fields.isChecked] !== false || checked === 2 ? newCheck.push(childId.toString()) : childCheck = null;\n            childCheck = child[length_1][this.fields.isChecked] !== false || checked === 2 ? 0 : null;\n          }\n        } //Pushes child checked node done thro' UI interaction\n\n\n        if (newCheck.indexOf(childId.toString()) === -1 && isNOU(checked)) {\n          newCheck.push(childId.toString());\n        }\n\n        var hierChildId = getValue(this.fields.child.toString(), child[length_1]); //Gets if any next level children are available for child nodes\n\n        if (getValue(this.fields.hasChildren, child[length_1]) === true || hierChildId) {\n          var id = getValue(this.fields.id, child[length_1]);\n          var childId_1 = void 0;\n\n          if (this.dataType === 1) {\n            childId_1 = this.getChildNodes(this.treeData, id.toString());\n          } else {\n            childId_1 = hierChildId;\n          }\n\n          if (childId_1) {\n            isNOU(validateCheck) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) : this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);\n            childCheck = null;\n          }\n        }\n\n        childCheck = null;\n      }\n    }\n  };\n\n  TreeView.prototype.openNode = function (toBeOpened, e) {\n    var focusedNode = this.getFocusedNode();\n    var icon = select('div.' + ICON, focusedNode);\n\n    if (toBeOpened) {\n      if (!icon) {\n        return;\n      } else if (icon.classList.contains(EXPANDABLE)) {\n        this.expandAction(focusedNode, icon, e);\n      } else {\n        this.focusNextNode(focusedNode, true);\n      }\n    } else {\n      if (icon && icon.classList.contains(COLLAPSIBLE)) {\n        this.collapseNode(focusedNode, icon, e);\n      } else {\n        var parentLi = closest(closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\n\n        if (!parentLi) {\n          return;\n        } else {\n          if (!parentLi.classList.contains('e-disable')) {\n            this.setFocus(focusedNode, parentLi);\n            this.navigateToFocus(true);\n          }\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.navigateNode = function (isTowards) {\n    var focusedNode = this.getFocusedNode();\n    this.focusNextNode(focusedNode, isTowards);\n  };\n\n  TreeView.prototype.navigateRootNode = function (isBackwards) {\n    var focusedNode = this.getFocusedNode();\n    var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\n\n    if (!rootNode.classList.contains('e-disable')) {\n      this.setFocus(focusedNode, rootNode);\n      this.navigateToFocus(isBackwards);\n    }\n  };\n\n  TreeView.prototype.getFocusedNode = function () {\n    var selectedItem;\n    var fNode = select('.' + LISTITEM + '.' + FOCUS, this.element);\n\n    if (isNOU(fNode)) {\n      selectedItem = select('.' + LISTITEM, this.element);\n    }\n\n    return isNOU(fNode) ? isNOU(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;\n  };\n\n  TreeView.prototype.focusNextNode = function (li, isTowards) {\n    var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\n    this.setFocus(li, nextNode);\n    this.navigateToFocus(!isTowards);\n\n    if (nextNode.classList.contains('e-disable')) {\n      var lastChild = nextNode.lastChild;\n\n      if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\n        this.focusNextNode(nextNode, true);\n      } else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\n        this.focusNextNode(nextNode, false);\n      } else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {\n        this.focusNextNode(nextNode, false);\n      } else {\n        this.focusNextNode(nextNode, isTowards);\n      }\n    }\n  };\n\n  TreeView.prototype.getNextNode = function (li) {\n    var index = this.liList.indexOf(li);\n    var nextNode;\n\n    do {\n      index++;\n      nextNode = this.liList[index];\n\n      if (isNOU(nextNode)) {\n        return li;\n      }\n    } while (!isVisible(nextNode));\n\n    return nextNode;\n  };\n\n  TreeView.prototype.getPrevNode = function (li) {\n    var index = this.liList.indexOf(li);\n    var prevNode;\n\n    do {\n      index--;\n      prevNode = this.liList[index];\n\n      if (isNOU(prevNode)) {\n        return li;\n      }\n    } while (!isVisible(prevNode));\n\n    return prevNode;\n  };\n\n  TreeView.prototype.getRootNode = function () {\n    var index = 0;\n    var rootNode;\n\n    do {\n      rootNode = this.liList[index];\n      index++;\n    } while (!isVisible(rootNode));\n\n    return rootNode;\n  };\n\n  TreeView.prototype.getEndNode = function () {\n    var index = this.liList.length - 1;\n    var endNode;\n\n    do {\n      endNode = this.liList[index];\n      index--;\n    } while (!isVisible(endNode));\n\n    return endNode;\n  };\n\n  TreeView.prototype.setFocus = function (preNode, nextNode) {\n    removeClass([preNode], [HOVER, FOCUS]);\n\n    if (!nextNode.classList.contains('e-disable')) {\n      addClass([nextNode], [HOVER, FOCUS]);\n      this.updateIdAttr(preNode, nextNode);\n    }\n  };\n\n  TreeView.prototype.updateIdAttr = function (preNode, nextNode) {\n    this.element.removeAttribute('aria-activedescendant');\n\n    if (preNode) {\n      preNode.removeAttribute('id');\n    }\n\n    nextNode.setAttribute('id', this.element.id + '_active');\n    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n  };\n\n  TreeView.prototype.focusIn = function () {\n    if (!this.mouseDownStatus) {\n      addClass([this.getFocusedNode()], HOVER);\n    }\n\n    this.mouseDownStatus = false;\n  };\n\n  TreeView.prototype.focusOut = function () {\n    removeClass([this.getFocusedNode()], HOVER);\n  };\n\n  TreeView.prototype.onMouseOver = function (e) {\n    var target = e.target;\n    var classList = target.classList;\n    var currentLi = closest(target, '.' + LISTITEM);\n\n    if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {\n      this.removeHover();\n      return;\n    } else {\n      if (currentLi && !currentLi.classList.contains('e-disable')) {\n        this.setHover(currentLi);\n      }\n    }\n  };\n\n  TreeView.prototype.setHover = function (li) {\n    if (!li.classList.contains(HOVER)) {\n      this.removeHover();\n      addClass([li], HOVER);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.onMouseLeave = function (e) {\n    this.removeHover();\n  };\n\n  TreeView.prototype.removeHover = function () {\n    var hoveredNode = selectAll('.' + HOVER, this.element);\n\n    if (hoveredNode && hoveredNode.length) {\n      removeClass(hoveredNode, HOVER);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.getNodeData = function (currLi, fromDS) {\n    if (!isNOU(currLi) && currLi.classList.contains(LISTITEM) && !isNOU(closest(currLi, '.' + CONTROL)) && closest(currLi, '.' + CONTROL).classList.contains(ROOT)) {\n      var id = currLi.getAttribute('data-uid');\n      var text = this.getText(currLi, fromDS);\n      var pNode = closest(currLi.parentNode, '.' + LISTITEM);\n      var pid = pNode ? pNode.getAttribute('data-uid') : null;\n      var selected = currLi.classList.contains(ACTIVE);\n      var expanded = currLi.getAttribute('aria-expanded') === 'true' ? true : false;\n      var hasChildren = currLi.getAttribute('aria-expanded') !== null ? true : (select('.' + EXPANDABLE, currLi) || select('.' + COLLAPSIBLE, currLi)) != null ? true : false;\n      var checked = null;\n\n      if (this.showCheckBox) {\n        checked = select('.' + CHECKBOXWRAP, currLi).getAttribute('aria-checked');\n      }\n\n      return {\n        id: id,\n        text: text,\n        parentID: pid,\n        selected: selected,\n        expanded: expanded,\n        isChecked: checked,\n        hasChildren: hasChildren\n      };\n    }\n\n    return {\n      id: '',\n      text: '',\n      parentID: '',\n      selected: false,\n      expanded: false,\n      isChecked: '',\n      hasChildren: false\n    };\n  };\n\n  TreeView.prototype.getText = function (currLi, fromDS) {\n    if (fromDS) {\n      var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\n      var level = parseFloat(currLi.getAttribute('aria-level'));\n      var nodeFields = this.getFields(this.fields, level, 1);\n      return getValue(nodeFields.text, nodeData);\n    }\n\n    return select('.' + LISTTEXT, currLi).textContent;\n  };\n\n  TreeView.prototype.getExpandEvent = function (currLi, e) {\n    var nodeData = this.getNodeData(currLi);\n    return {\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData,\n      event: e\n    };\n  };\n\n  TreeView.prototype.renderNodeTemplate = function (data, textEle, dataId) {\n    var tempArr = this.nodeTemplateFn(data, this, 'nodeTemplate' + dataId, this.element.id + 'nodeTemplate', this.isStringTemplate, undefined, textEle);\n\n    if (tempArr) {\n      tempArr = Array.prototype.slice.call(tempArr);\n      append(tempArr, textEle);\n    }\n  };\n\n  TreeView.prototype.destroyTemplate = function (liEle) {\n    this.clearTemplate(['nodeTemplate' + liEle.getAttribute('data-uid')]);\n  };\n\n  TreeView.prototype.reRenderNodes = function () {\n    this.updateListProp(this.fields);\n\n    if (Browser.isIE) {\n      this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    } else {\n      this.element.innerHTML = '';\n    }\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      this.clearTemplate();\n    }\n\n    this.setTouchClass();\n    this.setProperties({\n      selectedNodes: [],\n      checkedNodes: [],\n      expandedNodes: []\n    }, true);\n    this.checkedElement = [];\n    this.isLoaded = false;\n    this.setDataBinding(true);\n  };\n\n  TreeView.prototype.setCssClass = function (oldClass, newClass) {\n    if (!isNOU(oldClass) && oldClass !== '') {\n      removeClass([this.element], oldClass.split(' '));\n    }\n\n    if (!isNOU(newClass) && newClass !== '') {\n      addClass([this.element], newClass.split(' '));\n    }\n  };\n\n  TreeView.prototype.editingHandler = function (e) {\n    var target = e.target;\n\n    if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\n      return;\n    } else {\n      var liEle = closest(target, '.' + LISTITEM);\n      this.createTextbox(liEle, e);\n    }\n  };\n\n  TreeView.prototype.createTextbox = function (liEle, e) {\n    var _this = this;\n\n    var oldInpEle = select('.' + TREEINPUT, this.element);\n\n    if (oldInpEle) {\n      oldInpEle.blur();\n    }\n\n    var textEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    var innerEle = this.createElement('input', {\n      className: TREEINPUT,\n      attrs: {\n        value: this.oldText\n      }\n    });\n    var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\n    this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        var inpWidth = textEle.offsetWidth + 5;\n        var style = 'width:' + inpWidth + 'px';\n        addClass([liEle], EDITING);\n\n        if (!isNOU(_this.nodeTemplateFn)) {\n          _this.destroyTemplate(liEle);\n        }\n\n        textEle.innerHTML = eventArgs.innerHtml;\n        var inpEle = select('.' + TREEINPUT, textEle);\n        _this.inputObj = Input.createInput({\n          element: inpEle,\n          properties: {\n            enableRtl: _this.enableRtl\n          }\n        }, _this.createElement);\n\n        _this.inputObj.container.setAttribute('style', style);\n\n        inpEle.focus();\n        var inputEle = inpEle;\n        inputEle.setSelectionRange(0, inputEle.value.length);\n\n        _this.wireInputEvents(inpEle);\n      }\n    });\n  };\n\n  TreeView.prototype.updateOldText = function (liEle) {\n    var id = liEle.getAttribute('data-uid');\n    this.editData = this.getNodeObject(id);\n    var level = parseFloat(liEle.getAttribute('aria-level'));\n    this.editFields = this.getFields(this.fields, level, 1);\n    this.oldText = getValue(this.editFields.text, this.editData);\n  };\n\n  TreeView.prototype.inputFocusOut = function (e) {\n    if (!select('.' + TREEINPUT, this.element)) {\n      return;\n    }\n\n    var target = e.target;\n    var newText = target.value;\n    var txtEle = closest(target, '.' + LISTTEXT);\n    var liEle = closest(target, '.' + LISTITEM);\n    detach(this.inputObj.container);\n\n    if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n      this.crudOperation('update', null, liEle, newText, null, null, true);\n    } else {\n      this.appendNewText(liEle, txtEle, newText, true);\n    }\n  };\n\n  TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {\n    var _this = this;\n\n    var eventArgs = this.getEditEvent(liEle, newText, null);\n    this.trigger('nodeEdited', eventArgs, function (observedArgs) {\n      newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\n\n      _this.updateText(liEle, txtEle, newText, isInput);\n\n      if (observedArgs.oldText !== newText) {\n        _this.triggerEvent();\n      }\n    });\n  };\n\n  TreeView.prototype.updateText = function (liEle, txtEle, newText, isInput) {\n    var newData = setValue(this.editFields.text, newText, this.editData);\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      txtEle.innerText = '';\n      var dataId = liEle.getAttribute('data-uid');\n      this.renderNodeTemplate(newData, txtEle, dataId);\n      this.renderReactTemplates();\n    } else {\n      txtEle.innerText = newText;\n    }\n\n    if (isInput) {\n      removeClass([liEle], EDITING);\n      txtEle.focus();\n    }\n\n    if (this.allowTextWrap) {\n      this.calculateWrap(liEle);\n    }\n  };\n\n  TreeView.prototype.getElement = function (ele) {\n    if (isNOU(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return this.element.querySelector('[data-uid=\"' + ele + '\"]');\n    } else if (typeof ele === 'object') {\n      return getElement(ele);\n    } else {\n      return null;\n    }\n  };\n\n  TreeView.prototype.getId = function (ele) {\n    if (isNOU(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return ele;\n    } else if (typeof ele === 'object') {\n      return getElement(ele).getAttribute('data-uid');\n    } else {\n      return null;\n    }\n  };\n\n  TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {\n    var data = this.getNodeData(liEle);\n    return {\n      cancel: false,\n      newText: newText,\n      node: liEle,\n      nodeData: data,\n      oldText: this.oldText,\n      innerHtml: inpEle\n    };\n  };\n\n  TreeView.prototype.getNodeObject = function (id) {\n    var childNodes;\n\n    if (isNOU(id)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {\n        var dataId = getValue(this.fields.id, this.treeData[i]);\n\n        if (!isNOU(this.treeData[i]) && !isNOU(dataId) && dataId.toString() === id) {\n          return this.treeData[i];\n        }\n      }\n    } else {\n      return this.getChildNodeObject(this.treeData, this.fields, id);\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {\n    var newList;\n\n    if (isNOU(obj)) {\n      return newList;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var dataId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && dataId && dataId.toString() === id) {\n        return obj[i];\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childData = getValue(mapper.child, obj[i]);\n        newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var child = 'child';\n        newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return newList;\n  };\n\n  TreeView.prototype.setDragAndDrop = function (toBind) {\n    if (toBind && !this.disabled) {\n      this.initializeDrag();\n    } else {\n      this.destroyDrag();\n    }\n  };\n\n  TreeView.prototype.initializeDrag = function () {\n    var _this = this;\n\n    var virtualEle;\n    var proxy = this;\n    this.dragObj = new Draggable(this.element, {\n      enableTailMode: true,\n      enableAutoScroll: true,\n      dragArea: this.dragArea,\n      dragTarget: '.' + TEXTWRAP,\n      helper: function (e) {\n        _this.dragTarget = e.sender.target;\n        var dragRoot = closest(_this.dragTarget, '.' + ROOT);\n        var dragWrap = closest(_this.dragTarget, '.' + TEXTWRAP);\n        _this.dragLi = closest(_this.dragTarget, '.' + LISTITEM);\n\n        if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {\n          dragWrap = _this.dragTarget.nextElementSibling;\n        }\n\n        if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) || _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {\n          return false;\n        }\n\n        var cloneEle = dragWrap.cloneNode(true);\n\n        if (isNOU(select('div.' + ICON, cloneEle))) {\n          var icon = proxy.createElement('div', {\n            className: ICON + ' ' + EXPANDABLE\n          });\n          cloneEle.insertBefore(icon, cloneEle.children[0]);\n        }\n\n        var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL : '');\n        virtualEle = proxy.createElement('div', {\n          className: cssClass\n        });\n        virtualEle.appendChild(cloneEle);\n        var nLen = _this.selectedNodes.length;\n\n        if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {\n          var cNode = proxy.createElement('span', {\n            className: DROPCOUNT,\n            innerHTML: '' + nLen\n          });\n          virtualEle.appendChild(cNode);\n        }\n\n        document.body.appendChild(virtualEle);\n        document.body.style.cursor = '';\n        _this.dragData = _this.getNodeData(_this.dragLi);\n        return virtualEle;\n      },\n      dragStart: function (e) {\n        addClass([_this.element], DRAGGING);\n        var listItem = closest(e.target, '.e-list-item');\n        var level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);\n\n        if (eventArgs.draggedNode.classList.contains(EDITING)) {\n          _this.dragObj.intDestroy(e.event);\n\n          _this.dragCancelAction(virtualEle);\n        } else {\n          _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {\n            if (observedArgs.cancel) {\n              _this.dragObj.intDestroy(e.event);\n\n              _this.dragCancelAction(virtualEle);\n            } else {\n              _this.dragStartAction = true;\n            }\n          });\n        }\n      },\n      drag: function (e) {\n        _this.dragObj.setProperties({\n          cursorAt: {\n            top: !isNOU(e.event.targetTouches) || Browser.isDevice ? 60 : -20\n          }\n        });\n\n        _this.dragAction(e, virtualEle);\n      },\n      dragStop: function (e) {\n        removeClass([_this.element], DRAGGING);\n\n        _this.removeVirtualEle();\n\n        var dropTarget = e.target;\n        var preventTargetExpand = false;\n        var dropRoot = closest(dropTarget, '.' + DROPPABLE);\n        var isHelperElement = true;\n\n        if (!dropTarget || !dropRoot) {\n          detach(e.helper);\n          document.body.style.cursor = '';\n          isHelperElement = false;\n        }\n\n        var listItem = closest(dropTarget, '.e-list-item');\n        var level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);\n\n        eventArgs.preventTargetExpand = preventTargetExpand;\n\n        _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {\n          _this.dragParent = observedArgs.draggedParentNode;\n          _this.preventExpand = observedArgs.preventTargetExpand;\n\n          if (observedArgs.cancel) {\n            if (e.helper.parentNode) {\n              detach(e.helper);\n            }\n\n            document.body.style.cursor = '';\n            isHelperElement = false;\n          }\n\n          _this.dragStartAction = false;\n        });\n      }\n    });\n    this.dropObj = new Droppable(this.element, {\n      out: function (e) {\n        if (!isNOU(e) && !e.target.classList.contains(SIBLING)) {\n          document.body.style.cursor = 'not-allowed';\n        }\n      },\n      over: function (e) {\n        document.body.style.cursor = '';\n      },\n      drop: function (e) {\n        _this.dropAction(e);\n      }\n    });\n  };\n\n  TreeView.prototype.dragCancelAction = function (virtualEle) {\n    detach(virtualEle);\n    removeClass([this.element], DRAGGING);\n    this.dragStartAction = false;\n  };\n\n  TreeView.prototype.dragAction = function (e, virtualEle) {\n    var dropRoot = closest(e.target, '.' + DROPPABLE);\n    var dropWrap = closest(e.target, '.' + TEXTWRAP);\n    var icon = select('div.' + ICON, virtualEle);\n    removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\n    this.removeVirtualEle();\n    document.body.style.cursor = '';\n    var classList = e.target.classList;\n\n    if (this.fullRowSelect && !dropWrap && !isNOU(classList) && classList.contains(FULLROW)) {\n      dropWrap = e.target.nextElementSibling;\n    }\n\n    if (dropRoot) {\n      var dropLi = closest(e.target, '.' + LISTITEM);\n      var checkWrapper = closest(e.target, '.' + CHECKBOXWRAP);\n      var collapse = closest(e.target, '.' + COLLAPSIBLE);\n      var expand = closest(e.target, '.' + EXPANDABLE);\n\n      if (!dropRoot.classList.contains(ROOT) || dropWrap && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        if (this.hasTemplate && dropLi) {\n          var templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n\n          if (e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {\n            var index = this.fullRowSelect ? 1 : 0;\n            this.appendIndicator(dropLi, icon, index);\n          } else if (e && !expand && !collapse && !checkWrapper && templateTarget && e.event.offsetY > templateTarget.offsetHeight - 10 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {\n            var index = this.fullRowSelect ? 2 : 1;\n            this.appendIndicator(dropLi, icon, index);\n          } else {\n            addClass([icon], DROPIN);\n          }\n        } else {\n          if (dropLi && e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {\n            var index = this.fullRowSelect ? 1 : 0;\n            this.appendIndicator(dropLi, icon, index);\n          } else if (dropLi && e && !expand && !collapse && e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10 && !checkWrapper || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {\n            var index = this.fullRowSelect ? 2 : 1;\n            this.appendIndicator(dropLi, icon, index);\n          } else {\n            addClass([icon], DROPIN);\n          }\n        }\n      } else if (e.target.nodeName === 'LI' && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        addClass([icon], DROPNEXT);\n        this.renderVirtualEle(e);\n      } else if (e.target.classList.contains(SIBLING)) {\n        addClass([icon], DROPNEXT);\n      } else {\n        addClass([icon], DROPOUT);\n      }\n    } else {\n      addClass([icon], NODROP);\n      document.body.style.cursor = 'not-allowed';\n    }\n\n    var listItem = closest(e.target, '.e-list-item');\n    var level;\n\n    if (listItem) {\n      level = parseInt(listItem.getAttribute('aria-level'), 10);\n    }\n\n    var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\n\n    if (eventArgs.dropIndicator) {\n      removeClass([icon], eventArgs.dropIndicator);\n    }\n\n    this.trigger('nodeDragging', eventArgs);\n\n    if (eventArgs.dropIndicator) {\n      addClass([icon], eventArgs.dropIndicator);\n    }\n  };\n\n  TreeView.prototype.appendIndicator = function (dropLi, icon, index) {\n    addClass([icon], DROPNEXT);\n    var virEle = this.createElement('div', {\n      className: SIBLING\n    });\n    dropLi.insertBefore(virEle, dropLi.children[index]);\n  };\n  /* eslint-disable */\n\n\n  TreeView.prototype.dropAction = function (e) {\n    var offsetY = e.event.offsetY;\n    var dropTarget = e.target;\n    var dragObj;\n    var level;\n    var drop = false;\n    var dragInstance;\n    dragInstance = e.dragData.draggable;\n\n    for (var i = 0; i < dragInstance.ej2_instances.length; i++) {\n      if (dragInstance.ej2_instances[i] instanceof TreeView_1) {\n        dragObj = dragInstance.ej2_instances[i];\n        break;\n      }\n    }\n\n    if (dragObj && dragObj.dragTarget) {\n      var dragTarget = dragObj.dragTarget;\n      var dragLi = closest(dragTarget, '.' + LISTITEM);\n      var dropLi = closest(dropTarget, '.' + LISTITEM);\n\n      if (dropLi == null && dropTarget.classList.contains(ROOT)) {\n        dropLi = dropTarget.firstElementChild;\n      }\n\n      detach(e.droppedElement);\n      document.body.style.cursor = '';\n\n      if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        if (this.fields.dataSource instanceof DataManager === false) {\n          this.preventExpand = false;\n        }\n\n        return;\n      }\n\n      if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\n        var sNodes = selectAll('.' + ACTIVE, dragObj.element);\n\n        if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\n          for (var i = sNodes.length - 1; i >= 0; i--) {\n            if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n          }\n        } else {\n          for (var i = 0; i < sNodes.length; i++) {\n            if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n          }\n        }\n      } else {\n        this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\n      }\n\n      level = parseInt(dragLi.getAttribute('aria-level'), 10);\n      drop = true;\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\n\n    if (dragObj.element.id !== this.element.id) {\n      dragObj.triggerEvent();\n    }\n\n    this.triggerEvent();\n  };\n\n  TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\n    var checkWrapper = closest(dropTarget, '.' + CHECKBOXWRAP);\n    var collapse = closest(e.target, '.' + COLLAPSIBLE);\n    var expand = closest(e.target, '.' + EXPANDABLE);\n\n    if (!dragLi.classList.contains('e-disable') && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {\n      if (dropTarget.nodeName === 'LI') {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\n        if (dropTarget.firstElementChild.nodeName === 'UL') {\n          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n        }\n      } else if (dropTarget.classList.contains('e-icon-collapsible') || dropTarget.classList.contains('e-icon-expandable')) {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else {\n        this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);\n      }\n    } else {\n      this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);\n    }\n  };\n\n  TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {\n    var dropUl = closest(dropLi, '.' + PARENTITEM);\n    var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    var pre;\n\n    if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    } else if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      if (e.event.offsetY < 5 || e.event.offsetX < 3) {\n        pre = true;\n      } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {\n        pre = false;\n      }\n    }\n\n    if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      var target = e.target.closest('li');\n      dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\n    } else {\n      dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\n    }\n\n    this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  };\n\n  TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck) {\n    var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    var dropParentUl = closest(dropLi, '.' + PARENTITEM);\n    var templateTarget;\n\n    if (e && e.target) {\n      templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n    }\n\n    if (e && pos < 7 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi);\n      this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\n    } else if (e && e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10 && !isCheck && !this.hasTemplate) {\n      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n    } else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n    } else {\n      var dropUl = this.expandParent(dropLi);\n      var childLi = dropUl.childNodes[index];\n      dropUl.insertBefore(dragLi, childLi);\n      this.moveData(dragLi, childLi, dropUl, true, dragObj);\n    }\n\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  };\n\n  TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {\n    var dropParentLi = closest(dropUl, '.' + LISTITEM);\n    var id = this.getId(dragLi);\n    var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\n    var refId = this.getId(dropLi);\n    var index = this.getDataPos(this.treeData, this.fields, refId);\n    var parentId = this.getId(dropParentLi);\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\n      var pos = isNOU(index) ? this.treeData.length : pre ? index : index + 1;\n\n      if (isNOU(parentId) && !this.hasPid) {\n        delete removedData[0][this.fields.parentID];\n      } else {\n        var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\n        setValue(this.fields.parentID, currPid, removedData[0]);\n      }\n\n      this.treeData.splice(pos, 0, removedData[0]);\n\n      if (dragObj.element.id !== this.element.id) {\n        var childData = dragObj.removeChildNodes(id);\n        pos++;\n\n        for (var i = 0, len = childData.length; i < len; i++) {\n          this.treeData.splice(pos, 0, childData[i]);\n          pos++;\n        }\n\n        dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\n    }\n  };\n\n  TreeView.prototype.expandParent = function (dropLi) {\n    var dropIcon = select('div.' + ICON, dropLi);\n\n    if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\n      this.expandAction(dropLi, dropIcon, null);\n    }\n\n    var dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (this.preventExpand === true && !dropUl && dropIcon) {\n      this.renderChildNodes(dropLi);\n    }\n\n    dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (!isNOU(dropUl) && this.preventExpand === true) {\n      dropUl.style.display = 'none';\n    }\n\n    if (!isNOU(dropUl) && this.preventExpand === false) {\n      dropUl.style.display = 'block';\n    }\n\n    if (isNOU(dropUl) && this.preventExpand === true) {\n      if (isNOU(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      var icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        icon.classList.add('e-icon-expandable');\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n\n      if (icon) {\n        removeClass([icon], COLLAPSIBLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      dropLi.setAttribute('aria-expanded', 'false');\n      dropUl.style.display = 'none';\n    }\n\n    if (isNOU(dropUl)) {\n      this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\n\n      if (isNOU(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n      }\n\n      var icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        removeClass([icon], EXPANDABLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n        icon = select('div.' + ICON, dropLi);\n        removeClass([icon], EXPANDABLE);\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n      this.addExpand(dropLi);\n      this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\n    }\n\n    return dropUl;\n  };\n\n  TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {\n    if (dragParentLi && dragParentUl.childElementCount === 0) {\n      var dragIcon = select('div.' + ICON, dragParentLi);\n      detach(dragParentUl);\n      detach(dragIcon);\n      var parentId = this.getId(dragParentLi);\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\n      this.removeExpand(dragParentLi, true);\n    }\n  };\n\n  TreeView.prototype.updateAriaLevel = function (dragLi) {\n    var level = this.parents(dragLi, '.' + PARENTITEM).length;\n    dragLi.setAttribute('aria-level', '' + level);\n    this.updateChildAriaLevel(select('.' + PARENTITEM, dragLi), level + 1);\n  };\n\n  TreeView.prototype.updateChildAriaLevel = function (element, level) {\n    if (!isNOU(element)) {\n      var cNodes = element.childNodes;\n\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var liEle = cNodes[i];\n        liEle.setAttribute('aria-level', '' + level);\n        this.updateChildAriaLevel(select('.' + PARENTITEM, liEle), level + 1);\n      }\n    }\n  };\n\n  TreeView.prototype.renderVirtualEle = function (e) {\n    var pre;\n\n    if (e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    }\n\n    var virEle = this.createElement('div', {\n      className: SIBLING\n    });\n    var index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;\n    e.target.insertBefore(virEle, e.target.children[index]);\n  };\n\n  TreeView.prototype.removeVirtualEle = function () {\n    var sibEle = select('.' + SIBLING);\n\n    if (sibEle) {\n      detach(sibEle);\n    }\n  };\n\n  TreeView.prototype.destroyDrag = function () {\n    if (this.dragObj && this.dropObj) {\n      this.dragObj.destroy();\n      this.dropObj.destroy();\n    }\n  };\n\n  TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\n    var dropLi = dropTarget ? closest(dropTarget, '.' + LISTITEM) : null;\n    var dropData = dropLi ? this.getNodeData(dropLi) : null;\n    var draggedNode = obj ? obj.dragLi : dragNode;\n    var draggedNodeData = obj ? obj.dragData : null;\n    var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\n    var dragLiParent = obj.dragLi.parentElement;\n    var dragParent = obj.dragLi ? closest(dragLiParent, '.' + LISTITEM) : null;\n    var targetParent = null;\n    var indexValue = null;\n    var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\n    var iconClass = null;\n    var node = drop === true ? draggedNode : dropLi;\n    var index = node ? closest(node, '.e-list-parent') : null;\n    var i = 0;\n    var position = null;\n    dragParent = obj.dragLi && dragParent === null ? closest(dragLiParent, '.' + ROOT) : dragParent;\n    dragParent = drop === true ? this.dragParent : dragParent;\n\n    if (cloneEle) {\n      while (i < 4) {\n        if (select('.' + ICON, cloneEle).classList.contains(iconCss[i])) {\n          iconClass = iconCss[i];\n          break;\n        }\n\n        i++;\n      }\n    }\n\n    if (index) {\n      var dropTar = 0;\n\n      for (i = 0; i < index.childElementCount; i++) {\n        dropTar = drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;\n\n        if (drop !== true && index.children[i].classList.contains('e-hover')) {\n          indexValue = event.offsetY >= 23 ? i + 1 : i;\n          break;\n        } else if (index.children[i] === node) {\n          indexValue = event.offsetY >= 23 ? i : i;\n          break;\n        }\n      }\n\n      indexValue = dropTar !== 0 ? --indexValue : indexValue;\n      position = iconClass == \"e-drop-in\" ? \"Inside\" : event.offsetY < 7 ? \"Before\" : \"After\";\n    }\n\n    if (dropTarget) {\n      if (newParent.length === 0) {\n        targetParent = null;\n      } else if (dropTarget.classList.contains(LISTITEM)) {\n        targetParent = newParent[0];\n      } else {\n        targetParent = newParent[1];\n      }\n    }\n\n    if (dropLi === draggedNode) {\n      targetParent = dropLi;\n    }\n\n    if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\n      targetParent = dropLi;\n\n      if (drop !== true) {\n        level = ++level;\n        var parent_2 = targetParent ? select('.e-list-parent', targetParent) : null;\n        indexValue = parent_2 ? parent_2.children.length : 0;\n\n        if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {\n          var parent_3 = targetParent.hasAttribute('data-uid') ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\n          indexValue = parent_3 ? parent_3.length : 0;\n        }\n      }\n    }\n\n    return {\n      cancel: false,\n      clonedNode: cloneEle,\n      event: event,\n      draggedNode: draggedNode,\n      draggedNodeData: draggedNodeData,\n      droppedNode: dropLi,\n      droppedNodeData: dropData,\n      dropIndex: indexValue,\n      dropLevel: level,\n      draggedParentNode: dragParent,\n      dropTarget: targetParent,\n      dropIndicator: iconClass,\n      target: target,\n      position: position\n    };\n  };\n\n  TreeView.prototype.addFullRow = function (toAdd) {\n    var len = this.liList.length;\n\n    if (toAdd) {\n      for (var i = 0; i < len; i++) {\n        this.createFullRow(this.liList[i]);\n      }\n    } else {\n      for (var i = 0; i < len; i++) {\n        var rowDiv = select('.' + FULLROW, this.liList[i]);\n        detach(rowDiv);\n      }\n    }\n  };\n\n  TreeView.prototype.createFullRow = function (item) {\n    var rowDiv = this.createElement('div', {\n      className: FULLROW\n    });\n    item.insertBefore(rowDiv, item.childNodes[0]);\n  };\n\n  TreeView.prototype.addMultiSelect = function (toAdd) {\n    if (toAdd) {\n      var liEles = selectAll('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\n\n      for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {\n        var ele = liEles_1[_i];\n        ele.setAttribute('aria-selected', 'false');\n      }\n    } else {\n      var liEles = selectAll('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\n\n      for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {\n        var ele = liEles_2[_a];\n        ele.removeAttribute('aria-selected');\n      }\n    }\n  };\n\n  TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNOU(element)) {\n      var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var liEle = cNodes[i];\n        var icon = select('.' + COLLAPSIBLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNOU(icon)) {\n          this.collapseNode(liEle, icon, null);\n        }\n\n        this.collapseByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  };\n\n  TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {\n    var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + COLLAPSIBLE, this.element));\n\n    for (var i = 0, len = cIcons.length; i < len; i++) {\n      var icon = cIcons[i];\n      var liEle = closest(icon, '.' + LISTITEM);\n      this.collapseNode(liEle, icon, null);\n    }\n  };\n\n  TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNOU(element)) {\n      var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (var i = 0, len = eNodes.length; i < len; i++) {\n        var liEle = eNodes[i];\n        var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNOU(icon)) {\n          this.expandAction(liEle, icon, null);\n        }\n\n        this.expandByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  };\n\n  TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {\n    var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + EXPANDABLE, this.element));\n\n    for (var i = 0, len = eIcons.length; i < len; i++) {\n      var icon = eIcons[i];\n      var liEle = closest(icon, '.' + LISTITEM);\n      this.expandAction(liEle, icon, null, true);\n    }\n  };\n\n  TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {\n    var vNodes = Array.prototype.slice.call(nodes);\n\n    if (excludeHiddenNodes) {\n      for (var i = 0; i < vNodes.length; i++) {\n        if (!isVisible(vNodes[i])) {\n          vNodes.splice(i, 1);\n          i--;\n        }\n      }\n    }\n\n    return vNodes;\n  };\n\n  TreeView.prototype.removeNode = function (node) {\n    var dragParentUl = closest(node, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      this.destroyTemplate(node);\n    }\n\n    detach(node);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.removeData(node);\n  };\n\n  TreeView.prototype.updateInstance = function () {\n    this.updateList();\n    this.updateSelectedNodes();\n    this.updateExpandedNodes();\n  };\n\n  TreeView.prototype.updateList = function () {\n    this.liList = Array.prototype.slice.call(selectAll('.' + LISTITEM, this.element));\n  };\n\n  TreeView.prototype.updateSelectedNodes = function () {\n    this.setProperties({\n      selectedNodes: []\n    }, true);\n    var sNodes = selectAll('.' + ACTIVE, this.element);\n    this.selectGivenNodes(sNodes);\n  };\n\n  TreeView.prototype.updateExpandedNodes = function () {\n    this.setProperties({\n      expandedNodes: []\n    }, true);\n    var eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n\n    for (var i = 0, len = eNodes.length; i < len; i++) {\n      this.addExpand(eNodes[i]);\n    }\n  };\n\n  TreeView.prototype.removeData = function (node) {\n    if (this.dataType === 1) {\n      var dm = new DataManager(this.treeData);\n      var id = this.getId(node);\n      var data = {};\n      var newId = this.isNumberTypeId ? parseFloat(id) : id;\n      data[this.fields.id] = newId;\n      dm.remove(this.fields.id, data);\n      this.removeChildNodes(id);\n    } else {\n      var id = this.getId(node);\n      this.updateChildField(this.treeData, this.fields, id, null, null, true);\n    }\n  };\n\n  TreeView.prototype.removeChildNodes = function (parentId) {\n    var cNodes = this.getChildGroup(this.groupedData, parentId, false);\n    var childData = [];\n\n    if (cNodes) {\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var dm = new DataManager(this.treeData);\n        var id = getValue(this.fields.id, cNodes[i]).toString();\n        var data = {};\n        var currId = this.isNumberTypeId ? parseFloat(id) : id;\n        data[this.fields.id] = currId;\n        var nodeData = dm.remove(this.fields.id, data);\n        childData.push(nodeData[0]);\n        this.removeChildNodes(id);\n      }\n    }\n\n    return childData;\n  };\n\n  TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var liEle = this.getElement(nodes[i]);\n\n      if (isNOU(liEle)) {\n        continue;\n      }\n\n      var icon = select('.' + selector, select('.' + TEXTWRAP, liEle));\n\n      if (!isNOU(icon)) {\n        toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);\n      }\n    }\n  };\n\n  TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    var sNodes = this.getSortedData(nodes);\n    var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\n\n    if (isRemote) {\n      this.updateMapper(level);\n    }\n\n    var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\n    var dropUl;\n\n    if (!dropEle) {\n      dropUl = dropLi ? this.expandParent(dropLi) : select('.' + PARENTITEM, this.element);\n    } else {\n      dropUl = dropEle;\n    }\n\n    var refNode = dropUl.childNodes[index];\n\n    for (var i = 0; i < li.length; i++) {\n      dropUl.insertBefore(li[i], refNode);\n    }\n\n    var id = this.getId(dropLi);\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\n      var refId = this.getId(refNode);\n      var pos = isNOU(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\n\n      for (var j = 0; j < nodes.length; j++) {\n        if (!isNOU(id)) {\n          var currId = this.isNumberTypeId ? parseFloat(id) : id;\n          setValue(this.fields.parentID, currId, nodes[j]);\n        }\n\n        this.treeData.splice(pos, 0, nodes[j]);\n        pos++;\n      }\n    } else {\n      this.addChildData(this.treeData, this.fields, id, nodes, index);\n    }\n\n    this.finalizeNode(dropUl);\n  };\n\n  TreeView.prototype.updateMapper = function (level) {\n    var mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);\n    this.updateListProp(mapper);\n  };\n\n  TreeView.prototype.updateListProp = function (mapper) {\n    var prop = this.getActualProperties(mapper);\n    this.listBaseOption.fields = prop;\n    this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';\n  };\n\n  TreeView.prototype.getDataPos = function (obj, mapper, id) {\n    var pos = null;\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        return i;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var data = getValue(mapper.child, obj[i]);\n        pos = this.getDataPos(data, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var items = getValue('child', obj[i]);\n        pos = this.getDataPos(items, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      }\n    }\n\n    return pos;\n  };\n\n  TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {\n    var updated;\n\n    if (isNOU(id)) {\n      index = isNOU(index) ? obj.length : index;\n\n      for (var k = 0, len = data.length; k < len; k++) {\n        obj.splice(index, 0, data[k]);\n        index++;\n      }\n\n      return updated;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (typeof mapper.child === 'string' && obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null || this.fields.dataSource instanceof DataManager && obj[i].hasOwnProperty('child')) {\n          var key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          var childData = getValue(key, obj[i]);\n\n          if (isNOU(childData)) {\n            childData = [];\n          }\n\n          index = isNOU(index) ? childData.length : index;\n\n          for (var k = 0, len = data.length; k < len; k++) {\n            childData.splice(index, 0, data[k]);\n            index++;\n          }\n        } else {\n          var key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          obj[i][key] = data;\n        }\n\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childObj = getValue(mapper.child, obj[i]);\n        updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var childData = getValue('child', obj[i]);\n        updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return updated;\n  };\n\n  TreeView.prototype.doDisableAction = function (nodes) {\n    var validNodes = this.nodeType(nodes);\n    var validID = this.checkValidId(validNodes);\n    this.validArr = [];\n\n    for (var i = 0, len = validID.length; i < len; i++) {\n      var id = validID[i][this.fields.id].toString();\n\n      if (id && this.disableNode.indexOf(id) === -1) {\n        this.disableNode.push(id);\n      }\n\n      var liEle = this.getElement(id);\n\n      if (liEle) {\n        liEle.setAttribute('aria-disabled', 'true');\n        addClass([liEle], DISABLE);\n      }\n    }\n  };\n\n  TreeView.prototype.doEnableAction = function (nodes) {\n    var strNodes = this.nodeType(nodes);\n\n    for (var i = 0, len = strNodes.length; i < len; i++) {\n      var liEle = this.getElement(strNodes[i]);\n      var id = strNodes[i];\n\n      if (id && this.disableNode.indexOf(id) !== -1) {\n        this.disableNode.splice(this.disableNode.indexOf(id), 1);\n      }\n\n      if (liEle) {\n        liEle.removeAttribute('aria-disabled');\n        removeClass([liEle], DISABLE);\n      }\n    }\n  };\n\n  TreeView.prototype.nodeType = function (nodes) {\n    var validID = [];\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var id = void 0;\n\n      if (typeof nodes[i] == \"string\") {\n        id = nodes[i] ? nodes[i].toString() : null;\n      } else if (typeof nodes[i] === \"object\") {\n        id = nodes[i] ? nodes[i].getAttribute(\"data-uid\").toString() : null;\n      }\n\n      if (validID.indexOf(id) == -1) {\n        validID.push(id);\n      }\n    }\n\n    return validID;\n  };\n\n  TreeView.prototype.checkValidId = function (node) {\n    var _this = this;\n\n    if (this.dataType === 1) {\n      this.validArr = this.treeData.filter(function (data) {\n        return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;\n      });\n    } else if (this.dataType === 2) {\n      for (var k = 0; k < this.treeData.length; k++) {\n        var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;\n\n        if (node.indexOf(id) !== -1) {\n          this.validArr.push(this.treeData[k]);\n        }\n\n        var childItems = getValue(this.fields.child.toString(), this.treeData[k]);\n\n        if (childItems) {\n          this.filterNestedChild(childItems, node);\n        }\n      }\n    }\n\n    return this.validArr;\n  };\n\n  TreeView.prototype.filterNestedChild = function (treeData, nodes) {\n    for (var k = 0; k < treeData.length; k++) {\n      var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;\n\n      if (nodes.indexOf(id) !== -1) {\n        this.validArr.push(treeData[k]);\n      }\n\n      var childItems = getValue(this.fields.child.toString(), treeData[k]);\n\n      if (childItems) {\n        this.filterNestedChild(childItems, nodes);\n      }\n    }\n  };\n\n  TreeView.prototype.setTouchClass = function () {\n    var ele = closest(this.element, '.' + BIGGER);\n    this.touchClass = isNOU(ele) ? '' : SMALL;\n  };\n\n  TreeView.prototype.updatePersistProp = function () {\n    this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\n    var sleNodes = this.selectedNodes;\n\n    for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {\n      this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);\n    }\n\n    var enodes = this.expandedNodes;\n\n    for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {\n      this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);\n    }\n\n    if (this.showCheckBox) {\n      this.removeField(this.treeData, this.fields, ['isChecked']);\n      var cnodes = this.checkedNodes;\n\n      for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {\n        this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);\n      }\n    }\n  };\n\n  TreeView.prototype.removeField = function (obj, mapper, names) {\n    if (isNOU(obj) || isNOU(mapper)) {\n      return;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      for (var j = 0; j < names.length; j++) {\n        var field = this.getMapperProp(mapper, names[j]);\n\n        if (!isNOU(obj[i][field])) {\n          delete obj[i][field];\n        }\n      }\n\n      if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        this.removeField(getValue('child', obj[i]), this.getChildMapper(mapper), names);\n      }\n    }\n  };\n\n  TreeView.prototype.getMapperProp = function (mapper, fieldName) {\n    switch (fieldName) {\n      case 'selected':\n        return !isNOU(mapper.selected) ? mapper.selected : 'selected';\n\n      case 'expanded':\n        return !isNOU(mapper.expanded) ? mapper.expanded : 'expanded';\n\n      case 'isChecked':\n        return !isNOU(mapper.isChecked) ? mapper.isChecked : 'isChecked';\n\n      case 'hasChildren':\n        return !isNOU(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\n\n      default:\n        return fieldName;\n    }\n  };\n\n  TreeView.prototype.updateField = function (obj, mapper, id, key, value) {\n    var childNodes;\n\n    if (isNOU(id)) {\n      return;\n    } else if (this.dataType === 1) {\n      var newId = this.isNumberTypeId ? parseFloat(id) : id;\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', newId, false));\n      setValue(this.getMapperProp(mapper, key), value, resultData[0]);\n    } else {\n      this.updateChildField(obj, mapper, id, key, value);\n    }\n  };\n\n  TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove) {\n    var removedData;\n\n    if (isNOU(obj)) {\n      return removedData;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (remove) {\n          removedData = obj.splice(i, 1);\n        } else {\n          setValue(this.getMapperProp(mapper, key), value, obj[i]);\n          removedData = [];\n        }\n\n        return removedData;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childData = getValue(mapper.child, obj[i]);\n        removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var childItems = getValue('child', obj[i]);\n        removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return removedData;\n  };\n\n  TreeView.prototype.triggerEvent = function () {\n    this.renderReactTemplates();\n    var eventArgs = {\n      data: this.treeData\n    };\n    this.trigger('dataSourceChanged', eventArgs);\n  };\n\n  TreeView.prototype.wireInputEvents = function (inpEle) {\n    EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\n  };\n\n  TreeView.prototype.wireEditingEvents = function (toBind) {\n    var _this = this;\n\n    if (toBind && !this.disabled) {\n      var proxy_2 = this;\n      this.touchEditObj = new Touch(this.element, {\n        tap: function (e) {\n          if (_this.isDoubleTapped(e) && e.tapCount === 2) {\n            e.originalEvent.preventDefault();\n            proxy_2.editingHandler(e.originalEvent);\n          }\n        }\n      });\n    } else {\n      if (this.touchEditObj) {\n        this.touchEditObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.wireClickEvent = function (toBind) {\n    if (toBind) {\n      var proxy_3 = this;\n      this.touchClickObj = new Touch(this.element, {\n        tap: function (e) {\n          proxy_3.clickHandler(e);\n        }\n      });\n    } else {\n      if (this.touchClickObj) {\n        this.touchClickObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.wireExpandOnEvent = function (toBind) {\n    var _this = this;\n\n    if (toBind) {\n      var proxy_4 = this;\n      this.touchExpandObj = new Touch(this.element, {\n        tap: function (e) {\n          if ((_this.expandOnType === 'Click' || _this.expandOnType === 'DblClick' && _this.isDoubleTapped(e) && e.tapCount === 2) && e.originalEvent.which !== 3) {\n            proxy_4.expandHandler(e);\n          }\n        }\n      });\n    } else {\n      if (this.touchExpandObj) {\n        this.touchExpandObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.mouseDownHandler = function (e) {\n    this.mouseDownStatus = true;\n\n    if (e.shiftKey || e.ctrlKey) {\n      e.preventDefault();\n    }\n\n    if (e.ctrlKey && this.allowMultiSelection) {\n      EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.preventContextMenu = function (e) {\n    e.preventDefault();\n  };\n\n  TreeView.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n    this.wireClickEvent(true);\n\n    if (this.expandOnType !== 'None') {\n      this.wireExpandOnEvent(true);\n    }\n\n    EventHandler.add(this.element, 'focus', this.focusIn, this);\n    EventHandler.add(this.element, 'blur', this.focusOut, this);\n    EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n    EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\n    this.keyboardModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  TreeView.prototype.unWireEvents = function () {\n    EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n    this.wireClickEvent(false);\n    this.wireExpandOnEvent(false);\n    EventHandler.remove(this.element, 'focus', this.focusIn);\n    EventHandler.remove(this.element, 'blur', this.focusOut);\n    EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n    EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\n\n    if (!this.disabled) {\n      this.keyboardModule.destroy();\n    }\n  };\n\n  TreeView.prototype.parents = function (element, selector) {\n    var matched = [];\n    var el = element.parentNode;\n\n    while (!isNOU(el)) {\n      if (matches(el, selector)) {\n        matched.push(el);\n      }\n\n      el = el.parentNode;\n    }\n\n    return matched;\n  };\n\n  TreeView.prototype.isDoubleTapped = function (e) {\n    var target = e.originalEvent.target;\n    var secondTap;\n\n    if (target && e.tapCount) {\n      if (e.tapCount === 1) {\n        this.firstTap = closest(target, '.' + LISTITEM);\n      } else if (e.tapCount === 2) {\n        secondTap = closest(target, '.' + LISTITEM);\n      }\n    }\n\n    return this.firstTap === secondTap;\n  };\n\n  TreeView.prototype.isDescendant = function (parent, child) {\n    var node = child.parentNode;\n\n    while (!isNOU(node)) {\n      if (node === parent) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  };\n\n  TreeView.prototype.showSpinner = function (element) {\n    addClass([element], LOAD);\n    createSpinner({\n      target: element,\n      width: Browser.isDevice ? 16 : 14\n    }, this.createElement);\n    showSpinner(element);\n  };\n\n  TreeView.prototype.hideSpinner = function (element) {\n    hideSpinner(element);\n    element.innerHTML = '';\n    removeClass([element], LOAD);\n  };\n\n  TreeView.prototype.setCheckedNodes = function (nodes) {\n    nodes = JSON.parse(JSON.stringify(nodes));\n    this.uncheckAll(this.checkedNodes);\n    this.setIndeterminate(nodes);\n\n    if (nodes.length > 0) {\n      this.checkAll(nodes);\n    }\n  };\n  /**\r\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\r\n   */\n\n\n  TreeView.prototype.setValidCheckedNode = function (node) {\n    if (this.dataType === 1) {\n      var mapper = this.fields;\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', node, true));\n\n      if (resultData[0]) {\n        this.setChildCheckState(resultData, node, resultData[0]);\n\n        if (this.autoCheck) {\n          var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\n          var childNodes = this.getChildNodes(this.treeData, parent_4);\n          var count = 0;\n\n          for (var len = 0; len < childNodes.length; len++) {\n            var childId = childNodes[len][this.fields.id].toString();\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n\n          if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {\n            this.checkedNodes.push(parent_4);\n          }\n        }\n      }\n    } else if (this.dataType === 2) {\n      for (var a = 0; a < this.treeData.length; a++) {\n        var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';\n\n        if (index === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n          break;\n        }\n\n        var childItems = getValue(this.fields.child.toString(), this.treeData[a]);\n\n        if (childItems) {\n          this.setChildCheckState(childItems, node, this.treeData[a]);\n        }\n      }\n    }\n  };\n  /**\r\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\r\n   */\n\n\n  TreeView.prototype.setChildCheckState = function (childItems, node, treeData) {\n    var checkedParent;\n    var count = 0;\n\n    if (this.dataType === 1) {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\n      }\n\n      for (var index = 0; index < childItems.length; index++) {\n        var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\n            this.checkedNodes.push(checkNode);\n          }\n        }\n\n        if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        var subChildItems = this.getChildNodes(this.treeData, checkNode);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, treeData);\n        }\n      }\n    } else {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n      }\n\n      for (var index = 0; index < childItems.length; index++) {\n        var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n\n        if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, childItems[index]);\n        }\n\n        if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n          count++;\n        }\n\n        if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\n          this.checkedNodes.push(checkedParent);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.setIndeterminate = function (nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      this.setValidCheckedNode(nodes[i]);\n    }\n  };\n\n  TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {\n    if (this.dataType === 1) {\n      var pos = this.getDataPos(this.treeData, this.fields, id);\n      this.treeData.splice(pos, 1, newData);\n\n      if (isRefreshChild) {\n        this.removeChildNodes(id);\n\n        for (var j = 0; j < childValue.length; j++) {\n          this.treeData.splice(pos, 0, childValue[j]);\n          pos++;\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\n    }\n  };\n\n  TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {\n    var found;\n\n    for (var i = 0, objlen = treeData.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, treeData[i]);\n\n      if (treeData[i] && nodeId && nodeId.toString() === currID) {\n        treeData[i] = newData[0];\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, treeData[i]))) {\n        var childObj = getValue(mapper.child, treeData[i]);\n        found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', treeData[i]))) {\n        var childData = getValue('child', treeData[i]);\n        found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  TreeView.prototype.dynamicState = function () {\n    this.setDragAndDrop(this.allowDragAndDrop);\n    this.wireEditingEvents(this.allowEditing);\n\n    if (!this.disabled) {\n      this.wireEvents();\n      this.setRipple();\n    } else {\n      this.unWireEvents();\n      this.rippleFn();\n      this.rippleIconFn();\n    }\n  };\n\n  TreeView.prototype.crudOperation = function (operation, nodes, target, newText, newNode, index, prevent) {\n    var _this = this;\n\n    var data = this.fields.dataSource;\n    var matchedArr = [];\n    var query = this.getQuery(this.fields);\n    var key = this.fields.id;\n    var crud;\n    var changes = {\n      addedRecords: [],\n      deletedRecords: [],\n      changedRecords: []\n    };\n    var nodesID = [];\n\n    if (nodes) {\n      nodesID = this.nodeType(nodes);\n    } else if (target) {\n      if (typeof target == \"string\") {\n        nodesID[0] = target.toString();\n      } else if (typeof target === \"object\") {\n        nodesID[0] = target.getAttribute(\"data-uid\").toString();\n      }\n    }\n\n    for (var i = 0, len = nodesID.length; i < len; i++) {\n      var liEle = this.getElement(nodesID[i]);\n\n      if (isNullOrUndefined(liEle)) {\n        continue;\n      }\n\n      var removedData = this.getNodeObject(nodesID[i]);\n      matchedArr.push(removedData);\n    }\n\n    switch (operation) {\n      case 'delete':\n        if (nodes.length == 1) {\n          crud = data.remove(key, matchedArr[0], query.fromTable, query);\n        } else {\n          changes.deletedRecords = matchedArr;\n          crud = data.saveChanges(changes, key, query.fromTable, query);\n        }\n\n        crud.then(function (e) {\n          return _this.deleteSuccess(nodesID);\n        }).catch(function (e) {\n          return _this.dmFailure(e);\n        });\n        break;\n\n      case 'update':\n        matchedArr[0][this.fields.text] = newText;\n        crud = data.update(key, matchedArr[0], query.fromTable, query);\n        crud.then(function (e) {\n          return _this.editSucess(target, newText, prevent);\n        }).catch(function (e) {\n          return _this.dmFailure(e, target, prevent);\n        });\n        break;\n\n      case 'insert':\n        if (newNode.length == 1) {\n          crud = data.insert(newNode[0], query.fromTable, query);\n        } else {\n          var arr = [];\n\n          for (var i = 0, len = newNode.length; i < len; i++) {\n            arr.push(newNode[i]);\n          }\n\n          changes.addedRecords = arr;\n          crud = data.saveChanges(changes, key, query.fromTable, query);\n        }\n\n        crud.then(function (e) {\n          var dropLi = _this.getElement(target);\n\n          _this.addSuccess(newNode, dropLi, index);\n\n          _this.preventExpand = false;\n        }).catch(function (e) {\n          return _this.dmFailure(e);\n        });\n        break;\n    }\n  };\n\n  TreeView.prototype.deleteSuccess = function (nodes) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var liEle = this.getElement(nodes[i]);\n\n      if (isNOU(liEle)) {\n        continue;\n      }\n\n      this.removeNode(liEle);\n    }\n\n    this.updateInstance();\n\n    if (this.dataType === 1) {\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    }\n\n    this.triggerEvent();\n  };\n\n  TreeView.prototype.editSucess = function (target, newText, prevent) {\n    var liEle = this.getElement(target);\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.appendNewText(liEle, txtEle, newText, prevent);\n  };\n\n  TreeView.prototype.addSuccess = function (nodes, dropLi, index) {\n    var dropUl;\n    var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\n    var proxy = this;\n\n    if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector('.' + PARENTITEM) === null) {\n      proxy.renderChildNodes(dropLi, null, function () {\n        dropUl = dropLi.querySelector('.' + PARENTITEM);\n        proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);\n        proxy.triggerEvent();\n      });\n    } else {\n      this.addGivenNodes(nodes, dropLi, index, true);\n      this.triggerEvent();\n    }\n  };\n\n  TreeView.prototype.dmFailure = function (e, target, prevent) {\n    if (target) {\n      this.updatePreviousText(target, prevent);\n    }\n\n    this.trigger('actionFailure', {\n      error: e\n    });\n  };\n\n  TreeView.prototype.updatePreviousText = function (target, prevent) {\n    var liEle = this.getElement(target);\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.updateText(liEle, txtEle, this.oldText, prevent);\n  };\n  /**\r\n   * Called internally if any of the property value changed.\r\n   * @param  {TreeView} newProp\r\n   * @param  {TreeView} oldProp\r\n   * @returns void\r\n   * @private\r\n   */\n\n\n  TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'allowDragAndDrop':\n          this.setDragAndDrop(this.allowDragAndDrop);\n          break;\n\n        case 'dragArea':\n          if (this.allowDragAndDrop) {\n            this.dragObj.dragArea = this.dragArea;\n          }\n\n          break;\n\n        case 'allowEditing':\n          this.wireEditingEvents(this.allowEditing);\n          break;\n\n        case 'allowMultiSelection':\n          if (this.selectedNodes.length > 1) {\n            var sNode = this.getElement(this.selectedNodes[0]);\n            this.isLoaded = false;\n            this.removeSelectAll();\n            this.selectNode(sNode, null);\n            this.isLoaded = true;\n          }\n\n          this.setMultiSelect(this.allowMultiSelection);\n          this.addMultiSelect(this.allowMultiSelection);\n          break;\n\n        case 'allowTextWrap':\n          this.setTextWrap();\n          this.updateWrap();\n          break;\n\n        case 'checkedNodes':\n          if (this.showCheckBox) {\n            this.checkedNodes = oldProp.checkedNodes;\n            this.setCheckedNodes(newProp.checkedNodes);\n          }\n\n          break;\n\n        case 'autoCheck':\n          if (this.showCheckBox) {\n            this.autoCheck = newProp.autoCheck;\n            this.ensureIndeterminate();\n          }\n\n          break;\n\n        case 'cssClass':\n          this.setCssClass(oldProp.cssClass, newProp.cssClass);\n          break;\n\n        case 'enableRtl':\n          this.setEnableRtl();\n          break;\n\n        case 'expandedNodes':\n          this.isAnimate = false;\n          this.setProperties({\n            expandedNodes: []\n          }, true);\n          this.collapseAll();\n          this.isInitalExpand = true;\n          this.setProperties({\n            expandedNodes: isNOU(newProp.expandedNodes) ? [] : newProp.expandedNodes\n          }, true);\n          this.doExpandAction();\n          this.isInitalExpand = false;\n          this.isAnimate = true;\n          break;\n\n        case 'expandOn':\n          this.wireExpandOnEvent(false);\n          this.setExpandOnType();\n\n          if (this.expandOnType !== 'None' && !this.disabled) {\n            this.wireExpandOnEvent(true);\n          }\n\n          break;\n\n        case 'disabled':\n          this.setDisabledMode();\n          this.dynamicState();\n          break;\n\n        case 'fields':\n          this.isAnimate = false;\n          this.isFieldChange = true;\n          this.initialRender = true;\n          this.reRenderNodes();\n          this.initialRender = false;\n          this.isAnimate = true;\n          this.isFieldChange = false;\n          break;\n\n        case 'fullRowSelect':\n          this.setFullRow(this.fullRowSelect);\n          this.addFullRow(this.fullRowSelect);\n\n          if (this.allowTextWrap) {\n            this.setTextWrap();\n            this.updateWrap();\n          }\n\n          break;\n\n        case 'loadOnDemand':\n          if (this.loadOnDemand === false && !this.onLoaded) {\n            var nodes = this.element.querySelectorAll('li');\n            var i = 0;\n\n            while (i < nodes.length) {\n              if (nodes[i].getAttribute('aria-expanded') !== 'true') {\n                this.renderChildNodes(nodes[i], true, null, true);\n              }\n\n              i++;\n            }\n\n            this.onLoaded = true;\n          }\n\n          break;\n\n        case 'nodeTemplate':\n          this.hasTemplate = false;\n          this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n          this.reRenderNodes();\n          break;\n\n        case 'selectedNodes':\n          this.removeSelectAll();\n          this.setProperties({\n            selectedNodes: newProp.selectedNodes\n          }, true);\n          this.doSelectionAction();\n          break;\n\n        case 'showCheckBox':\n          this.reRenderNodes();\n          break;\n\n        case 'sortOrder':\n          this.reRenderNodes();\n          break;\n\n        case 'fullRowNavigable':\n          this.setProperties({\n            fullRowNavigable: newProp.fullRowNavigable\n          }, true);\n          this.listBaseOption.itemNavigable = newProp.fullRowNavigable;\n          this.reRenderNodes();\n          break;\n      }\n    }\n  };\n  /**\r\n   * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\r\n   */\n\n\n  TreeView.prototype.destroy = function () {\n    this.clearTemplate();\n    this.element.removeAttribute('aria-activedescendant');\n    this.element.removeAttribute('tabindex');\n    this.unWireEvents();\n    this.wireEditingEvents(false);\n\n    if (!this.disabled) {\n      this.rippleFn();\n      this.rippleIconFn();\n    }\n\n    this.setCssClass(this.cssClass, null);\n    this.setDragAndDrop(false);\n    this.setFullRow(false);\n\n    if (this.ulElement && this.ulElement.parentElement) {\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\r\n   * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\r\n   * then the nodes are added as children of the given parentID or in the root level of TreeView.\r\n   * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.\r\n   * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\r\n   * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\r\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\r\n   */\n\n\n  TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {\n    if (isNOU(nodes)) {\n      return;\n    }\n\n    nodes = JSON.parse(JSON.stringify(nodes));\n    var dropLi = this.getElement(target);\n    this.preventExpand = preventTargetExpand;\n\n    if (this.fields.dataSource instanceof DataManager) {\n      if (!this.isOffline) {\n        this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);\n      } else {\n        this.addSuccess(nodes, dropLi, index);\n      }\n    } else if (this.dataType === 2) {\n      this.addGivenNodes(nodes, dropLi, index);\n    } else {\n      if (dropLi) {\n        this.addGivenNodes(nodes, dropLi, index);\n      } else {\n        nodes = this.getSortedData(nodes);\n\n        for (var i = 0; i < nodes.length; i++) {\n          var pid = getValue(this.fields.parentID, nodes[i]);\n          dropLi = pid ? this.getElement(pid.toString()) : pid;\n          this.addGivenNodes([nodes[i]], dropLi, index);\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    }\n\n    this.updateCheckedStateFromDS();\n\n    if (this.showCheckBox && dropLi) {\n      this.ensureParentCheckState(dropLi);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n      this.triggerEvent();\n    }\n  };\n  /**\r\n   * Instead of clicking on the TreeView node for editing, we can enable it by using\r\n   * `beginEdit` property. On passing the node ID or element through this property, the edit textBox\r\n   * will be created for the particular node thus allowing us to edit it.\r\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\r\n   */\n\n\n  TreeView.prototype.beginEdit = function (node) {\n    var ele = this.getElement(node);\n\n    if (isNOU(ele) || this.disabled) {\n      return;\n    }\n\n    this.createTextbox(ele, null);\n  };\n  /**\r\n   * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\r\n   * as argument to this method.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\r\n   */\n\n\n  TreeView.prototype.checkAll = function (nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, true);\n    }\n  };\n  /**\r\n   * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\r\n   * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\r\n   * a specific level of nodes, set **level** as argument to collapseAll method.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\r\n   * @param  {number} level - TreeView nodes will collapse up to the given level.\r\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\r\n   */\n\n\n  TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {\n    if (!isNOU(nodes)) {\n      this.doGivenAction(nodes, COLLAPSIBLE, false);\n    } else {\n      if (level > 0) {\n        this.collapseByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.collapseAllNodes(excludeHiddenNodes);\n      }\n    }\n  };\n  /**\r\n   * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\r\n   */\n\n\n  TreeView.prototype.disableNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      this.doDisableAction(nodes);\n    }\n  };\n  /**\r\n   * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\r\n   */\n\n\n  TreeView.prototype.enableNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      this.doEnableAction(nodes);\n    }\n  };\n  /**\r\n   * Ensures visibility of the TreeView node by using node ID or node element.\r\n   * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\r\n   * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\r\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\r\n   */\n\n\n  TreeView.prototype.ensureVisible = function (node) {\n    var liEle = this.getElement(node);\n\n    if (isNOU(liEle)) {\n      return;\n    }\n\n    var parents = this.parents(liEle, '.' + LISTITEM);\n    this.expandAll(parents);\n    setTimeout(function () {\n      liEle.scrollIntoView(true);\n    }, 450);\n  };\n  /**\r\n   * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\r\n   * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\r\n   * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\r\n   * @param  {number} level - TreeView nodes will expand up to the given level.\r\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\r\n   */\n\n\n  TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {\n    if (!isNOU(nodes)) {\n      this.doGivenAction(nodes, EXPANDABLE, true);\n    } else {\n      if (level > 0) {\n        this.expandByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.expandAllNodes(excludeHiddenNodes);\n      }\n    }\n  };\n  /**\r\n   * Gets all the checked nodes including child, whether it is loaded or not.\r\n   */\n\n\n  TreeView.prototype.getAllCheckedNodes = function () {\n    var checkNodes = this.checkedNodes;\n    return checkNodes;\n  };\n  /**\r\n  * Gets all the disabled nodes including child, whether it is loaded or not.\r\n  */\n\n\n  TreeView.prototype.getDisabledNodes = function () {\n    var disabledNodes = this.disableNode;\n    return disabledNodes;\n  };\n  /**\r\n   * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\r\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\r\n   */\n\n\n  TreeView.prototype.getNode = function (node) {\n    var ele = this.getElement(node);\n    return this.getNodeData(ele, true);\n  };\n  /**\r\n   * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\r\n   * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\r\n   * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\r\n   * of the corresponding node otherwise it will return the entire updated data source of TreeView.\r\n   * * The updated data source also contains custom attributes if you specified in data source.\r\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\r\n   * @isGenericType true\r\n   */\n\n\n  TreeView.prototype.getTreeData = function (node) {\n    var id = this.getId(node);\n    this.updatePersistProp();\n\n    if (isNOU(id)) {\n      return this.treeData;\n    } else {\n      var data = this.getNodeObject(id);\n      return isNOU(data) ? [] : [data];\n    }\n  };\n  /**\r\n   * Moves the collection of nodes within the same TreeView based on target or its index position.\r\n   * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\r\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\r\n   * @param  {number} index - Specifies the index to place the moved nodes in the target element.\r\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\r\n   */\n\n\n  TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {\n    var dropLi = this.getElement(target);\n\n    if (isNOU(dropLi)) {\n      return;\n    }\n\n    for (var i = 0; i < sourceNodes.length; i++) {\n      var dragLi = this.getElement(sourceNodes[i]);\n\n      if (isNOU(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        continue;\n      }\n\n      this.preventExpand = preventTargetExpand;\n      this.dropAsChildNode(dragLi, dropLi, this, index);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    this.triggerEvent();\n  };\n  /**\r\n   * Refreshes a particular node of the TreeView.\r\n   * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\r\n   * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.\r\n   */\n\n\n  TreeView.prototype.refreshNode = function (target, newData) {\n    if (isNOU(target) || isNOU(newData)) {\n      return;\n    }\n\n    var id;\n    var isRefreshChild = false;\n\n    if (this.dataType == 1 && newData.length > 1) {\n      isRefreshChild = true;\n    } else if (this.dataType == 2 && newData.length === 1) {\n      var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);\n\n      if (!isNOU(updatedChildValue)) {\n        isRefreshChild = true;\n      }\n    }\n\n    var liEle = this.getElement(target);\n    id = liEle ? liEle.getAttribute('data-uid') : target ? target.toString() : null;\n    this.refreshData = this.getNodeObject(id);\n    newData = JSON.parse(JSON.stringify(newData));\n    /* eslint-disable */\n\n    var newNodeData;\n    var parentData;\n\n    if (this.dataType == 1 && isRefreshChild) {\n      for (var k = 0; k < newData.length; k++) {\n        if (isNOU(newData[k][this.fields.parentID])) {\n          parentData = newData[k];\n          newData.splice(k, 1);\n          break;\n        }\n      }\n\n      newNodeData = extend({}, this.refreshData, parentData);\n    } else {\n      newNodeData = extend({}, this.refreshData, newData[0]);\n    }\n\n    if (isNOU(liEle)) {\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n      return;\n    }\n\n    this.isRefreshed = true;\n    var level = parseFloat(liEle.getAttribute('aria-level'));\n    var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\n    var ul = select('.' + PARENTITEM, liEle);\n    var childItems = getValue(this.fields.child.toString(), newNodeData);\n\n    if (isRefreshChild && ul || isRefreshChild && !isNOU(childItems)) {\n      var parentEle = liEle.parentElement;\n      var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);\n      remove(liEle);\n      parentEle.insertBefore(newliEle[0], parentEle.childNodes[index]);\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n\n      if (isRefreshChild && ul) {\n        this.expandAll([id]);\n      }\n    } else {\n      var txtEle = select('.' + TEXTWRAP, liEle);\n      var newTextEle = select('.' + TEXTWRAP, newliEle[0]);\n      var icon = select('div.' + ICON, txtEle);\n      var newIcon = select('div.' + ICON, newTextEle);\n\n      if (icon && newIcon) {\n        if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\n          removeClass([newIcon], EXPANDABLE);\n          addClass([newIcon], COLLAPSIBLE);\n        } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\n          removeClass([newIcon], COLLAPSIBLE);\n          addClass([newIcon], EXPANDABLE);\n        } else if (icon.classList.contains('interaction')) {\n          addClass([newIcon], 'interaction');\n        }\n      }\n\n      remove(txtEle);\n      var fullEle = select('.' + FULLROW, liEle);\n      fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n    }\n\n    liEle = this.getElement(target);\n\n    if (newNodeData[this.fields.tooltip]) {\n      liEle.setAttribute(\"title\", newNodeData[this.fields.tooltip]);\n    }\n\n    if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\n      var attr = {};\n      merge(attr, newNodeData[this.fields.htmlAttributes]);\n\n      if (attr.class) {\n        addClass([liEle], attr.class.split(' '));\n        delete attr.class;\n      } else {\n        attributes(liEle, attr);\n      }\n    }\n\n    if (this.selectedNodes.indexOf(id) !== -1) {\n      liEle.setAttribute('aria-selected', 'true');\n      addClass([liEle], ACTIVE);\n    }\n\n    this.isRefreshed = false;\n    this.triggerEvent();\n  };\n  /**\r\n   * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\r\n   */\n\n\n  TreeView.prototype.removeNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n        this.crudOperation('delete', nodes);\n      } else {\n        this.deleteSuccess(nodes);\n      }\n    }\n  };\n  /**\r\n   * Replaces the text of the TreeView node with the given text.\r\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\r\n   * @param  {string} newText - Specifies the new text of TreeView node.\r\n   */\n\n\n  TreeView.prototype.updateNode = function (target, newText) {\n    var _this = this;\n\n    if (isNOU(target) || isNOU(newText) || !this.allowEditing) {\n      return;\n    }\n\n    var liEle = this.getElement(target);\n\n    if (isNOU(liEle)) {\n      return;\n    }\n\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    var eventArgs = this.getEditEvent(liEle, null, null);\n    this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        if (_this.fields.dataSource instanceof DataManager && !_this.isOffline) {\n          _this.crudOperation('update', null, target, newText, null, null, false);\n        } else {\n          _this.appendNewText(liEle, txtEle, newText, false);\n        }\n      }\n    });\n  };\n  /**\r\n   * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\r\n   * as argument to this method.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\r\n   */\n\n\n  TreeView.prototype.uncheckAll = function (nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, false);\n    }\n  };\n\n  var TreeView_1;\n\n  __decorate([Property(false)], TreeView.prototype, \"allowDragAndDrop\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"allowEditing\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"allowMultiSelection\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"allowTextWrap\", void 0);\n\n  __decorate([Complex({}, NodeAnimationSettings)], TreeView.prototype, \"animation\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"checkedNodes\", void 0);\n\n  __decorate([Property('')], TreeView.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"disabled\", void 0);\n\n  __decorate([Property(null)], TreeView.prototype, \"dragArea\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"expandedNodes\", void 0);\n\n  __decorate([Property('Auto')], TreeView.prototype, \"expandOn\", void 0);\n\n  __decorate([Complex({}, FieldsSettings)], TreeView.prototype, \"fields\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"fullRowSelect\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"loadOnDemand\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"locale\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"nodeTemplate\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"selectedNodes\", void 0);\n\n  __decorate([Property('None')], TreeView.prototype, \"sortOrder\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"showCheckBox\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"autoCheck\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"fullRowNavigable\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"actionFailure\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"created\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"dataBound\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"dataSourceChanged\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"drawNode\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"destroyed\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"keyPress\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeChecked\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeChecking\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeClicked\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeCollapsed\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeCollapsing\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragging\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragStart\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragStop\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDropped\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeEdited\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeEditing\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeExpanded\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeExpanding\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeSelected\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeSelecting\", void 0);\n\n  TreeView = TreeView_1 = __decorate([NotifyPropertyChanges], TreeView);\n  return TreeView;\n}(Component);\n\nexport { TreeView };","map":{"version":3,"sources":["D:/4_PROJECTS/RubyGYM/client/node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Component","isUndefined","Browser","compile","isNullOrUndefined","Property","NotifyPropertyChanges","ChildProperty","Complex","Event","EventHandler","KeyboardEvents","rippleEffect","Animation","remove","Draggable","Droppable","getElement","addClass","removeClass","closest","matches","detach","select","selectAll","isVisible","append","DataManager","Query","isNOU","Touch","getValue","setValue","extend","merge","attributes","ListBase","createCheckBox","rippleMouseHandler","Input","createSpinner","showSpinner","hideSpinner","ROOT","CONTROL","COLLAPSIBLE","EXPANDABLE","LISTITEM","LISTTEXT","LISTWRAP","IELISTWRAP","PARENTITEM","HOVER","ACTIVE","LOAD","PROCESS","ICON","TEXTWRAP","INPUT","INPUTGROUP","TREEINPUT","EDITING","RTL","INTERACTION","DRAGITEM","DROPPABLE","DRAGGING","SIBLING","DROPIN","DROPNEXT","DROPOUT","NODROP","FULLROWWRAP","FULLROW","SELECTED","EXPANDED","NODECOLLAPSED","DISABLE","DROPCOUNT","CHECK","INDETERMINATE","CHECKBOXWRAP","CHECKBOXFRAME","CHECKBOXRIPPLE","RIPPLE","RIPPLEELMENT","FOCUS","IMAGE","BIGGER","SMALL","CHILD","ITEM_ANIMATION_ACTIVE","DISABLED","treeAriaAttr","treeRole","itemRole","listRole","itemText","wrapperRole","FieldsSettings","_super","apply","ActionSettings","NodeAnimationSettings","effect","duration","easing","TreeView","options","element","_this","call","isRefreshed","preventExpand","checkedElement","disableNode","validArr","validNodes","expandChildren","isFieldChange","changeDataSource","hasTemplate","isFirstRender","mouseDownStatus","TreeView_1","getModuleName","preRender","checkActionNodes","parentNodeCheck","dragStartAction","isAnimate","keyConfigs","escape","end","enter","f2","home","moveDown","moveLeft","moveRight","moveUp","ctrlDown","ctrlUp","ctrlEnter","ctrlHome","ctrlEnd","ctrlA","shiftDown","shiftUp","shiftEnter","shiftHome","shiftEnd","csDown","csUp","csEnter","csHome","csEnd","space","listBaseOption","expandCollapse","showIcon","expandIconClass","ariaAttributes","expandIconPosition","itemCreated","e","beforeNodeCreate","enableHtmlSanitizer","itemNavigable","fullRowNavigable","updateListProp","fields","aniObj","treeList","isLoaded","isInitalExpand","index","setTouchClass","selectedNodes","setProperties","checkedNodes","expandedNodes","getPersistData","keyEntity","addOnPersist","render","initialRender","initialize","setDataBinding","setDisabledMode","setExpandOnType","disabled","setRipple","wireEditingEvents","allowEditing","setDragAndDrop","allowDragAndDrop","wireEvents","renderComplete","setAttribute","id","setCssClass","cssClass","setEnableRtl","setFullRow","fullRowSelect","setTextWrap","nodeTemplateFn","templateComplier","nodeTemplate","classList","add","enableRtl","tempStr","rippleModel","selector","ignore","rippleFn","iconModel","isCenterRipple","rippleIconFn","isEnabled","setMultiSelect","firstUl","removeAttribute","template","document","querySelectorAll","querySelector","innerHTML","trim","undefined","push","dataSource","isOffline","offline","ready","then","pop","treeData","result","isNumberTypeId","getType","setRootData","renderItems","finalize","catch","trigger","error","executeQuery","getQuery","rootData","JSON","parse","stringify","mapper","value","columns","query","prop","getActualProperties","_i","_a","keys","col","indexOf","from","tableName","clone","addSorting","sortOrder","text","parentID","where","parseFloat","dataType","getDataType","groupedData","getGroupedData","rootItems","getChildNodes","isSorted","level","sortedData","getSortedData","ulElement","createList","createElement","appendChild","rootNodes","loadOnDemand","renderChildNodes","parentEle","finalizeNode","parentCheckData","updateCheckedStateFromDS","autoCheck","showCheckBox","updateParentCheckState","resultData","executeLocal","isChecked","resultId","toString","resultPId","hasChildren","id_1","childData","child","childId","mapper_1","checkState","getCheckedNodeDetails","checkIndeterminateState","checkedId","checkedData","fieldId","childItems","updateChildCheckState","checkNodes","count","len","childNodes","preElement","check","changeState","indeterminate","childCheckedElement","node","nodeId","getAttribute","j","nodeCheck","data","ariaChecked","checkedParent","checkedChild","subChildItems","checkboxEle","touchClass","icon","item","insertBefore","checkValue","curData","addCheck","frame","frameMouseHandler","createFullRow","allowMultiSelection","contains","addActionClass","selected","expanded","textEle","dataId","renderNodeTemplate","eventArgs","nodeData","rippleSpan","parentElement","action","actionValue","ds","groupBy","cusQuery","group","getDataSource","grpItem","itemObj","items","list","iNodes","k","sNodes","selectNode","cNodes","disableExpandAttr","eNodes","updateList","updateCheckedProp","nodes","concat","ensureIndeterminate","liElement","ensureParentCheckState","ensureChildCheckState","indeterminateNodes","checkBoxEle","getElementsByClassName","parentUL","currentParent","childElement","checkBoxes","parentCheck","childCheck","expandState","checkedState","currentLoadData","ele","splice","isNodeChecked","doCheckBoxAction","doCheck","li","liEle","setValidCheckedNode","dynamicCheckState","updateField","checkBox","validateCheckNode","updateFieldChecked","checkbox","currLi","nodeDetails","getNodeData","parent_1","updateIndeterminate","subChild","updateChildIndeterminate","indeterminateData","getTreeData","parent","subId","childElementCheck","innerChild","wrapper","state","isPrevent","isAdd","getCheckEvent","observedArgs","cancel","nodeCheckAction","ariaState","frameSpan","removeCheck","ensureStateChange","checked","isInteracted","firstNode","updateIdAttr","allowTextWrap","updateWrap","renderReactTemplates","hasPid","doExpandAction","isIE","ulEle","liList","calculateWrap","nextElementSibling","style","height","offsetHeight","eUids","expandGivenNodes","eNode","expandAction","afterFinalized","arr","proxy","expandCallback","eUid","callback","doSelectionAction","sUids","sNode","selectGivenNodes","clickHandler","event","originalEvent","preventContextMenu","which","rippleElement","rippleIcons","removeHover","setFocusElement","checkWrapper","checkElement","triggerClickEvent","collapseNode","toggleSelect","nodeCheckedEvent","isCheck","expandNode","loaded","start_1","end_1","proxy_1","ul_1","liEle_1","setHeight","activeElement_1","animate","name","animation","expand","timingFunction","begin","args","overflow","HTMLElement","progress","display","animateHeight","expandedNode","ul","addExpand","expandArgs","getExpandEvent","colArgs","nodeCollapseAction","start","activeElement","collapse","collapsedNode","removeExpand","toRemove","visibility","remaining","timeStamp","currentHeight","parentLi","expandChild","eicon","parents","mapper_2","getChildFields","loadChild","setSelectionForChildNodes","ensureCheckNode","disableTreeNodes","renderSubChild","getNodeObject","doDisableAction","getFields","nodeLevel","dataLevel","getChildMapper","obj","parentId","isRoot","getChildGroup","objlen","cIcons","curLi","multiSelect","ctrlKey","isActive","unselectNode","getSelectEvent","nodeSelectAction","removeSelectAll","shiftKey","startNode","startIndex","endIndex","temp","currNode","addSelect","nodeUnselectAction","removeSelect","focusedNode","getFocusedNode","selectedLI","selectedLI_1","expandOnType","expandOn","isDevice","expandHandler","expandCollapseAction","nodeExpandAction","nodeName","liEles","getId","icon_1","keyActionHandler","inpEle","blur","focus","oldText","preventDefault","checkNode","openNode","shiftKeySelect","navigateNode","navigateRootNode","createTextbox","navigateToFocus","isUp","focusNode","pos","getBoundingClientRect","getScrollParent","parentPos","bottom","scrollTop","top","isVisibleInViewport","scrollIntoView","txtWrap","left","window","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","scrollHeight","isTowards","nextNode","getNextNode","getPrevNode","checkWrap","nodeCheckingAction","allCheckNode","parentIndex","getChildItems","childStateChange","childIsCheck","newCheck","validateCheck","length_1","hierChildId","childId_1","toBeOpened","focusNextNode","setFocus","isBackwards","rootNode","getRootNode","getEndNode","selectedItem","fNode","firstElementChild","lastChild","previousSibling","nextSibling","prevNode","endNode","preNode","focusIn","focusOut","onMouseOver","currentLi","setHover","onMouseLeave","hoveredNode","fromDS","getText","pNode","parentNode","pid","nodeFields","textContent","tempArr","isStringTemplate","slice","destroyTemplate","clearTemplate","reRenderNodes","removeChild","oldClass","newClass","split","editingHandler","oldInpEle","updateOldText","innerEle","className","attrs","getEditEvent","outerHTML","inpWidth","offsetWidth","innerHtml","inputObj","createInput","properties","container","inputEle","setSelectionRange","wireInputEvents","editData","editFields","inputFocusOut","newText","txtEle","crudOperation","appendNewText","isInput","updateText","triggerEvent","newData","innerText","getChildNodeObject","newList","toBind","initializeDrag","destroyDrag","virtualEle","dragObj","enableTailMode","enableAutoScroll","dragArea","dragTarget","helper","sender","dragRoot","dragWrap","dragLi","isSameNode","cloneEle","cloneNode","children","nLen","cNode","body","cursor","dragData","dragStart","listItem","parseInt","getDragEvent","draggedNode","intDestroy","dragCancelAction","drag","cursorAt","targetTouches","dragAction","dragStop","removeVirtualEle","dropTarget","preventTargetExpand","dropRoot","isHelperElement","dragParent","draggedParentNode","dropObj","out","over","drop","dropAction","dropWrap","dropLi","isDescendant","templateTarget","offsetY","offsetX","appendIndicator","renderVirtualEle","dropIndicator","virEle","dragInstance","draggable","ej2_instances","droppedElement","appendNode","draggedElement","dropAsSiblingNode","dropAsChildNode","dropUl","dragParentUl","dragParentLi","pre","moveData","updateElement","updateAriaLevel","updateInstance","dropParentUl","expandParent","childLi","dropParentLi","removedData","updateChildField","refId","getDataPos","currPid","removeChildNodes","addChildData","dropIcon","generateIcon","generateUL","childElementCount","dragIcon","updateChildAriaLevel","sibEle","destroy","dragNode","dropData","draggedNodeData","newParent","dragLiParent","targetParent","indexValue","iconCss","iconClass","position","dropTar","parent_2","parent_3","hasAttribute","clonedNode","droppedNode","droppedNodeData","dropIndex","dropLevel","addFullRow","toAdd","rowDiv","addMultiSelect","liEles_1","liEles_2","collapseByLevel","excludeHiddenNodes","getVisibleNodes","collapseAllNodes","expandByLevel","expandAllNodes","eIcons","vNodes","removeNode","removeData","updateSelectedNodes","updateExpandedNodes","dm","newId","currId","doGivenAction","toExpand","addGivenNodes","isRemote","dropEle","updateMapper","createListItemFromJson","refNode","url","navigateUrl","updated","childObj","nodeType","validID","checkValidId","doEnableAction","strNodes","filter","filterNestedChild","updatePersistProp","removeField","sleNodes","l","slelen","enodes","nodelen","cnodes","m","names","field","getMapperProp","fieldName","proxy_2","touchEditObj","tap","isDoubleTapped","tapCount","wireClickEvent","proxy_3","touchClickObj","wireExpandOnEvent","proxy_4","touchExpandObj","mouseDownHandler","keyboardModule","keyAction","bind","eventName","unWireEvents","matched","el","secondTap","firstTap","width","setCheckedNodes","uncheckAll","setIndeterminate","checkAll","setChildCheckState","parent_4","a","updatePosition","isRefreshChild","childValue","updateChildPosition","currID","found","dynamicState","operation","newNode","prevent","matchedArr","crud","changes","addedRecords","deletedRecords","changedRecords","nodesID","fromTable","saveChanges","deleteSuccess","dmFailure","update","editSucess","insert","addSuccess","updatePreviousText","onPropertyChanged","newProp","oldProp","collapseAll","onLoaded","addNodes","beginEdit","disableNodes","enableNodes","ensureVisible","expandAll","setTimeout","getAllCheckedNodes","getDisabledNodes","disabledNodes","getNode","moveNodes","sourceNodes","refreshNode","updatedChildValue","refreshData","newNodeData","parentData","newliEle","newTextEle","newIcon","fullEle","tooltip","htmlAttributes","attr","class","removeNodes","updateNode"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,IAAII,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGd,MAAM,CAACmB,wBAAP,CAAgCP,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HhB,CAA3H;AACA,MAAI,OAAOsB,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EH,CAAC,GAAGE,OAAO,CAACC,QAAR,CAAiBV,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIQ,CAAC,GAAGX,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCK,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD,IAAIxB,CAAC,GAAGa,UAAU,CAACW,CAAD,CAAlB,EAAuBJ,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACoB,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACc,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BpB,CAAC,CAACc,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAC7E,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAclB,MAAM,CAACuB,cAAP,CAAsBX,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,SAASM,SAAT,EAAoBC,WAApB,EAAiCC,OAAjC,EAA0CC,OAA1C,EAAmDC,iBAAnD,QAA4E,sBAA5E;AACA,SAASC,QAAT,EAAmBC,qBAAnB,EAA0CC,aAA1C,EAAyDC,OAAzD,QAAwE,sBAAxE;AACA,SAASC,KAAT,EAAgBC,YAAhB,EAA8BC,cAA9B,QAAoD,sBAApD;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,MAAlC,QAAgD,sBAAhD;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,sBAArC;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,OAAhC,EAAyCC,OAAzC,EAAkDC,MAAlD,EAA0DC,MAA1D,EAAkEC,SAAlE,EAA6EC,SAA7E,EAAwFC,MAAxF,QAAsG,sBAAtG;AACA,SAASC,WAAT,EAAsBC,KAAtB,QAAmC,sBAAnC;AACA,SAASxB,iBAAiB,IAAIyB,KAA9B,EAAqCC,KAArC,EAA4CC,QAA5C,EAAsDC,QAAtD,EAAgEC,MAAhE,EAAwEC,KAAxE,EAA+EC,UAA/E,QAAiG,sBAAjG;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,cAAT,EAAyBC,kBAAzB,QAAmD,yBAAnD;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,WAArC,QAAwD,wBAAxD;AACA,IAAIC,IAAI,GAAG,YAAX;AACA,IAAIC,OAAO,GAAG,WAAd;AACA,IAAIC,WAAW,GAAG,oBAAlB;AACA,IAAIC,UAAU,GAAG,mBAAjB;AACA,IAAIC,QAAQ,GAAG,aAAf;AACA,IAAIC,QAAQ,GAAG,aAAf;AACA,IAAIC,QAAQ,GAAG,aAAf;AACA,IAAIC,UAAU,GAAG,WAAjB;AACA,IAAIC,UAAU,GAAG,eAAjB;AACA,IAAIC,KAAK,GAAG,SAAZ;AACA,IAAIC,MAAM,GAAG,UAAb;AACA,IAAIC,IAAI,GAAG,iBAAX;AACA,IAAIC,OAAO,GAAG,WAAd;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,QAAQ,GAAG,gBAAf;AACA,IAAIC,KAAK,GAAG,SAAZ;AACA,IAAIC,UAAU,GAAG,eAAjB;AACA,IAAIC,SAAS,GAAG,cAAhB;AACA,IAAIC,OAAO,GAAG,WAAd;AACA,IAAIC,GAAG,GAAG,OAAV;AACA,IAAIC,WAAW,GAAG,eAAlB;AACA,IAAIC,QAAQ,GAAG,aAAf;AACA,IAAIC,SAAS,GAAG,aAAhB;AACA,IAAIC,QAAQ,GAAG,YAAf;AACA,IAAIC,OAAO,GAAG,WAAd;AACA,IAAIC,MAAM,GAAG,WAAb;AACA,IAAIC,QAAQ,GAAG,aAAf;AACA,IAAIC,OAAO,GAAG,YAAd;AACA,IAAIC,MAAM,GAAG,WAAb;AACA,IAAIC,WAAW,GAAG,gBAAlB;AACA,IAAIC,OAAO,GAAG,WAAd;AACA,IAAIC,QAAQ,GAAG,YAAf;AACA,IAAIC,QAAQ,GAAG,YAAf;AACA,IAAIC,aAAa,GAAG,kBAApB;AACA,IAAIC,OAAO,GAAG,WAAd;AACA,IAAIC,SAAS,GAAG,cAAhB;AACA,IAAIC,KAAK,GAAG,SAAZ;AACA,IAAIC,aAAa,GAAG,QAApB;AACA,IAAIC,YAAY,GAAG,oBAAnB;AACA,IAAIC,aAAa,GAAG,SAApB;AACA,IAAIC,cAAc,GAAG,oBAArB;AACA,IAAIC,MAAM,GAAG,UAAb;AACA,IAAIC,YAAY,GAAG,kBAAnB;AACA,IAAIC,KAAK,GAAG,cAAZ;AACA,IAAIC,KAAK,GAAG,YAAZ;AACA,IAAIC,MAAM,GAAG,UAAb;AACA,IAAIC,KAAK,GAAG,SAAZ;AACA,IAAIC,KAAK,GAAG,aAAZ;AACA,IAAIC,qBAAqB,GAAG,oBAA5B;AACA,IAAIC,QAAQ,GAAG,YAAf;AACA,IAAIC,YAAY,GAAG;AACfC,EAAAA,QAAQ,EAAE,MADK;AAEfC,EAAAA,QAAQ,EAAE,UAFK;AAGfC,EAAAA,QAAQ,EAAE,OAHK;AAIfC,EAAAA,QAAQ,EAAE,EAJK;AAKfC,EAAAA,WAAW,EAAE;AALE,CAAnB;AAOA;AACA;AACA;;AACA,IAAIC,cAAc;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAClDhI,EAAAA,SAAS,CAAC+H,cAAD,EAAiBC,MAAjB,CAAT;;AACA,WAASD,cAAT,GAA0B;AACtB,WAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmB7G,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACDN,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,OAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,OAFnB,EAE4B,KAAK,CAFjC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,EAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,YAFnB,EAEiC,KAAK,CAFtC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,UAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,UAFnB,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,aAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,aAFnB,EAEkC,KAAK,CAFvC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,gBAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,gBAFnB,EAEqC,KAAK,CAF1C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,SAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,SAFnB,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,IAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,IAFnB,EAEyB,KAAK,CAF9B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,UAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,UAFnB,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,WAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,WAFnB,EAEgC,KAAK,CAFrC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,UAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,UAFnB,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,IAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,OAFnB,EAE4B,KAAK,CAFjC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,UAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,UAFnB,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,IAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,WAFnB,EAEgC,KAAK,CAFrC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,MAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,MAFnB,EAE2B,KAAK,CAFhC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,SAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,SAFnB,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,aAAD,CADD,CAAD,EAEP8F,cAAc,CAACnH,SAFR,EAEmB,aAFnB,EAEkC,KAAK,CAFvC,CAAV;;AAGA,SAAOmH,cAAP;AACH,CAtDmC,CAsDlC5F,aAtDkC,CAApC;;AAuDA,SAAS4F,cAAT;AACA;AACA;AACA;;AACA,IAAIG,cAAc;AAAG;AAAe,UAAUF,MAAV,EAAkB;AAClDhI,EAAAA,SAAS,CAACkI,cAAD,EAAiBF,MAAjB,CAAT;;AACA,WAASE,cAAT,GAA0B;AACtB,WAAOF,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmB7G,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACDN,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,WAAD,CADD,CAAD,EAEPiG,cAAc,CAACtH,SAFR,EAEmB,QAFnB,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,GAAD,CADD,CAAD,EAEPiG,cAAc,CAACtH,SAFR,EAEmB,UAFnB,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,QAAD,CADD,CAAD,EAEPiG,cAAc,CAACtH,SAFR,EAEmB,QAFnB,EAE6B,KAAK,CAFlC,CAAV;;AAGA,SAAOsH,cAAP;AACH,CAfmC,CAelC/F,aAfkC,CAApC;;AAgBA,SAAS+F,cAAT;AACA;AACA;AACA;;AACA,IAAIC,qBAAqB;AAAG;AAAe,UAAUH,MAAV,EAAkB;AACzDhI,EAAAA,SAAS,CAACmI,qBAAD,EAAwBH,MAAxB,CAAT;;AACA,WAASG,qBAAT,GAAiC;AAC7B,WAAOH,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmB7G,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACDN,EAAAA,UAAU,CAAC,CACPsB,OAAO,CAAC;AAAEgG,IAAAA,MAAM,EAAE,SAAV;AAAqBC,IAAAA,QAAQ,EAAE,GAA/B;AAAoCC,IAAAA,MAAM,EAAE;AAA5C,GAAD,EAAyDJ,cAAzD,CADA,CAAD,EAEPC,qBAAqB,CAACvH,SAFf,EAE0B,UAF1B,EAEsC,KAAK,CAF3C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsB,OAAO,CAAC;AAAEgG,IAAAA,MAAM,EAAE,WAAV;AAAuBC,IAAAA,QAAQ,EAAE,GAAjC;AAAsCC,IAAAA,MAAM,EAAE;AAA9C,GAAD,EAA2DJ,cAA3D,CADA,CAAD,EAEPC,qBAAqB,CAACvH,SAFf,EAE0B,QAF1B,EAEoC,KAAK,CAFzC,CAAV;;AAGA,SAAOuH,qBAAP;AACH,CAZ0C,CAYzChG,aAZyC,CAA3C;;AAaA,SAASgG,qBAAT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAII,QAAQ;AAAG;AAAe,UAAUP,MAAV,EAAkB;AAC5ChI,EAAAA,SAAS,CAACuI,QAAD,EAAWP,MAAX,CAAT;;AACA,WAASO,QAAT,CAAkBC,OAAlB,EAA2BC,OAA3B,EAAoC;AAChC,QAAIC,KAAK,GAAGV,MAAM,CAACW,IAAP,CAAY,IAAZ,EAAkBH,OAAlB,EAA2BC,OAA3B,KAAuC,IAAnD;;AACAC,IAAAA,KAAK,CAACE,WAAN,GAAoB,KAApB;AACAF,IAAAA,KAAK,CAACG,aAAN,GAAsB,KAAtB;AACAH,IAAAA,KAAK,CAACI,cAAN,GAAuB,EAAvB;AACAJ,IAAAA,KAAK,CAACK,WAAN,GAAoB,EAApB,CALgC,CAMhC;;AACAL,IAAAA,KAAK,CAACM,QAAN,GAAiB,EAAjB;AACAN,IAAAA,KAAK,CAACO,UAAN,GAAmB,EAAnB;AACAP,IAAAA,KAAK,CAACQ,cAAN,GAAuB,EAAvB;AACAR,IAAAA,KAAK,CAACS,aAAN,GAAsB,KAAtB;AACAT,IAAAA,KAAK,CAACU,gBAAN,GAAyB,KAAzB;AACAV,IAAAA,KAAK,CAACW,WAAN,GAAoB,KAApB;AACAX,IAAAA,KAAK,CAACY,aAAN,GAAsB,KAAtB;AACAZ,IAAAA,KAAK,CAACa,eAAN,GAAwB,KAAxB;AACA,WAAOb,KAAP;AACH;;AACDc,EAAAA,UAAU,GAAGjB,QAAb;AACA;AACJ;AACA;AACA;AACA;AACA;;AACIA,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB6I,aAAnB,GAAmC,YAAY;AAC3C,WAAO,UAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACIlB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB8I,SAAnB,GAA+B,YAAY;AACvC,QAAIhB,KAAK,GAAG,IAAZ;;AACA,SAAKiB,gBAAL,GAAwB,EAAxB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,UAAL,GAAkB;AACdC,MAAAA,MAAM,EAAE,QADM;AAEdC,MAAAA,GAAG,EAAE,KAFS;AAGdC,MAAAA,KAAK,EAAE,OAHO;AAIdC,MAAAA,EAAE,EAAE,IAJU;AAKdC,MAAAA,IAAI,EAAE,MALQ;AAMdC,MAAAA,QAAQ,EAAE,WANI;AAOdC,MAAAA,QAAQ,EAAE,WAPI;AAQdC,MAAAA,SAAS,EAAE,YARG;AASdC,MAAAA,MAAM,EAAE,SATM;AAUdC,MAAAA,QAAQ,EAAE,gBAVI;AAWdC,MAAAA,MAAM,EAAE,cAXM;AAYdC,MAAAA,SAAS,EAAE,YAZG;AAadC,MAAAA,QAAQ,EAAE,WAbI;AAcdC,MAAAA,OAAO,EAAE,UAdK;AAedC,MAAAA,KAAK,EAAE,QAfO;AAgBdC,MAAAA,SAAS,EAAE,iBAhBG;AAiBdC,MAAAA,OAAO,EAAE,eAjBK;AAkBdC,MAAAA,UAAU,EAAE,aAlBE;AAmBdC,MAAAA,SAAS,EAAE,YAnBG;AAoBdC,MAAAA,QAAQ,EAAE,WApBI;AAqBdC,MAAAA,MAAM,EAAE,sBArBM;AAsBdC,MAAAA,IAAI,EAAE,oBAtBQ;AAuBdC,MAAAA,OAAO,EAAE,kBAvBK;AAwBdC,MAAAA,MAAM,EAAE,iBAxBM;AAyBdC,MAAAA,KAAK,EAAE,gBAzBO;AA0BdC,MAAAA,KAAK,EAAE;AA1BO,KAAlB;AA4BA,SAAKC,cAAL,GAAsB;AAClBC,MAAAA,cAAc,EAAE,IADE;AAElBC,MAAAA,QAAQ,EAAE,IAFQ;AAGlBC,MAAAA,eAAe,EAAEnH,UAHC;AAIlBoH,MAAAA,cAAc,EAAErE,YAJE;AAKlBsE,MAAAA,kBAAkB,EAAE,MALF;AAMlBC,MAAAA,WAAW,EAAE,UAAUC,CAAV,EAAa;AACtBvD,QAAAA,KAAK,CAACwD,gBAAN,CAAuBD,CAAvB;AACH,OARiB;AASlBE,MAAAA,mBAAmB,EAAE,KAAKA,mBATR;AAUlBC,MAAAA,aAAa,EAAE,KAAKC;AAVF,KAAtB;AAYA,SAAKC,cAAL,CAAoB,KAAKC,MAAzB;AACA,SAAKC,MAAL,GAAc,IAAI/J,SAAJ,CAAc,EAAd,CAAd;AACA,SAAKgK,QAAL,GAAgB,EAAhB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA,SAAKzD,cAAL,GAAsB,EAAtB;AACA,SAAK0D,KAAL,GAAa,CAAb;AACA,SAAKC,aAAL;;AACA,QAAIpJ,KAAK,CAAC,KAAKqJ,aAAN,CAAT,EAA+B;AAC3B,WAAKC,aAAL,CAAmB;AAAED,QAAAA,aAAa,EAAE;AAAjB,OAAnB,EAA0C,IAA1C;AACH;;AACD,QAAIrJ,KAAK,CAAC,KAAKuJ,YAAN,CAAT,EAA8B;AAC1B,WAAKD,aAAL,CAAmB;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OAAnB,EAAyC,IAAzC;AACH;;AACD,QAAIvJ,KAAK,CAAC,KAAKwJ,aAAN,CAAT,EAA+B;AAC3B,WAAKF,aAAL,CAAmB;AAAEE,QAAAA,aAAa,EAAE;AAAjB,OAAnB,EAA0C,IAA1C;AACH,KAFD,MAGK;AACD,WAAKN,cAAL,GAAsB,IAAtB;AACH;AACJ,GAlED;AAmEA;AACJ;AACA;AACA;AACA;AACA;;;AACIpE,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBsM,cAAnB,GAAoC,YAAY;AAC5C,QAAIC,SAAS,GAAG,CAAC,eAAD,EAAkB,cAAlB,EAAkC,eAAlC,CAAhB;AACA,WAAO,KAAKC,YAAL,CAAkBD,SAAlB,CAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;;;AACI5E,EAAAA,QAAQ,CAAC3H,SAAT,CAAmByM,MAAnB,GAA4B,YAAY;AACpC,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,UAAL;AACA,SAAKC,cAAL,CAAoB,KAApB;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;;AACA,QAAI,CAAC,KAAKC,QAAV,EAAoB;AAChB,WAAKC,SAAL;AACH;;AACD,SAAKC,iBAAL,CAAuB,KAAKC,YAA5B;AACA,SAAKC,cAAL,CAAoB,KAAKC,gBAAzB;;AACA,QAAI,CAAC,KAAKL,QAAV,EAAoB;AAChB,WAAKM,UAAL;AACH;;AACD,SAAKX,aAAL,GAAqB,KAArB;AACA,SAAKY,cAAL;AACH,GAhBD;;AAiBA3F,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2M,UAAnB,GAAgC,YAAY;AACxC,SAAK9E,OAAL,CAAa0F,YAAb,CAA0B,MAA1B,EAAkC,MAAlC;AACA,SAAK1F,OAAL,CAAa0F,YAAb,CAA0B,UAA1B,EAAsC,GAAtC;AACA,SAAK1F,OAAL,CAAa0F,YAAb,CAA0B,uBAA1B,EAAmD,KAAK1F,OAAL,CAAa2F,EAAb,GAAkB,SAArE;AACA,SAAKC,WAAL,CAAiB,IAAjB,EAAuB,KAAKC,QAA5B;AACA,SAAKC,YAAL;AACA,SAAKC,UAAL,CAAgB,KAAKC,aAArB;AACA,SAAKC,WAAL;AACA,SAAKC,cAAL,GAAsB,KAAKC,gBAAL,CAAsB,KAAKC,YAA3B,CAAtB;AACH,GATD;;AAUAtG,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB6M,eAAnB,GAAqC,YAAY;AAC7C,QAAI,KAAKE,QAAT,EAAmB;AACf,WAAKlF,OAAL,CAAaqG,SAAb,CAAuBC,GAAvB,CAA2BvH,QAA3B;AACH,KAFD,MAGK;AACD,WAAKiB,OAAL,CAAaqG,SAAb,CAAuBpM,MAAvB,CAA8B8E,QAA9B;AACH;AACJ,GAPD;;AAQAe,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2N,YAAnB,GAAkC,YAAY;AAC1C,KAAC,KAAKS,SAAL,GAAiBlM,QAAjB,GAA4BC,WAA7B,EAA0C,CAAC,KAAK0F,OAAN,CAA1C,EAA0D/C,GAA1D;AACH,GAFD;;AAGA6C,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBgN,SAAnB,GAA+B,YAAY;AACvC,QAAIqB,OAAO,GAAG,MAAM5I,OAAN,GAAgB,IAAhB,GAAuBhB,QAArC;AACA,QAAI6J,WAAW,GAAG;AACdC,MAAAA,QAAQ,EAAEF,OADI;AAEdG,MAAAA,MAAM,EAAE,MAAM/J,QAAN,GAAiB,MAAjB,GAA0BD,IAA1B,GAAiC,IAAjC,GAAwCG,UAAxC,GAAqD,IAArD,GAA4DD,KAA5D,GAAoE,KAApE,GAA4EuB;AAFtE,KAAlB;AAIA,SAAKwI,QAAL,GAAgB7M,YAAY,CAAC,KAAKiG,OAAN,EAAeyG,WAAf,CAA5B;AACA,QAAII,SAAS,GAAG;AACZH,MAAAA,QAAQ,EAAE,MAAM9J,QAAN,GAAiB,MAAjB,GAA0BD,IADxB;AAEZmK,MAAAA,cAAc,EAAE;AAFJ,KAAhB;AAIA,SAAKC,YAAL,GAAoBhN,YAAY,CAAC,KAAKiG,OAAN,EAAe6G,SAAf,CAAhC;AACH,GAZD;;AAaA/G,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4N,UAAnB,GAAgC,UAAUiB,SAAV,EAAqB;AACjD,KAACA,SAAS,GAAG3M,QAAH,GAAcC,WAAxB,EAAqC,CAAC,KAAK0F,OAAN,CAArC,EAAqDrC,WAArD;AACH,GAFD;;AAGAmC,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB8O,cAAnB,GAAoC,UAAUD,SAAV,EAAqB;AACrD,QAAIE,OAAO,GAAGxM,MAAM,CAAC,MAAM4B,UAAP,EAAmB,KAAK0D,OAAxB,CAApB;;AACA,QAAIgH,SAAJ,EAAe;AACXE,MAAAA,OAAO,CAACxB,YAAR,CAAqB,sBAArB,EAA6C,MAA7C;AACH,KAFD,MAGK;AACDwB,MAAAA,OAAO,CAACC,eAAR,CAAwB,sBAAxB;AACH;AACJ,GARD,CA3K4C,CAoL5C;;;AACArH,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBgO,gBAAnB,GAAsC,UAAUiB,QAAV,EAAoB;AACtD,QAAIA,QAAJ,EAAc;AACV,WAAKxG,WAAL,GAAmB,IAAnB,CADU,CAEV;;AACA,UAAI4C,CAAC,GAAG,KAAK,CAAb;AACA,WAAKxD,OAAL,CAAaqG,SAAb,CAAuBC,GAAvB,CAA2BpJ,WAA3B;;AACA,UAAI;AACA,YAAImK,QAAQ,CAACC,gBAAT,CAA0BF,QAA1B,EAAoCxO,MAAxC,EAAgD;AAC5C,iBAAOU,OAAO,CAAC+N,QAAQ,CAACE,aAAT,CAAuBH,QAAvB,EAAiCI,SAAjC,CAA2CC,IAA3C,EAAD,CAAd;AACH;AACJ,OAJD,CAKA,OAAOjE,CAAP,EAAU;AACN,eAAOlK,OAAO,CAAC8N,QAAD,CAAd;AACH;AACJ;;AACD,SAAKpH,OAAL,CAAaqG,SAAb,CAAuBpM,MAAvB,CAA8BiD,WAA9B;AACA,WAAOwK,SAAP;AACH,GAjBD;;AAkBA5H,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4M,cAAnB,GAAoC,UAAUpE,gBAAV,EAA4B;AAC5D,QAAIV,KAAK,GAAG,IAAZ;;AACA,SAAK+D,QAAL,CAAc2D,IAAd,CAAmB,OAAnB;;AACA,QAAI,KAAK7D,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAtC,EAAmD;AAC/C;AACA,WAAK+M,SAAL,GAAiB,KAAK/D,MAAL,CAAY8D,UAAZ,CAAuBA,UAAvB,CAAkCE,OAAnD;;AACA,UAAI,KAAKhE,MAAL,CAAY8D,UAAZ,CAAuBG,KAA3B,EAAkC;AAC9B,aAAKjE,MAAL,CAAY8D,UAAZ,CAAuBG,KAAvB,CAA6BC,IAA7B,CAAkC,UAAUxE,CAAV,EAAa;AAC3C;AACAvD,UAAAA,KAAK,CAAC4H,SAAN,GAAkB5H,KAAK,CAAC6D,MAAN,CAAa8D,UAAb,CAAwBA,UAAxB,CAAmCE,OAArD;;AACA,cAAI7H,KAAK,CAAC6D,MAAN,CAAa8D,UAAb,YAAmC9M,WAAnC,IAAkDmF,KAAK,CAAC4H,SAA5D,EAAuE;AACnE5H,YAAAA,KAAK,CAAC+D,QAAN,CAAeiE,GAAf;;AACAhI,YAAAA,KAAK,CAACiI,QAAN,GAAiB1E,CAAC,CAAC2E,MAAnB;AACAlI,YAAAA,KAAK,CAACmI,cAAN,GAAuBnI,KAAK,CAACoI,OAAN,EAAvB;;AACApI,YAAAA,KAAK,CAACqI,WAAN;;AACArI,YAAAA,KAAK,CAACsI,WAAN,CAAkB,IAAlB;;AACA,gBAAItI,KAAK,CAAC+D,QAAN,CAAepL,MAAf,KAA0B,CAA1B,IAA+B,CAACqH,KAAK,CAACgE,QAA1C,EAAoD;AAChDhE,cAAAA,KAAK,CAACuI,QAAN;AACH;AACJ;AACJ,SAbD,EAaGC,KAbH,CAaS,UAAUjF,CAAV,EAAa;AAClBvD,UAAAA,KAAK,CAACyI,OAAN,CAAc,eAAd,EAA+B;AAAEC,YAAAA,KAAK,EAAEnF;AAAT,WAA/B;AACH,SAfD;AAgBH,OAjBD,MAkBK;AACD,aAAKM,MAAL,CAAY8D,UAAZ,CAAuBgB,YAAvB,CAAoC,KAAKC,QAAL,CAAc,KAAK/E,MAAnB,CAApC,EAAgEkE,IAAhE,CAAqE,UAAUxE,CAAV,EAAa;AAC9EvD,UAAAA,KAAK,CAAC+D,QAAN,CAAeiE,GAAf;;AACAhI,UAAAA,KAAK,CAACiI,QAAN,GAAiB1E,CAAC,CAAC2E,MAAnB;AACAlI,UAAAA,KAAK,CAACmI,cAAN,GAAuBnI,KAAK,CAACoI,OAAN,EAAvB;;AACApI,UAAAA,KAAK,CAACqI,WAAN;;AACA,cAAI3H,gBAAJ,EAAsB;AAClBV,YAAAA,KAAK,CAACU,gBAAN,GAAyB,IAAzB;AACH;;AACDV,UAAAA,KAAK,CAACsI,WAAN,CAAkB,IAAlB;;AACAtI,UAAAA,KAAK,CAACU,gBAAN,GAAyB,KAAzB;;AACA,cAAIV,KAAK,CAAC+D,QAAN,CAAepL,MAAf,KAA0B,CAA1B,IAA+B,CAACqH,KAAK,CAACgE,QAA1C,EAAoD;AAChDhE,YAAAA,KAAK,CAACuI,QAAN;AACH;AACJ,SAbD,EAaGC,KAbH,CAaS,UAAUjF,CAAV,EAAa;AAClBvD,UAAAA,KAAK,CAACyI,OAAN,CAAc,eAAd,EAA+B;AAAEC,YAAAA,KAAK,EAAEnF;AAAT,WAA/B;AACH,SAfD;AAgBH;AACJ,KAvCD,MAwCK;AACD,WAAKQ,QAAL,CAAciE,GAAd;;AACA,UAAIjN,KAAK,CAAC,KAAK8I,MAAL,CAAY8D,UAAb,CAAT,EAAmC;AAC/B,aAAKkB,QAAL,GAAgB,KAAKZ,QAAL,GAAgB,EAAhC;AACH,OAFD,MAGK;AACD,aAAKA,QAAL,GAAgBa,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKnF,MAAL,CAAY8D,UAA3B,CAAX,CAAhB;AACA,aAAKU,WAAL;AACH;;AACD,WAAKF,cAAL,GAAsB,KAAKC,OAAL,EAAtB;AACA,WAAKE,WAAL,CAAiB,KAAjB;AACH;;AACD,QAAI,KAAKvE,QAAL,CAAcpL,MAAd,KAAyB,CAAzB,IAA8B,CAAC,KAAKqL,QAAxC,EAAkD;AAC9C,WAAKuE,QAAL;AACH;AACJ,GA1DD;;AA2DA1I,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB0Q,QAAnB,GAA8B,UAAUK,MAAV,EAAkBC,KAAlB,EAAyB;AACnD,QAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;AAAEA,MAAAA,KAAK,GAAG,IAAR;AAAe;;AACvC,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,KAAJ;;AACA,QAAI,CAACH,MAAM,CAACG,KAAZ,EAAmB;AACfA,MAAAA,KAAK,GAAG,IAAItO,KAAJ,EAAR;AACA,UAAIuO,IAAI,GAAG,KAAKC,mBAAL,CAAyBL,MAAzB,CAAX;;AACA,WAAK,IAAIM,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG9R,MAAM,CAAC+R,IAAP,CAAYJ,IAAZ,CAAtB,EAAyCE,EAAE,GAAGC,EAAE,CAAC7Q,MAAjD,EAAyD4Q,EAAE,EAA3D,EAA+D;AAC3D,YAAIG,GAAG,GAAGF,EAAE,CAACD,EAAD,CAAZ;;AACA,YAAIG,GAAG,KAAK,YAAR,IAAwBA,GAAG,KAAK,WAAhC,IAA+CA,GAAG,KAAK,OAAvD,IAAkE,CAAC,CAACT,MAAM,CAACS,GAAD,CAA1E,IACGA,GAAG,KAAK,KADX,IACoBP,OAAO,CAACQ,OAAR,CAAgBV,MAAM,CAACS,GAAD,CAAtB,MAAiC,CAAC,CAD1D,EAC6D;AACzDP,UAAAA,OAAO,CAACzB,IAAR,CAAauB,MAAM,CAACS,GAAD,CAAnB;AACH;AACJ;;AACDN,MAAAA,KAAK,CAAC3O,MAAN,CAAa0O,OAAb;;AACA,UAAIE,IAAI,CAACtR,cAAL,CAAoB,WAApB,CAAJ,EAAsC;AAClCqR,QAAAA,KAAK,CAACQ,IAAN,CAAWX,MAAM,CAACY,SAAlB;AACH;AACJ,KAdD,MAeK;AACDT,MAAAA,KAAK,GAAGH,MAAM,CAACG,KAAP,CAAaU,KAAb,EAAR;AACH;;AACDxO,IAAAA,QAAQ,CAACyO,UAAT,CAAoB,KAAKC,SAAzB,EAAoCf,MAAM,CAACgB,IAA3C,EAAiDb,KAAjD;;AACA,QAAI,CAACrO,KAAK,CAACmO,KAAD,CAAN,IAAiB,CAACnO,KAAK,CAACkO,MAAM,CAACiB,QAAR,CAA3B,EAA8C;AAC1Cd,MAAAA,KAAK,CAACe,KAAN,CAAYlB,MAAM,CAACiB,QAAnB,EAA6B,OAA7B,EAAuC,KAAK/B,cAAL,GAAsBiC,UAAU,CAAClB,KAAD,CAAhC,GAA0CA,KAAjF;AACH;;AACD,WAAOE,KAAP;AACH,GA3BD;;AA4BAvJ,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBkQ,OAAnB,GAA6B,YAAY;AACrC,WAAO,KAAKH,QAAL,CAAc,CAAd,IAAqB,OAAOhN,QAAQ,CAAC,KAAK4I,MAAL,CAAY6B,EAAb,EAAiB,KAAKuC,QAAL,CAAc,CAAd,CAAjB,CAAf,KAAsD,QAAvD,GAAmE,IAAnE,GAA0E,KAA9F,GAAuG,KAA9G;AACH,GAFD;;AAGApI,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBmQ,WAAnB,GAAiC,YAAY;AACzC,SAAKgC,QAAL,GAAgB,KAAKC,WAAL,CAAiB,KAAKrC,QAAtB,EAAgC,KAAKpE,MAArC,CAAhB;;AACA,QAAI,KAAKwG,QAAL,KAAkB,CAAtB,EAAyB;AACrB,WAAKE,WAAL,GAAmB,KAAKC,cAAL,CAAoB,KAAKvC,QAAzB,EAAmC,KAAKpE,MAAL,CAAYqG,QAA/C,CAAnB;AACA,UAAIO,SAAS,GAAG,KAAKC,aAAL,CAAmB,KAAKzC,QAAxB,EAAkCR,SAAlC,EAA6C,IAA7C,CAAhB;;AACA,UAAI1M,KAAK,CAAC0P,SAAD,CAAT,EAAsB;AAClB,aAAK5B,QAAL,GAAgB,EAAhB;AACH,OAFD,MAGK;AACD,aAAKA,QAAL,GAAgB4B,SAAhB;AACH;AACJ,KATD,MAUK;AACD,WAAK5B,QAAL,GAAgB,KAAKZ,QAArB;AACH;AACJ,GAfD;;AAgBApI,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBoQ,WAAnB,GAAiC,UAAUqC,QAAV,EAAoB;AACjD;AACA,SAAK3H,cAAL,CAAoBI,cAApB,CAAmCwH,KAAnC,GAA2C,CAA3C;AACA,QAAIC,UAAU,GAAG,KAAKC,aAAL,CAAmB,KAAKjC,QAAxB,CAAjB;AACA,SAAKkC,SAAL,GAAiBzP,QAAQ,CAAC0P,UAAT,CAAoB,KAAKC,aAAzB,EAAwCN,QAAQ,GAAG,KAAK9B,QAAR,GAAmBgC,UAAnE,EAA+E,KAAK7H,cAApF,CAAjB;AACA,SAAKjD,OAAL,CAAamL,WAAb,CAAyB,KAAKH,SAA9B;AACA,QAAII,SAAS,GAAG,KAAKJ,SAAL,CAAe1D,gBAAf,CAAgC,cAAhC,CAAhB;;AACA,QAAI,KAAK+D,YAAL,KAAsB,KAA1B,EAAiC;AAC7B,UAAIpS,CAAC,GAAG,CAAR;;AACA,aAAOA,CAAC,GAAGmS,SAAS,CAACxS,MAArB,EAA6B;AACzB,aAAK0S,gBAAL,CAAsBF,SAAS,CAACnS,CAAD,CAA/B,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,IAAhD;AACAA,QAAAA,CAAC;AACJ;AACJ;;AACD,QAAIsS,SAAS,GAAG5Q,SAAS,CAAC,MAAM2B,UAAP,EAAmB,KAAK0D,OAAxB,CAAzB;;AACA,QAAKuL,SAAS,CAAC3S,MAAV,KAAqB,CAArB,IAA2BwS,SAAS,IAAIA,SAAS,CAACxS,MAAV,KAAqB,CAA9D,IAAqE,KAAKyS,YAA9E,EAA4F;AACxF,WAAKG,YAAL,CAAkB,KAAKxL,OAAvB;AACH;;AACD,SAAKmB,eAAL,GAAuB,EAAvB;AACA,SAAKsK,eAAL,GAAuB,EAAvB;AACA,SAAKC,wBAAL;;AACA,QAAI,KAAKC,SAAL,IAAkB,KAAKC,YAAvB,IAAuC,CAAC,KAAK3H,QAAjD,EAA2D;AACvD,WAAK4H,sBAAL;AACH;AACJ,GAxBD;AAyBA;AACJ;AACA;;;AACI/L,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBuT,wBAAnB,GAA8C,UAAU/F,EAAV,EAAc;AACxD,SAAKnF,UAAL,GAAkB,EAAlB;;AACA,QAAI,KAAK0H,QAAL,IAAiB,KAAK0D,YAA1B,EAAwC;AACpC,UAAI,KAAKtB,QAAL,KAAkB,CAAtB,EAAyB;AACrB,YAAIpB,MAAM,GAAG,KAAKpF,MAAlB;AACA,YAAIgI,UAAU,GAAG,IAAIhR,WAAJ,CAAgB,KAAKoN,QAArB,EAA+B6D,YAA/B,CAA4C,IAAIhR,KAAJ,GAAYqP,KAAZ,CAAkBlB,MAAM,CAAC8C,SAAzB,EAAoC,OAApC,EAA6C,IAA7C,EAAmD,KAAnD,CAA5C,CAAjB;;AACA,aAAK,IAAI/S,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6S,UAAU,CAAClT,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,cAAIgT,QAAQ,GAAGH,UAAU,CAAC7S,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,IAAgCmG,UAAU,CAAC7S,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,EAA8BuG,QAA9B,EAAhC,GAA2E,IAA1F;AACA,cAAIC,SAAS,GAAGL,UAAU,CAAC7S,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAYqG,QAA1B,IAAsC2B,UAAU,CAAC7S,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAYqG,QAA1B,EAAoC+B,QAApC,EAAtC,GAAuF,IAAvG;;AACA,cAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0BqC,QAA1B,MAAwC,CAAC,CAAzC,IAA8C,CAAE,KAAKhI,QAAzD,EAAoE;AAChE,iBAAKM,YAAL,CAAkBoD,IAAlB,CAAuBsE,QAAvB;AACH;;AACD,cAAIH,UAAU,CAAC7S,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAYsI,WAA1B,CAAJ,EAA4C;AACxC,gBAAIC,IAAI,GAAGP,UAAU,CAAC7S,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,CAAX;AACA,gBAAI2G,SAAS,GAAG,IAAIxR,WAAJ,CAAgB,KAAKoN,QAArB,EACZ6D,YADY,CACC,IAAIhR,KAAJ,GAAYqP,KAAZ,CAAkBlB,MAAM,CAACiB,QAAzB,EAAmC,OAAnC,EAA4CkC,IAA5C,EAAkD,KAAlD,CADD,CAAhB;;AAEA,iBAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,SAAS,CAAC1T,MAAtC,EAA8C2T,KAAK,EAAnD,EAAuD;AACnD,kBAAIC,OAAO,GAAGF,SAAS,CAACC,KAAD,CAAT,CAAiB,KAAKzI,MAAL,CAAY6B,EAA7B,IAAmC2G,SAAS,CAACC,KAAD,CAAT,CAAiB,KAAKzI,MAAL,CAAY6B,EAA7B,EAAiCuG,QAAjC,EAAnC,GAAiF,IAA/F;;AACA,kBAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0B4C,OAA1B,MAAuC,CAAC,CAAxC,IAA6C,KAAKb,SAAtD,EAAiE;AAC7D,qBAAKpH,YAAL,CAAkBoD,IAAlB,CAAuB6E,OAAvB;AACH;AACJ;AACJ;AACJ;;AACD,aAAK,IAAIvT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsL,YAAL,CAAkB3L,MAAtC,EAA8CK,CAAC,EAA/C,EAAmD;AAC/C,cAAIwT,QAAQ,GAAG,KAAK3I,MAApB;AACA,cAAI4I,UAAU,GAAG,IAAI5R,WAAJ,CAAgB,KAAKoN,QAArB,EACb6D,YADa,CACA,IAAIhR,KAAJ,GAAYqP,KAAZ,CAAkBqC,QAAQ,CAAC9G,EAA3B,EAA+B,OAA/B,EAAwC,KAAKpB,YAAL,CAAkBtL,CAAlB,CAAxC,EAA8D,IAA9D,CADA,CAAjB;;AAEA,cAAIyT,UAAU,CAAC,CAAD,CAAV,IAAiB,KAAKf,SAA1B,EAAqC;AACjC,iBAAKgB,qBAAL,CAA2BF,QAA3B,EAAqCC,UAArC;AACA,iBAAKE,uBAAL,CAA6BF,UAAU,CAAC,CAAD,CAAvC;AACH;;AACD,cAAIA,UAAU,CAAC9T,MAAX,GAAoB,CAAxB,EAA2B;AACvB,gBAAIiU,SAAS,GAAGH,UAAU,CAAC,CAAD,CAAV,CAAc,KAAK5I,MAAL,CAAY6B,EAA1B,IAAgC+G,UAAU,CAAC,CAAD,CAAV,CAAc,KAAK5I,MAAL,CAAY6B,EAA1B,EAA8BuG,QAA9B,EAAhC,GAA2E,IAA3F;;AACA,gBAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0BiD,SAA1B,IAAuC,CAAC,CAAxC,IAA6C,KAAKrM,UAAL,CAAgBoJ,OAAhB,CAAwBiD,SAAxB,MAAuC,CAAC,CAAzF,EAA4F;AACxF,mBAAKrM,UAAL,CAAgBmH,IAAhB,CAAqBkF,SAArB;AACH;AACJ;;AACD,cAAIC,WAAW,GAAG,IAAIhS,WAAJ,CAAgB,KAAKoN,QAArB,EACd6D,YADc,CACD,IAAIhR,KAAJ,GAAYqP,KAAZ,CAAkBqC,QAAQ,CAACtC,QAA3B,EAAqC,OAArC,EAA8C,KAAK5F,YAAL,CAAkBtL,CAAlB,CAA9C,EAAoE,IAApE,CADC,CAAlB;;AAEA,eAAK,IAAIkL,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG2I,WAAW,CAAClU,MAAxC,EAAgDuL,KAAK,EAArD,EAAyD;AACrD,gBAAI0I,SAAS,GAAGC,WAAW,CAAC3I,KAAD,CAAX,CAAmB,KAAKL,MAAL,CAAY6B,EAA/B,IAAqCmH,WAAW,CAAC3I,KAAD,CAAX,CAAmB,KAAKL,MAAL,CAAY6B,EAA/B,EAAmCuG,QAAnC,EAArC,GAAqF,IAArG;;AACA,gBAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0BiD,SAA1B,MAAyC,CAAC,CAA1C,IAA+C,KAAKlB,SAAxD,EAAmE;AAC/D,mBAAKpH,YAAL,CAAkBoD,IAAlB,CAAuBkF,SAAvB;AACH;;AACD,gBAAI,KAAKtI,YAAL,CAAkBqF,OAAlB,CAA0BiD,SAA1B,IAAuC,CAAC,CAAxC,IAA6C,KAAKrM,UAAL,CAAgBoJ,OAAhB,CAAwBiD,SAAxB,MAAuC,CAAC,CAAzF,EAA4F;AACxF,mBAAKrM,UAAL,CAAgBmH,IAAhB,CAAqBkF,SAArB;AACH;AACJ;AACJ;AACJ,OA/CD,MAgDK,IAAI,KAAKvC,QAAL,KAAkB,CAAlB,IAAwB,KAAKxG,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,IAC7B,KAAK+M,SADJ,EACgB;AACjB,aAAK,IAAI1D,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAK+D,QAAL,CAActP,MAA1C,EAAkDuL,KAAK,EAAvD,EAA2D;AACvD,cAAI4I,OAAO,GAAG,KAAK7E,QAAL,CAAc/D,KAAd,EAAqB,KAAKL,MAAL,CAAY6B,EAAjC,IAAuC,KAAKuC,QAAL,CAAc/D,KAAd,EAAqB,KAAKL,MAAL,CAAY6B,EAAjC,EAAqCuG,QAArC,EAAvC,GAAyF,EAAvG;;AACA,cAAI,KAAKhE,QAAL,CAAc/D,KAAd,EAAqB,KAAKL,MAAL,CAAYkI,SAAjC,KAA+C,CAAE,KAAK/H,QAAtD,IAAmE,KAAKM,YAAL,CAAkBqF,OAAlB,CAA0BmD,OAA1B,MAAuC,CAAC,CAA/G,EAAkH;AAC9G,iBAAKxI,YAAL,CAAkBoD,IAAlB,CAAuBoF,OAAvB;AACH;;AACD,cAAI,KAAKxI,YAAL,CAAkBqF,OAAlB,CAA0BmD,OAA1B,IAAqC,CAAC,CAAtC,IAA2C,KAAKvM,UAAL,CAAgBoJ,OAAhB,CAAwBmD,OAAxB,MAAqC,CAAC,CAArF,EAAwF;AACpF,iBAAKvM,UAAL,CAAgBmH,IAAhB,CAAqBoF,OAArB;AACH;;AACD,cAAIC,UAAU,GAAG9R,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAZ,CAAkBL,QAAlB,EAAD,EAA+B,KAAKhE,QAAL,CAAc/D,KAAd,CAA/B,CAAzB;;AACA,cAAI6I,UAAJ,EAAgB;AACZ,iBAAKC,qBAAL,CAA2BD,UAA3B,EAAuC,KAAK9E,QAAL,CAAc/D,KAAd,CAAvC;AACH;AACJ;AACJ;;AACD,WAAKG,aAAL,CAAmB;AAAEC,QAAAA,YAAY,EAAE,KAAK/D;AAArB,OAAnB,EAAsD,IAAtD;AACH;AACJ,GArED;AAsEA;AACJ;AACA;;;AACIV,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBwU,qBAAnB,GAA2C,UAAUzD,MAAV,EAAkBgE,UAAlB,EAA8B;AACrE,QAAIvH,EAAE,GAAGuH,UAAU,CAAC,CAAD,CAAV,CAAc,KAAKpJ,MAAL,CAAYqG,QAA1B,IAAsC+C,UAAU,CAAC,CAAD,CAAV,CAAc,KAAKpJ,MAAL,CAAYqG,QAA1B,EAAoC+B,QAApC,EAAtC,GAAuF,IAAhG;AACA,QAAIiB,KAAK,GAAG,CAAZ;AACA,QAAInN,OAAO,GAAG,KAAKA,OAAL,CAAauH,aAAb,CAA2B,gBAAgB2F,UAAU,CAAC,CAAD,CAAV,CAAc,KAAKpJ,MAAL,CAAY6B,EAA1B,CAAhB,GAAgD,IAA3E,CAAd;AACA,QAAI4F,SAAS,GAAG,KAAKvL,OAAL,CAAauH,aAAb,CAA2B,gBAAgB2F,UAAU,CAAC,CAAD,CAAV,CAAc,KAAKpJ,MAAL,CAAYqG,QAA1B,CAAhB,GAAsD,IAAjF,CAAhB;;AACA,QAAI,CAACnK,OAAD,IAAY,CAACuL,SAAjB,EAA4B;AACxB,UAAI6B,GAAG,GAAG,KAAKjM,eAAL,CAAqBvI,MAA/B;;AACA,UAAI,KAAKuI,eAAL,CAAqByI,OAArB,CAA6BjE,EAA7B,MAAqC,CAAC,CAA1C,EAA6C;AACzC,aAAKxE,eAAL,CAAqBwG,IAArB,CAA0BhC,EAA1B;AACH;;AACD,UAAI0H,UAAU,GAAG,KAAK1C,aAAL,CAAmB,KAAKzC,QAAxB,EAAkCvC,EAAlC,CAAjB;;AACA,WAAK,IAAI1M,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoU,UAAU,CAACzU,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,YAAIuT,OAAO,GAAGa,UAAU,CAACpU,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,IAAgC0H,UAAU,CAACpU,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,EAA8BuG,QAA9B,EAAhC,GAA2E,IAAzF;;AACA,YAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0B4C,OAA1B,MAAuC,CAAC,CAA5C,EAA+C;AAC3CW,UAAAA,KAAK;AACR;;AACD,YAAIA,KAAK,KAAKE,UAAU,CAACzU,MAArB,IAA+B,KAAK2L,YAAL,CAAkBqF,OAAlB,CAA0BjE,EAA1B,MAAkC,CAAC,CAAtE,EAAyE;AACrE,eAAKpB,YAAL,CAAkBoD,IAAlB,CAAuBhC,EAAvB;AACH;AACJ;;AACD,UAAI2H,UAAU,GAAG,IAAIxS,WAAJ,CAAgB,KAAKoN,QAArB,EACb6D,YADa,CACA,IAAIhR,KAAJ,GAAYqP,KAAZ,CAAkBlB,MAAM,CAACvD,EAAzB,EAA6B,OAA7B,EAAsCA,EAAtC,EAA0C,IAA1C,CADA,CAAjB;AAEA,WAAKgH,qBAAL,CAA2BzD,MAA3B,EAAmCoE,UAAnC;AACH,KAlBD,MAmBK,IAAI/B,SAAJ,EAAe;AAChB,UAAIgC,KAAK,GAAG7S,MAAM,CAAC,MAAMwD,KAAP,EAAcqN,SAAd,CAAlB;;AACA,UAAI,CAACgC,KAAL,EAAY;AACR,aAAKC,WAAL,CAAiBjC,SAAjB,EAA4B,eAA5B,EAA6C,IAA7C,EAAmD,IAAnD,EAAyD,IAAzD;AACH;AACJ;AACJ,GA9BD;AA+BA;AACJ;AACA;;;AACIzL,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB0T,sBAAnB,GAA4C,YAAY;AACpD,QAAI4B,aAAa,GAAG9S,SAAS,CAAC,MAAMwD,aAAP,EAAsB,KAAK6B,OAA3B,CAA7B;AACA,QAAI0N,mBAAJ;;AACA,SAAK,IAAIzU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwU,aAAa,CAAC7U,MAAlC,EAA0CK,CAAC,EAA3C,EAA+C;AAC3C,UAAI0U,IAAI,GAAGpT,OAAO,CAACkT,aAAa,CAACxU,CAAD,CAAd,EAAmB,MAAMiD,QAAzB,CAAlB;AACA,UAAI0R,MAAM,GAAGD,IAAI,CAACE,YAAL,CAAkB,UAAlB,EAA8B3B,QAA9B,EAAb;;AACA,UAAI,KAAK5B,QAAL,KAAkB,CAAtB,EAAyB;AACrBoD,QAAAA,mBAAmB,GAAG,IAAI5S,WAAJ,CAAgB,KAAKoN,QAArB,EAClB6D,YADkB,CACL,IAAIhR,KAAJ,GAAYqP,KAAZ,CAAkB,KAAKtG,MAAL,CAAYqG,QAA9B,EAAwC,OAAxC,EAAiDyD,MAAjD,EAAyD,IAAzD,CADK,CAAtB;AAEH,OAHD,MAIK;AACDF,QAAAA,mBAAmB,GAAG,KAAK/C,aAAL,CAAmB,KAAKzC,QAAxB,EAAkC0F,MAAlC,CAAtB;AACH;;AACD,UAAIT,KAAK,GAAG,CAAZ;;AACA,UAAIO,mBAAJ,EAAyB;AACrB,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,mBAAmB,CAAC9U,MAAxC,EAAgDkV,CAAC,EAAjD,EAAqD;AACjD,cAAItB,OAAO,GAAGkB,mBAAmB,CAACI,CAAD,CAAnB,CAAuB,KAAKhK,MAAL,CAAY6B,EAAnC,EAAuCuG,QAAvC,EAAd;;AACA,cAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0B4C,OAA1B,MAAuC,CAAC,CAA5C,EAA+C;AAC3CW,YAAAA,KAAK;AACR;AACJ;;AACD,YAAIA,KAAK,KAAKO,mBAAmB,CAAC9U,MAAlC,EAA0C;AACtC,cAAImV,SAAS,GAAGJ,IAAI,CAACE,YAAL,CAAkB,UAAlB,CAAhB;;AACA,cAAI,KAAKtJ,YAAL,CAAkBqF,OAAlB,CAA0BmE,SAA1B,MAAyC,CAAC,CAA9C,EAAiD;AAC7C,iBAAKxJ,YAAL,CAAkBoD,IAAlB,CAAuBoG,SAAvB;AACH;;AACD,eAAKP,WAAL,CAAiBG,IAAjB,EAAuB,OAAvB,EAAgC,IAAhC,EAAsC,IAAtC,EAA4C,IAA5C;AACH,SAND,MAOK,IAAIR,KAAK,KAAK,CAAV,IAAe,KAAK5I,YAAL,CAAkB3L,MAAlB,KAA6B,CAAhD,EAAmD;AACpD,eAAK4U,WAAL,CAAiBG,IAAjB,EAAuB,SAAvB,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,IAA9C;AACH;AACJ;AACJ;AACJ,GAjCD;AAkCA;AACJ;AACA;;;AACI7N,EAAAA,QAAQ,CAAC3H,SAAT,CAAmByU,uBAAnB,GAA6C,UAAUoB,IAAV,EAAgB;AACzD,QAAIhO,OAAJ;;AACA,QAAI,KAAKsK,QAAL,KAAkB,CAAtB,EAAyB;AACrBtK,MAAAA,OAAO,GAAG,KAAKA,OAAL,CAAauH,aAAb,CAA2B,gBAAgByG,IAAI,CAAC,KAAKlK,MAAL,CAAYqG,QAAb,CAApB,GAA6C,IAAxE,CAAV;AACH,KAFD,MAGK;AACDnK,MAAAA,OAAO,GAAG,KAAKA,OAAL,CAAauH,aAAb,CAA2B,gBAAgByG,IAAI,CAAC,KAAKlK,MAAL,CAAY6B,EAAb,CAApB,GAAuC,IAAlE,CAAV;AACH;;AACD,QAAI3F,OAAJ,EAAa;AACT,UAAIiO,WAAW,GAAGjO,OAAO,CAACuH,aAAR,CAAsB,MAAMnJ,YAA5B,EAA0CyP,YAA1C,CAAuD,cAAvD,CAAlB;;AACA,UAAII,WAAW,KAAK,MAApB,EAA4B;AACxB,aAAKT,WAAL,CAAiBxN,OAAjB,EAA0B,eAA1B,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD;AACH;AACJ,KALD,MAMK,IAAI,KAAKsK,QAAL,KAAkB,CAAtB,EAAyB;AAC1B,UAAI8C,GAAG,GAAG,KAAKjM,eAAL,CAAqBvI,MAA/B;;AACA,UAAI,KAAKuI,eAAL,CAAqByI,OAArB,CAA6BoE,IAAI,CAAC,KAAKlK,MAAL,CAAY6B,EAAb,CAAJ,CAAqBuG,QAArB,EAA7B,MAAkE,CAAC,CAAvE,EAA0E;AACtE,aAAK/K,eAAL,CAAqBwG,IAArB,CAA0BqG,IAAI,CAAC,KAAKlK,MAAL,CAAY6B,EAAb,CAAJ,CAAqBuG,QAArB,EAA1B;AACH;AACJ;AACJ,GApBD;AAqBA;AACJ;AACA;;;AACIpM,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB8U,qBAAnB,GAA2C,UAAUD,UAAV,EAAsB9E,QAAtB,EAAgC;AACvE,QAAIiF,KAAK,GAAG,CAAZ;AACA,QAAIe,aAAa,GAAGhG,QAAQ,CAAC,KAAKpE,MAAL,CAAY6B,EAAb,CAAR,GAA2BuC,QAAQ,CAAC,KAAKpE,MAAL,CAAY6B,EAAb,CAAR,CAAyBuG,QAAzB,EAA3B,GAAiE,EAArF;;AACA,SAAK,IAAI/H,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG6I,UAAU,CAACpU,MAAvC,EAA+CuL,KAAK,EAApD,EAAwD;AACpD,UAAIgK,YAAY,GAAGnB,UAAU,CAAC7I,KAAD,CAAV,CAAkB,KAAKL,MAAL,CAAY6B,EAA9B,IAAoCqH,UAAU,CAAC7I,KAAD,CAAV,CAAkB,KAAKL,MAAL,CAAY6B,EAA9B,EAAkCuG,QAAlC,EAApC,GAAmF,EAAtG;;AACA,UAAIc,UAAU,CAAC7I,KAAD,CAAV,CAAkB,KAAKL,MAAL,CAAYkI,SAA9B,KAA4C,CAAE,KAAK/H,QAAnD,IAAgE,KAAKM,YAAL,CAAkBqF,OAAlB,CAA0BuE,YAA1B,MAA4C,CAAC,CAAjH,EAAoH;AAChH,aAAK5J,YAAL,CAAkBoD,IAAlB,CAAuBwG,YAAvB;AACH;;AACD,UAAI,KAAK5J,YAAL,CAAkBqF,OAAlB,CAA0BsE,aAA1B,MAA6C,CAAC,CAA9C,IAAmD,KAAK3J,YAAL,CAAkBqF,OAAlB,CAA0BuE,YAA1B,MAA4C,CAAC,CAAhG,IAAqG,KAAKxC,SAA9G,EAAyH;AACrH,aAAKpH,YAAL,CAAkBoD,IAAlB,CAAuBwG,YAAvB;AACH;;AACD,UAAI,KAAK5J,YAAL,CAAkBqF,OAAlB,CAA0BuE,YAA1B,MAA4C,CAAC,CAA7C,IAAkD,KAAKxC,SAA3D,EAAsE;AAClEwB,QAAAA,KAAK;AACR;;AACD,UAAI,KAAK5I,YAAL,CAAkBqF,OAAlB,CAA0BuE,YAA1B,IAA0C,CAAC,CAA3C,IAAgD,KAAK3N,UAAL,CAAgBoJ,OAAhB,CAAwBuE,YAAxB,MAA0C,CAAC,CAA/F,EAAkG;AAC9F,aAAK3N,UAAL,CAAgBmH,IAAhB,CAAqBwG,YAArB;AACH;;AACD,UAAIC,aAAa,GAAGlT,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAZ,CAAkBL,QAAlB,EAAD,EAA+Bc,UAAU,CAAC7I,KAAD,CAAzC,CAA5B;;AACA,UAAIiK,aAAJ,EAAmB;AACf,aAAK3C,eAAL,CAAqB9D,IAArB,CAA0BO,QAA1B;AACA,aAAK+E,qBAAL,CAA2BmB,aAA3B,EAA0CpB,UAAU,CAAC7I,KAAD,CAApD;AACH;;AACD,UAAIgJ,KAAK,KAAKH,UAAU,CAACpU,MAArB,IAA+B,KAAK+S,SAApC,IAAiD,KAAKpH,YAAL,CAAkBqF,OAAlB,CAA0BsE,aAA1B,MAA6C,CAAC,CAAnG,EAAsG;AAClG,aAAK3J,YAAL,CAAkBoD,IAAlB,CAAuBuG,aAAvB;AACH;AACJ;;AACD,QAAIf,KAAK,KAAK,CAAV,IAAe,KAAKxB,SAAxB,EAAmC;AAC/B,WAAKiB,uBAAL,CAA6B1E,QAA7B;;AACA,WAAK,IAAIkF,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAK3B,eAAL,CAAqB7S,MAA7C,EAAqDwU,GAAG,EAAxD,EAA4D;AACxD,YAAKlF,QAAQ,KAAK,KAAKuD,eAAL,CAAqB2B,GAArB,CAAd,IAA6C,KAAK3B,eAAL,CAAqB2B,GAArB,CAAjD,EAA6E;AACzE,eAAKR,uBAAL,CAA6B,KAAKnB,eAAL,CAAqB2B,GAArB,CAA7B;AACH;AACJ;AACJ;;AACD,SAAK3B,eAAL,GAAuB,EAAvB;AACH,GAnCD;;AAoCA3L,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBsL,gBAAnB,GAAsC,UAAUD,CAAV,EAAa;AAC/C,QAAI,KAAKoI,YAAT,EAAuB;AACnB,UAAIyC,WAAW,GAAG7S,cAAc,CAAC,KAAK0P,aAAN,EAAqB,IAArB,EAA2B;AAAErF,QAAAA,QAAQ,EAAE,KAAKyI;AAAjB,OAA3B,CAAhC;AACAD,MAAAA,WAAW,CAAC3I,YAAZ,CAAyB,MAAzB,EAAiC,UAAjC;AACA,UAAI6I,IAAI,GAAG7T,MAAM,CAAC,SAASiC,IAAV,EAAgB6G,CAAC,CAACgL,IAAlB,CAAjB;AACA,UAAI7I,EAAE,GAAGnC,CAAC,CAACgL,IAAF,CAAOX,YAAP,CAAoB,UAApB,CAAT;AACArK,MAAAA,CAAC,CAACgL,IAAF,CAAOnB,UAAP,CAAkB,CAAlB,EAAqBoB,YAArB,CAAkCJ,WAAlC,EAA+C7K,CAAC,CAACgL,IAAF,CAAOnB,UAAP,CAAkB,CAAlB,EAAqBA,UAArB,CAAgCrS,KAAK,CAACuT,IAAD,CAAL,GAAc,CAAd,GAAkB,CAAlD,CAA/C;AACA,UAAIG,UAAU,GAAGxT,QAAQ,CAACsI,CAAC,CAACM,MAAF,CAASkI,SAAV,EAAqBxI,CAAC,CAACmL,OAAvB,CAAzB;;AACA,UAAI,KAAKpK,YAAL,CAAkBqF,OAAlB,CAA0BjE,EAA1B,IAAgC,CAAC,CAArC,EAAwC;AACpCjL,QAAAA,MAAM,CAAC,MAAM2D,aAAP,EAAsBgQ,WAAtB,CAAN,CAAyChI,SAAzC,CAAmDC,GAAnD,CAAuDpI,KAAvD;AACAmQ,QAAAA,WAAW,CAAC3I,YAAZ,CAAyB,cAAzB,EAAyC,MAAzC;AACA,aAAKkJ,QAAL,CAAcpL,CAAC,CAACgL,IAAhB;AACH,OAJD,MAKK,IAAI,CAACxT,KAAK,CAAC0T,UAAD,CAAN,IAAsBA,UAAU,CAACxC,QAAX,OAA0B,MAApD,EAA4D;AAC7DxR,QAAAA,MAAM,CAAC,MAAM2D,aAAP,EAAsBgQ,WAAtB,CAAN,CAAyChI,SAAzC,CAAmDC,GAAnD,CAAuDpI,KAAvD;AACAmQ,QAAAA,WAAW,CAAC3I,YAAZ,CAAyB,cAAzB,EAAyC,MAAzC;AACA,aAAKkJ,QAAL,CAAcpL,CAAC,CAACgL,IAAhB;AACH,OAJI,MAKA;AACDH,QAAAA,WAAW,CAAC3I,YAAZ,CAAyB,cAAzB,EAAyC,OAAzC;AACH;;AACD,UAAImJ,KAAK,GAAGnU,MAAM,CAAC,MAAM2D,aAAP,EAAsBgQ,WAAtB,CAAlB;AACAxU,MAAAA,YAAY,CAACyM,GAAb,CAAiBuI,KAAjB,EAAwB,WAAxB,EAAqC,KAAKC,iBAA1C,EAA6D,IAA7D;AACAjV,MAAAA,YAAY,CAACyM,GAAb,CAAiBuI,KAAjB,EAAwB,SAAxB,EAAmC,KAAKC,iBAAxC,EAA2D,IAA3D;AACH;;AACD,QAAI,KAAK9I,aAAT,EAAwB;AACpB,WAAK+I,aAAL,CAAmBvL,CAAC,CAACgL,IAArB;AACH;;AACD,QAAI,KAAKQ,mBAAL,IAA4B,CAACxL,CAAC,CAACgL,IAAF,CAAOnI,SAAP,CAAiB4I,QAAjB,CAA0BpR,QAA1B,CAAjC,EAAsE;AAClE2F,MAAAA,CAAC,CAACgL,IAAF,CAAO9I,YAAP,CAAoB,eAApB,EAAqC,OAArC;AACH;;AACD,QAAI5B,MAAM,GAAGN,CAAC,CAACM,MAAf;AACA,SAAKoL,cAAL,CAAoB1L,CAApB,EAAuBM,MAAM,CAACqL,QAA9B,EAAwCtR,QAAxC;AACA,SAAKqR,cAAL,CAAoB1L,CAApB,EAAuBM,MAAM,CAACsL,QAA9B,EAAwCtR,QAAxC;;AACA,QAAI,CAAC9C,KAAK,CAAC,KAAKkL,cAAN,CAAV,EAAiC;AAC7B,UAAImJ,OAAO,GAAG7L,CAAC,CAACgL,IAAF,CAAOjH,aAAP,CAAqB,MAAMpL,QAA3B,CAAd;AACA,UAAImT,MAAM,GAAG9L,CAAC,CAACgL,IAAF,CAAOX,YAAP,CAAoB,UAApB,CAAb;AACAwB,MAAAA,OAAO,CAAC7H,SAAR,GAAoB,EAApB;AACA,WAAK+H,kBAAL,CAAwB/L,CAAC,CAACmL,OAA1B,EAAmCU,OAAnC,EAA4CC,MAA5C;AACH;;AACD,QAAIE,SAAS,GAAG;AACZ7B,MAAAA,IAAI,EAAEnK,CAAC,CAACgL,IADI;AAEZiB,MAAAA,QAAQ,EAAEjM,CAAC,CAACmL,OAFA;AAGZzE,MAAAA,IAAI,EAAE1G,CAAC,CAAC0G;AAHI,KAAhB;;AAKA,QAAI,CAAC,KAAK/J,WAAV,EAAuB;AACnB,WAAKuI,OAAL,CAAa,UAAb,EAAyB8G,SAAzB;AACH;AACJ,GAhDD;;AAiDA1P,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2W,iBAAnB,GAAuC,UAAUtL,CAAV,EAAa;AAChD,QAAIkM,UAAU,GAAGhV,MAAM,CAAC,MAAM4D,cAAP,EAAuBkF,CAAC,CAACjL,MAAF,CAASoX,aAAhC,CAAvB;AACAlU,IAAAA,kBAAkB,CAAC+H,CAAD,EAAIkM,UAAJ,CAAlB;AACH,GAHD;;AAIA5P,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB+W,cAAnB,GAAoC,UAAU1L,CAAV,EAAaoM,MAAb,EAAqB/J,QAArB,EAA+B;AAC/D,QAAImI,IAAI,GAAGxK,CAAC,CAACmL,OAAb;AACA,QAAIkB,WAAW,GAAG3U,QAAQ,CAAC0U,MAAD,EAAS5B,IAAT,CAA1B;;AACA,QAAI,CAAChT,KAAK,CAAC6U,WAAD,CAAN,IAAuBA,WAAW,CAAC3D,QAAZ,OAA2B,OAAtD,EAA+D;AAC3D1I,MAAAA,CAAC,CAACgL,IAAF,CAAOnI,SAAP,CAAiBC,GAAjB,CAAqBT,QAArB;AACH;AACJ,GAND;;AAOA/F,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBoS,WAAnB,GAAiC,UAAUuF,EAAV,EAAc5G,MAAd,EAAsB;AACnD,QAAI,KAAKpF,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAtC,EAAmD;AAC/C,WAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6W,EAAE,CAAClX,MAAvB,EAA+BK,CAAC,EAAhC,EAAoC;AAChC,YAAI,KAAK4O,SAAT,EAAoB;AAChB,cAAK,OAAOqB,MAAM,CAACqD,KAAd,KAAwB,QAAzB,IAAsCvR,KAAK,CAACE,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAeuD,EAAE,CAAC7W,CAAD,CAAjB,CAAT,CAA3C,IAA8E,CAAC+B,KAAK,CAACE,QAAQ,CAACgO,MAAM,CAACiB,QAAR,EAAkB2F,EAAE,CAAC7W,CAAD,CAApB,CAAT,CAAxF,EAA4H;AACxH,mBAAO,CAAP;AACH;AACJ,SAJD,MAKK,IAAK,OAAOiQ,MAAM,CAACqD,KAAd,KAAwB,QAAzB,IAAsCvR,KAAK,CAACE,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAeuD,EAAE,CAAC7W,CAAD,CAAjB,CAAT,CAA/C,EAAgF;AACjF,iBAAO,CAAP;AACH;AACJ;;AACD,aAAO,CAAP;AACH;;AACD,SAAK,IAAIA,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAG0C,EAAE,CAAClX,MAAzB,EAAiCK,CAAC,GAAGmU,GAArC,EAA0CnU,CAAC,EAA3C,EAA+C;AAC3C,UAAK,OAAOiQ,MAAM,CAACqD,KAAd,KAAwB,QAAzB,IAAsC,CAACvR,KAAK,CAACE,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAeuD,EAAE,CAAC7W,CAAD,CAAjB,CAAT,CAAhD,EAAiF;AAC7E,eAAO,CAAP;AACH;;AACD,UAAI,CAAC+B,KAAK,CAACE,QAAQ,CAACgO,MAAM,CAACiB,QAAR,EAAkB2F,EAAE,CAAC7W,CAAD,CAApB,CAAT,CAAN,IAA4C,CAAC+B,KAAK,CAACE,QAAQ,CAACgO,MAAM,CAACkD,WAAR,EAAqB0D,EAAE,CAAC7W,CAAD,CAAvB,CAAT,CAAtD,EAA6F;AACzF,eAAO,CAAP;AACH;AACJ;;AACD,WAAO,CAAP;AACH,GAvBD;;AAwBA6G,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBsS,cAAnB,GAAoC,UAAU7C,UAAV,EAAsBmI,OAAtB,EAA+B;AAC/D,QAAIC,QAAQ,GAAG,IAAIjV,KAAJ,GAAYkV,KAAZ,CAAkBF,OAAlB,CAAf;AACA,QAAID,EAAE,GAAGvU,QAAQ,CAAC2U,aAAT,CAAuBtI,UAAvB,EAAmCoI,QAAnC,CAAT;AACA,QAAIG,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIrC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgC,EAAE,CAAClX,MAAvB,EAA+BkV,CAAC,EAAhC,EAAoC;AAChC,UAAIsC,OAAO,GAAGN,EAAE,CAAChC,CAAD,CAAF,CAAMuC,KAApB;AACAF,MAAAA,OAAO,CAACxI,IAAR,CAAayI,OAAb;AACH;;AACD,WAAOD,OAAP;AACH,GATD;;AAUArQ,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4S,aAAnB,GAAmC,UAAUuF,IAAV,EAAgB;AAC/C,QAAIA,IAAI,IAAI,KAAKrG,SAAL,KAAmB,MAA/B,EAAuC;AACnCqG,MAAAA,IAAI,GAAG/U,QAAQ,CAAC2U,aAAT,CAAuBI,IAAvB,EAA6B/U,QAAQ,CAACyO,UAAT,CAAoB,KAAKC,SAAzB,EAAoC,KAAKnG,MAAL,CAAYoG,IAAhD,CAA7B,CAAP;AACH;;AACD,WAAOoG,IAAP;AACH,GALD;;AAMAxQ,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqT,YAAnB,GAAkC,UAAUxL,OAAV,EAAmB;AACjD,QAAIuQ,MAAM,GAAG5V,SAAS,CAAC,MAAM+D,KAAP,EAAcsB,OAAd,CAAtB;;AACA,SAAK,IAAIwQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAAM,CAAC3X,MAA3B,EAAmC4X,CAAC,EAApC,EAAwC;AACpCD,MAAAA,MAAM,CAACC,CAAD,CAAN,CAAU9K,YAAV,CAAuB,KAAvB,EAA8BhH,KAA9B;AACH;;AACD,QAAI,KAAKuF,QAAT,EAAmB;AACf,UAAIwM,MAAM,GAAG9V,SAAS,CAAC,MAAMkD,QAAP,EAAiBmC,OAAjB,CAAtB;;AACA,WAAK,IAAI/G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwX,MAAM,CAAC7X,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;AACpC,aAAKyX,UAAL,CAAgBD,MAAM,CAACxX,CAAD,CAAtB,EAA2B,IAA3B;AACA;AACH;;AACDqB,MAAAA,WAAW,CAACmW,MAAD,EAAS5S,QAAT,CAAX;AACH;;AACD,QAAI8S,MAAM,GAAGhW,SAAS,CAAC,MAAMuB,QAAN,GAAiB,QAAjB,GAA4B4B,QAA5B,GAAuC,GAAxC,EAA6CkC,OAA7C,CAAtB;;AACA,SAAK,IAAI8N,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6C,MAAM,CAAC/X,MAA3B,EAAmCkV,CAAC,EAApC,EAAwC;AACpC,UAAIS,IAAI,GAAG7T,MAAM,CAAC,SAASiC,IAAV,EAAgBgU,MAAM,CAAC7C,CAAD,CAAtB,CAAjB;;AACA,UAAIS,IAAI,IAAIA,IAAI,CAAClI,SAAL,CAAe4I,QAAf,CAAwBhT,UAAxB,CAAZ,EAAiD;AAC7C,aAAK2U,iBAAL,CAAuBD,MAAM,CAAC7C,CAAD,CAA7B;AACH;AACJ;;AACD,QAAI+C,MAAM,GAAGlW,SAAS,CAAC,MAAMmD,QAAP,EAAiBkC,OAAjB,CAAtB;;AACA,QAAI,CAAC,KAAKkE,cAAV,EAA0B;AACtB,WAAK,IAAIjL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4X,MAAM,CAACjY,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;AACpC,aAAKqS,gBAAL,CAAsBuF,MAAM,CAAC5X,CAAD,CAA5B;AACH;AACJ;;AACDqB,IAAAA,WAAW,CAACuW,MAAD,EAAS/S,QAAT,CAAX;AACA,SAAKgT,UAAL;;AACA,QAAI,KAAK7M,QAAT,EAAmB;AACf,WAAK8M,iBAAL;AACH;AACJ,GA/BD;;AAgCAjR,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4Y,iBAAnB,GAAuC,YAAY;AAC/C,QAAI,KAAKnF,YAAT,EAAuB;AACnB,UAAIoF,KAAK,GAAG,GAAGC,MAAH,CAAU,EAAV,EAAc,KAAK1M,YAAnB,CAAZ;AACA,WAAKD,aAAL,CAAmB;AAAEC,QAAAA,YAAY,EAAEyM;AAAhB,OAAnB,EAA4C,IAA5C;AACH;AACJ,GALD;;AAMAlR,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB+Y,mBAAnB,GAAyC,YAAY;AACjD,QAAI,KAAKvF,SAAT,EAAoB;AAChB,UAAIwF,SAAS,GAAGxW,SAAS,CAAC,IAAD,EAAO,KAAKqF,OAAZ,CAAzB;AACA,UAAIgL,SAAS,GAAG,KAAK,CAArB;;AACA,WAAK,IAAI/R,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkY,SAAS,CAACvY,MAA9B,EAAsCK,CAAC,EAAvC,EAA2C;AACvC,YAAIkY,SAAS,CAAClY,CAAD,CAAT,CAAaoN,SAAb,CAAuB4I,QAAvB,CAAgC/S,QAAhC,CAAJ,EAA+C;AAC3C8O,UAAAA,SAAS,GAAGtQ,MAAM,CAAC,MAAM4B,UAAP,EAAmB6U,SAAS,CAAClY,CAAD,CAA5B,CAAlB;;AACA,cAAI+R,SAAJ,EAAe;AACX,iBAAKoG,sBAAL,CAA4BD,SAAS,CAAClY,CAAD,CAArC;AACH,WAFD,MAGK;AACD,iBAAKoY,qBAAL,CAA2BF,SAAS,CAAClY,CAAD,CAApC;AACH;AACJ;AACJ;AACJ,KAdD,MAeK;AACD,UAAIwU,aAAa,GAAG9S,SAAS,CAAC,MAAMwD,aAAP,EAAsB,KAAK6B,OAA3B,CAA7B;;AACA,WAAK,IAAI/G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwU,aAAa,CAAC7U,MAAlC,EAA0CK,CAAC,EAA3C,EAA+C;AAC3CwU,QAAAA,aAAa,CAACxU,CAAD,CAAb,CAAiBoN,SAAjB,CAA2BpM,MAA3B,CAAkCkE,aAAlC;AACH;AACJ;AACJ,GAtBD;;AAuBA2B,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBiZ,sBAAnB,GAA4C,UAAUpR,OAAV,EAAmB;AAC3D,QAAI,CAAChF,KAAK,CAACgF,OAAD,CAAV,EAAqB;AACjB,UAAIA,OAAO,CAACqG,SAAR,CAAkB4I,QAAlB,CAA2BnT,IAA3B,CAAJ,EAAsC;AAClC;AACH;;AACD,UAAIkP,SAAS,GAAGhL,OAAhB;;AACA,UAAIA,OAAO,CAACqG,SAAR,CAAkB4I,QAAlB,CAA2B/S,QAA3B,CAAJ,EAA0C;AACtC8O,QAAAA,SAAS,GAAGtQ,MAAM,CAAC,MAAM4B,UAAP,EAAmB0D,OAAnB,CAAlB;AACH;;AACD,UAAIuE,YAAY,GAAG5J,SAAS,CAAC,MAAMuD,KAAP,EAAc8M,SAAd,CAA5B;AACA,UAAIsG,kBAAkB,GAAG3W,SAAS,CAAC,MAAMwD,aAAP,EAAsB6M,SAAtB,CAAlC;AACA,UAAIgG,KAAK,GAAGrW,SAAS,CAAC,MAAMuB,QAAP,EAAiB8O,SAAjB,CAArB;AACA,UAAIuG,WAAW,GAAGvR,OAAO,CAACwR,sBAAR,CAA+BpT,YAA/B,EAA6C,CAA7C,CAAlB;;AACA,UAAI4S,KAAK,CAACpY,MAAN,KAAiB2L,YAAY,CAAC3L,MAAlC,EAA0C;AACtC,aAAK4U,WAAL,CAAiB+D,WAAjB,EAA8B,OAA9B,EAAuC,IAAvC,EAA6C,IAA7C,EAAmD,IAAnD;AACH,OAFD,MAGK,IAAIhN,YAAY,CAAC3L,MAAb,GAAsB,CAAtB,IAA2B0Y,kBAAkB,CAAC1Y,MAAnB,GAA4B,CAA3D,EAA8D;AAC/D,aAAK4U,WAAL,CAAiB+D,WAAjB,EAA8B,eAA9B,EAA+C,IAA/C,EAAqD,IAArD,EAA2D,IAA3D;AACH,OAFI,MAGA,IAAIhN,YAAY,CAAC3L,MAAb,KAAwB,CAA5B,EAA+B;AAChC,aAAK4U,WAAL,CAAiB+D,WAAjB,EAA8B,SAA9B,EAAyC,IAAzC,EAA+C,IAA/C,EAAqD,IAArD;AACH;;AACD,UAAIE,QAAQ,GAAGlX,OAAO,CAACyF,OAAD,EAAU,MAAM1D,UAAhB,CAAtB;;AACA,UAAI,CAACtB,KAAK,CAACyW,QAAD,CAAV,EAAsB;AAClB,YAAIC,aAAa,GAAGnX,OAAO,CAACkX,QAAD,EAAW,MAAMvV,QAAjB,CAA3B;AACA,aAAKkV,sBAAL,CAA4BM,aAA5B;AACH;AACJ;AACJ,GA5BD;;AA6BA5R,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBkZ,qBAAnB,GAA2C,UAAUrR,OAAV,EAAmBwD,CAAnB,EAAsB;AAC7D,QAAI,CAACxI,KAAK,CAACgF,OAAD,CAAV,EAAqB;AACjB,UAAI2R,YAAY,GAAGjX,MAAM,CAAC,MAAM4B,UAAP,EAAmB0D,OAAnB,CAAzB;AACA,UAAI4R,UAAU,GAAG,KAAK,CAAtB;;AACA,UAAI,CAAC5W,KAAK,CAAC2W,YAAD,CAAV,EAA0B;AACtBC,QAAAA,UAAU,GAAGjX,SAAS,CAAC,MAAMyD,YAAP,EAAqBuT,YAArB,CAAtB;AACA,YAAI3F,SAAS,GAAGhM,OAAO,CAACwR,sBAAR,CAA+BnT,aAA/B,EAA8C,CAA9C,EAAiDgI,SAAjD,CAA2D4I,QAA3D,CAAoE/Q,KAApE,CAAhB;AACA,YAAI2T,WAAW,GAAG7R,OAAO,CAACwR,sBAAR,CAA+BnT,aAA/B,EAA8C,CAA9C,EAAiDgI,SAAjD,CAA2D4I,QAA3D,CAAoE9Q,aAApE,CAAlB;AACA,YAAI2T,UAAU,GAAGH,YAAY,CAACrK,gBAAb,CAA8B,IAA9B,CAAjB;AACA,YAAIyK,WAAW,GAAGJ,YAAY,CAAChC,aAAb,CAA2B9B,YAA3B,CAAwC,eAAxC,CAAlB;AACA,YAAImE,YAAY,GAAG,KAAK,CAAxB;;AACA,aAAK,IAAI7N,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGyN,UAAU,CAAChZ,MAAvC,EAA+CuL,KAAK,EAApD,EAAwD;AACpD,cAAIqI,OAAO,GAAGsF,UAAU,CAAC3N,KAAD,CAAV,CAAkB0J,YAAlB,CAA+B,UAA/B,CAAd;;AACA,cAAI,CAAC7S,KAAK,CAAC,KAAKiX,eAAN,CAAN,IAAgC,CAACjX,KAAK,CAACE,QAAQ,CAAC,KAAK4I,MAAL,CAAYkI,SAAb,EAAwB,KAAKiG,eAAL,CAAqB9N,KAArB,CAAxB,CAAT,CAA1C,EAA0G;AACtG6N,YAAAA,YAAY,GAAG9W,QAAQ,CAAC,KAAK4I,MAAL,CAAYkI,SAAb,EAAwB,KAAKiG,eAAL,CAAqB9N,KAArB,CAAxB,CAAR,GAA+D,OAA/D,GAAyE,SAAxF;;AACA,gBAAI,KAAK+N,GAAL,KAAa,CAAC,CAAlB,EAAqB;AACjBF,cAAAA,YAAY,GAAGhG,SAAS,GAAG,OAAH,GAAa,SAArC;AACH;;AACD,gBAAKgG,YAAY,KAAK,SAAlB,IAAiC,CAAC5Y,WAAW,CAAC,KAAK+H,eAAN,CAAZ,IAAsC,KAAKwK,SAA3C,IAC9B,KAAKxK,eAAL,CAAqByI,OAArB,CAA6B4C,OAA7B,MAA0C,CAAC,CADlD,EACsD;AAClD,mBAAKrL,eAAL,CAAqBgR,MAArB,CAA4B,KAAKhR,eAAL,CAAqByI,OAArB,CAA6B4C,OAA7B,CAA5B,EAAmE,CAAnE;AACAwF,cAAAA,YAAY,GAAG,eAAf;AACH;AACJ,WAVD,MAWK;AACD,gBAAII,aAAa,GAAGR,UAAU,CAACzN,KAAD,CAAV,CAAkBqN,sBAAlB,CAAyCnT,aAAzC,EAAwD,CAAxD,EAA2DgI,SAA3D,CAAqE4I,QAArE,CAA8E/Q,KAA9E,CAApB;;AACA,gBAAI8N,SAAJ,EAAe;AACXgG,cAAAA,YAAY,GAAG,OAAf;AACH,aAFD,MAGK,IAAII,aAAa,IAAI,CAAC,KAAKnO,QAA3B,EAAqC;AACtC+N,cAAAA,YAAY,GAAG,OAAf;AACH,aAFI,MAGA,IAAI,KAAKzN,YAAL,CAAkBqF,OAAlB,CAA0B4C,OAA1B,MAAuC,CAAC,CAAxC,IAA6C,KAAKvI,QAAlD,KAA+D4N,WAAW,IAAI7F,SAA9E,CAAJ,EAA8F;AAC/FgG,cAAAA,YAAY,GAAG,OAAf;AACH,aAFI,MAGA,IAAIF,UAAU,CAAC3N,KAAD,CAAV,CAAkBkC,SAAlB,CAA4B4I,QAA5B,CAAqCpQ,KAArC,KAAgD,CAACzF,WAAW,CAAC,KAAK+H,eAAN,CAAZ,IAAsC,KAAKwK,SAA3C,KACjDK,SAAS,IAAI6F,WADoC,KACpB,KAAK1Q,eAAL,CAAqByI,OAArB,CAA6B4C,OAA7B,MAA0C,CAAC,CAD3E,EAC+E;AAChFwF,cAAAA,YAAY,GAAG,eAAf;AACA,mBAAK7Q,eAAL,CAAqBgR,MAArB,CAA4B,KAAKhR,eAAL,CAAqByI,OAArB,CAA6B4C,OAA7B,CAA5B,EAAmE,CAAnE;AACH,aAJI,MAKA,IAAI,KAAKlC,QAAL,KAAkB,CAAlB,IAAwB,CAAClR,WAAW,CAAC,KAAK+H,eAAN,CAAZ,IAAsC,KAAKwK,SAA3C,KAC5BK,SAAS,IAAI6F,WADe,KACC,KAAK1Q,eAAL,CAAqByI,OAArB,CAA6B4C,OAA7B,MAA0C,CAAC,CADxE,EAC4E;AAC7EwF,cAAAA,YAAY,GAAG,eAAf;AACA,mBAAK7Q,eAAL,CAAqBgR,MAArB,CAA4B,KAAKhR,eAAL,CAAqByI,OAArB,CAA6B4C,OAA7B,CAA5B,EAAmE,CAAnE;AACH,aAJI,MAKA;AACDwF,cAAAA,YAAY,GAAG,SAAf;AACH;AACJ;;AACD,eAAKxE,WAAL,CAAiBoE,UAAU,CAACzN,KAAD,CAA3B,EAAoC6N,YAApC,EAAkDxO,CAAlD,EAAqD,IAArD,EAA2D,IAA3D;AACH;AACJ;;AACD,UAAI,KAAKmI,SAAL,IAAkB,KAAK1H,QAA3B,EAAqC;AACjC,aAAK4H,sBAAL;AACH;AACJ;AACJ,GAxDD;;AAyDA/L,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBka,gBAAnB,GAAsC,UAAUrB,KAAV,EAAiBsB,OAAjB,EAA0B;AAC5D,QAAIC,EAAE,GAAG5X,SAAS,CAAC,MAAMuB,QAAP,EAAiB,KAAK8D,OAAtB,CAAlB;;AACA,QAAI,CAAChF,KAAK,CAACgW,KAAD,CAAV,EAAmB;AACf,WAAK,IAAI5D,GAAG,GAAG4D,KAAK,CAACpY,MAArB,EAA6BwU,GAAG,IAAI,CAApC,EAAuCA,GAAG,EAA1C,EAA8C;AAC1C,YAAIoF,KAAK,GAAG,KAAK,CAAjB;;AACA,YAAIxB,KAAK,CAACpY,MAAN,KAAiB,CAArB,EAAwB;AACpB4Z,UAAAA,KAAK,GAAG,KAAKpY,UAAL,CAAgB4W,KAAK,CAAC5D,GAAG,GAAG,CAAP,CAArB,CAAR;AACH,SAFD,MAGK;AACDoF,UAAAA,KAAK,GAAG,KAAKpY,UAAL,CAAgB4W,KAAK,CAAC5D,GAAD,CAArB,CAAR;AACH;;AACD,YAAIpS,KAAK,CAACwX,KAAD,CAAT,EAAkB;AACd,cAAI7E,IAAI,GAAG,KAAK,CAAhB;AACAA,UAAAA,IAAI,GAAGqD,KAAK,CAAC5D,GAAG,GAAG4D,KAAK,CAACpY,MAAb,CAAL,GAA4BoY,KAAK,CAAC5D,GAAG,GAAG4D,KAAK,CAACpY,MAAb,CAAL,CAA0BsT,QAA1B,EAA5B,GAAmE8E,KAAK,CAAC5D,GAAD,CAAL,GAAa4D,KAAK,CAAC5D,GAAD,CAAL,CAAWlB,QAAX,EAAb,GAAqC,IAA/G;;AACA,cAAIyB,IAAI,KAAK,EAAT,IAAe2E,OAAf,IAA0B3E,IAA9B,EAAoC;AAChC,iBAAK8E,mBAAL,CAAyB9E,IAAzB;AACA,iBAAK+E,iBAAL,CAAuB/E,IAAvB,EAA6B2E,OAA7B;AACH,WAHD,MAIK,IAAI,KAAK/N,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAArC,IAA0CA,IAAI,KAAK,EAAnD,IAAyD,CAAC2E,OAA9D,EAAuE;AACxE,iBAAK/N,YAAL,CAAkB4N,MAAlB,CAAyB,KAAK5N,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,CAAzB,EAA0D,CAA1D;AACA,gBAAIX,UAAU,GAAG,KAAKrC,aAAL,CAAmB,KAAKzC,QAAxB,EAAkCyF,IAAlC,CAAjB;;AACA,gBAAIX,UAAJ,EAAgB;AACZ,mBAAK,IAAI/T,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+T,UAAU,CAACpU,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,oBAAI0M,EAAE,GAAGqH,UAAU,CAAC/T,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,IAAgCqH,UAAU,CAAC/T,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,EAA8BuG,QAA9B,EAAhC,GAA2E,IAApF;;AACA,oBAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0BjE,EAA1B,MAAkC,CAAC,CAAvC,EAA0C;AACtC,uBAAKpB,YAAL,CAAkB4N,MAAlB,CAAyB,KAAK5N,YAAL,CAAkBqF,OAAlB,CAA0BjE,EAA1B,CAAzB,EAAwD,CAAxD;AACA,sBAAIuM,GAAG,GAAG,KAAKlS,OAAL,CAAauH,aAAb,CAA2B,gBAAgB5B,EAAhB,GAAqB,IAAhD,CAAV;;AACA,sBAAIuM,GAAJ,EAAS;AACL,yBAAK1E,WAAL,CAAiB0E,GAAjB,EAAsB,SAAtB,EAAiC,IAAjC;AACH;AACJ;AACJ;;AACD,kBAAI,KAAK/Q,eAAL,CAAqByI,OAArB,CAA6B+D,IAA7B,MAAuC,CAAC,CAA5C,EAA+C;AAC3C,qBAAKxM,eAAL,CAAqBgR,MAArB,CAA4B,KAAKhR,eAAL,CAAqByI,OAArB,CAA6B+D,IAA7B,CAA5B,EAAgE,CAAhE;AACH;AACJ;;AACD,gBAAIA,IAAJ,EAAU;AACN,mBAAK+E,iBAAL,CAAuB/E,IAAvB,EAA6B2E,OAA7B;AACH;;AACD,iBAAKK,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6C6J,IAA7C,EAAmD,WAAnD,EAAgE,IAAhE;AACH;;AACD;AACH;;AACD,YAAIiF,QAAQ,GAAGlY,MAAM,CAAC,MAAM4B,UAAN,GAAmB,IAAnB,GAA0B8B,YAA3B,EAAyCoU,KAAzC,CAArB;AACA,aAAKK,iBAAL,CAAuBD,QAAvB,EAAiC,CAACN,OAAlC,EAA2CE,KAA3C,EAAkD,IAAlD;AACH;AACJ,KA5CD,MA6CK;AACD,UAAIZ,UAAU,GAAGjX,SAAS,CAAC,MAAMyD,YAAP,EAAqB,KAAK4B,OAA1B,CAA1B;;AACA,UAAI,KAAKqL,YAAT,EAAuB;AACnB,aAAK,IAAIlH,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGyN,UAAU,CAAChZ,MAAvC,EAA+CuL,KAAK,EAApD,EAAwD;AACpD,eAAK2O,kBAAL,CAAwBlB,UAAU,CAACzN,KAAD,CAAlC,EAA2CmO,OAA3C;AACA,eAAK9E,WAAL,CAAiBoE,UAAU,CAACzN,KAAD,CAA3B,EAAoCmO,OAAO,GAAG,OAAH,GAAa,SAAxD,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqFA,OAArF;AACH;AACJ,OALD,MAMK;AACD,aAAK,IAAInO,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGyN,UAAU,CAAChZ,MAAvC,EAA+CuL,KAAK,EAApD,EAAwD;AACpD,eAAK2O,kBAAL,CAAwBlB,UAAU,CAACzN,KAAD,CAAlC,EAA2CmO,OAA3C;AACA,eAAK9E,WAAL,CAAiBoE,UAAU,CAACzN,KAAD,CAA3B,EAAoCmO,OAAO,GAAG,OAAH,GAAa,SAAxD;AACH;AACJ;AACJ;;AACD,QAAItB,KAAJ,EAAW;AACP,WAAK,IAAIlD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkD,KAAK,CAACpY,MAA1B,EAAkCkV,CAAC,EAAnC,EAAuC;AACnC,YAAIH,IAAI,GAAGqD,KAAK,CAAClD,CAAD,CAAL,GAAWkD,KAAK,CAAClD,CAAD,CAAL,CAAS5B,QAAT,EAAX,GAAiC,EAA5C;;AACA,YAAI,CAACoG,OAAL,EAAc;AACV,eAAKK,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6C6J,IAA7C,EAAmD,WAAnD,EAAgE,IAAhE;AACH;AACJ;AACJ;;AACD,QAAI,KAAKhC,SAAT,EAAoB;AAChB,WAAKE,sBAAL;AACH;AACJ,GAzED;;AA0EA/L,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2a,kBAAnB,GAAwC,UAAUC,QAAV,EAAoBT,OAApB,EAA6B;AACjE,QAAIU,MAAM,GAAGzY,OAAO,CAACwY,QAAD,EAAW,MAAM7W,QAAjB,CAApB;AACA,QAAIyJ,EAAE,GAAGqN,MAAM,CAACnF,YAAP,CAAoB,UAApB,CAAT;AACA,QAAIoF,WAAW,GAAG,KAAKC,WAAL,CAAiBF,MAAjB,CAAlB;;AACA,QAAIC,WAAW,CAACjH,SAAZ,KAA0B,MAA1B,IAAoC,CAACsG,OAAzC,EAAkD;AAC9C,WAAKK,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6C6B,EAA7C,EAAiD,WAAjD,EAA8D,IAA9D;AACH;AACJ,GAPD;AAQA;AACJ;AACA;;;AACI7F,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBua,iBAAnB,GAAuC,UAAU/E,IAAV,EAAgB2E,OAAhB,EAAyB;AAC5D,QAAI,KAAKhI,QAAL,KAAkB,CAAtB,EAAyB;AACrB,UAAI6C,KAAK,GAAG,CAAZ;AACA,UAAIlB,QAAQ,GAAG,IAAInR,WAAJ,CAAgB,KAAKoN,QAArB,EAA+B6D,YAA/B,CAA4C,IAAIhR,KAAJ,GAAYqP,KAAZ,CAAkB,KAAKtG,MAAL,CAAY6B,EAA9B,EAAkC,OAAlC,EAA2CgI,IAA3C,EAAiD,IAAjD,CAA5C,CAAf;;AACA,UAAI1B,QAAQ,CAAC,CAAD,CAAZ,EAAiB;AACb,YAAItG,EAAE,GAAGsG,QAAQ,CAAC,CAAD,CAAR,CAAY,KAAKnI,MAAL,CAAY6B,EAAxB,IAA8BsG,QAAQ,CAAC,CAAD,CAAR,CAAY,KAAKnI,MAAL,CAAY6B,EAAxB,EAA4BuG,QAA5B,EAA9B,GAAuE,IAAhF;AACA,YAAIiH,QAAQ,GAAGlH,QAAQ,CAAC,CAAD,CAAR,CAAY,KAAKnI,MAAL,CAAYqG,QAAxB,IAAoC8B,QAAQ,CAAC,CAAD,CAAR,CAAY,KAAKnI,MAAL,CAAYqG,QAAxB,EAAkC+B,QAAlC,EAApC,GAAmF,IAAlG;AACA,YAAIyD,aAAa,GAAG,KAAK3P,OAAL,CAAauH,aAAb,CAA2B,gBAAgB4L,QAAhB,GAA2B,IAAtD,CAApB;AACA,YAAI1F,aAAa,GAAGkC,aAAa,GAAGjV,MAAM,CAAC,MAAMyD,aAAP,EAAsBwR,aAAtB,CAAT,GAAgD,IAAjF;AACA,YAAIpC,KAAK,GAAGoC,aAAa,GAAGjV,MAAM,CAAC,MAAMwD,KAAP,EAAcyR,aAAd,CAAT,GAAwC,IAAjE;AACA,YAAI3P,OAAO,GAAG,KAAKA,OAAL,CAAauH,aAAb,CAA2B,gBAAgB5B,EAAhB,GAAqB,IAAhD,CAAd;AACA,YAAI0H,UAAU,GAAG,KAAK1C,aAAL,CAAmB,KAAKzC,QAAxB,EAAkCiL,QAAlC,CAAjB;;AACA,YAAI9F,UAAJ,EAAgB;AACZ,eAAK,IAAIpU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoU,UAAU,CAACzU,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,gBAAIuT,OAAO,GAAGa,UAAU,CAACpU,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,IAAgC0H,UAAU,CAACpU,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,EAA8BuG,QAA9B,EAAhC,GAA2E,IAAzF;;AACA,gBAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0B4C,OAA1B,MAAuC,CAAC,CAA5C,EAA+C;AAC3CW,cAAAA,KAAK;AACR;AACJ;AACJ;;AACD,YAAI,KAAK5I,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAArC,IAA0CgC,aAA1C,IAA4DhK,EAAE,KAAKgI,IAAnE,IAA4E,KAAKhC,SAArF,EAAgG;AAC5F,eAAK6B,WAAL,CAAiBmC,aAAjB,EAAgC,eAAhC,EAAiD,IAAjD;AACH,SAFD,MAGK,IAAI,KAAKpL,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAArC,IAA0C3N,OAA1C,IAAsD2F,EAAE,KAAKgI,IAA7D,IAAsE,CAAC2E,OAA3E,EAAoF;AACrF,eAAK9E,WAAL,CAAiBxN,OAAjB,EAA0B,SAA1B,EAAqC,IAArC;AACH,SAFI,MAGA,IAAI,KAAKuE,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAArC,IAA0C3N,OAA1C,IAAsD2F,EAAE,KAAKgI,IAA7D,IAAsE2E,OAA1E,EAAmF;AACpF,eAAK9E,WAAL,CAAiBxN,OAAjB,EAA0B,OAA1B,EAAmC,IAAnC;AACH,SAFI,MAGA,IAAI,KAAKuE,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAArC,IAA0C,CAAC3N,OAA3C,IAAsD2P,aAAtD,IAAwEhK,EAAE,KAAKgI,IAA/E,IAAwF,KAAKhC,SAA7F,IACFwB,KAAK,KAAK,CADZ,EACe;AAChB,eAAKK,WAAL,CAAiBmC,aAAjB,EAAgC,eAAhC,EAAiD,IAAjD;AACH,SAHI,MAIA,IAAI,KAAKpL,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAArC,IAA0C,CAAC3N,OAA3C,IAAsD2P,aAAtD,IAAwEhK,EAAE,KAAKgI,IAA/E,IAAwF,KAAKhC,SAA7F,IACFwB,KAAK,KAAK,CADZ,EACe;AAChB,eAAKK,WAAL,CAAiBmC,aAAjB,EAAgC,SAAhC,EAA2C,IAA3C;AACH,SAHI,MAIA,IAAI,CAAC3P,OAAD,IAAY,CAAC2P,aAAb,IAA+BhK,EAAE,KAAKgI,IAAtC,IAA+C,KAAKhC,SAAxD,EAAmE;AACpE,eAAKyH,mBAAL,CAAyBzF,IAAzB,EAA+B2E,OAA/B;AACH;AACJ;AACJ,KAxCD,MAyCK,IAAI,KAAKhI,QAAL,KAAkB,CAAlB,IAAwB,KAAKxG,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,IAC7B,KAAK+M,SADJ,EACgB;AACjB,UAAIlC,EAAE,GAAG,KAAK,CAAd;AACA,UAAIgK,aAAa,GAAG,KAAK,CAAzB;AACA,UAAIpC,KAAK,GAAG,KAAK,CAAjB;;AACA,WAAK,IAAItU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKiP,QAAL,CAActP,MAAlC,EAA0CK,CAAC,EAA3C,EAA+C;AAC3C0M,QAAAA,EAAE,GAAG,KAAKuC,QAAL,CAAcjP,CAAd,EAAiB,KAAK6K,MAAL,CAAY6B,EAA7B,IAAmC,KAAKuC,QAAL,CAAcjP,CAAd,EAAiB,KAAK6K,MAAL,CAAY6B,EAA7B,EAAiCuG,QAAjC,EAAnC,GAAiF,EAAtF;AACAyD,QAAAA,aAAa,GAAG,KAAK3P,OAAL,CAAauH,aAAb,CAA2B,gBAAgB5B,EAAhB,GAAqB,IAAhD,CAAhB;AACA4H,QAAAA,KAAK,GAAGoC,aAAa,GAAGjV,MAAM,CAAC,MAAMwD,KAAP,EAAcyR,aAAd,CAAT,GAAwC,IAA7D;;AACA,YAAI,KAAKpL,YAAL,CAAkBqF,OAAlB,CAA0BjE,EAA1B,MAAkC,CAAC,CAAnC,IAAwCgK,aAAxC,IAAyDpC,KAAzD,IAAkE,CAAC+E,OAAvE,EAAgF;AAC5E,eAAK9E,WAAL,CAAiBmC,aAAjB,EAAgC,SAAhC,EAA2C,IAA3C;AACH;;AACD,YAAI0D,QAAQ,GAAGnY,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAZ,CAAkBL,QAAlB,EAAD,EAA+B,KAAKhE,QAAL,CAAcjP,CAAd,CAA/B,CAAvB;;AACA,YAAIoa,QAAJ,EAAc;AACV,eAAKC,wBAAL,CAA8BD,QAA9B,EAAwC1N,EAAxC,EAA4CgI,IAA5C,EAAkD2E,OAAlD,EAA2D3M,EAA3D;AACH;AACJ;AACJ;AACJ,GA5DD;AA6DA;AACJ;AACA;;;AACI7F,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBib,mBAAnB,GAAyC,UAAUzF,IAAV,EAAgB2E,OAAhB,EAAyB;AAC9D,QAAIiB,iBAAiB,GAAG,KAAKC,WAAL,CAAiB7F,IAAjB,CAAxB;AACA,QAAIR,KAAK,GAAG,CAAZ;AACA,QAAIsG,MAAJ;;AACA,QAAI,KAAKnJ,QAAL,KAAkB,CAAtB,EAAyB;AACrBmJ,MAAAA,MAAM,GAAGF,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,KAAKzP,MAAL,CAAYqG,QAAjC,IAA6CoJ,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,KAAKzP,MAAL,CAAYqG,QAAjC,EAA2C+B,QAA3C,EAA7C,GAAqG,IAA9G;AACH;;AACD,QAAImB,UAAU,GAAG,KAAK1C,aAAL,CAAmB,KAAKzC,QAAxB,EAAkCuL,MAAlC,CAAjB;;AACA,QAAIpG,UAAJ,EAAgB;AACZ,WAAK,IAAIpU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoU,UAAU,CAACzU,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,YAAIuT,OAAO,GAAGa,UAAU,CAACpU,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,IAAgC0H,UAAU,CAACpU,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,EAA8BuG,QAA9B,EAAhC,GAA2E,IAAzF;;AACA,YAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0B4C,OAA1B,MAAuC,CAAC,CAA5C,EAA+C;AAC3CW,UAAAA,KAAK;AACR;AACJ;AACJ;;AACD,QAAIwC,aAAa,GAAG,KAAK3P,OAAL,CAAauH,aAAb,CAA2B,gBAAgBkM,MAAhB,GAAyB,IAApD,CAApB;;AACA,QAAI9D,aAAa,IAAI2C,OAArB,EAA8B;AAC1B,WAAK9E,WAAL,CAAiBmC,aAAjB,EAAgC,eAAhC,EAAiD,IAAjD;AACH,KAFD,MAGK,IAAI,CAAC2C,OAAD,IAAY3C,aAAZ,IAA6B,KAAKxO,eAAL,CAAqByI,OAArB,CAA6B6J,MAA7B,MAAyC,CAAC,CAAvE,IAA4EtG,KAAK,KAAK,CAA1F,EAA6F;AAC9F,WAAKK,WAAL,CAAiBmC,aAAjB,EAAgC,eAAhC,EAAiD,IAAjD;AACH,KAFI,MAGA,IAAI,CAAC2C,OAAD,IAAY3C,aAAZ,IAA6B,KAAKxO,eAAL,CAAqByI,OAArB,CAA6B6J,MAA7B,MAAyC,CAAC,CAAvE,IAA4EtG,KAAK,KAAK,CAA1F,EAA6F;AAC9F,WAAKK,WAAL,CAAiBmC,aAAjB,EAAgC,SAAhC,EAA2C,IAA3C;AACH,KAFI,MAGA,IAAI,CAACA,aAAL,EAAoB;AACrB,UAAI,CAAC2C,OAAD,IAAY,KAAK/N,YAAL,CAAkBqF,OAAlB,CAA0B6J,MAA1B,MAAsC,CAAC,CAAnD,IAAwD,KAAKtS,eAAL,CAAqByI,OAArB,CAA6B6J,MAA7B,MAAyC,CAAC,CAAtG,EAAyG;AACrG,aAAKtS,eAAL,CAAqBgR,MAArB,CAA4B,KAAKhR,eAAL,CAAqByI,OAArB,CAA6B6J,MAA7B,CAA5B,EAAkE,CAAlE;AACH,OAFD,MAGK,IAAInB,OAAO,IAAI,KAAK/N,YAAL,CAAkBqF,OAAlB,CAA0B6J,MAA1B,MAAsC,CAAC,CAAlD,IAAuD,KAAKtS,eAAL,CAAqByI,OAArB,CAA6B6J,MAA7B,MAAyC,CAAC,CAArG,EAAwG;AACzG,aAAKtS,eAAL,CAAqBwG,IAArB,CAA0B8L,MAA1B;AACH,OAFI,MAGA,IAAI,CAACnB,OAAD,IAAY,KAAK/N,YAAL,CAAkBqF,OAAlB,CAA0B6J,MAA1B,MAAsC,CAAC,CAAnD,IAAwD,KAAKtS,eAAL,CAAqByI,OAArB,CAA6B6J,MAA7B,MAAyC,CAAC,CAAlG,IACFtG,KAAK,KAAK,CADZ,EACe;AAChB,aAAKhM,eAAL,CAAqBwG,IAArB,CAA0B8L,MAA1B;AACH;;AACD,WAAKL,mBAAL,CAAyBK,MAAzB,EAAiCnB,OAAjC;;AACA,UAAI,KAAK/N,YAAL,CAAkBqF,OAAlB,CAA0B6J,MAA1B,MAAsC,CAAC,CAAvC,IAA4C,CAACnB,OAAjD,EAA0D;AACtD,aAAK/N,YAAL,CAAkB4N,MAAlB,CAAyB,KAAK5N,YAAL,CAAkBqF,OAAlB,CAA0B6J,MAA1B,CAAzB,EAA4D,CAA5D;AACH;AACJ;AACJ,GA1CD;AA2CA;AACJ;AACA;;;AACI3T,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBmb,wBAAnB,GAA8C,UAAUD,QAAV,EAAoBI,MAApB,EAA4B9F,IAA5B,EAAkC2E,OAAlC,EAA2C/F,KAA3C,EAAkD;AAC5F,QAAIY,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuF,QAAQ,CAACza,MAA7B,EAAqCkV,CAAC,EAAtC,EAA0C;AACtC,UAAI4F,KAAK,GAAGL,QAAQ,CAACvF,CAAD,CAAR,CAAY,KAAKhK,MAAL,CAAY6B,EAAxB,IAA8B0N,QAAQ,CAACvF,CAAD,CAAR,CAAY,KAAKhK,MAAL,CAAY6B,EAAxB,EAA4BuG,QAA5B,EAA9B,GAAuE,EAAnF;;AACA,UAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0B8J,KAA1B,MAAqC,CAAC,CAA1C,EAA6C;AACzCvG,QAAAA,KAAK;AACR;;AACD,UAAIwC,aAAa,GAAG,KAAK3P,OAAL,CAAauH,aAAb,CAA2B,gBAAgBkM,MAAhB,GAAyB,IAApD,CAApB;AACA,UAAIhG,aAAa,GAAGkC,aAAa,GAAGjV,MAAM,CAAC,MAAMyD,aAAP,EAAsBwR,aAAtB,CAAT,GAAgD,IAAjF;AACA,UAAIpC,KAAK,GAAGoC,aAAa,GAAGjV,MAAM,CAAC,MAAMwD,KAAP,EAAcyR,aAAd,CAAT,GAAwC,IAAjE;AACA,UAAI3P,OAAO,GAAG,KAAKA,OAAL,CAAauH,aAAb,CAA2B,gBAAgBmM,KAAhB,GAAwB,IAAnD,CAAd;AACA,UAAIC,iBAAiB,GAAG3T,OAAO,GAAGtF,MAAM,CAAC,MAAMwD,KAAP,EAAc8B,OAAd,CAAT,GAAkC,IAAjE;;AACA,UAAI,KAAKuE,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAArC,IAA0CgC,aAA1C,IAA4D+D,KAAK,KAAK/F,IAAtE,IAA+E,KAAKhC,SAAxF,EAAmG;AAC/F,aAAK6B,WAAL,CAAiBmC,aAAjB,EAAgC,eAAhC,EAAiD,IAAjD;AACH,OAFD,MAGK,IAAI,KAAKpL,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAArC,IAA0CgC,aAA1C,IAA2D,CAAC3P,OAA5D,IAAwE0T,KAAK,KAAK/F,IAAlF,IAA2F,CAAC2E,OAAhG,EAAyG;AAC1G,YAAI,KAAK3G,SAAT,EAAoB;AAChB,eAAK6B,WAAL,CAAiBmC,aAAjB,EAAgC,SAAhC,EAA2C,IAA3C;AACH,SAFD,MAGK;AACD,cAAIxC,KAAK,KAAK,CAAd,EAAiB;AACb,iBAAKK,WAAL,CAAiBmC,aAAjB,EAAgC,eAAhC,EAAiD,IAAjD;AACH,WAFD,MAGK;AACD,iBAAKnC,WAAL,CAAiBmC,aAAjB,EAAgC,SAAhC,EAA2C,IAA3C;AACH;AACJ;AACJ,OAZI,MAaA,IAAI,KAAKpL,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAArC,IAA0C3N,OAA1C,IAAsD0T,KAAK,KAAK/F,IAAhE,IAAyE,CAAC2E,OAA9E,EAAuF;AACxF,aAAK9E,WAAL,CAAiBxN,OAAjB,EAA0B,SAA1B,EAAqC,IAArC;AACH,OAFI,MAGA,IAAI,KAAKuE,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAArC,IAA0CF,aAA1C,IAA4DiG,KAAK,KAAK/F,IAAtE,IAA+E,KAAKhC,SAApF,IAAiGwB,KAAK,KAAK,CAA3G,IACF,CAACmF,OADH,EACY;AACb7E,QAAAA,aAAa,CAACpH,SAAd,CAAwBpM,MAAxB,CAA+BkE,aAA/B;AACH,OAHI,MAIA,IAAI,KAAKoG,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAArC,IAA0C,CAAC3N,OAA3C,IAAsDuN,KAAtD,IAAgEmG,KAAK,KAAK/F,IAA1E,IAAmFR,KAAK,KAAK,CAAjG,EAAoG;AACrG,aAAKK,WAAL,CAAiBmC,aAAjB,EAAgC,SAAhC,EAA2C,IAA3C;AACH,OAFI,MAGA,IAAI,KAAKpL,YAAL,CAAkBqF,OAAlB,CAA0B8J,KAA1B,MAAqC,CAAC,CAAtC,IAA2C1T,OAA3C,IAAsD2T,iBAAtD,IAA2ExG,KAAK,KAAK,CAAzF,EAA4F;AAC7F,aAAKK,WAAL,CAAiBxN,OAAjB,EAA0B,SAA1B,EAAqC,IAArC;AACH,OAFI,MAGA,IAAI,CAACA,OAAD,IAAY,CAAC2P,aAAb,IAA+B+D,KAAK,KAAK/F,IAAzC,IAAmD,KAAKxM,eAAL,CAAqByI,OAArB,CAA6B6J,MAA7B,MAAyC,CAAC,CAA3C,IAAiD,KAAK9H,SAA5G,EAAuH;AACxH,YAAIgG,YAAY,GAAG,KAAK3R,OAAL,CAAauH,aAAb,CAA2B,gBAAgBgF,KAAhB,GAAwB,IAAnD,CAAnB;;AACA,YAAI+F,OAAO,IAAInF,KAAK,KAAK,CAAzB,EAA4B;AACxB,eAAKK,WAAL,CAAiBmE,YAAjB,EAA+B,eAA/B,EAAgD,IAAhD;AACH,SAFD,MAGK,IAAIW,OAAO,IAAInF,KAAK,KAAKkG,QAAQ,CAACza,MAA9B,IAAwC,KAAK2L,YAAL,CAAkBqF,OAAlB,CAA0B6J,MAA1B,MAAsC,CAAC,CAAnF,EAAsF;AACvF,eAAKlP,YAAL,CAAkBoD,IAAlB,CAAuB8L,MAAvB;AACH,SAFI,MAGA,IAAI,CAACnB,OAAD,IAAYnF,KAAK,KAAK,CAAtB,IAA2B,KAAKhM,eAAL,CAAqByI,OAArB,CAA6B6J,MAA7B,MAAyC,CAAC,CAAzE,EAA4E;AAC7E,eAAKtS,eAAL,CAAqBgR,MAArB,CAA4B,KAAKhR,eAAL,CAAqByI,OAArB,CAA6B6J,MAA7B,CAA5B;AACH;;AACD,YAAI,KAAKtS,eAAL,CAAqByI,OAArB,CAA6B6J,MAA7B,MAAyC,CAAC,CAA9C,EAAiD;AAC7C,eAAKtS,eAAL,CAAqBwG,IAArB,CAA0B8L,MAA1B;AACH;AACJ;;AACD,UAAIG,UAAU,GAAG1Y,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAZ,CAAkBL,QAAlB,EAAD,EAA+BmH,QAAQ,CAACvF,CAAD,CAAvC,CAAzB;;AACA,UAAI8F,UAAJ,EAAgB;AACZ,aAAKN,wBAAL,CAA8BM,UAA9B,EAA0CF,KAA1C,EAAiD/F,IAAjD,EAAuD2E,OAAvD,EAAgE/F,KAAhE;AACH;AACJ;AACJ,GA7DD;;AA8DAzM,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqV,WAAnB,GAAiC,UAAUqG,OAAV,EAAmBC,KAAnB,EAA0BtQ,CAA1B,EAA6BuQ,SAA7B,EAAwCC,KAAxC,EAA+C1B,OAA/C,EAAwD;AACrF,QAAIrS,KAAK,GAAG,IAAZ;;AACA,QAAIuP,SAAJ;AACA,QAAIwD,MAAM,GAAGzY,OAAO,CAACsZ,OAAD,EAAU,MAAM3X,QAAhB,CAApB;;AACA,QAAI2X,OAAO,KAAKb,MAAhB,EAAwB;AACpBa,MAAAA,OAAO,GAAGnZ,MAAM,CAAC,MAAM0D,YAAP,EAAqB4U,MAArB,CAAhB;AACH;;AACD,QAAI,CAACe,SAAL,EAAgB;AACZ,WAAK7S,gBAAL,GAAwB,EAAxB;AACAsO,MAAAA,SAAS,GAAG,KAAKyE,aAAL,CAAmBjB,MAAnB,EAA2Bc,KAA3B,EAAkCtQ,CAAlC,CAAZ;AACA,WAAKkF,OAAL,CAAa,cAAb,EAA6B8G,SAA7B,EAAwC,UAAU0E,YAAV,EAAwB;AAC5D,YAAI,CAACA,YAAY,CAACC,MAAlB,EAA0B;AACtBlU,UAAAA,KAAK,CAACmU,eAAN,CAAsBP,OAAtB,EAA+BC,KAA/B,EAAsCd,MAAtC,EAA8CkB,YAA9C,EAA4D1Q,CAA5D,EAA+DuQ,SAA/D,EAA0EC,KAA1E,EAAiF1B,OAAjF;AACH;AACJ,OAJD;AAKH,KARD,MASK;AACD,WAAK8B,eAAL,CAAqBP,OAArB,EAA8BC,KAA9B,EAAqCd,MAArC,EAA6CxD,SAA7C,EAAwDhM,CAAxD,EAA2DuQ,SAA3D,EAAsEC,KAAtE,EAA6E1B,OAA7E;AACH;AACJ,GAnBD;;AAoBAxS,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBic,eAAnB,GAAqC,UAAUP,OAAV,EAAmBC,KAAnB,EAA0Bd,MAA1B,EAAkCxD,SAAlC,EAA6ChM,CAA7C,EAAgDuQ,SAAhD,EAA2DC,KAA3D,EAAkE1B,OAAlE,EAA2E;AAC5G,QAAI+B,SAAJ;AACA,QAAIC,SAAS,GAAGT,OAAO,CAACrC,sBAAR,CAA+BnT,aAA/B,EAA8C,CAA9C,CAAhB;;AACA,QAAIyV,KAAK,KAAK,OAAV,IAAqB,CAACQ,SAAS,CAACjO,SAAV,CAAoB4I,QAApB,CAA6B/Q,KAA7B,CAA1B,EAA+D;AAC3DoW,MAAAA,SAAS,CAACjO,SAAV,CAAoBpM,MAApB,CAA2BkE,aAA3B;AACAmW,MAAAA,SAAS,CAACjO,SAAV,CAAoBC,GAApB,CAAwBpI,KAAxB;AACA,WAAK0Q,QAAL,CAAcoE,MAAd;AACAqB,MAAAA,SAAS,GAAG,MAAZ;AACH,KALD,MAMK,IAAIP,KAAK,KAAK,SAAV,KAAwBQ,SAAS,CAACjO,SAAV,CAAoB4I,QAApB,CAA6B/Q,KAA7B,KAAuCoW,SAAS,CAACjO,SAAV,CAAoB4I,QAApB,CAA6B9Q,aAA7B,CAA/D,CAAJ,EAAiH;AAClH7D,MAAAA,WAAW,CAAC,CAACga,SAAD,CAAD,EAAc,CAACpW,KAAD,EAAQC,aAAR,CAAd,CAAX;AACA,WAAKoW,WAAL,CAAiBvB,MAAjB;AACAqB,MAAAA,SAAS,GAAG,OAAZ;AACH,KAJI,MAKA,IAAIP,KAAK,KAAK,eAAV,IAA6B,KAAKnI,SAAtC,EAAiD;AAClD2I,MAAAA,SAAS,CAACjO,SAAV,CAAoBpM,MAApB,CAA2BiE,KAA3B;AACAoW,MAAAA,SAAS,CAACjO,SAAV,CAAoBC,GAApB,CAAwBnI,aAAxB;AACA,WAAKoW,WAAL,CAAiBvB,MAAjB;AACAqB,MAAAA,SAAS,GAAG,OAAZ;AACH;;AACDA,IAAAA,SAAS,GAAGP,KAAK,KAAK,OAAV,GAAoB,MAApB,GAA6BA,KAAK,KAAK,SAAV,GAAsB,OAAtB,GAAgCO,SAAzE;;AACA,QAAI,CAACrZ,KAAK,CAACqZ,SAAD,CAAV,EAAuB;AACnBR,MAAAA,OAAO,CAACnO,YAAR,CAAqB,cAArB,EAAqC2O,SAArC;AACH;;AACD,QAAIL,KAAJ,EAAW;AACP,UAAIhG,IAAI,GAAG,GAAGiD,MAAH,CAAU,EAAV,EAAc,KAAK/P,gBAAnB,CAAX;AACAsO,MAAAA,SAAS,GAAG,KAAKyE,aAAL,CAAmBjB,MAAnB,EAA2Bc,KAA3B,EAAkCtQ,CAAlC,CAAZ;;AACA,UAAIpK,WAAW,CAAC2a,SAAD,CAAf,EAA4B;AACxBvE,QAAAA,SAAS,CAACxB,IAAV,GAAiBA,IAAjB;AACH;AACJ;;AACD,QAAIsE,OAAO,KAAK5K,SAAhB,EAA2B;AACvB,WAAK8M,iBAAL,CAAuBxB,MAAvB,EAA+BV,OAA/B;AACH;;AACD,QAAI,CAACyB,SAAL,EAAgB;AACZ,UAAI,CAAC/Y,KAAK,CAACqZ,SAAD,CAAV,EAAuB;AACnBR,QAAAA,OAAO,CAACnO,YAAR,CAAqB,cAArB,EAAqC2O,SAArC;AACA7E,QAAAA,SAAS,CAACxB,IAAV,CAAe,CAAf,EAAkByG,OAAlB,GAA4BJ,SAA5B;AACA,aAAK3L,OAAL,CAAa,aAAb,EAA4B8G,SAA5B;AACA,aAAKtO,gBAAL,GAAwB,EAAxB;AACH;AACJ;AACJ,GA1CD;;AA2CApB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmByW,QAAnB,GAA8B,UAAU4D,KAAV,EAAiB;AAC3C,QAAI7M,EAAE,GAAG6M,KAAK,CAAC3E,YAAN,CAAmB,UAAnB,CAAT;;AACA,QAAI,CAAC7S,KAAK,CAAC2K,EAAD,CAAN,IAAc,KAAKpB,YAAL,CAAkBqF,OAAlB,CAA0BjE,EAA1B,MAAkC,CAAC,CAArD,EAAwD;AACpD,WAAKpB,YAAL,CAAkBoD,IAAlB,CAAuBhC,EAAvB;AACH;AACJ,GALD;;AAMA7F,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBoc,WAAnB,GAAiC,UAAU/B,KAAV,EAAiB;AAC9C,QAAIrO,KAAK,GAAG,KAAKI,YAAL,CAAkBqF,OAAlB,CAA0B4I,KAAK,CAAC3E,YAAN,CAAmB,UAAnB,CAA1B,CAAZ;;AACA,QAAI1J,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ,WAAKI,YAAL,CAAkB4N,MAAlB,CAAyBhO,KAAzB,EAAgC,CAAhC;AACH;AACJ,GALD;;AAMArE,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB8b,aAAnB,GAAmC,UAAUjB,MAAV,EAAkBpD,MAAlB,EAA0BpM,CAA1B,EAA6B;AAC5D,SAAKtC,gBAAL,CAAsByG,IAAtB,CAA2B,KAAKuL,WAAL,CAAiBF,MAAjB,CAA3B;AACA,QAAIvD,QAAQ,GAAG,KAAKvO,gBAApB;AACA,WAAO;AAAE0O,MAAAA,MAAM,EAAEA,MAAV;AAAkBuE,MAAAA,MAAM,EAAE,KAA1B;AAAiCO,MAAAA,YAAY,EAAE1Z,KAAK,CAACwI,CAAD,CAAL,GAAW,KAAX,GAAmB,IAAlE;AAAwEmK,MAAAA,IAAI,EAAEqF,MAA9E;AAAsFhF,MAAAA,IAAI,EAAEyB;AAA5F,KAAP;AACH,GAJD;;AAKA3P,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqQ,QAAnB,GAA8B,YAAY;AACtC,QAAItB,OAAO,GAAGxM,MAAM,CAAC,MAAM4B,UAAP,EAAmB,KAAK0D,OAAxB,CAApB;;AACA,QAAI,CAACzG,iBAAiB,CAAC2N,OAAD,CAAtB,EAAiC;AAC7BA,MAAAA,OAAO,CAACxB,YAAR,CAAqB,MAArB,EAA6B1G,YAAY,CAACC,QAA1C;AACA,WAAKgI,cAAL,CAAoB,KAAK+H,mBAAzB;AACA,UAAI2F,SAAS,GAAGja,MAAM,CAAC,MAAMwB,QAAP,EAAiB,KAAK8D,OAAtB,CAAtB;;AACA,UAAI2U,SAAJ,EAAe;AACXta,QAAAA,QAAQ,CAAC,CAACsa,SAAD,CAAD,EAAclW,KAAd,CAAR;AACA,aAAKmW,YAAL,CAAkB,IAAlB,EAAwBD,SAAxB;AACH;;AACD,UAAI,KAAKE,aAAT,EAAwB;AACpB,aAAKC,UAAL;AACH;;AACD,WAAKC,oBAAL;AACA,WAAKC,MAAL,GAAc,KAAKlM,QAAL,CAAc,CAAd,IAAmB,KAAKA,QAAL,CAAc,CAAd,EAAiB9Q,cAAjB,CAAgC,KAAK8L,MAAL,CAAYqG,QAA5C,CAAnB,GAA2E,KAAzF;AACA,WAAK8K,cAAL;AACH;AACJ,GAjBD;;AAkBAnV,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB8N,WAAnB,GAAiC,YAAY;AACzC,KAAC,KAAK4O,aAAL,GAAqBxa,QAArB,GAAgCC,WAAjC,EAA8C,CAAC,KAAK0F,OAAN,CAA9C,EAA8D5D,QAA9D;;AACA,QAAI/C,OAAO,CAAC6b,IAAZ,EAAkB;AACd,OAAC,KAAKL,aAAL,GAAqBxa,QAArB,GAAgCC,WAAjC,EAA8C,CAAC,KAAK0F,OAAN,CAA9C,EAA8D3D,UAA9D;AACH;AACJ,GALD;;AAMAyD,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2c,UAAnB,GAAgC,UAAUK,KAAV,EAAiB;AAC7C,QAAI,CAAC,KAAKnP,aAAV,EAAyB;AACrB;AACH;;AACD,QAAIwM,KAAK,GAAG2C,KAAK,GAAGxa,SAAS,CAAC,MAAMuB,QAAP,EAAiBiZ,KAAjB,CAAZ,GAAsC,KAAKC,MAA5D;AACA,QAAIxc,MAAM,GAAG4Z,KAAK,CAAC5Z,MAAnB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAApB,EAA4BK,CAAC,EAA7B,EAAiC;AAC7B,WAAKoc,aAAL,CAAmB7C,KAAK,CAACvZ,CAAD,CAAxB;AACH;AACJ,GATD;;AAUA6G,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBkd,aAAnB,GAAmC,UAAU7C,KAAV,EAAiB;AAChD,QAAIxS,OAAO,GAAGtF,MAAM,CAAC,MAAMkD,OAAP,EAAgB4U,KAAhB,CAApB;;AACA,QAAIxS,OAAO,IAAIA,OAAO,CAACsV,kBAAvB,EAA2C;AACvCtV,MAAAA,OAAO,CAACuV,KAAR,CAAcC,MAAd,GAAuB,KAAKX,aAAL,GAAqB7U,OAAO,CAACsV,kBAAR,CAA2BG,YAA3B,GAA0C,IAA/D,GAAsE,EAA7F;AACH;AACJ,GALD;;AAMA3V,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB8c,cAAnB,GAAoC,YAAY;AAC5C,QAAIS,KAAK,GAAG,KAAKlR,aAAjB;;AACA,QAAI,KAAKN,cAAL,IAAuBwR,KAAK,CAAC9c,MAAN,GAAe,CAA1C,EAA6C;AACzC,WAAK0L,aAAL,CAAmB;AAAEE,QAAAA,aAAa,EAAE;AAAjB,OAAnB,EAA0C,IAA1C;AACA;;AACA,UAAI,KAAKV,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAtC,EAAmD;AAC/C,aAAK6a,gBAAL,CAAsBD,KAAtB;AACH,OAFD,MAGK;AACD,aAAK,IAAIzc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyc,KAAK,CAAC9c,MAA1B,EAAkCK,CAAC,EAAnC,EAAuC;AACnC,cAAI2c,KAAK,GAAGlb,MAAM,CAAC,gBAAgBgb,KAAK,CAACzc,CAAD,CAArB,GAA2B,IAA5B,EAAkC,KAAK+G,OAAvC,CAAlB;;AACA,cAAI,CAAChF,KAAK,CAAC4a,KAAD,CAAV,EAAmB;AACf,gBAAIrH,IAAI,GAAG7T,MAAM,CAAC,MAAMuB,UAAP,EAAmBvB,MAAM,CAAC,MAAMkC,QAAP,EAAiBgZ,KAAjB,CAAzB,CAAjB;;AACA,gBAAI,CAAC5a,KAAK,CAACuT,IAAD,CAAV,EAAkB;AACd,mBAAKsH,YAAL,CAAkBD,KAAlB,EAAyBrH,IAAzB,EAA+B,IAA/B;AACH;AACJ,WALD,MAMK;AACD,gBAAImH,KAAK,CAACzc,CAAD,CAAL,IAAY,KAAKwH,cAAL,CAAoBmJ,OAApB,CAA4B8L,KAAK,CAACzc,CAAD,CAAjC,MAA0C,CAAC,CAA3D,EAA8D;AAC1D,mBAAKwH,cAAL,CAAoBkH,IAApB,CAAyB+N,KAAK,CAACzc,CAAD,CAAL,CAASiT,QAAT,EAAzB;AACH;;AACD;AACH;AACJ;;AACD,aAAK4J,cAAL;AACH;AACJ,KAxBD,MAyBK;AACD,WAAKA,cAAL;AACH;AACJ,GA9BD;;AA+BAhW,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBwd,gBAAnB,GAAsC,UAAUI,GAAV,EAAe;AACjD,QAAIC,KAAK,GAAG,IAAZ;AACA,SAAKC,cAAL,CAAoBF,GAAG,CAAC,KAAK5R,KAAN,CAAvB,EAAqC,YAAY;AAC7C6R,MAAAA,KAAK,CAAC7R,KAAN;;AACA,UAAI6R,KAAK,CAAC7R,KAAN,GAAc4R,GAAG,CAACnd,MAAtB,EAA8B;AAC1Bod,QAAAA,KAAK,CAACL,gBAAN,CAAuBI,GAAvB;AACH,OAFD,MAGK;AACDC,QAAAA,KAAK,CAACF,cAAN;AACH;AACJ,KARD;AASH,GAXD;;AAYAhW,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB8d,cAAnB,GAAoC,UAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AAC1D,QAAIP,KAAK,GAAGlb,MAAM,CAAC,gBAAgBwb,IAAhB,GAAuB,IAAxB,EAA8B,KAAKlW,OAAnC,CAAlB;;AACA,QAAI,CAAChF,KAAK,CAAC4a,KAAD,CAAV,EAAmB;AACf,UAAIrH,IAAI,GAAG7T,MAAM,CAAC,MAAMuB,UAAP,EAAmBvB,MAAM,CAAC,MAAMkC,QAAP,EAAiBgZ,KAAjB,CAAzB,CAAjB;;AACA,UAAI,CAAC5a,KAAK,CAACuT,IAAD,CAAV,EAAkB;AACd,aAAKsH,YAAL,CAAkBD,KAAlB,EAAyBrH,IAAzB,EAA+B,IAA/B,EAAqC,KAArC,EAA4C4H,QAA5C;AACH,OAFD,MAGK;AACDA,QAAAA,QAAQ;AACX;AACJ,KARD,MASK;AACDA,MAAAA,QAAQ;AACX;AACJ,GAdD;;AAeArW,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2d,cAAnB,GAAoC,YAAY;AAC5C,SAAKM,iBAAL;AACA,SAAKrF,iBAAL;AACA,SAAK1P,SAAL,GAAiB,IAAjB;AACA,SAAK6C,cAAL,GAAsB,KAAtB;;AACA,QAAI,CAAC,KAAKD,QAAN,IAAkB,KAAKvD,aAA3B,EAA0C;AACtC,UAAI8O,SAAS,GAAG;AAAExB,QAAAA,IAAI,EAAE,KAAK9F;AAAb,OAAhB;AACA,WAAKQ,OAAL,CAAa,WAAb,EAA0B8G,SAA1B;AACH;;AACD,SAAKvL,QAAL,GAAgB,IAAhB;AACH,GAVD;;AAWAnE,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBie,iBAAnB,GAAuC,YAAY;AAC/C,QAAI3F,MAAM,GAAG9V,SAAS,CAAC,MAAMkD,QAAP,EAAiB,KAAKmC,OAAtB,CAAtB;AACA,QAAIqW,KAAK,GAAG,KAAKhS,aAAjB;;AACA,QAAIgS,KAAK,CAACzd,MAAN,GAAe,CAAnB,EAAsB;AAClB,WAAK0L,aAAL,CAAmB;AAAED,QAAAA,aAAa,EAAE;AAAjB,OAAnB,EAA0C,IAA1C;;AACA,WAAK,IAAIpL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGod,KAAK,CAACzd,MAA1B,EAAkCK,CAAC,EAAnC,EAAuC;AACnC,YAAIqd,KAAK,GAAG5b,MAAM,CAAC,gBAAgB2b,KAAK,CAACpd,CAAD,CAArB,GAA2B,IAA5B,EAAkC,KAAK+G,OAAvC,CAAlB;;AACA,YAAIsW,KAAK,IAAI,CAAEA,KAAK,CAACjQ,SAAN,CAAgB4I,QAAhB,CAAyB,UAAzB,CAAf,EAAsD;AAClD,eAAKyB,UAAL,CAAgB4F,KAAhB,EAAuB,IAAvB,EAA6B,IAA7B;AACH,SAFD,MAGK;AACD,eAAKjS,aAAL,CAAmBsD,IAAnB,CAAwB0O,KAAK,CAACpd,CAAD,CAA7B;AACH;;AACD,YAAI,CAAC,KAAK+V,mBAAV,EAA+B;AAC3B;AACH;AACJ;AACJ,KAdD,MAeK;AACD,WAAKuH,gBAAL,CAAsB9F,MAAtB;AACH;;AACDnW,IAAAA,WAAW,CAACmW,MAAD,EAAS5S,QAAT,CAAX;AACH,GAtBD;;AAuBAiC,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBoe,gBAAnB,GAAsC,UAAU9F,MAAV,EAAkB;AACpD,SAAK,IAAIxX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwX,MAAM,CAAC7X,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;AACpC,UAAI,CAACwX,MAAM,CAACxX,CAAD,CAAN,CAAUoN,SAAV,CAAoB4I,QAApB,CAA6B,WAA7B,CAAL,EAAgD;AAC5C,aAAKyB,UAAL,CAAgBD,MAAM,CAACxX,CAAD,CAAtB,EAA2B,IAA3B,EAAiC,IAAjC;AACH;;AACD,UAAI,CAAC,KAAK+V,mBAAV,EAA+B;AAC3B;AACH;AACJ;AACJ,GATD;;AAUAlP,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqe,YAAnB,GAAkC,UAAUC,KAAV,EAAiB;AAC/C,QAAIle,MAAM,GAAGke,KAAK,CAACC,aAAN,CAAoBne,MAAjC;AACAsB,IAAAA,YAAY,CAACI,MAAb,CAAoB,KAAK+F,OAAzB,EAAkC,aAAlC,EAAiD,KAAK2W,kBAAtD;;AACA,QAAI,CAACpe,MAAD,IAAW,KAAK6I,eAApB,EAAqC;AACjC;AACH,KAFD,MAGK;AACD,UAAIiF,SAAS,GAAG9N,MAAM,CAAC8N,SAAvB;AACA,UAAIkM,EAAE,GAAGhY,OAAO,CAAChC,MAAD,EAAS,MAAM2D,QAAf,CAAhB;;AACA,UAAI,CAACqW,EAAL,EAAS;AACL;AACH,OAFD,MAGK,IAAIkE,KAAK,CAACC,aAAN,CAAoBE,KAApB,KAA8B,CAAlC,EAAqC;AACtC,YAAIC,aAAa,GAAGnc,MAAM,CAAC,MAAM8D,YAAP,EAAqB+T,EAArB,CAA1B;AACA,YAAIuE,WAAW,GAAGpc,MAAM,CAAC,MAAMiC,IAAP,EAAa4V,EAAb,CAAxB;AACA,aAAKwE,WAAL;AACA,aAAKC,eAAL,CAAqBzE,EAArB;;AACA,YAAI,KAAK3G,YAAL,IAAqB,CAAC2G,EAAE,CAAClM,SAAH,CAAa4I,QAAb,CAAsB,WAAtB,CAA1B,EAA8D;AAC1D,cAAIgI,YAAY,GAAG1c,OAAO,CAAChC,MAAD,EAAS,MAAM6F,YAAf,CAA1B;;AACA,cAAI,CAACpD,KAAK,CAACic,YAAD,CAAV,EAA0B;AACtB,gBAAIC,YAAY,GAAGxc,MAAM,CAAC,MAAM2D,aAAP,EAAsB4Y,YAAtB,CAAzB;AACA,iBAAKpE,iBAAL,CAAuBoE,YAAvB,EAAqCC,YAAY,CAAC7Q,SAAb,CAAuB4I,QAAvB,CAAgC/Q,KAAhC,CAArC,EAA6EqU,EAA7E,EAAiFkE,KAAK,CAACC,aAAvF;AACA,iBAAKS,iBAAL,CAAuBV,KAAK,CAACC,aAA7B,EAA4CnE,EAA5C;AACA;AACH;AACJ;;AACD,YAAIlM,SAAS,CAAC4I,QAAV,CAAmBhT,UAAnB,CAAJ,EAAoC;AAChC,eAAK4Z,YAAL,CAAkBtD,EAAlB,EAAsBha,MAAtB,EAA8Bke,KAA9B;AACH,SAFD,MAGK,IAAIpQ,SAAS,CAAC4I,QAAV,CAAmBjT,WAAnB,CAAJ,EAAqC;AACtC,eAAKob,YAAL,CAAkB7E,EAAlB,EAAsBha,MAAtB,EAA8Bke,KAA9B;AACH,SAFI,MAGA,IAAII,aAAa,IAAIC,WAArB,EAAkC;AACnC,cAAIA,WAAW,CAACzQ,SAAZ,CAAsB4I,QAAtB,CAA+B1Q,MAA/B,KAA0CuY,WAAW,CAACzQ,SAAZ,CAAsB4I,QAAtB,CAA+BhT,UAA/B,CAA9C,EAA0F;AACtF,iBAAK4Z,YAAL,CAAkBtD,EAAlB,EAAsBuE,WAAtB,EAAmCL,KAAnC;AACH,WAFD,MAGK,IAAIK,WAAW,CAACzQ,SAAZ,CAAsB4I,QAAtB,CAA+B1Q,MAA/B,KAA0CuY,WAAW,CAACzQ,SAAZ,CAAsB4I,QAAtB,CAA+BjT,WAA/B,CAA9C,EAA2F;AAC5F,iBAAKob,YAAL,CAAkB7E,EAAlB,EAAsBuE,WAAtB,EAAmCL,KAAnC;AACH,WAFI,MAGA,IAAI,CAACpQ,SAAS,CAAC4I,QAAV,CAAmB3S,UAAnB,CAAD,IAAmC,CAAC+J,SAAS,CAAC4I,QAAV,CAAmB/S,QAAnB,CAAxC,EAAsE;AACvE,iBAAKmb,YAAL,CAAkB9E,EAAlB,EAAsBkE,KAAK,CAACC,aAA5B,EAA2C,KAA3C;AACH;AACJ,SAVI,MAWA;AACD,cAAI,CAACrQ,SAAS,CAAC4I,QAAV,CAAmB3S,UAAnB,CAAD,IAAmC,CAAC+J,SAAS,CAAC4I,QAAV,CAAmB/S,QAAnB,CAAxC,EAAsE;AAClE,iBAAKmb,YAAL,CAAkB9E,EAAlB,EAAsBkE,KAAK,CAACC,aAA5B,EAA2C,KAA3C;AACH;AACJ;AACJ;;AACD,WAAKS,iBAAL,CAAuBV,KAAK,CAACC,aAA7B,EAA4CnE,EAA5C;AACH;AACJ,GAnDD;;AAoDAzS,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBmf,gBAAnB,GAAsC,UAAUzD,OAAV,EAAmB0D,OAAnB,EAA4B/T,CAA5B,EAA+B;AACjE,QAAIwP,MAAM,GAAGzY,OAAO,CAACsZ,OAAD,EAAU,MAAM3X,QAAhB,CAApB;AACA,QAAIsT,SAAS,GAAG,KAAKyE,aAAL,CAAmBJ,OAAnB,EAA4B0D,OAAO,GAAG,SAAH,GAAe,OAAlD,EAA2D/T,CAA3D,CAAhB;AACAgM,IAAAA,SAAS,CAACxB,IAAV,GAAiBwB,SAAS,CAACxB,IAAV,CAAemE,MAAf,CAAsB,CAAtB,EAAyB3C,SAAS,CAACxB,IAAV,CAAepV,MAAf,GAAwB,CAAjD,CAAjB;AACA,SAAK8P,OAAL,CAAa,aAAb,EAA4B8G,SAA5B;AACH,GALD;;AAMA1P,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBgf,iBAAnB,GAAuC,UAAU3T,CAAV,EAAa+O,EAAb,EAAiB;AACpD,QAAI/C,SAAS,GAAG;AACZiH,MAAAA,KAAK,EAAEjT,CADK;AAEZmK,MAAAA,IAAI,EAAE4E;AAFM,KAAhB;AAIA,SAAK7J,OAAL,CAAa,aAAb,EAA4B8G,SAA5B;AACH,GAND;;AAOA1P,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqf,UAAnB,GAAgC,UAAUxE,MAAV,EAAkBzE,IAAlB,EAAwBkJ,MAAxB,EAAgC;AAC5D,QAAIxX,KAAK,GAAG,IAAZ;;AACA,SAAK8U,oBAAL;;AACA,QAAIxG,IAAI,CAAClI,SAAL,CAAe4I,QAAf,CAAwBxS,IAAxB,CAAJ,EAAmC;AAC/B,WAAKZ,WAAL,CAAiB0S,IAAjB;AACH;;AACD,QAAI,CAAC,KAAK1J,aAAV,EAAyB;AACrB0J,MAAAA,IAAI,CAAClI,SAAL,CAAeC,GAAf,CAAmB,aAAnB;AACH;;AACD,QAAImR,MAAM,KAAK,IAAX,IAAoBA,MAAM,KAAK,IAAX,IAAmBzE,MAAM,CAAC3M,SAAP,CAAiB4I,QAAjB,CAA0B,YAA1B,CAA3C,EAAqF;AACjF,UAAI,KAAK7O,aAAL,KAAuB,IAA3B,EAAiC;AAC7B9F,QAAAA,WAAW,CAAC,CAACiU,IAAD,CAAD,EAAStS,UAAT,CAAX;AACA5B,QAAAA,QAAQ,CAAC,CAACkU,IAAD,CAAD,EAASvS,WAAT,CAAR;AACA,YAAI0b,OAAO,GAAG,CAAd;AACA,YAAIC,KAAK,GAAG,CAAZ;AACA,YAAIC,OAAO,GAAG,IAAd;AACA,YAAIC,IAAI,GAAGnd,MAAM,CAAC,MAAM4B,UAAP,EAAmB0W,MAAnB,CAAjB;AACA,YAAI8E,OAAO,GAAG9E,MAAd;AACA,aAAK+E,SAAL,CAAeD,OAAf,EAAwBD,IAAxB;AACA,YAAIG,eAAe,GAAGtd,MAAM,CAAC,MAAMwB,QAAN,GAAiB,GAAjB,GAAuBM,MAAxB,EAAgCwW,MAAhC,CAA5B;;AACA,YAAI,KAAK3R,SAAL,IAAkB,CAAC,KAAKlB,WAA5B,EAAyC;AACrC,eAAK4D,MAAL,CAAYkU,OAAZ,CAAoBJ,IAApB,EAA0B;AACtBK,YAAAA,IAAI,EAAE,KAAKC,SAAL,CAAeC,MAAf,CAAsBzY,MADN;AAEtBC,YAAAA,QAAQ,EAAE,KAAKuY,SAAL,CAAeC,MAAf,CAAsBxY,QAFV;AAGtByY,YAAAA,cAAc,EAAE,KAAKF,SAAL,CAAeC,MAAf,CAAsBvY,MAHhB;AAItByY,YAAAA,KAAK,EAAE,UAAUC,IAAV,EAAgB;AACnBT,cAAAA,OAAO,CAACvC,KAAR,CAAciD,QAAd,GAAyB,QAAzB;;AACA,kBAAI,CAACjf,iBAAiB,CAACye,eAAD,CAAlB,IAAuCA,eAAe,YAAYS,WAAtE,EAAmF;AAC/ET,gBAAAA,eAAe,CAAC3R,SAAhB,CAA0BC,GAA1B,CAA8BxH,qBAA9B;AACH;;AACD4Y,cAAAA,OAAO,GAAGI,OAAO,CAACrC,YAAlB;AACAkC,cAAAA,KAAK,GAAGjd,MAAM,CAAC,MAAMkC,QAAP,EAAiBoW,MAAjB,CAAN,CAA+ByC,YAAvC;AACH,aAXqB;AAYtBiD,YAAAA,QAAQ,EAAE,UAAUH,IAAV,EAAgB;AACtBA,cAAAA,IAAI,CAACvY,OAAL,CAAauV,KAAb,CAAmBoD,OAAnB,GAA6B,OAA7B;AACAf,cAAAA,OAAO,CAACgB,aAAR,CAAsBL,IAAtB,EAA4Bb,OAA5B,EAAqCC,KAArC;AACH,aAfqB;AAgBtBnW,YAAAA,GAAG,EAAE,UAAU+W,IAAV,EAAgB;AACjBA,cAAAA,IAAI,CAACvY,OAAL,CAAauV,KAAb,CAAmBoD,OAAnB,GAA6B,OAA7B;;AACA,kBAAI,CAACpf,iBAAiB,CAACye,eAAD,CAAlB,IAAuCA,eAAe,YAAYS,WAAtE,EAAmF;AAC/ET,gBAAAA,eAAe,CAAC3R,SAAhB,CAA0BpM,MAA1B,CAAiC6E,qBAAjC;AACH;;AACDmB,cAAAA,KAAK,CAAC4Y,YAAN,CAAmBf,OAAnB,EAA4BD,IAA5B,EAAkCtJ,IAAlC;AACH;AAtBqB,WAA1B;AAwBH,SAzBD,MA0BK;AACD,eAAKsK,YAAL,CAAkBf,OAAlB,EAA2BD,IAA3B,EAAiCtJ,IAAjC;AACH;AACJ;AACJ,KAzCD,MA0CK;AACD,UAAIuK,EAAE,GAAGpe,MAAM,CAAC,MAAM4B,UAAP,EAAmB0W,MAAnB,CAAf;AACA8F,MAAAA,EAAE,CAACvD,KAAH,CAASoD,OAAT,GAAmB,MAAnB;;AACA,UAAI,KAAK7U,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,KAAkD,IAAtD,EAA4D;AACxD,aAAKsF,aAAL,GAAqB,KAArB;AACH;AACJ;;AACD,QAAI,KAAKyE,aAAT,EAAwB;AACpB0J,MAAAA,IAAI,CAAClI,SAAL,CAAeC,GAAf,CAAmB,aAAnB;AACH;AACJ,GA7DD;;AA8DAxG,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB0gB,YAAnB,GAAkC,UAAU7F,MAAV,EAAkB8F,EAAlB,EAAsBvK,IAAtB,EAA4B;AAC1DuK,IAAAA,EAAE,CAACvD,KAAH,CAASoD,OAAT,GAAmB,OAAnB;AACA3F,IAAAA,MAAM,CAACuC,KAAP,CAAaoD,OAAb,GAAuB,OAAvB;AACA3F,IAAAA,MAAM,CAACuC,KAAP,CAAaiD,QAAb,GAAwB,EAAxB;AACAxF,IAAAA,MAAM,CAACuC,KAAP,CAAaC,MAAb,GAAsB,EAAtB;AACAlb,IAAAA,WAAW,CAAC,CAACiU,IAAD,CAAD,EAAS7R,OAAT,CAAX;AACA,SAAKqc,SAAL,CAAe/F,MAAf;;AACA,QAAI,KAAK6B,aAAL,IAAsB,KAAK5Q,QAA3B,IAAuC,KAAKpD,aAAhD,EAA+D;AAC3D,WAAKiU,UAAL,CAAgB9B,MAAhB;AACA,WAAKnS,aAAL,GAAqB,KAArB;AACH;;AACD,QAAI,KAAKoD,QAAL,IAAiB,KAAK+U,UAAtB,IAAoC,CAAC,KAAK7Y,WAA9C,EAA2D;AACvD,WAAK6Y,UAAL,GAAkB,KAAKC,cAAL,CAAoBjG,MAApB,EAA4B,IAA5B,CAAlB;AACA,WAAKtK,OAAL,CAAa,cAAb,EAA6B,KAAKsQ,UAAlC;AACH;AACJ,GAfD;;AAgBAlZ,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4gB,SAAnB,GAA+B,UAAUvG,KAAV,EAAiB;AAC5CA,IAAAA,KAAK,CAAC9M,YAAN,CAAmB,eAAnB,EAAoC,MAApC;AACApL,IAAAA,WAAW,CAAC,CAACkY,KAAD,CAAD,EAAUzU,aAAV,CAAX;AACA,QAAI4H,EAAE,GAAG6M,KAAK,CAAC3E,YAAN,CAAmB,UAAnB,CAAT;;AACA,QAAI,CAAC7S,KAAK,CAAC2K,EAAD,CAAN,IAAc,KAAKnB,aAAL,CAAmBoF,OAAnB,CAA2BjE,EAA3B,MAAmC,CAAC,CAAtD,EAAyD;AACrD,WAAKnB,aAAL,CAAmBmD,IAAnB,CAAwBhC,EAAxB;AACH;AACJ,GAPD;;AAQA7F,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBif,YAAnB,GAAkC,UAAUpE,MAAV,EAAkBzE,IAAlB,EAAwB/K,CAAxB,EAA2B;AACzD,QAAIvD,KAAK,GAAG,IAAZ;;AACA,QAAIsO,IAAI,CAAClI,SAAL,CAAe4I,QAAf,CAAwBvS,OAAxB,CAAJ,EAAsC;AAClC;AACH,KAFD,MAGK;AACDrC,MAAAA,QAAQ,CAAC,CAACkU,IAAD,CAAD,EAAS7R,OAAT,CAAR;AACH;;AACD,QAAIwc,OAAJ;;AACA,QAAI,KAAKjV,QAAT,EAAmB;AACfiV,MAAAA,OAAO,GAAG,KAAKD,cAAL,CAAoBjG,MAApB,EAA4BxP,CAA5B,CAAV;AACA,WAAKkF,OAAL,CAAa,gBAAb,EAA+BwQ,OAA/B,EAAwC,UAAUhF,YAAV,EAAwB;AAC5D,YAAIA,YAAY,CAACC,MAAjB,EAAyB;AACrB7Z,UAAAA,WAAW,CAAC,CAACiU,IAAD,CAAD,EAAS7R,OAAT,CAAX;AACH,SAFD,MAGK;AACDuD,UAAAA,KAAK,CAACkZ,kBAAN,CAAyBnG,MAAzB,EAAiCzE,IAAjC,EAAuC2F,YAAvC;AACH;AACJ,OAPD;AAQH,KAVD,MAWK;AACD,WAAKiF,kBAAL,CAAwBnG,MAAxB,EAAgCzE,IAAhC,EAAsC2K,OAAtC;AACH;AACJ,GAvBD;;AAwBApZ,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBghB,kBAAnB,GAAwC,UAAUnG,MAAV,EAAkBzE,IAAlB,EAAwB2K,OAAxB,EAAiC;AACrE,QAAIjZ,KAAK,GAAG,IAAZ;;AACA3F,IAAAA,WAAW,CAAC,CAACiU,IAAD,CAAD,EAASvS,WAAT,CAAX;AACA3B,IAAAA,QAAQ,CAAC,CAACkU,IAAD,CAAD,EAAStS,UAAT,CAAR;AACA,QAAImd,KAAK,GAAG,CAAZ;AACA,QAAI5X,GAAG,GAAG,CAAV;AACA,QAAIwU,KAAK,GAAG,IAAZ;AACA,QAAI8C,EAAE,GAAGpe,MAAM,CAAC,MAAM4B,UAAP,EAAmB0W,MAAnB,CAAf;AACA,QAAIR,KAAK,GAAGQ,MAAZ;AACA,QAAIqG,aAAa,GAAG3e,MAAM,CAAC,MAAMwB,QAAN,GAAiB,GAAjB,GAAuBM,MAAxB,EAAgCwW,MAAhC,CAA1B;;AACA,QAAI,KAAK3R,SAAT,EAAoB;AAChB,WAAK0C,MAAL,CAAYkU,OAAZ,CAAoBa,EAApB,EAAwB;AACpBZ,QAAAA,IAAI,EAAE,KAAKC,SAAL,CAAemB,QAAf,CAAwB3Z,MADV;AAEpBC,QAAAA,QAAQ,EAAE,KAAKuY,SAAL,CAAemB,QAAf,CAAwB1Z,QAFd;AAGpByY,QAAAA,cAAc,EAAE,KAAKF,SAAL,CAAemB,QAAf,CAAwBzZ,MAHpB;AAIpByY,QAAAA,KAAK,EAAE,UAAUC,IAAV,EAAgB;AACnB/F,UAAAA,KAAK,CAAC+C,KAAN,CAAYiD,QAAZ,GAAuB,QAAvB;;AACA,cAAI,CAACjf,iBAAiB,CAAC8f,aAAD,CAAlB,IAAqCA,aAAa,YAAYZ,WAAlE,EAA+E;AAC3EY,YAAAA,aAAa,CAAChT,SAAd,CAAwBC,GAAxB,CAA4BxH,qBAA5B;AACH;;AACDsa,UAAAA,KAAK,GAAG1e,MAAM,CAAC,MAAMkC,QAAP,EAAiBoW,MAAjB,CAAN,CAA+ByC,YAAvC;AACAjU,UAAAA,GAAG,GAAGgR,KAAK,CAACiD,YAAZ;AACH,SAXmB;AAYpBiD,QAAAA,QAAQ,EAAE,UAAUH,IAAV,EAAgB;AACtBvC,UAAAA,KAAK,CAAC4C,aAAN,CAAoBL,IAApB,EAA0Ba,KAA1B,EAAiC5X,GAAjC;AACH,SAdmB;AAepBA,QAAAA,GAAG,EAAE,UAAU+W,IAAV,EAAgB;AACjBA,UAAAA,IAAI,CAACvY,OAAL,CAAauV,KAAb,CAAmBoD,OAAnB,GAA6B,MAA7B;;AACA,cAAI,CAACpf,iBAAiB,CAAC8f,aAAD,CAAlB,IAAqCA,aAAa,YAAYZ,WAAlE,EAA+E;AAC3EY,YAAAA,aAAa,CAAChT,SAAd,CAAwBpM,MAAxB,CAA+B6E,qBAA/B;AACH;;AACDmB,UAAAA,KAAK,CAACsZ,aAAN,CAAoB/G,KAApB,EAA2BsG,EAA3B,EAA+BvK,IAA/B,EAAqC2K,OAArC;AACH;AArBmB,OAAxB;AAuBH,KAxBD,MAyBK;AACD,WAAKK,aAAL,CAAmB/G,KAAnB,EAA0BsG,EAA1B,EAA8BvK,IAA9B,EAAoC2K,OAApC;AACH;AACJ,GAtCD;;AAuCApZ,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBohB,aAAnB,GAAmC,UAAU/G,KAAV,EAAiBsG,EAAjB,EAAqBvK,IAArB,EAA2B2K,OAA3B,EAAoC;AACnEJ,IAAAA,EAAE,CAACvD,KAAH,CAASoD,OAAT,GAAmB,MAAnB;AACAnG,IAAAA,KAAK,CAAC+C,KAAN,CAAYiD,QAAZ,GAAuB,EAAvB;AACAhG,IAAAA,KAAK,CAAC+C,KAAN,CAAYC,MAAZ,GAAqB,EAArB;AACAlb,IAAAA,WAAW,CAAC,CAACiU,IAAD,CAAD,EAAS7R,OAAT,CAAX;AACA,SAAK8c,YAAL,CAAkBhH,KAAlB;;AACA,QAAI,KAAKvO,QAAT,EAAmB;AACfiV,MAAAA,OAAO,GAAG,KAAKD,cAAL,CAAoBzG,KAApB,EAA2B,IAA3B,CAAV;AACA,WAAK9J,OAAL,CAAa,eAAb,EAA8BwQ,OAA9B;AACH;AACJ,GAVD;;AAWApZ,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqhB,YAAnB,GAAkC,UAAUhH,KAAV,EAAiBiH,QAAjB,EAA2B;AACzD,QAAIA,QAAJ,EAAc;AACVjH,MAAAA,KAAK,CAACrL,eAAN,CAAsB,eAAtB;AACH,KAFD,MAGK;AACD,WAAKyJ,iBAAL,CAAuB4B,KAAvB;AACH;;AACD,QAAIrO,KAAK,GAAG,KAAKK,aAAL,CAAmBoF,OAAnB,CAA2B4I,KAAK,CAAC3E,YAAN,CAAmB,UAAnB,CAA3B,CAAZ;;AACA,QAAI1J,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ,WAAKK,aAAL,CAAmB2N,MAAnB,CAA0BhO,KAA1B,EAAiC,CAAjC;AACH;AACJ,GAXD;;AAYArE,EAAAA,QAAQ,CAAC3H,SAAT,CAAmByY,iBAAnB,GAAuC,UAAU4B,KAAV,EAAiB;AACpDA,IAAAA,KAAK,CAAC9M,YAAN,CAAmB,eAAnB,EAAoC,OAApC;AACArL,IAAAA,QAAQ,CAAC,CAACmY,KAAD,CAAD,EAAUzU,aAAV,CAAR;AACH,GAHD;;AAIA+B,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4f,SAAnB,GAA+B,UAAU/E,MAAV,EAAkB8F,EAAlB,EAAsB;AACjDA,IAAAA,EAAE,CAACvD,KAAH,CAASoD,OAAT,GAAmB,OAAnB;AACAG,IAAAA,EAAE,CAACvD,KAAH,CAASmE,UAAT,GAAsB,QAAtB;AACA1G,IAAAA,MAAM,CAACuC,KAAP,CAAaC,MAAb,GAAsBxC,MAAM,CAACyC,YAAP,GAAsB,IAA5C;AACAqD,IAAAA,EAAE,CAACvD,KAAH,CAASoD,OAAT,GAAmB,MAAnB;AACAG,IAAAA,EAAE,CAACvD,KAAH,CAASmE,UAAT,GAAsB,EAAtB;AACH,GAND;;AAOA5Z,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBygB,aAAnB,GAAmC,UAAUL,IAAV,EAAgBa,KAAhB,EAAuB5X,GAAvB,EAA4B;AAC3D,QAAImY,SAAS,GAAG,CAACpB,IAAI,CAAC3Y,QAAL,GAAgB2Y,IAAI,CAACqB,SAAtB,IAAmCrB,IAAI,CAAC3Y,QAAxD;AACA,QAAIia,aAAa,GAAG,CAACrY,GAAG,GAAG4X,KAAP,IAAgBO,SAAhB,GAA4BP,KAAhD;AACAb,IAAAA,IAAI,CAACvY,OAAL,CAAa2P,aAAb,CAA2B4F,KAA3B,CAAiCC,MAAjC,GAA0CqE,aAAa,GAAG,IAA1D;AACH,GAJD;;AAKA/Z,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBmT,gBAAnB,GAAsC,UAAUwO,QAAV,EAAoBC,WAApB,EAAiC5D,QAAjC,EAA2CsB,MAA3C,EAAmD;AACrF,QAAIxX,KAAK,GAAG,IAAZ;;AACA,QAAI+Z,KAAK,GAAGtf,MAAM,CAAC,SAASiC,IAAV,EAAgBmd,QAAhB,CAAlB;;AACA,QAAI9e,KAAK,CAACgf,KAAD,CAAT,EAAkB;AACd;AACH;;AACD,SAAKpe,WAAL,CAAiBoe,KAAjB;AACA,QAAIhN,UAAJ;AACA;;AACA,QAAI,KAAKlJ,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAtC,EAAmD;AAC/C,UAAI+P,KAAK,GAAG,KAAKoP,OAAL,CAAaH,QAAb,EAAuB,MAAMxd,UAA7B,EAAyC1D,MAArD;AACA,UAAIshB,QAAQ,GAAG,KAAKC,cAAL,CAAoB,KAAKrW,MAAzB,EAAiC+G,KAAjC,EAAwC,CAAxC,CAAf;;AACA,UAAI7P,KAAK,CAACkf,QAAD,CAAL,IAAmBlf,KAAK,CAACkf,QAAQ,CAACtS,UAAV,CAA5B,EAAmD;AAC/CnN,QAAAA,MAAM,CAACuf,KAAD,CAAN;AACA,aAAKR,YAAL,CAAkBM,QAAlB,EAA4B,IAA5B;AACA;AACH;;AACD,WAAK9V,QAAL,CAAc2D,IAAd,CAAmB,OAAnB;;AACA,UAAI,KAAK7D,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,IAAiD,KAAK+M,SAA1D,EAAqE;AACjE,aAAK7D,QAAL,CAAciE,GAAd;AACA+E,QAAAA,UAAU,GAAG,KAAKrC,aAAL,CAAmB,KAAKzC,QAAxB,EAAkC4R,QAAQ,CAACjM,YAAT,CAAsB,UAAtB,CAAlC,CAAb;AACA,aAAKuM,SAAL,CAAepN,UAAf,EAA2BkN,QAA3B,EAAqCF,KAArC,EAA4CF,QAA5C,EAAsDC,WAAtD,EAAmE5D,QAAnE,EAA6EsB,MAA7E;AACH,OAJD,MAKK;AACDyC,QAAAA,QAAQ,CAACtS,UAAT,CAAoBgB,YAApB,CAAiC,KAAKC,QAAL,CAAcqR,QAAd,EAAwBJ,QAAQ,CAACjM,YAAT,CAAsB,UAAtB,CAAxB,CAAjC,EAA6F7F,IAA7F,CAAkG,UAAUxE,CAAV,EAAa;AAC3GvD,UAAAA,KAAK,CAAC+D,QAAN,CAAeiE,GAAf;;AACA+E,UAAAA,UAAU,GAAGxJ,CAAC,CAAC2E,MAAf;;AACA,cAAIlI,KAAK,CAACqK,QAAN,KAAmB,CAAvB,EAA0B;AACtBrK,YAAAA,KAAK,CAACqK,QAAN,GAAiB,CAAjB;AACH;;AACDrK,UAAAA,KAAK,CAACma,SAAN,CAAgBpN,UAAhB,EAA4BkN,QAA5B,EAAsCF,KAAtC,EAA6CF,QAA7C,EAAuDC,WAAvD,EAAoE5D,QAApE,EAA8EsB,MAA9E;AACH,SAPD,EAOGhP,KAPH,CAOS,UAAUjF,CAAV,EAAa;AAClBvD,UAAAA,KAAK,CAACyI,OAAN,CAAc,eAAd,EAA+B;AAAEC,YAAAA,KAAK,EAAEnF;AAAT,WAA/B;AACH,SATD;AAUH;AACJ,KA1BD,MA2BK;AACDwJ,MAAAA,UAAU,GAAG,KAAKrC,aAAL,CAAmB,KAAKzC,QAAxB,EAAkC4R,QAAQ,CAACjM,YAAT,CAAsB,UAAtB,CAAlC,CAAb;AACA,WAAKoE,eAAL,GAAuB,KAAKlH,aAAL,CAAmBiC,UAAnB,CAAvB;;AACA,UAAIhS,KAAK,CAACgS,UAAD,CAAL,IAAqBA,UAAU,CAACpU,MAAX,KAAsB,CAA/C,EAAkD;AAC9C6B,QAAAA,MAAM,CAACuf,KAAD,CAAN;AACA,aAAKR,YAAL,CAAkBM,QAAlB,EAA4B,IAA5B;AACA;AACH,OAJD,MAKK;AACD,aAAK7W,cAAL,CAAoBI,cAApB,CAAmCwH,KAAnC,GAA2CR,UAAU,CAACyP,QAAQ,CAACjM,YAAT,CAAsB,YAAtB,CAAD,CAAV,GAAkD,CAA7F;AACAiM,QAAAA,QAAQ,CAAC3O,WAAT,CAAqB5P,QAAQ,CAAC0P,UAAT,CAAoB,KAAKC,aAAzB,EAAwC,KAAK+G,eAA7C,EAA8D,KAAKhP,cAAnE,CAArB;AACA,aAAKuU,UAAL,CAAgBsC,QAAhB,EAA0BE,KAA1B,EAAiCvC,MAAjC;AACA,aAAK4C,yBAAL,CAA+BrN,UAA/B;AACA,aAAKsN,eAAL,CAAqBR,QAArB;AACA,aAAKtO,YAAL,CAAkBsO,QAAlB;AACA,aAAKS,gBAAL,CAAsBvN,UAAtB;AACA,aAAKwN,cAAL,CAAoBV,QAApB,EAA8BC,WAA9B,EAA2CtC,MAA3C;AACH;AACJ;AACJ,GAvDD;;AAwDA3X,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBiiB,SAAnB,GAA+B,UAAUpN,UAAV,EAAsB9D,MAAtB,EAA8B8Q,KAA9B,EAAqCF,QAArC,EAA+CC,WAA/C,EAA4D5D,QAA5D,EAAsEsB,MAAtE,EAA8E;AACzG,SAAKxF,eAAL,GAAuBjF,UAAvB;;AACA,QAAIhS,KAAK,CAACgS,UAAD,CAAL,IAAqBA,UAAU,CAACpU,MAAX,KAAsB,CAA/C,EAAkD;AAC9C6B,MAAAA,MAAM,CAACuf,KAAD,CAAN;AACA,WAAKR,YAAL,CAAkBM,QAAlB,EAA4B,IAA5B;AACH,KAHD,MAIK;AACD,WAAKjW,cAAL,CAAoBqF,MAApB;;AACA,UAAI,KAAKpF,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,IAAiD,CAAC,KAAK+M,SAA3D,EAAsE;AAClE,YAAIlC,EAAE,GAAGmU,QAAQ,CAACjM,YAAT,CAAsB,UAAtB,CAAT;AACA,YAAI4B,QAAQ,GAAG,KAAKgL,aAAL,CAAmB9U,EAAnB,CAAf;AACAxK,QAAAA,QAAQ,CAAC,OAAD,EAAU6R,UAAV,EAAsByC,QAAtB,CAAR;AACH;;AACD,WAAKxM,cAAL,CAAoBI,cAApB,CAAmCwH,KAAnC,GAA2CR,UAAU,CAACyP,QAAQ,CAACjM,YAAT,CAAsB,YAAtB,CAAD,CAAV,GAAkD,CAA7F;AACAiM,MAAAA,QAAQ,CAAC3O,WAAT,CAAqB5P,QAAQ,CAAC0P,UAAT,CAAoB,KAAKC,aAAzB,EAAwC8B,UAAxC,EAAoD,KAAK/J,cAAzD,CAArB;AACA,WAAKuU,UAAL,CAAgBsC,QAAhB,EAA0BE,KAA1B,EAAiCvC,MAAjC;AACA,WAAK4C,yBAAL,CAA+BrN,UAA/B;AACA,WAAKsN,eAAL,CAAqBR,QAArB;AACA,WAAKtO,YAAL,CAAkBsO,QAAlB;AACA,WAAKS,gBAAL,CAAsBvN,UAAtB;AACA,WAAKwN,cAAL,CAAoBV,QAApB,EAA8BC,WAA9B,EAA2CtC,MAA3C;AACH;;AACD,QAAItB,QAAJ,EAAc;AACVA,MAAAA,QAAQ;AACX;;AACD,QAAI,KAAKnS,QAAL,CAAcpL,MAAd,KAAyB,CAAzB,IAA8B,CAAC,KAAKqL,QAAxC,EAAkD;AAC9C,WAAKuE,QAAL;AACH;AACJ,GA5BD;;AA6BA1I,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBoiB,gBAAnB,GAAsC,UAAUvN,UAAV,EAAsB;AACxD,QAAI/T,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAG+T,UAAU,CAACpU,MAAtB,EAA8B;AAC1B,UAAI+M,EAAE,GAAGqH,UAAU,CAAC/T,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,IAAgCqH,UAAU,CAAC/T,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,EAA8BuG,QAA9B,EAAhC,GAA2E,IAApF;;AACA,UAAI,KAAK5L,WAAL,KAAqBoH,SAArB,IAAkC,KAAKpH,WAAL,CAAiBsJ,OAAjB,CAAyBjE,EAAzB,MAAiC,CAAC,CAAxE,EAA2E;AACvE,aAAK+U,eAAL,CAAqB,CAAC/U,EAAD,CAArB;AACH;;AACD1M,MAAAA,CAAC;AACJ;AACJ,GATD;AAUA;AACJ;AACA;;;AACI6G,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBkiB,yBAAnB,GAA+C,UAAUrJ,KAAV,EAAiB;AAC5D,QAAI/X,CAAJ;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG+X,KAAK,CAACpY,MAAtB,EAA8BK,CAAC,EAA/B,EAAmC;AAC/B,UAAI0M,EAAE,GAAGqL,KAAK,CAAC/X,CAAD,CAAL,CAAS,KAAK6K,MAAL,CAAY6B,EAArB,IAA2BqL,KAAK,CAAC/X,CAAD,CAAL,CAAS,KAAK6K,MAAL,CAAY6B,EAArB,EAAyBuG,QAAzB,EAA3B,GAAiE,IAA1E;;AACA,UAAI,KAAK7H,aAAL,KAAuBqD,SAAvB,IAAoC,KAAKrD,aAAL,CAAmBuF,OAAnB,CAA2BjE,EAA3B,MAAmC,CAAC,CAA5E,EAA+E;AAC3E,aAAKyQ,iBAAL;AACH;AACJ;AACJ,GARD;;AASAtW,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBmiB,eAAnB,GAAqC,UAAUta,OAAV,EAAmB;AACpD,QAAI,KAAK4L,YAAT,EAAuB;AACnB,WAAKsG,GAAL,GAAY,KAAK7R,cAAN,GAAwB,KAAKA,cAAL,CAAoBuJ,OAApB,CAA4B5J,OAAO,CAAC6N,YAAR,CAAqB,UAArB,CAA5B,CAAxB,GAAwF,IAAnG;;AACA,UAAI,KAAKlC,SAAT,EAAoB;AAChB,aAAK0F,qBAAL,CAA2BrR,OAA3B;AACA,aAAKoR,sBAAL,CAA4BpR,OAA5B;AACH;AACJ;;AACD,SAAKiS,eAAL,GAAuB,IAAvB;AACH,GATD;;AAUAnS,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBwiB,SAAnB,GAA+B,UAAUzR,MAAV,EAAkB0R,SAAlB,EAA6BC,SAA7B,EAAwC;AACnE,QAAID,SAAS,KAAKC,SAAlB,EAA6B;AACzB,aAAO3R,MAAP;AACH,KAFD,MAGK;AACD,aAAO,KAAKyR,SAAL,CAAe,KAAKG,cAAL,CAAoB5R,MAApB,CAAf,EAA4C0R,SAA5C,EAAuDC,SAAS,GAAG,CAAnE,CAAP;AACH;AACJ,GAPD;;AAQA/a,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBgiB,cAAnB,GAAoC,UAAUjR,MAAV,EAAkB0R,SAAlB,EAA6BC,SAA7B,EAAwC;AACxE,QAAIvO,SAAJ;;AACA,QAAIsO,SAAS,KAAKC,SAAlB,EAA6B;AACzB,aAAO,KAAKC,cAAL,CAAoB5R,MAApB,CAAP;AACH,KAFD,MAGK;AACD,aAAO,KAAKiR,cAAL,CAAoB,KAAKW,cAAL,CAAoB5R,MAApB,CAApB,EAAiD0R,SAAjD,EAA4DC,SAAS,GAAG,CAAxE,CAAP;AACH;AACJ,GARD;;AASA/a,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2iB,cAAnB,GAAoC,UAAU5R,MAAV,EAAkB;AAClD,WAAQ,OAAOA,MAAM,CAACqD,KAAd,KAAwB,QAAxB,IAAoCvR,KAAK,CAACkO,MAAM,CAACqD,KAAR,CAA1C,GAA4DrD,MAA5D,GAAqEA,MAAM,CAACqD,KAAnF;AACH,GAFD;;AAGAzM,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBwS,aAAnB,GAAmC,UAAUoQ,GAAV,EAAeC,QAAf,EAAyBC,MAAzB,EAAiC;AAChE,QAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,KAAT;AAAiB;;AAC1C,QAAI5N,UAAJ;;AACA,QAAIrS,KAAK,CAAC+f,GAAD,CAAT,EAAgB;AACZ,aAAO1N,UAAP;AACH,KAFD,MAGK,IAAI,KAAK/C,QAAL,KAAkB,CAAtB,EAAyB;AAC1B,aAAO,KAAK4Q,aAAL,CAAmB,KAAK1Q,WAAxB,EAAqCwQ,QAArC,EAA+CC,MAA/C,CAAP;AACH,KAFI,MAGA;AACD,UAAI,OAAO,KAAKnX,MAAL,CAAYyI,KAAnB,KAA6B,QAAjC,EAA2C;AACvC,aAAK,IAAItT,CAAC,GAAG,CAAR,EAAWkiB,MAAM,GAAGJ,GAAG,CAACniB,MAA7B,EAAqCK,CAAC,GAAGkiB,MAAzC,EAAiDliB,CAAC,EAAlD,EAAsD;AAClD,cAAIqW,MAAM,GAAGpU,QAAQ,CAAC,KAAK4I,MAAL,CAAY6B,EAAb,EAAiBoV,GAAG,CAAC9hB,CAAD,CAApB,CAArB;;AACA,cAAIqW,MAAM,IAAIA,MAAM,CAACpD,QAAP,OAAsB8O,QAApC,EAA8C;AAC1C,mBAAO9f,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAb,EAAoBwO,GAAG,CAAC9hB,CAAD,CAAvB,CAAf;AACH,WAFD,MAGK,IAAI,CAAC+B,KAAK,CAACE,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAb,EAAoBwO,GAAG,CAAC9hB,CAAD,CAAvB,CAAT,CAAV,EAAiD;AAClDoU,YAAAA,UAAU,GAAG,KAAK1C,aAAL,CAAmBzP,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAb,EAAoBwO,GAAG,CAAC9hB,CAAD,CAAvB,CAA3B,EAAwD+hB,QAAxD,CAAb;;AACA,gBAAI3N,UAAU,KAAK3F,SAAnB,EAA8B;AAC1B;AACH;AACJ;AACJ;AACJ;AACJ;;AACD,WAAO2F,UAAP;AACH,GA1BD;;AA2BAvN,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB+iB,aAAnB,GAAmC,UAAUlN,IAAV,EAAgBgN,QAAhB,EAA0BC,MAA1B,EAAkC;AACjE,QAAI5N,UAAJ;;AACA,QAAIrS,KAAK,CAACgT,IAAD,CAAT,EAAiB;AACb,aAAOX,UAAP;AACH;;AACD,SAAK,IAAIpU,CAAC,GAAG,CAAR,EAAWkiB,MAAM,GAAGnN,IAAI,CAACpV,MAA9B,EAAsCK,CAAC,GAAGkiB,MAA1C,EAAkDliB,CAAC,EAAnD,EAAuD;AACnD,UAAI,CAAC+B,KAAK,CAACgT,IAAI,CAAC/U,CAAD,CAAJ,CAAQ,CAAR,CAAD,CAAN,IAAsB,CAAC+B,KAAK,CAACE,QAAQ,CAAC,KAAK4I,MAAL,CAAYqG,QAAb,EAAuB6D,IAAI,CAAC/U,CAAD,CAAJ,CAAQ,CAAR,CAAvB,CAAT,CAAhC,EAA8E;AAC1E,YAAIiC,QAAQ,CAAC,KAAK4I,MAAL,CAAYqG,QAAb,EAAuB6D,IAAI,CAAC/U,CAAD,CAAJ,CAAQ,CAAR,CAAvB,CAAR,CAA2CiT,QAA3C,OAA0D8O,QAA9D,EAAwE;AACpE,iBAAOhN,IAAI,CAAC/U,CAAD,CAAX;AACH;AACJ,OAJD,MAKK,IAAIgiB,MAAJ,EAAY;AACb,eAAOjN,IAAI,CAAC/U,CAAD,CAAX;AACH,OAFI,MAGA;AACD,eAAO,EAAP;AACH;AACJ;;AACD,WAAOoU,UAAP;AACH,GAnBD;;AAoBAvN,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqiB,cAAnB,GAAoC,UAAUxa,OAAV,EAAmB+Z,WAAnB,EAAgCtC,MAAhC,EAAwC;AACxE,QAAIsC,WAAJ,EAAiB;AACb,UAAIqB,MAAM,GAAGzgB,SAAS,CAAC,MAAMsB,UAAP,EAAmB+D,OAAnB,CAAtB;;AACA,WAAK,IAAI/G,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAGgO,MAAM,CAACxiB,MAA7B,EAAqCK,CAAC,GAAGmU,GAAzC,EAA8CnU,CAAC,EAA/C,EAAmD;AAC/C,YAAIsV,IAAI,GAAG6M,MAAM,CAACniB,CAAD,CAAjB;;AACA,YAAI+G,OAAO,CAACuH,aAAR,CAAsB,UAAtB,MAAsC6T,MAAM,CAACniB,CAAD,CAAhD,EAAqD;AACjD,cAAIoiB,KAAK,GAAG9gB,OAAO,CAACgU,IAAD,EAAO,MAAMrS,QAAb,CAAnB;AACA,eAAK8c,UAAL,GAAkB,KAAKC,cAAL,CAAoBoC,KAApB,EAA2B,IAA3B,CAAlB;;AACA,cAAI5D,MAAM,KAAK,IAAf,EAAqB;AACjB,iBAAK/O,OAAL,CAAa,eAAb,EAA8B,KAAKsQ,UAAnC;AACH;;AACD,eAAK1N,gBAAL,CAAsB+P,KAAtB,EAA6BtB,WAA7B,EAA0C,IAA1C,EAAgDtC,MAAhD;AACH;AACJ;AACJ;AACJ,GAfD;;AAgBA3X,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBkf,YAAnB,GAAkC,UAAU9E,EAAV,EAAc/O,CAAd,EAAiB8X,WAAjB,EAA8B;AAC5D,QAAI,CAAC/I,EAAE,CAAClM,SAAH,CAAa4I,QAAb,CAAsB,WAAtB,CAAL,EAAyC;AACrC,UAAI,KAAKD,mBAAL,KAA8BxL,CAAC,IAAIA,CAAC,CAAC+X,OAAR,IAAoBD,WAAjD,KAAiE,KAAKE,QAAL,CAAcjJ,EAAd,CAArE,EAAwF;AACpF,aAAKkJ,YAAL,CAAkBlJ,EAAlB,EAAsB/O,CAAtB;AACH,OAFD,MAGK;AACD,aAAKkN,UAAL,CAAgB6B,EAAhB,EAAoB/O,CAApB,EAAuB8X,WAAvB;AACH;AACJ;AACJ,GATD;;AAUAxb,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqjB,QAAnB,GAA8B,UAAUjJ,EAAV,EAAc;AACxC,WAAOA,EAAE,CAAClM,SAAH,CAAa4I,QAAb,CAAsBzS,MAAtB,IAAgC,IAAhC,GAAuC,KAA9C;AACH,GAFD;;AAGAsD,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBuY,UAAnB,GAAgC,UAAU6B,EAAV,EAAc/O,CAAd,EAAiB8X,WAAjB,EAA8B;AAC1D,QAAIrb,KAAK,GAAG,IAAZ;;AACA,QAAIjF,KAAK,CAACuX,EAAD,CAAL,IAAc,CAAC,KAAKvD,mBAAN,IAA6B,KAAKwM,QAAL,CAAcjJ,EAAd,CAA7B,IAAkD,CAACvX,KAAK,CAACwI,CAAD,CAA1E,EAAgF;AAC5E,WAAKwT,eAAL,CAAqBzE,EAArB;AACA;AACH;;AACD,QAAI/C,SAAJ;;AACA,QAAI,KAAKvL,QAAT,EAAmB;AACfuL,MAAAA,SAAS,GAAG,KAAKkM,cAAL,CAAoBnJ,EAApB,EAAwB,QAAxB,EAAkC/O,CAAlC,CAAZ;AACA,WAAKkF,OAAL,CAAa,eAAb,EAA8B8G,SAA9B,EAAyC,UAAU0E,YAAV,EAAwB;AAC7D,YAAI,CAACA,YAAY,CAACC,MAAlB,EAA0B;AACtBlU,UAAAA,KAAK,CAAC0b,gBAAN,CAAuBpJ,EAAvB,EAA2B/O,CAA3B,EAA8B0Q,YAA9B,EAA4CoH,WAA5C;AACH;AACJ,OAJD;AAKH,KAPD,MAQK;AACD,WAAKK,gBAAL,CAAsBpJ,EAAtB,EAA0B/O,CAA1B,EAA6BgM,SAA7B,EAAwC8L,WAAxC;AACH;AACJ,GAlBD;;AAmBAxb,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBwjB,gBAAnB,GAAsC,UAAUpJ,EAAV,EAAc/O,CAAd,EAAiBgM,SAAjB,EAA4B8L,WAA5B,EAAyC;AAC3E,QAAI,CAAC,KAAKtM,mBAAN,IAA8B,CAACsM,WAAD,KAAiB,CAAC9X,CAAD,IAAOA,CAAC,IAAI,CAACA,CAAC,CAAC+X,OAAhC,CAAlC,EAA8E;AAC1E,WAAKK,eAAL;AACH;;AACD,QAAI,KAAK5M,mBAAL,IAA4BxL,CAA5B,IAAiCA,CAAC,CAACqY,QAAvC,EAAiD;AAC7C,UAAI,CAAC,KAAKC,SAAV,EAAqB;AACjB,aAAKA,SAAL,GAAiBvJ,EAAjB;AACH;;AACD,UAAIwJ,UAAU,GAAG,KAAK3G,MAAL,CAAYxL,OAAZ,CAAoB,KAAKkS,SAAzB,CAAjB;AACA,UAAIE,QAAQ,GAAG,KAAK5G,MAAL,CAAYxL,OAAZ,CAAoB2I,EAApB,CAAf;;AACA,UAAIwJ,UAAU,GAAGC,QAAjB,EAA2B;AACvB,YAAIC,IAAI,GAAGF,UAAX;AACAA,QAAAA,UAAU,GAAGC,QAAb;AACAA,QAAAA,QAAQ,GAAGC,IAAX;AACH;;AACD,WAAK,IAAIhjB,CAAC,GAAG8iB,UAAb,EAAyB9iB,CAAC,IAAI+iB,QAA9B,EAAwC/iB,CAAC,EAAzC,EAA6C;AACzC,YAAIijB,QAAQ,GAAG,KAAK9G,MAAL,CAAYnc,CAAZ,CAAf;;AACA,YAAI2B,SAAS,CAACshB,QAAD,CAAT,IAAuB,CAACA,QAAQ,CAAC7V,SAAT,CAAmB4I,QAAnB,CAA4B,WAA5B,CAA5B,EAAsE;AAClE,eAAKkN,SAAL,CAAeD,QAAf;AACH;AACJ;AACJ,KAjBD,MAkBK;AACD,WAAKJ,SAAL,GAAiBvJ,EAAjB;AACA,WAAK4J,SAAL,CAAe5J,EAAf;AACH;;AACD,SAAKyE,eAAL,CAAqBzE,EAArB;;AACA,QAAI,KAAKtO,QAAT,EAAmB;AACfuL,MAAAA,SAAS,CAACC,QAAV,GAAqB,KAAKyD,WAAL,CAAiBX,EAAjB,CAArB;AACA,WAAK7J,OAAL,CAAa,cAAb,EAA6B8G,SAA7B;AACH;AACJ,GA/BD;;AAgCA1P,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBsjB,YAAnB,GAAkC,UAAUlJ,EAAV,EAAc/O,CAAd,EAAiB;AAC/C,QAAIvD,KAAK,GAAG,IAAZ;;AACA,QAAIuP,SAAJ;;AACA,QAAI,KAAKvL,QAAT,EAAmB;AACfuL,MAAAA,SAAS,GAAG,KAAKkM,cAAL,CAAoBnJ,EAApB,EAAwB,WAAxB,EAAqC/O,CAArC,CAAZ;AACA,WAAKkF,OAAL,CAAa,eAAb,EAA8B8G,SAA9B,EAAyC,UAAU0E,YAAV,EAAwB;AAC7D,YAAI,CAACA,YAAY,CAACC,MAAlB,EAA0B;AACtBlU,UAAAA,KAAK,CAACmc,kBAAN,CAAyB7J,EAAzB,EAA6B2B,YAA7B;AACH;AACJ,OAJD;AAKH,KAPD,MAQK;AACD,WAAKkI,kBAAL,CAAwB7J,EAAxB,EAA4B/C,SAA5B;AACH;AACJ,GAdD;;AAeA1P,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBikB,kBAAnB,GAAwC,UAAU7J,EAAV,EAAc/C,SAAd,EAAyB;AAC7D,SAAK6M,YAAL,CAAkB9J,EAAlB;AACA,SAAKyE,eAAL,CAAqBzE,EAArB;;AACA,QAAI,KAAKtO,QAAT,EAAmB;AACfuL,MAAAA,SAAS,CAACC,QAAV,GAAqB,KAAKyD,WAAL,CAAiBX,EAAjB,CAArB;AACA,WAAK7J,OAAL,CAAa,cAAb,EAA6B8G,SAA7B;AACH;AACJ,GAPD;;AAQA1P,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB6e,eAAnB,GAAqC,UAAUzE,EAAV,EAAc;AAC/C,QAAI,CAACvX,KAAK,CAACuX,EAAD,CAAV,EAAgB;AACZ,UAAI+J,WAAW,GAAG,KAAKC,cAAL,EAAlB;;AACA,UAAID,WAAJ,EAAiB;AACbhiB,QAAAA,WAAW,CAAC,CAACgiB,WAAD,CAAD,EAAgB7d,KAAhB,CAAX;AACH;;AACDpE,MAAAA,QAAQ,CAAC,CAACkY,EAAD,CAAD,EAAO9T,KAAP,CAAR;AACA,WAAKmW,YAAL,CAAkB0H,WAAlB,EAA+B/J,EAA/B;AACH;AACJ,GATD;;AAUAzS,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBgkB,SAAnB,GAA+B,UAAU3J,KAAV,EAAiB;AAC5CA,IAAAA,KAAK,CAAC9M,YAAN,CAAmB,eAAnB,EAAoC,MAApC;AACArL,IAAAA,QAAQ,CAAC,CAACmY,KAAD,CAAD,EAAUhW,MAAV,CAAR;AACA,QAAImJ,EAAE,GAAG6M,KAAK,CAAC3E,YAAN,CAAmB,UAAnB,CAAT;;AACA,QAAI,CAAC7S,KAAK,CAAC2K,EAAD,CAAN,IAAc,KAAKtB,aAAL,CAAmBuF,OAAnB,CAA2BjE,EAA3B,MAAmC,CAAC,CAAtD,EAAyD;AACrD,WAAKtB,aAAL,CAAmBsD,IAAnB,CAAwBhC,EAAxB;AACH;AACJ,GAPD;;AAQA7F,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBkkB,YAAnB,GAAkC,UAAU7J,KAAV,EAAiB;AAC/C,QAAI,KAAKxD,mBAAT,EAA8B;AAC1BwD,MAAAA,KAAK,CAAC9M,YAAN,CAAmB,eAAnB,EAAoC,OAApC;AACH,KAFD,MAGK;AACD8M,MAAAA,KAAK,CAACrL,eAAN,CAAsB,eAAtB;AACH;;AACD7M,IAAAA,WAAW,CAAC,CAACkY,KAAD,CAAD,EAAUhW,MAAV,CAAX;AACA,QAAI2H,KAAK,GAAG,KAAKE,aAAL,CAAmBuF,OAAnB,CAA2B4I,KAAK,CAAC3E,YAAN,CAAmB,UAAnB,CAA3B,CAAZ;;AACA,QAAI1J,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ,WAAKE,aAAL,CAAmB8N,MAAnB,CAA0BhO,KAA1B,EAAiC,CAAjC;AACH;AACJ,GAZD;;AAaArE,EAAAA,QAAQ,CAAC3H,SAAT,CAAmByjB,eAAnB,GAAqC,YAAY;AAC7C,QAAIY,UAAU,GAAG,KAAKxc,OAAL,CAAasH,gBAAb,CAA8B,MAAM9K,MAApC,CAAjB;;AACA,SAAK,IAAIgN,EAAE,GAAG,CAAT,EAAYiT,YAAY,GAAGD,UAAhC,EAA4ChT,EAAE,GAAGiT,YAAY,CAAC7jB,MAA9D,EAAsE4Q,EAAE,EAAxE,EAA4E;AACxE,UAAI0I,GAAG,GAAGuK,YAAY,CAACjT,EAAD,CAAtB;;AACA,UAAI,KAAKwF,mBAAT,EAA8B;AAC1BkD,QAAAA,GAAG,CAACxM,YAAJ,CAAiB,eAAjB,EAAkC,OAAlC;AACH,OAFD,MAGK;AACDwM,QAAAA,GAAG,CAAC/K,eAAJ,CAAoB,eAApB;AACH;AACJ;;AACD7M,IAAAA,WAAW,CAACkiB,UAAD,EAAahgB,MAAb,CAAX;AACA,SAAK8H,aAAL,CAAmB;AAAED,MAAAA,aAAa,EAAE;AAAjB,KAAnB,EAA0C,IAA1C;AACH,GAbD;;AAcAvE,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBujB,cAAnB,GAAoC,UAAU1I,MAAV,EAAkBpD,MAAlB,EAA0BpM,CAA1B,EAA6B;AAC7D,QAAIiM,QAAQ,GAAG,KAAKyD,WAAL,CAAiBF,MAAjB,CAAf;AACA,WAAO;AAAEpD,MAAAA,MAAM,EAAEA,MAAV;AAAkBuE,MAAAA,MAAM,EAAE,KAA1B;AAAiCO,MAAAA,YAAY,EAAE1Z,KAAK,CAACwI,CAAD,CAAL,GAAW,KAAX,GAAmB,IAAlE;AAAwEmK,MAAAA,IAAI,EAAEqF,MAA9E;AAAsFvD,MAAAA,QAAQ,EAAEA;AAAhG,KAAP;AACH,GAHD;;AAIA3P,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB8M,eAAnB,GAAqC,YAAY;AAC7C,SAAKyX,YAAL,GAAqB,KAAKC,QAAL,KAAkB,MAAnB,GAA8BtjB,OAAO,CAACujB,QAAR,GAAmB,OAAnB,GAA6B,UAA3D,GAAyE,KAAKD,QAAlG;AACH,GAFD;;AAGA7c,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB0kB,aAAnB,GAAmC,UAAUrZ,CAAV,EAAa;AAC5C,QAAIjL,MAAM,GAAGiL,CAAC,CAACkT,aAAF,CAAgBne,MAA7B;;AACA,QAAI,CAACA,MAAD,IAAWA,MAAM,CAAC8N,SAAP,CAAiB4I,QAAjB,CAA0BpS,KAA1B,CAAX,IAA+CtE,MAAM,CAAC8N,SAAP,CAAiB4I,QAAjB,CAA0BnT,IAA1B,CAA/C,IACAvD,MAAM,CAAC8N,SAAP,CAAiB4I,QAAjB,CAA0B3S,UAA1B,CADA,IACyC/D,MAAM,CAAC8N,SAAP,CAAiB4I,QAAjB,CAA0B/S,QAA1B,CADzC,IAEA3D,MAAM,CAAC8N,SAAP,CAAiB4I,QAAjB,CAA0BtS,IAA1B,CAFA,IAEmC,KAAKiP,YAAL,IAAqBrR,OAAO,CAAChC,MAAD,EAAS,MAAM6F,YAAf,CAFnE,EAEiG;AAC7F;AACH,KAJD,MAKK;AACD,WAAK0e,oBAAL,CAA0BviB,OAAO,CAAChC,MAAD,EAAS,MAAM2D,QAAf,CAAjC,EAA2DsH,CAA3D;AACH;AACJ,GAVD;;AAWA1D,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2kB,oBAAnB,GAA0C,UAAU9J,MAAV,EAAkBxP,CAAlB,EAAqB;AAC3D,QAAI+K,IAAI,GAAG7T,MAAM,CAAC,SAASiC,IAAV,EAAgBqW,MAAhB,CAAjB;;AACA,QAAI,CAACzE,IAAD,IAASA,IAAI,CAAClI,SAAL,CAAe4I,QAAf,CAAwBvS,OAAxB,CAAb,EAA+C;AAC3C;AACH,KAFD,MAGK;AACD,UAAI2J,SAAS,GAAGkI,IAAI,CAAClI,SAArB;;AACA,UAAIA,SAAS,CAAC4I,QAAV,CAAmBhT,UAAnB,CAAJ,EAAoC;AAChC,aAAK4Z,YAAL,CAAkB7C,MAAlB,EAA0BzE,IAA1B,EAAgC/K,CAAhC;AACH,OAFD,MAGK,IAAI6C,SAAS,CAAC4I,QAAV,CAAmBjT,WAAnB,CAAJ,EAAqC;AACtC,aAAKob,YAAL,CAAkBpE,MAAlB,EAA0BzE,IAA1B,EAAgC/K,CAAhC;AACH;AACJ;AACJ,GAdD;;AAeA1D,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB0d,YAAnB,GAAkC,UAAU7C,MAAV,EAAkBzE,IAAlB,EAAwB/K,CAAxB,EAA2BuW,WAA3B,EAAwC5D,QAAxC,EAAkD;AAChF,QAAIlW,KAAK,GAAG,IAAZ;;AACA,QAAIsO,IAAI,CAAClI,SAAL,CAAe4I,QAAf,CAAwBvS,OAAxB,CAAJ,EAAsC;AAClC;AACH,KAFD,MAGK;AACDrC,MAAAA,QAAQ,CAAC,CAACkU,IAAD,CAAD,EAAS7R,OAAT,CAAR;AACH;;AACD,QAAI,KAAKuH,QAAL,IAAiB,CAAC,KAAK9D,WAA3B,EAAwC;AACpC,WAAK6Y,UAAL,GAAkB,KAAKC,cAAL,CAAoBjG,MAApB,EAA4BxP,CAA5B,CAAlB;AACA,WAAKkF,OAAL,CAAa,eAAb,EAA8B,KAAKsQ,UAAnC,EAA+C,UAAU9E,YAAV,EAAwB;AACnE,YAAIA,YAAY,CAACC,MAAjB,EAAyB;AACrB7Z,UAAAA,WAAW,CAAC,CAACiU,IAAD,CAAD,EAAS7R,OAAT,CAAX;AACH,SAFD,MAGK;AACDuD,UAAAA,KAAK,CAAC8c,gBAAN,CAAuB/J,MAAvB,EAA+BzE,IAA/B,EAAqCwL,WAArC,EAAkD5D,QAAlD;AACH;AACJ,OAPD;AAQH,KAVD,MAWK;AACD,WAAK4G,gBAAL,CAAsB/J,MAAtB,EAA8BzE,IAA9B,EAAoCwL,WAApC,EAAiD5D,QAAjD;AACH;AACJ,GAtBD;;AAuBArW,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4kB,gBAAnB,GAAsC,UAAU/J,MAAV,EAAkBzE,IAAlB,EAAwBwL,WAAxB,EAAqC5D,QAArC,EAA+C;AACjF,QAAI2C,EAAE,GAAGpe,MAAM,CAAC,MAAM4B,UAAP,EAAmB0W,MAAnB,CAAf;;AACA,QAAI8F,EAAE,IAAIA,EAAE,CAACkE,QAAH,KAAgB,IAA1B,EAAgC;AAC5B,WAAKxF,UAAL,CAAgBxE,MAAhB,EAAwBzE,IAAxB;AACH,KAFD,MAGK;AACD,WAAK1N,aAAL,GAAqB,IAArB;AACA,WAAKyK,gBAAL,CAAsB0H,MAAtB,EAA8B+G,WAA9B,EAA2C5D,QAA3C;AACA,UAAI8G,MAAM,GAAGtiB,SAAS,CAAC,MAAMuB,QAAP,EAAiB8W,MAAjB,CAAtB;;AACA,WAAK,IAAI/Z,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgkB,MAAM,CAACrkB,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;AACpC,YAAI0M,EAAE,GAAG,KAAKuX,KAAL,CAAWD,MAAM,CAAChkB,CAAD,CAAjB,CAAT;;AACA,YAAI,KAAKwH,cAAL,CAAoBmJ,OAApB,CAA4BjE,EAA5B,MAAoC,CAAC,CAArC,IAA0C,KAAKlF,cAAL,KAAwBiH,SAAtE,EAAiF;AAC7E,cAAIyV,MAAM,GAAGziB,MAAM,CAAC,MAAMuB,UAAP,EAAmBvB,MAAM,CAAC,MAAMkC,QAAP,EAAiBqgB,MAAM,CAAChkB,CAAD,CAAvB,CAAzB,CAAnB;;AACA,cAAI,CAAC+B,KAAK,CAACmiB,MAAD,CAAV,EAAoB;AAChB,iBAAKtH,YAAL,CAAkBoH,MAAM,CAAChkB,CAAD,CAAxB,EAA6BkkB,MAA7B,EAAqC,IAArC;AACH;;AACD,eAAK1c,cAAL,CAAoB0R,MAApB,CAA2B,KAAK1R,cAAL,CAAoBmJ,OAApB,CAA4BjE,EAA5B,CAA3B,EAA4D,CAA5D;AACH;AACJ;AACJ;AACJ,GApBD;;AAqBA7F,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBilB,gBAAnB,GAAsC,UAAU5Z,CAAV,EAAa;AAC/C,QAAIvD,KAAK,GAAG,IAAZ;;AACA,QAAI1H,MAAM,GAAGiL,CAAC,CAACjL,MAAf;AACA,QAAI+jB,WAAW,GAAG,KAAKC,cAAL,EAAlB;;AACA,QAAIhkB,MAAM,IAAIA,MAAM,CAAC8N,SAAP,CAAiB4I,QAAjB,CAA0BpS,KAA1B,CAAd,EAAgD;AAC5C,UAAIwgB,MAAM,GAAG9kB,MAAb;;AACA,UAAIiL,CAAC,CAACoM,MAAF,KAAa,OAAjB,EAA0B;AACtByN,QAAAA,MAAM,CAACC,IAAP;AACA,aAAKtd,OAAL,CAAaud,KAAb;AACAljB,QAAAA,QAAQ,CAAC,CAACiiB,WAAD,CAAD,EAAgB/f,KAAhB,CAAR;AACH,OAJD,MAKK,IAAIiH,CAAC,CAACoM,MAAF,KAAa,QAAjB,EAA2B;AAC5ByN,QAAAA,MAAM,CAAClU,KAAP,GAAe,KAAKqU,OAApB;AACAH,QAAAA,MAAM,CAACC,IAAP;AACA,aAAKtd,OAAL,CAAaud,KAAb;AACAljB,QAAAA,QAAQ,CAAC,CAACiiB,WAAD,CAAD,EAAgB/f,KAAhB,CAAR;AACH;;AACD;AACH;;AACDiH,IAAAA,CAAC,CAACia,cAAF;AACA,QAAIjO,SAAS,GAAG;AACZ2E,MAAAA,MAAM,EAAE,KADI;AAEZsC,MAAAA,KAAK,EAAEjT,CAFK;AAGZmK,MAAAA,IAAI,EAAE2O;AAHM,KAAhB;AAKA,SAAK5T,OAAL,CAAa,UAAb,EAAyB8G,SAAzB,EAAoC,UAAU0E,YAAV,EAAwB;AACxD,UAAI,CAACA,YAAY,CAACC,MAAlB,EAA0B;AACtB,gBAAQ3Q,CAAC,CAACoM,MAAV;AACI,eAAK,OAAL;AACI,gBAAI3P,KAAK,CAAC2L,YAAV,EAAwB;AACpB3L,cAAAA,KAAK,CAACyd,SAAN,CAAgBla,CAAhB;AACH;;AACD;;AACJ,eAAK,WAAL;AACIvD,YAAAA,KAAK,CAAC0d,QAAN,CAAe1d,KAAK,CAACsG,SAAN,GAAkB,KAAlB,GAA0B,IAAzC,EAA+C/C,CAA/C;;AACA;;AACJ,eAAK,UAAL;AACIvD,YAAAA,KAAK,CAAC0d,QAAN,CAAe1d,KAAK,CAACsG,SAAN,GAAkB,IAAlB,GAAyB,KAAxC,EAA+C/C,CAA/C;;AACA;;AACJ,eAAK,WAAL;AACIvD,YAAAA,KAAK,CAAC2d,cAAN,CAAqB,IAArB,EAA2Bpa,CAA3B;;AACA;;AACJ,eAAK,UAAL;AACA,eAAK,UAAL;AACA,eAAK,QAAL;AACIvD,YAAAA,KAAK,CAAC4d,YAAN,CAAmB,IAAnB;;AACA;;AACJ,eAAK,SAAL;AACI5d,YAAAA,KAAK,CAAC2d,cAAN,CAAqB,KAArB,EAA4Bpa,CAA5B;;AACA;;AACJ,eAAK,QAAL;AACA,eAAK,QAAL;AACA,eAAK,MAAL;AACIvD,YAAAA,KAAK,CAAC4d,YAAN,CAAmB,KAAnB;;AACA;;AACJ,eAAK,MAAL;AACA,eAAK,WAAL;AACA,eAAK,UAAL;AACA,eAAK,QAAL;AACI5d,YAAAA,KAAK,CAAC6d,gBAAN,CAAuB,IAAvB;;AACA;;AACJ,eAAK,KAAL;AACA,eAAK,UAAL;AACA,eAAK,SAAL;AACA,eAAK,OAAL;AACI7d,YAAAA,KAAK,CAAC6d,gBAAN,CAAuB,KAAvB;;AACA;;AACJ,eAAK,OAAL;AACA,eAAK,WAAL;AACA,eAAK,YAAL;AACA,eAAK,SAAL;AACI7d,YAAAA,KAAK,CAACoX,YAAN,CAAmBiF,WAAnB,EAAgC9Y,CAAhC;;AACA;;AACJ,eAAK,IAAL;AACI,gBAAIvD,KAAK,CAACoF,YAAN,IAAsB,CAACiX,WAAW,CAACjW,SAAZ,CAAsB4I,QAAtB,CAA+B,WAA/B,CAA3B,EAAwE;AACpEhP,cAAAA,KAAK,CAAC8d,aAAN,CAAoBzB,WAApB,EAAiC9Y,CAAjC;AACH;;AACD;;AACJ,eAAK,OAAL;AACI,gBAAIvD,KAAK,CAAC+O,mBAAV,EAA+B;AAC3B,kBAAIyB,MAAM,GAAG9V,SAAS,CAAC,MAAMuB,QAAN,GAAiB,QAAjB,GAA4BM,MAA5B,GAAqC,GAAtC,EAA2CyD,KAAK,CAACD,OAAjD,CAAtB;;AACAC,cAAAA,KAAK,CAACsW,gBAAN,CAAuB9F,MAAvB;AACH;;AACD;AAxDR;AA0DH;AACJ,KA7DD;AA8DH,GAvFD;;AAwFA3Q,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB6lB,eAAnB,GAAqC,UAAUC,IAAV,EAAgB;AACjD,QAAIC,SAAS,GAAG,KAAK3B,cAAL,GAAsBhV,aAAtB,CAAoC,MAAM3K,QAA1C,CAAhB;AACA,QAAIuhB,GAAG,GAAGD,SAAS,CAACE,qBAAV,EAAV;AACA,QAAI3K,MAAM,GAAG,KAAK4K,eAAL,CAAqB,KAAKre,OAA1B,CAAb;;AACA,QAAI,CAAChF,KAAK,CAACyY,MAAD,CAAV,EAAoB;AAChB,UAAI6K,SAAS,GAAG7K,MAAM,CAAC2K,qBAAP,EAAhB;;AACA,UAAID,GAAG,CAACI,MAAJ,GAAaD,SAAS,CAACC,MAA3B,EAAmC;AAC/B9K,QAAAA,MAAM,CAAC+K,SAAP,IAAoBL,GAAG,CAACI,MAAJ,GAAaD,SAAS,CAACC,MAA3C;AACH,OAFD,MAGK,IAAIJ,GAAG,CAACM,GAAJ,GAAUH,SAAS,CAACG,GAAxB,EAA6B;AAC9BhL,QAAAA,MAAM,CAAC+K,SAAP,IAAoBF,SAAS,CAACG,GAAV,GAAgBN,GAAG,CAACM,GAAxC;AACH;AACJ;;AACD,QAAI7jB,SAAS,GAAG,KAAK8jB,mBAAL,CAAyBR,SAAzB,CAAhB;;AACA,QAAI,CAACtjB,SAAL,EAAgB;AACZsjB,MAAAA,SAAS,CAACS,cAAV,CAAyBV,IAAzB;AACH;AACJ,GAjBD;;AAkBAne,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBumB,mBAAnB,GAAyC,UAAUE,OAAV,EAAmB;AACxD,QAAIT,GAAG,GAAGS,OAAO,CAACR,qBAAR,EAAV;AACA,WAAQD,GAAG,CAACM,GAAJ,IAAW,CAAX,IAAgBN,GAAG,CAACU,IAAJ,IAAY,CAA5B,IAAiCV,GAAG,CAACI,MAAJ,KAAeO,MAAM,CAACC,WAAP,IAAsB1X,QAAQ,CAAC2X,eAAT,CAAyBC,YAA9D,CAAjC,IACJd,GAAG,CAACe,KAAJ,KAAcJ,MAAM,CAACK,UAAP,IAAqB9X,QAAQ,CAAC2X,eAAT,CAAyBI,WAA5D,CADJ;AAEH,GAJD;;AAKAtf,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBkmB,eAAnB,GAAqC,UAAU1Q,IAAV,EAAgB;AACjD,QAAI3S,KAAK,CAAC2S,IAAD,CAAT,EAAiB;AACb,aAAO,IAAP;AACH;;AACD,WAAQA,IAAI,CAAC0R,YAAL,GAAoB1R,IAAI,CAACsR,YAA1B,GAA0CtR,IAA1C,GAAiD,KAAK0Q,eAAL,CAAqB1Q,IAAI,CAACgC,aAA1B,CAAxD;AACH,GALD;;AAMA7P,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBylB,cAAnB,GAAoC,UAAU0B,SAAV,EAAqB9b,CAArB,EAAwB;AACxD,QAAI,KAAKwL,mBAAT,EAA8B;AAC1B,UAAIsN,WAAW,GAAG,KAAKC,cAAL,EAAlB;AACA,UAAIgD,QAAQ,GAAGD,SAAS,GAAG,KAAKE,WAAL,CAAiBlD,WAAjB,CAAH,GAAmC,KAAKmD,WAAL,CAAiBnD,WAAjB,CAA3D;AACA,WAAKvF,WAAL;AACA,WAAKC,eAAL,CAAqBuI,QAArB;AACA,WAAKlI,YAAL,CAAkBkI,QAAlB,EAA4B/b,CAA5B,EAA+B,KAA/B;AACA,WAAKwa,eAAL,CAAqB,CAACsB,SAAtB;AACH,KAPD,MAQK;AACD,WAAKzB,YAAL,CAAkByB,SAAlB;AACH;AACJ,GAZD;;AAaAxf,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBulB,SAAnB,GAA+B,UAAUla,CAAV,EAAa;AACxC,QAAI8Y,WAAW,GAAG,KAAKC,cAAL,EAAlB;AACA,QAAImD,SAAS,GAAGhlB,MAAM,CAAC,MAAM0D,YAAP,EAAqBke,WAArB,CAAtB;AACA,QAAItQ,SAAS,GAAGtR,MAAM,CAAC,OAAO2D,aAAR,EAAuBqhB,SAAvB,CAAN,CAAwCrZ,SAAxC,CAAkD4I,QAAlD,CAA2D/Q,KAA3D,CAAhB;;AACA,QAAI,CAACoe,WAAW,CAACjW,SAAZ,CAAsB4I,QAAtB,CAA+B,WAA/B,CAAL,EAAkD;AAC9C,UAAIqN,WAAW,CAAC9K,sBAAZ,CAAmC,qBAAnC,EAA0D5Y,MAA1D,IAAoE,CAAxE,EAA2E;AACvE,aAAKia,iBAAL,CAAuB6M,SAAvB,EAAkC1T,SAAlC,EAA6CsQ,WAA7C,EAA0D9Y,CAA1D;AACH;AACJ;AACJ,GATD;;AAUA1D,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB0a,iBAAnB,GAAuC,UAAU6M,SAAV,EAAqBnI,OAArB,EAA8BhF,EAA9B,EAAkC/O,CAAlC,EAAqC;AACxE,QAAIvD,KAAK,GAAG,IAAZ;;AACA,QAAI+S,MAAM,GAAGzY,OAAO,CAACmlB,SAAD,EAAY,MAAMxjB,QAAlB,CAApB;AACA,SAAKgF,gBAAL,GAAwB,EAAxB;AACA,QAAImT,SAAS,GAAG,CAACkD,OAAD,GAAW,MAAX,GAAoB,OAApC;;AACA,QAAI,CAACvc,KAAK,CAACqZ,SAAD,CAAV,EAAuB;AACnBqL,MAAAA,SAAS,CAACha,YAAV,CAAuB,cAAvB,EAAuC2O,SAAvC;AACH;;AACD,QAAI7E,SAAS,GAAG,KAAKyE,aAAL,CAAmBjB,MAAnB,EAA2BuE,OAAO,GAAG,SAAH,GAAe,OAAjD,EAA0D/T,CAA1D,CAAhB;AACA,SAAKkF,OAAL,CAAa,cAAb,EAA6B8G,SAA7B,EAAwC,UAAU0E,YAAV,EAAwB;AAC5D,UAAI,CAACA,YAAY,CAACC,MAAlB,EAA0B;AACtBlU,QAAAA,KAAK,CAAC0f,kBAAN,CAAyBD,SAAzB,EAAoCnI,OAApC,EAA6ChF,EAA7C,EAAiD2B,YAAjD,EAA+D1Q,CAA/D;AACH;AACJ,KAJD;AAKH,GAdD;;AAeA1D,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBwnB,kBAAnB,GAAwC,UAAUD,SAAV,EAAqBnI,OAArB,EAA8BhF,EAA9B,EAAkC/C,SAAlC,EAA6ChM,CAA7C,EAAgD;AACpF,QAAI,KAAKnD,cAAL,CAAoBuJ,OAApB,CAA4B2I,EAAE,CAAC1E,YAAH,CAAgB,UAAhB,CAA5B,MAA6D,CAAC,CAAlE,EAAqE;AACjE,WAAKxN,cAAL,CAAoBsH,IAApB,CAAyB4K,EAAE,CAAC1E,YAAH,CAAgB,UAAhB,CAAzB;;AACA,UAAI,KAAKlC,SAAT,EAAoB;AAChB,YAAIY,KAAK,GAAG,KAAK5B,aAAL,CAAmB,KAAKzC,QAAxB,EAAkCqK,EAAE,CAAC1E,YAAH,CAAgB,UAAhB,CAAlC,CAAZ;AACCtB,QAAAA,KAAK,KAAK,IAAX,GAAmB,KAAKqT,YAAL,CAAkBrT,KAAlB,EAAyB,KAAKlM,cAA9B,EAA8C,IAA9C,EAAoD,IAApD,EAA0D,KAA1D,CAAnB,GAAsFkM,KAAK,GAAG,IAA9F;AACH;AACJ;;AACD,SAAKiB,WAAL,CAAiBkS,SAAjB,EAA4BnI,OAAO,GAAG,SAAH,GAAe,OAAlD,EAA2D/T,CAA3D,EAA8D,IAA9D;;AACA,QAAI,KAAKmI,SAAT,EAAoB;AAChB,WAAK0F,qBAAL,CAA2BkB,EAA3B;AACA,WAAKnB,sBAAL,CAA4B7W,OAAO,CAACA,OAAO,CAACgY,EAAD,EAAK,MAAMjW,UAAX,CAAR,EAAgC,MAAMJ,QAAtC,CAAnC;AACA,UAAIoW,OAAO,GAAG,KAAK,CAAnB;;AACA,UAAI9C,SAAS,CAACI,MAAV,KAAqB,OAAzB,EAAkC;AAC9B0C,QAAAA,OAAO,GAAG,IAAV;AACH,OAFD,MAGK,IAAI9C,SAAS,CAACI,MAAV,KAAqB,SAAzB,EAAoC;AACrC0C,QAAAA,OAAO,GAAG,KAAV;AACH;;AACD,WAAKkC,iBAAL,CAAuBjC,EAAvB,EAA2BD,OAA3B;AACH;;AACD,SAAKgF,gBAAL,CAAsBoI,SAAtB,EAAiCnI,OAAjC,EAA0C/T,CAA1C;AACH,GAtBD;AAuBA;AACJ;AACA;;;AACI1D,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqc,iBAAnB,GAAuC,UAAUjC,EAAV,EAAcD,OAAd,EAAuB;AAC1D,QAAIX,YAAY,GAAGjX,MAAM,CAAC,MAAM4B,UAAP,EAAmBiW,EAAnB,CAAzB;AACA,QAAIsN,WAAW,GAAGtN,EAAE,CAAC1E,YAAH,CAAgB,UAAhB,CAAlB;AACA,QAAI3E,MAAM,GAAG,KAAKpF,MAAlB;;AACA,QAAI,KAAKwG,QAAL,KAAkB,CAAlB,IAAuB,KAAKqB,SAAhC,EAA2C;AACvC,UAAIG,UAAU,GAAG,IAAIhR,WAAJ,CAAgB,KAAKoN,QAArB,EAA+B6D,YAA/B,CAA4C,IAAIhR,KAAJ,GAAYqP,KAAZ,CAAkBlB,MAAM,CAACiB,QAAzB,EAAmC,OAAnC,EAA4C0V,WAA5C,EAAyD,IAAzD,CAA5C,CAAjB;;AACA,WAAK,IAAI5mB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6S,UAAU,CAAClT,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,YAAIgT,QAAQ,GAAGH,UAAU,CAAC7S,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,IAAgCmG,UAAU,CAAC7S,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,EAA8BuG,QAA9B,EAAhC,GAA2E,IAA1F;AACA,YAAIqL,OAAO,GAAGzL,UAAU,CAAC7S,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAYkI,SAA1B,IAAuCF,UAAU,CAAC7S,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAYkI,SAA1B,EAAqCE,QAArC,EAAvC,GAAyF,IAAvG;;AACA,YAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0BiW,WAA1B,MAA2C,CAAC,CAA5C,IAAiD,KAAKtb,YAAL,CAAkBqF,OAAlB,CAA0BqC,QAA1B,MAAwC,CAAC,CAA9F,EAAiG;AAC7F,eAAK1H,YAAL,CAAkBoD,IAAlB,CAAuBsE,QAAvB;AACA,cAAIe,UAAU,GAAG,KAAKrC,aAAL,CAAmB,KAAKzC,QAAxB,EAAkC+D,QAAlC,CAAjB;AACA,eAAK6T,aAAL,CAAmB9S,UAAnB,EAA+BsF,OAA/B;;AACA,cAAI,KAAKnR,eAAL,CAAqByI,OAArB,CAA6BqC,QAA7B,MAA2C,CAAC,CAAhD,EAAmD;AAC/C,iBAAK9K,eAAL,CAAqBgR,MAArB,CAA4B,KAAKhR,eAAL,CAAqByI,OAArB,CAA6BqC,QAA7B,CAA5B,EAAoE,CAApE;AACH;AACJ,SAPD,MAQK,IAAI,KAAK1H,YAAL,CAAkBqF,OAAlB,CAA0BiW,WAA1B,MAA2C,CAAC,CAA5C,IAAiDlO,YAAY,KAAK,IAAlE,IACL,KAAKpN,YAAL,CAAkBqF,OAAlB,CAA0BqC,QAA1B,MAAwC,CAAC,CADxC,EAC2C;AAC5C,eAAK1H,YAAL,CAAkB4N,MAAlB,CAAyB,KAAK5N,YAAL,CAAkBqF,OAAlB,CAA0BqC,QAA1B,CAAzB,EAA8D,CAA9D;;AACA,cAAIsL,OAAO,KAAK,MAAhB,EAAwB;AACpB,iBAAK5E,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6CmI,QAA7C,EAAuD,WAAvD,EAAoE,IAApE;AACH;;AACD,cAAI,KAAK1H,YAAL,CAAkBqF,OAAlB,CAA0BiW,WAA1B,MAA2C,CAAC,CAA5C,IAAiDlO,YAAY,KAAK,IAAlE,IACA,KAAKxQ,eAAL,CAAqByI,OAArB,CAA6BqC,QAA7B,MAA2C,CAAC,CADhD,EACmD;AAC/C,gBAAIoB,UAAU,GAAG,KAAK1C,aAAL,CAAmB,KAAKzC,QAAxB,EAAkC+D,QAAlC,CAAjB;AACA,iBAAK6T,aAAL,CAAmBzS,UAAnB,EAA+BiF,OAA/B;;AACA,gBAAI,KAAKnR,eAAL,CAAqByI,OAArB,CAA6BqC,QAA7B,MAA2C,CAAC,CAAhD,EAAmD;AAC/C,mBAAK9K,eAAL,CAAqBgR,MAArB,CAA4B,KAAKhR,eAAL,CAAqByI,OAArB,CAA6BqC,QAA7B,CAA5B,EAAoE,CAApE;AACH;AACJ;AACJ,SAdI,MAeA;AACD,cAAIe,UAAU,GAAG,KAAKrC,aAAL,CAAmB,KAAKzC,QAAxB,EAAkC+D,QAAlC,CAAjB;AACA,eAAK6T,aAAL,CAAmB9S,UAAnB,EAA+BsF,OAA/B;AACH;AACJ;AACJ,KAjCD,MAkCK,IAAI,KAAKhI,QAAL,KAAkB,CAAlB,IAAuB,CAAC,KAAKqB,SAAjC,EAA4C;AAC7C,UAAI,CAAC2G,OAAL,EAAc;AACV,YAAIxF,WAAW,GAAG,IAAIhS,WAAJ,CAAgB,KAAKoN,QAArB,EAA+B6D,YAA/B,CAA4C,IAAIhR,KAAJ,GAAYqP,KAAZ,CAAkBlB,MAAM,CAAC8C,SAAzB,EAAoC,OAApC,EAA6C,IAA7C,EAAmD,KAAnD,CAA5C,CAAlB;;AACA,aAAK,IAAI/S,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6T,WAAW,CAAClU,MAAhC,EAAwCK,CAAC,EAAzC,EAA6C;AACzC,cAAI0M,EAAE,GAAGmH,WAAW,CAAC7T,CAAD,CAAX,CAAe,KAAK6K,MAAL,CAAY6B,EAA3B,IAAiCmH,WAAW,CAAC7T,CAAD,CAAX,CAAe,KAAK6K,MAAL,CAAY6B,EAA3B,EAA+BuG,QAA/B,EAAjC,GAA6E,IAAtF;;AACA,cAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0BjE,EAA1B,MAAkC,CAAC,CAAvC,EAA0C;AACtC,iBAAKpB,YAAL,CAAkB4N,MAAlB,CAAyB,KAAK5N,YAAL,CAAkBqF,OAAlB,CAA0BjE,EAA1B,CAAzB,EAAwD,CAAxD;AACH;;AACD,eAAKgN,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6C6B,EAA7C,EAAiD,WAAjD,EAA8D,IAA9D;AACH;;AACD,aAAKpB,YAAL,GAAoB,EAApB;AACH,OAVD,MAWK;AACD,aAAK,IAAItL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKiP,QAAL,CAActP,MAAlC,EAA0CK,CAAC,EAA3C,EAA+C;AAC3C,cAAI4T,SAAS,GAAG,KAAK3E,QAAL,CAAcjP,CAAd,EAAiB,KAAK6K,MAAL,CAAY6B,EAA7B,IAAmC,KAAKuC,QAAL,CAAcjP,CAAd,EAAiB,KAAK6K,MAAL,CAAY6B,EAA7B,EAAiCuG,QAAjC,EAAnC,GAAiF,IAAjG;;AACA,cAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0BiD,SAA1B,MAAyC,CAAC,CAA9C,EAAiD;AAC7C,iBAAKtI,YAAL,CAAkBoD,IAAlB,CAAuBkF,SAAvB;AACH;AACJ;AACJ;AACJ,KApBI,MAqBA;AACD,UAAIG,UAAU,GAAG,KAAKrC,aAAL,CAAmB,KAAKzC,QAAxB,EAAkC2X,WAAlC,CAAjB;;AACA,UAAI7S,UAAJ,EAAgB;AACZ,aAAK+S,gBAAL,CAAsB/S,UAAtB,EAAkC6S,WAAlC,EAA+ClO,YAA/C,EAA6DW,OAA7D;AACH;AACJ;AACJ,GAjED;;AAkEAxS,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2nB,aAAnB,GAAmC,UAAU9S,UAAV,EAAsBsF,OAAtB,EAA+B;AAC9D,SAAK,IAAIrZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+T,UAAU,CAACpU,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,UAAIuT,OAAO,GAAGQ,UAAU,CAAC/T,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,IAAgCqH,UAAU,CAAC/T,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,EAA8BuG,QAA9B,EAAhC,GAA2E,IAAzF;AACA,UAAI8T,YAAY,GAAGhT,UAAU,CAAC/T,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAYkI,SAA1B,IAAuCgB,UAAU,CAAC/T,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAYkI,SAA1B,EAAqCE,QAArC,EAAvC,GACf,IADJ;;AAEA,UAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0B4C,OAA1B,MAAuC,CAAC,CAAxC,IAA6C,CAAC8F,OAAlD,EAA2D;AACvD,aAAK/N,YAAL,CAAkB4N,MAAlB,CAAyB,KAAK5N,YAAL,CAAkBqF,OAAlB,CAA0B4C,OAA1B,CAAzB,EAA6D,CAA7D;AACH;;AACD,UAAI,KAAKjI,YAAL,CAAkBqF,OAAlB,CAA0B4C,OAA1B,MAAuC,CAAC,CAAxC,IAA6C8F,OAAjD,EAA0D;AACtD,aAAK/N,YAAL,CAAkBoD,IAAlB,CAAuB6E,OAAvB;AACH;;AACD,UAAIwT,YAAY,KAAK,MAAjB,IAA2B,CAAC1N,OAAhC,EAAyC;AACrC,aAAKK,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6C0I,OAA7C,EAAsD,WAAtD,EAAmE,IAAnE;AACH;;AACD,UAAI4B,aAAa,GAAG,KAAKzD,aAAL,CAAmB,KAAKzC,QAAxB,EAAkCsE,OAAlC,CAApB;;AACA,UAAI4B,aAAa,CAACxV,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,aAAKknB,aAAL,CAAmB1R,aAAnB,EAAkCkE,OAAlC;AACH;AACJ;AACJ,GAnBD;AAoBA;AACJ;AACA;;;AACIxS,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4nB,gBAAnB,GAAsC,UAAU/S,UAAV,EAAsByG,MAAtB,EAA8B9B,YAA9B,EAA4CW,OAA5C,EAAqD;AACvF,SAAK,IAAIrZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+T,UAAU,CAACpU,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,UAAIkV,YAAY,GAAGnB,UAAU,CAAC/T,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,IAAgCqH,UAAU,CAAC/T,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAY6B,EAA1B,EAA8BuG,QAA9B,EAAhC,GAA2E,EAA9F;AACA,UAAIqL,OAAO,GAAGvK,UAAU,CAAC/T,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAYkI,SAA1B,IAAuCgB,UAAU,CAAC/T,CAAD,CAAV,CAAc,KAAK6K,MAAL,CAAYkI,SAA1B,EAAqCE,QAArC,EAAvC,GAAyF,IAAvG;;AACA,UAAI,KAAKP,SAAT,EAAoB;AAChB,YAAI,KAAKpH,YAAL,CAAkBqF,OAAlB,CAA0B6J,MAA1B,MAAsC,CAAC,CAAvC,IAA4C,KAAKlP,YAAL,CAAkBqF,OAAlB,CAA0BuE,YAA1B,MAA4C,CAAC,CAA7F,EAAgG;AAC5F,eAAK5J,YAAL,CAAkBoD,IAAlB,CAAuBwG,YAAvB;;AACA,cAAI,KAAKhN,eAAL,CAAqByI,OAArB,CAA6BuE,YAA7B,MAA+C,CAAC,CAApD,EAAuD;AACnD,iBAAKhN,eAAL,CAAqBgR,MAArB,CAA4B,KAAKhR,eAAL,CAAqByI,OAArB,CAA6BuE,YAA7B,CAA5B,EAAwE,CAAxE;AACH;AACJ,SALD,MAMK,IAAI,KAAK5J,YAAL,CAAkBqF,OAAlB,CAA0B6J,MAA1B,MAAsC,CAAC,CAAvC,IAA4C,KAAKlP,YAAL,CAAkBqF,OAAlB,CAA0BuE,YAA1B,MAA4C,CAAC,CAAzF,IAA8F,CAACmE,OAAnG,EAA4G;AAC7G,eAAK/N,YAAL,CAAkB4N,MAAlB,CAAyB,KAAK5N,YAAL,CAAkBqF,OAAlB,CAA0BuE,YAA1B,CAAzB,EAAkE,CAAlE;;AACA,cAAIoJ,OAAO,KAAK,MAAhB,EAAwB;AACpB,iBAAK5E,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6CqK,YAA7C,EAA2D,WAA3D,EAAwE,IAAxE;AACH;AACJ;AACJ,OAbD,MAcK,IAAI,CAAC,KAAKxC,SAAV,EAAqB;AACtB,YAAI,CAAC2G,OAAL,EAAc;AACV,cAAI,KAAK/N,YAAL,CAAkBqF,OAAlB,CAA0BuE,YAA1B,MAA4C,CAAC,CAAjD,EAAoD;AAChD,iBAAK5J,YAAL,CAAkB4N,MAAlB,CAAyB,KAAK5N,YAAL,CAAkBqF,OAAlB,CAA0BuE,YAA1B,CAAzB,EAAkE,CAAlE;AACH;;AACD,eAAKwE,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6CqK,YAA7C,EAA2D,WAA3D,EAAwE,IAAxE;AACA,eAAK5J,YAAL,GAAoB,EAApB;AACH,SAND,MAOK;AACD,cAAI,KAAKA,YAAL,CAAkBqF,OAAlB,CAA0BuE,YAA1B,MAA4C,CAAC,CAAjD,EAAoD;AAChD,iBAAK5J,YAAL,CAAkBoD,IAAlB,CAAuBwG,YAAvB;AACH;AACJ;AACJ;;AACD,UAAIkF,QAAQ,GAAG,KAAK1I,aAAL,CAAmB,CAACqC,UAAU,CAAC/T,CAAD,CAAX,CAAnB,EAAoCkV,YAApC,CAAf;;AACA,UAAIkF,QAAJ,EAAc;AACV,aAAK0M,gBAAL,CAAsB1M,QAAtB,EAAgCI,MAAhC,EAAwC9B,YAAxC,EAAsDW,OAAtD;AACH;AACJ;AACJ,GArCD,CAnpE4C,CAyrE5C;;;AACAxS,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBynB,YAAnB,GAAkC,UAAUrT,KAAV,EAAiB0T,QAAjB,EAA2BxL,OAA3B,EAAoC3C,UAApC,EAAgDoO,aAAhD,EAA+D;AAC7F,QAAI3T,KAAJ,EAAW;AACP,WAAK,IAAI4T,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAG5T,KAAK,CAAC3T,MAAxC,EAAgDunB,QAAQ,EAAxD,EAA4D;AACxD,YAAI3T,OAAO,GAAGtR,QAAQ,CAAC,KAAK4I,MAAL,CAAY6B,EAAb,EAAiB4G,KAAK,CAAC4T,QAAD,CAAtB,CAAtB;AACA,YAAI5S,KAAK,GAAG,KAAKvN,OAAL,CAAauH,aAAb,CAA2B,gBAAgBiF,OAAhB,GAA0B,IAArD,CAAZ,CAFwD,CAGxD;;AACA,YAAI0T,aAAa,KAAK,KAAlB,IAA2B,KAAK7f,cAAL,CAAoBuJ,OAApB,CAA4B4C,OAAO,CAACN,QAAR,EAA5B,MAAoD,CAAC,CAApF,EAAuF;AACnF,cAAMqB,KAAK,KAAK,IAAV,IAAkB,CAACvS,KAAK,CAACuR,KAAK,CAAC4T,QAAD,CAAL,CAAgB,KAAKrc,MAAL,CAAYkI,SAA5B,CAAD,CAAxB,IAAoEiU,QAAQ,CAACrW,OAAT,CAAiB4C,OAAO,CAACN,QAAR,EAAjB,MAAyC,CAAC,CAA/G,IACE4F,UAAU,KAAK,CADjB,IACsB2C,OAAO,KAAK,CADvC,EAC2C;AACtClI,YAAAA,KAAK,CAAC4T,QAAD,CAAL,CAAgB,KAAKrc,MAAL,CAAYkI,SAA5B,MAA2C,KAA3C,IAAoDyI,OAAO,KAAK,CAAjE,GAAsEwL,QAAQ,CAACtY,IAAT,CAAc6E,OAAO,CAACN,QAAR,EAAd,CAAtE,GACM4F,UAAU,GAAG,IADnB;AAEAA,YAAAA,UAAU,GAAIvF,KAAK,CAAC4T,QAAD,CAAL,CAAgB,KAAKrc,MAAL,CAAYkI,SAA5B,MAA2C,KAA3C,IAAoDyI,OAAO,KAAK,CAAjE,GAAsE,CAAtE,GAA0E,IAAvF;AACH;AACJ,SAXuD,CAYxD;;;AACA,YAAIwL,QAAQ,CAACrW,OAAT,CAAiB4C,OAAO,CAACN,QAAR,EAAjB,MAAyC,CAAC,CAA1C,IAA+ClR,KAAK,CAACyZ,OAAD,CAAxD,EAAmE;AAC/DwL,UAAAA,QAAQ,CAACtY,IAAT,CAAc6E,OAAO,CAACN,QAAR,EAAd;AACH;;AACD,YAAIkU,WAAW,GAAGllB,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAZ,CAAkBL,QAAlB,EAAD,EAA+BK,KAAK,CAAC4T,QAAD,CAApC,CAA1B,CAhBwD,CAiBxD;;AACA,YAAIjlB,QAAQ,CAAC,KAAK4I,MAAL,CAAYsI,WAAb,EAA0BG,KAAK,CAAC4T,QAAD,CAA/B,CAAR,KAAuD,IAAvD,IAA+DC,WAAnE,EAAgF;AAC5E,cAAIza,EAAE,GAAGzK,QAAQ,CAAC,KAAK4I,MAAL,CAAY6B,EAAb,EAAiB4G,KAAK,CAAC4T,QAAD,CAAtB,CAAjB;AACA,cAAIE,SAAS,GAAG,KAAK,CAArB;;AACA,cAAI,KAAK/V,QAAL,KAAkB,CAAtB,EAAyB;AACrB+V,YAAAA,SAAS,GAAG,KAAK1V,aAAL,CAAmB,KAAKzC,QAAxB,EAAkCvC,EAAE,CAACuG,QAAH,EAAlC,CAAZ;AACH,WAFD,MAGK;AACDmU,YAAAA,SAAS,GAAGD,WAAZ;AACH;;AACD,cAAIC,SAAJ,EAAe;AACVrlB,YAAAA,KAAK,CAACklB,aAAD,CAAN,GAAyB,KAAKN,YAAL,CAAkBS,SAAlB,EAA6BJ,QAA7B,EAAuCxL,OAAvC,EAAgD3C,UAAhD,CAAzB,GACI,KAAK8N,YAAL,CAAkBS,SAAlB,EAA6BJ,QAA7B,EAAuCxL,OAAvC,EAAgD3C,UAAhD,EAA4DoO,aAA5D,CADJ;AAEApO,YAAAA,UAAU,GAAG,IAAb;AACH;AACJ;;AACDA,QAAAA,UAAU,GAAG,IAAb;AACH;AACJ;AACJ,GAtCD;;AAuCAhS,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBwlB,QAAnB,GAA8B,UAAU2C,UAAV,EAAsB9c,CAAtB,EAAyB;AACnD,QAAI8Y,WAAW,GAAG,KAAKC,cAAL,EAAlB;AACA,QAAIhO,IAAI,GAAG7T,MAAM,CAAC,SAASiC,IAAV,EAAgB2f,WAAhB,CAAjB;;AACA,QAAIgE,UAAJ,EAAgB;AACZ,UAAI,CAAC/R,IAAL,EAAW;AACP;AACH,OAFD,MAGK,IAAIA,IAAI,CAAClI,SAAL,CAAe4I,QAAf,CAAwBhT,UAAxB,CAAJ,EAAyC;AAC1C,aAAK4Z,YAAL,CAAkByG,WAAlB,EAA+B/N,IAA/B,EAAqC/K,CAArC;AACH,OAFI,MAGA;AACD,aAAK+c,aAAL,CAAmBjE,WAAnB,EAAgC,IAAhC;AACH;AACJ,KAVD,MAWK;AACD,UAAI/N,IAAI,IAAIA,IAAI,CAAClI,SAAL,CAAe4I,QAAf,CAAwBjT,WAAxB,CAAZ,EAAkD;AAC9C,aAAKob,YAAL,CAAkBkF,WAAlB,EAA+B/N,IAA/B,EAAqC/K,CAArC;AACH,OAFD,MAGK;AACD,YAAIsW,QAAQ,GAAGvf,OAAO,CAACA,OAAO,CAAC+hB,WAAD,EAAc,MAAMhgB,UAApB,CAAR,EAAyC,MAAMJ,QAA/C,CAAtB;;AACA,YAAI,CAAC4d,QAAL,EAAe;AACX;AACH,SAFD,MAGK;AACD,cAAI,CAACA,QAAQ,CAACzT,SAAT,CAAmB4I,QAAnB,CAA4B,WAA5B,CAAL,EAA+C;AAC3C,iBAAKuR,QAAL,CAAclE,WAAd,EAA2BxC,QAA3B;AACA,iBAAKkE,eAAL,CAAqB,IAArB;AACH;AACJ;AACJ;AACJ;AACJ,GA/BD;;AAgCAle,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB0lB,YAAnB,GAAkC,UAAUyB,SAAV,EAAqB;AACnD,QAAIhD,WAAW,GAAG,KAAKC,cAAL,EAAlB;AACA,SAAKgE,aAAL,CAAmBjE,WAAnB,EAAgCgD,SAAhC;AACH,GAHD;;AAIAxf,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2lB,gBAAnB,GAAsC,UAAU2C,WAAV,EAAuB;AACzD,QAAInE,WAAW,GAAG,KAAKC,cAAL,EAAlB;AACA,QAAImE,QAAQ,GAAGD,WAAW,GAAG,KAAKE,WAAL,EAAH,GAAwB,KAAKC,UAAL,EAAlD;;AACA,QAAI,CAACF,QAAQ,CAACra,SAAT,CAAmB4I,QAAnB,CAA4B,WAA5B,CAAL,EAA+C;AAC3C,WAAKuR,QAAL,CAAclE,WAAd,EAA2BoE,QAA3B;AACA,WAAK1C,eAAL,CAAqByC,WAArB;AACH;AACJ,GAPD;;AAQA3gB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBokB,cAAnB,GAAoC,YAAY;AAC5C,QAAIsE,YAAJ;AACA,QAAIC,KAAK,GAAGpmB,MAAM,CAAC,MAAMwB,QAAN,GAAiB,GAAjB,GAAuBuC,KAAxB,EAA+B,KAAKuB,OAApC,CAAlB;;AACA,QAAIhF,KAAK,CAAC8lB,KAAD,CAAT,EAAkB;AACdD,MAAAA,YAAY,GAAGnmB,MAAM,CAAC,MAAMwB,QAAP,EAAiB,KAAK8D,OAAtB,CAArB;AACH;;AACD,WAAOhF,KAAK,CAAC8lB,KAAD,CAAL,GAAgB9lB,KAAK,CAAC6lB,YAAD,CAAL,GAAsB,KAAK7gB,OAAL,CAAa+gB,iBAAnC,GAAuDF,YAAvE,GAAuFC,KAA9F;AACH,GAPD;;AAQAhhB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBooB,aAAnB,GAAmC,UAAUhO,EAAV,EAAc+M,SAAd,EAAyB;AACxD,QAAIC,QAAQ,GAAGD,SAAS,GAAG,KAAKE,WAAL,CAAiBjN,EAAjB,CAAH,GAA0B,KAAKkN,WAAL,CAAiBlN,EAAjB,CAAlD;AACA,SAAKiO,QAAL,CAAcjO,EAAd,EAAkBgN,QAAlB;AACA,SAAKvB,eAAL,CAAqB,CAACsB,SAAtB;;AACA,QAAIC,QAAQ,CAAClZ,SAAT,CAAmB4I,QAAnB,CAA4B,WAA5B,CAAJ,EAA8C;AAC1C,UAAI+R,SAAS,GAAGzB,QAAQ,CAACyB,SAAzB;;AACA,UAAIzB,QAAQ,CAAC0B,eAAT,IAA4B,IAA5B,IAAoC1B,QAAQ,CAAClZ,SAAT,CAAmB4I,QAAnB,CAA4B,WAA5B,CAAxC,EAAkF;AAC9E,aAAKsR,aAAL,CAAmBhB,QAAnB,EAA6B,IAA7B;AACH,OAFD,MAGK,IAAIA,QAAQ,CAAC2B,WAAT,IAAwB,IAAxB,IAAgC3B,QAAQ,CAAClZ,SAAT,CAAmB4I,QAAnB,CAA4B,kBAA5B,CAApC,EAAqF;AACtF,aAAKsR,aAAL,CAAmBhB,QAAnB,EAA6B,KAA7B;AACH,OAFI,MAGA,IAAIA,QAAQ,CAAC2B,WAAT,IAAwB,IAAxB,IAAgCF,SAAS,CAAC3a,SAAV,CAAoB4I,QAApB,CAA6BrS,QAA7B,CAApC,EAA4E;AAC7E,aAAK2jB,aAAL,CAAmBhB,QAAnB,EAA6B,KAA7B;AACH,OAFI,MAGA;AACD,aAAKgB,aAAL,CAAmBhB,QAAnB,EAA6BD,SAA7B;AACH;AACJ;AACJ,GAnBD;;AAoBAxf,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqnB,WAAnB,GAAiC,UAAUjN,EAAV,EAAc;AAC3C,QAAIpO,KAAK,GAAG,KAAKiR,MAAL,CAAYxL,OAAZ,CAAoB2I,EAApB,CAAZ;AACA,QAAIgN,QAAJ;;AACA,OAAG;AACCpb,MAAAA,KAAK;AACLob,MAAAA,QAAQ,GAAG,KAAKnK,MAAL,CAAYjR,KAAZ,CAAX;;AACA,UAAInJ,KAAK,CAACukB,QAAD,CAAT,EAAqB;AACjB,eAAOhN,EAAP;AACH;AACJ,KAND,QAMS,CAAC3X,SAAS,CAAC2kB,QAAD,CANnB;;AAOA,WAAOA,QAAP;AACH,GAXD;;AAYAzf,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBsnB,WAAnB,GAAiC,UAAUlN,EAAV,EAAc;AAC3C,QAAIpO,KAAK,GAAG,KAAKiR,MAAL,CAAYxL,OAAZ,CAAoB2I,EAApB,CAAZ;AACA,QAAI4O,QAAJ;;AACA,OAAG;AACChd,MAAAA,KAAK;AACLgd,MAAAA,QAAQ,GAAG,KAAK/L,MAAL,CAAYjR,KAAZ,CAAX;;AACA,UAAInJ,KAAK,CAACmmB,QAAD,CAAT,EAAqB;AACjB,eAAO5O,EAAP;AACH;AACJ,KAND,QAMS,CAAC3X,SAAS,CAACumB,QAAD,CANnB;;AAOA,WAAOA,QAAP;AACH,GAXD;;AAYArhB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBwoB,WAAnB,GAAiC,YAAY;AACzC,QAAIxc,KAAK,GAAG,CAAZ;AACA,QAAIuc,QAAJ;;AACA,OAAG;AACCA,MAAAA,QAAQ,GAAG,KAAKtL,MAAL,CAAYjR,KAAZ,CAAX;AACAA,MAAAA,KAAK;AACR,KAHD,QAGS,CAACvJ,SAAS,CAAC8lB,QAAD,CAHnB;;AAIA,WAAOA,QAAP;AACH,GARD;;AASA5gB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmByoB,UAAnB,GAAgC,YAAY;AACxC,QAAIzc,KAAK,GAAG,KAAKiR,MAAL,CAAYxc,MAAZ,GAAqB,CAAjC;AACA,QAAIwoB,OAAJ;;AACA,OAAG;AACCA,MAAAA,OAAO,GAAG,KAAKhM,MAAL,CAAYjR,KAAZ,CAAV;AACAA,MAAAA,KAAK;AACR,KAHD,QAGS,CAACvJ,SAAS,CAACwmB,OAAD,CAHnB;;AAIA,WAAOA,OAAP;AACH,GARD;;AASAthB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqoB,QAAnB,GAA8B,UAAUa,OAAV,EAAmB9B,QAAnB,EAA6B;AACvDjlB,IAAAA,WAAW,CAAC,CAAC+mB,OAAD,CAAD,EAAY,CAAC9kB,KAAD,EAAQkC,KAAR,CAAZ,CAAX;;AACA,QAAI,CAAC8gB,QAAQ,CAAClZ,SAAT,CAAmB4I,QAAnB,CAA4B,WAA5B,CAAL,EAA+C;AAC3C5U,MAAAA,QAAQ,CAAC,CAACklB,QAAD,CAAD,EAAa,CAAChjB,KAAD,EAAQkC,KAAR,CAAb,CAAR;AACA,WAAKmW,YAAL,CAAkByM,OAAlB,EAA2B9B,QAA3B;AACH;AACJ,GAND;;AAOAzf,EAAAA,QAAQ,CAAC3H,SAAT,CAAmByc,YAAnB,GAAkC,UAAUyM,OAAV,EAAmB9B,QAAnB,EAA6B;AAC3D,SAAKvf,OAAL,CAAamH,eAAb,CAA6B,uBAA7B;;AACA,QAAIka,OAAJ,EAAa;AACTA,MAAAA,OAAO,CAACla,eAAR,CAAwB,IAAxB;AACH;;AACDoY,IAAAA,QAAQ,CAAC7Z,YAAT,CAAsB,IAAtB,EAA4B,KAAK1F,OAAL,CAAa2F,EAAb,GAAkB,SAA9C;AACA,SAAK3F,OAAL,CAAa0F,YAAb,CAA0B,uBAA1B,EAAmD,KAAK1F,OAAL,CAAa2F,EAAb,GAAkB,SAArE;AACH,GAPD;;AAQA7F,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBmpB,OAAnB,GAA6B,YAAY;AACrC,QAAI,CAAC,KAAKxgB,eAAV,EAA2B;AACvBzG,MAAAA,QAAQ,CAAC,CAAC,KAAKkiB,cAAL,EAAD,CAAD,EAA0BhgB,KAA1B,CAAR;AACH;;AACD,SAAKuE,eAAL,GAAuB,KAAvB;AACH,GALD;;AAMAhB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBopB,QAAnB,GAA8B,YAAY;AACtCjnB,IAAAA,WAAW,CAAC,CAAC,KAAKiiB,cAAL,EAAD,CAAD,EAA0BhgB,KAA1B,CAAX;AACH,GAFD;;AAGAuD,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqpB,WAAnB,GAAiC,UAAUhe,CAAV,EAAa;AAC1C,QAAIjL,MAAM,GAAGiL,CAAC,CAACjL,MAAf;AACA,QAAI8N,SAAS,GAAG9N,MAAM,CAAC8N,SAAvB;AACA,QAAIob,SAAS,GAAGlnB,OAAO,CAAChC,MAAD,EAAS,MAAM2D,QAAf,CAAvB;;AACA,QAAI,CAACulB,SAAD,IAAcpb,SAAS,CAAC4I,QAAV,CAAmB3S,UAAnB,CAAd,IAAgD+J,SAAS,CAAC4I,QAAV,CAAmB/S,QAAnB,CAApD,EAAkF;AAC9E,WAAK6a,WAAL;AACA;AACH,KAHD,MAIK;AACD,UAAI0K,SAAS,IAAI,CAACA,SAAS,CAACpb,SAAV,CAAoB4I,QAApB,CAA6B,WAA7B,CAAlB,EAA6D;AACzD,aAAKyS,QAAL,CAAcD,SAAd;AACH;AACJ;AACJ,GAbD;;AAcA3hB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBupB,QAAnB,GAA8B,UAAUnP,EAAV,EAAc;AACxC,QAAI,CAACA,EAAE,CAAClM,SAAH,CAAa4I,QAAb,CAAsB1S,KAAtB,CAAL,EAAmC;AAC/B,WAAKwa,WAAL;AACA1c,MAAAA,QAAQ,CAAC,CAACkY,EAAD,CAAD,EAAOhW,KAAP,CAAR;AACH;AACJ,GALD;;AAMA;;AACAuD,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBwpB,YAAnB,GAAkC,UAAUne,CAAV,EAAa;AAC3C,SAAKuT,WAAL;AACH,GAFD;;AAGAjX,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4e,WAAnB,GAAiC,YAAY;AACzC,QAAI6K,WAAW,GAAGjnB,SAAS,CAAC,MAAM4B,KAAP,EAAc,KAAKyD,OAAnB,CAA3B;;AACA,QAAI4hB,WAAW,IAAIA,WAAW,CAAChpB,MAA/B,EAAuC;AACnC0B,MAAAA,WAAW,CAACsnB,WAAD,EAAcrlB,KAAd,CAAX;AACH;AACJ,GALD;;AAMA;;AACAuD,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB+a,WAAnB,GAAiC,UAAUF,MAAV,EAAkB6O,MAAlB,EAA0B;AACvD,QAAI,CAAC7mB,KAAK,CAACgY,MAAD,CAAN,IAAkBA,MAAM,CAAC3M,SAAP,CAAiB4I,QAAjB,CAA0B/S,QAA1B,CAAlB,IACA,CAAClB,KAAK,CAACT,OAAO,CAACyY,MAAD,EAAS,MAAMjX,OAAf,CAAR,CADN,IAC0CxB,OAAO,CAACyY,MAAD,EAAS,MAAMjX,OAAf,CAAP,CAA+BsK,SAA/B,CAAyC4I,QAAzC,CAAkDnT,IAAlD,CAD9C,EACuG;AACnG,UAAI6J,EAAE,GAAGqN,MAAM,CAACnF,YAAP,CAAoB,UAApB,CAAT;AACA,UAAI3D,IAAI,GAAG,KAAK4X,OAAL,CAAa9O,MAAb,EAAqB6O,MAArB,CAAX;AACA,UAAIE,KAAK,GAAGxnB,OAAO,CAACyY,MAAM,CAACgP,UAAR,EAAoB,MAAM9lB,QAA1B,CAAnB;AACA,UAAI+lB,GAAG,GAAGF,KAAK,GAAGA,KAAK,CAAClU,YAAN,CAAmB,UAAnB,CAAH,GAAoC,IAAnD;AACA,UAAIsB,QAAQ,GAAG6D,MAAM,CAAC3M,SAAP,CAAiB4I,QAAjB,CAA0BzS,MAA1B,CAAf;AACA,UAAI4S,QAAQ,GAAI4D,MAAM,CAACnF,YAAP,CAAoB,eAApB,MAAyC,MAA1C,GAAoD,IAApD,GAA2D,KAA1E;AACA,UAAIzB,WAAW,GAAG4G,MAAM,CAACnF,YAAP,CAAoB,eAApB,MAAyC,IAAzC,GAAgD,IAAhD,GAAuD,CAACnT,MAAM,CAAC,MAAMuB,UAAP,EAAmB+W,MAAnB,CAAN,IAAoCtY,MAAM,CAAC,MAAMsB,WAAP,EAAoBgX,MAApB,CAA3C,KAA2E,IAA3E,GAAkF,IAAlF,GAAyF,KAAlK;AACA,UAAIyB,OAAO,GAAG,IAAd;;AACA,UAAI,KAAK7I,YAAT,EAAuB;AACnB6I,QAAAA,OAAO,GAAG/Z,MAAM,CAAC,MAAM0D,YAAP,EAAqB4U,MAArB,CAAN,CAAmCnF,YAAnC,CAAgD,cAAhD,CAAV;AACH;;AACD,aAAO;AACHlI,QAAAA,EAAE,EAAEA,EADD;AACKuE,QAAAA,IAAI,EAAEA,IADX;AACiBC,QAAAA,QAAQ,EAAE8X,GAD3B;AACgC9S,QAAAA,QAAQ,EAAEA,QAD1C;AACoDC,QAAAA,QAAQ,EAAEA,QAD9D;AAEHpD,QAAAA,SAAS,EAAEyI,OAFR;AAEiBrI,QAAAA,WAAW,EAAEA;AAF9B,OAAP;AAIH;;AACD,WAAO;AAAEzG,MAAAA,EAAE,EAAE,EAAN;AAAUuE,MAAAA,IAAI,EAAE,EAAhB;AAAoBC,MAAAA,QAAQ,EAAE,EAA9B;AAAkCgF,MAAAA,QAAQ,EAAE,KAA5C;AAAmDC,MAAAA,QAAQ,EAAE,KAA7D;AAAoEpD,MAAAA,SAAS,EAAE,EAA/E;AAAmFI,MAAAA,WAAW,EAAE;AAAhG,KAAP;AACH,GApBD;;AAqBAtM,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2pB,OAAnB,GAA6B,UAAU9O,MAAV,EAAkB6O,MAAlB,EAA0B;AACnD,QAAIA,MAAJ,EAAY;AACR,UAAIpS,QAAQ,GAAG,KAAKgL,aAAL,CAAmBzH,MAAM,CAACnF,YAAP,CAAoB,UAApB,CAAnB,CAAf;AACA,UAAIhD,KAAK,GAAGR,UAAU,CAAC2I,MAAM,CAACnF,YAAP,CAAoB,YAApB,CAAD,CAAtB;AACA,UAAIqU,UAAU,GAAG,KAAKvH,SAAL,CAAe,KAAK7W,MAApB,EAA4B+G,KAA5B,EAAmC,CAAnC,CAAjB;AACA,aAAO3P,QAAQ,CAACgnB,UAAU,CAAChY,IAAZ,EAAkBuF,QAAlB,CAAf;AACH;;AACD,WAAO/U,MAAM,CAAC,MAAMyB,QAAP,EAAiB6W,MAAjB,CAAN,CAA+BmP,WAAtC;AACH,GARD;;AASAriB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB8gB,cAAnB,GAAoC,UAAUjG,MAAV,EAAkBxP,CAAlB,EAAqB;AACrD,QAAIiM,QAAQ,GAAG,KAAKyD,WAAL,CAAiBF,MAAjB,CAAf;AACA,WAAO;AAAEmB,MAAAA,MAAM,EAAE,KAAV;AAAiBO,MAAAA,YAAY,EAAE1Z,KAAK,CAACwI,CAAD,CAAL,GAAW,KAAX,GAAmB,IAAlD;AAAwDmK,MAAAA,IAAI,EAAEqF,MAA9D;AAAsEvD,MAAAA,QAAQ,EAAEA,QAAhF;AAA0FgH,MAAAA,KAAK,EAAEjT;AAAjG,KAAP;AACH,GAHD;;AAIA1D,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBoX,kBAAnB,GAAwC,UAAUvB,IAAV,EAAgBqB,OAAhB,EAAyBC,MAAzB,EAAiC;AACrE,QAAI8S,OAAO,GAAG,KAAKlc,cAAL,CAAoB8H,IAApB,EAA0B,IAA1B,EAAgC,iBAAiBsB,MAAjD,EAAyD,KAAKtP,OAAL,CAAa2F,EAAb,GAAkB,cAA3E,EAA2F,KAAK0c,gBAAhG,EAAkH3a,SAAlH,EAA6H2H,OAA7H,CAAd;;AACA,QAAI+S,OAAJ,EAAa;AACTA,MAAAA,OAAO,GAAGtqB,KAAK,CAACK,SAAN,CAAgBmqB,KAAhB,CAAsBpiB,IAAtB,CAA2BkiB,OAA3B,CAAV;AACAvnB,MAAAA,MAAM,CAACunB,OAAD,EAAU/S,OAAV,CAAN;AACH;AACJ,GAND;;AAOAvP,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBoqB,eAAnB,GAAqC,UAAU/P,KAAV,EAAiB;AAClD,SAAKgQ,aAAL,CAAmB,CAAC,iBAAiBhQ,KAAK,CAAC3E,YAAN,CAAmB,UAAnB,CAAlB,CAAnB;AACH,GAFD;;AAGA/N,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBsqB,aAAnB,GAAmC,YAAY;AAC3C,SAAK5e,cAAL,CAAoB,KAAKC,MAAzB;;AACA,QAAIzK,OAAO,CAAC6b,IAAZ,EAAkB;AACd,WAAKlK,SAAL,GAAiB,KAAKhL,OAAL,CAAauH,aAAb,CAA2B,qBAA3B,CAAjB;AACA,WAAKyD,SAAL,CAAe2E,aAAf,CAA6B+S,WAA7B,CAAyC,KAAK1X,SAA9C;AACH,KAHD,MAIK;AACD,WAAKhL,OAAL,CAAawH,SAAb,GAAyB,EAAzB;AACH;;AACD,QAAI,CAACxM,KAAK,CAAC,KAAKkL,cAAN,CAAV,EAAiC;AAC7B,WAAKsc,aAAL;AACH;;AACD,SAAKpe,aAAL;AACA,SAAKE,aAAL,CAAmB;AAAED,MAAAA,aAAa,EAAE,EAAjB;AAAqBE,MAAAA,YAAY,EAAE,EAAnC;AAAuCC,MAAAA,aAAa,EAAE;AAAtD,KAAnB,EAA+E,IAA/E;AACA,SAAKnE,cAAL,GAAsB,EAAtB;AACA,SAAK4D,QAAL,GAAgB,KAAhB;AACA,SAAKc,cAAL,CAAoB,IAApB;AACH,GAjBD;;AAkBAjF,EAAAA,QAAQ,CAAC3H,SAAT,CAAmByN,WAAnB,GAAiC,UAAU+c,QAAV,EAAoBC,QAApB,EAA8B;AAC3D,QAAI,CAAC5nB,KAAK,CAAC2nB,QAAD,CAAN,IAAoBA,QAAQ,KAAK,EAArC,EAAyC;AACrCroB,MAAAA,WAAW,CAAC,CAAC,KAAK0F,OAAN,CAAD,EAAiB2iB,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAjB,CAAX;AACH;;AACD,QAAI,CAAC7nB,KAAK,CAAC4nB,QAAD,CAAN,IAAoBA,QAAQ,KAAK,EAArC,EAAyC;AACrCvoB,MAAAA,QAAQ,CAAC,CAAC,KAAK2F,OAAN,CAAD,EAAiB4iB,QAAQ,CAACC,KAAT,CAAe,GAAf,CAAjB,CAAR;AACH;AACJ,GAPD;;AAQA/iB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2qB,cAAnB,GAAoC,UAAUtf,CAAV,EAAa;AAC7C,QAAIjL,MAAM,GAAGiL,CAAC,CAACjL,MAAf;;AACA,QAAI,CAACA,MAAD,IAAWA,MAAM,CAAC8N,SAAP,CAAiB4I,QAAjB,CAA0BnT,IAA1B,CAAX,IAA8CvD,MAAM,CAAC8N,SAAP,CAAiB4I,QAAjB,CAA0B3S,UAA1B,CAA9C,IACA/D,MAAM,CAAC8N,SAAP,CAAiB4I,QAAjB,CAA0B/S,QAA1B,CADA,IACuC3D,MAAM,CAAC8N,SAAP,CAAiB4I,QAAjB,CAA0BtS,IAA1B,CADvC,IAEApE,MAAM,CAAC8N,SAAP,CAAiB4I,QAAjB,CAA0BpS,KAA1B,CAFA,IAEoCtE,MAAM,CAAC8N,SAAP,CAAiB4I,QAAjB,CAA0BnS,UAA1B,CAFxC,EAE+E;AAC3E;AACH,KAJD,MAKK;AACD,UAAI0V,KAAK,GAAGjY,OAAO,CAAChC,MAAD,EAAS,MAAM2D,QAAf,CAAnB;AACA,WAAK6hB,aAAL,CAAmBvL,KAAnB,EAA0BhP,CAA1B;AACH;AACJ,GAXD;;AAYA1D,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4lB,aAAnB,GAAmC,UAAUvL,KAAV,EAAiBhP,CAAjB,EAAoB;AACnD,QAAIvD,KAAK,GAAG,IAAZ;;AACA,QAAI8iB,SAAS,GAAGroB,MAAM,CAAC,MAAMqC,SAAP,EAAkB,KAAKiD,OAAvB,CAAtB;;AACA,QAAI+iB,SAAJ,EAAe;AACXA,MAAAA,SAAS,CAACzF,IAAV;AACH;;AACD,QAAIjO,OAAO,GAAG3U,MAAM,CAAC,MAAMyB,QAAP,EAAiBqW,KAAjB,CAApB;AACA,SAAKwQ,aAAL,CAAmBxQ,KAAnB;AACA,QAAIyQ,QAAQ,GAAG,KAAK/X,aAAL,CAAmB,OAAnB,EAA4B;AAAEgY,MAAAA,SAAS,EAAEnmB,SAAb;AAAwBomB,MAAAA,KAAK,EAAE;AAAEha,QAAAA,KAAK,EAAE,KAAKqU;AAAd;AAA/B,KAA5B,CAAf;AACA,QAAIhO,SAAS,GAAG,KAAK4T,YAAL,CAAkB5Q,KAAlB,EAAyB,IAAzB,EAA+ByQ,QAAQ,CAACI,SAAxC,CAAhB;AACA,SAAK3a,OAAL,CAAa,aAAb,EAA4B8G,SAA5B,EAAuC,UAAU0E,YAAV,EAAwB;AAC3D,UAAI,CAACA,YAAY,CAACC,MAAlB,EAA0B;AACtB,YAAImP,QAAQ,GAAGjU,OAAO,CAACkU,WAAR,GAAsB,CAArC;AACA,YAAIhO,KAAK,GAAG,WAAW+N,QAAX,GAAsB,IAAlC;AACAjpB,QAAAA,QAAQ,CAAC,CAACmY,KAAD,CAAD,EAAUxV,OAAV,CAAR;;AACA,YAAI,CAAChC,KAAK,CAACiF,KAAK,CAACiG,cAAP,CAAV,EAAkC;AAC9BjG,UAAAA,KAAK,CAACsiB,eAAN,CAAsB/P,KAAtB;AACH;;AACDnD,QAAAA,OAAO,CAAC7H,SAAR,GAAoBgI,SAAS,CAACgU,SAA9B;AACA,YAAInG,MAAM,GAAG3iB,MAAM,CAAC,MAAMqC,SAAP,EAAkBsS,OAAlB,CAAnB;AACApP,QAAAA,KAAK,CAACwjB,QAAN,GAAiB/nB,KAAK,CAACgoB,WAAN,CAAkB;AAC/B1jB,UAAAA,OAAO,EAAEqd,MADsB;AAE/BsG,UAAAA,UAAU,EAAE;AACRpd,YAAAA,SAAS,EAAEtG,KAAK,CAACsG;AADT;AAFmB,SAAlB,EAKdtG,KAAK,CAACiL,aALQ,CAAjB;;AAMAjL,QAAAA,KAAK,CAACwjB,QAAN,CAAeG,SAAf,CAAyBle,YAAzB,CAAsC,OAAtC,EAA+C6P,KAA/C;;AACA8H,QAAAA,MAAM,CAACE,KAAP;AACA,YAAIsG,QAAQ,GAAGxG,MAAf;AACAwG,QAAAA,QAAQ,CAACC,iBAAT,CAA2B,CAA3B,EAA8BD,QAAQ,CAAC1a,KAAT,CAAevQ,MAA7C;;AACAqH,QAAAA,KAAK,CAAC8jB,eAAN,CAAsB1G,MAAtB;AACH;AACJ,KAtBD;AAuBH,GAjCD;;AAkCAvd,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB6qB,aAAnB,GAAmC,UAAUxQ,KAAV,EAAiB;AAChD,QAAI7M,EAAE,GAAG6M,KAAK,CAAC3E,YAAN,CAAmB,UAAnB,CAAT;AACA,SAAKmW,QAAL,GAAgB,KAAKvJ,aAAL,CAAmB9U,EAAnB,CAAhB;AACA,QAAIkF,KAAK,GAAGR,UAAU,CAACmI,KAAK,CAAC3E,YAAN,CAAmB,YAAnB,CAAD,CAAtB;AACA,SAAKoW,UAAL,GAAkB,KAAKtJ,SAAL,CAAe,KAAK7W,MAApB,EAA4B+G,KAA5B,EAAmC,CAAnC,CAAlB;AACA,SAAK2S,OAAL,GAAetiB,QAAQ,CAAC,KAAK+oB,UAAL,CAAgB/Z,IAAjB,EAAuB,KAAK8Z,QAA5B,CAAvB;AACH,GAND;;AAOAlkB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB+rB,aAAnB,GAAmC,UAAU1gB,CAAV,EAAa;AAC5C,QAAI,CAAC9I,MAAM,CAAC,MAAMqC,SAAP,EAAkB,KAAKiD,OAAvB,CAAX,EAA4C;AACxC;AACH;;AACD,QAAIzH,MAAM,GAAGiL,CAAC,CAACjL,MAAf;AACA,QAAI4rB,OAAO,GAAG5rB,MAAM,CAAC4Q,KAArB;AACA,QAAIib,MAAM,GAAG7pB,OAAO,CAAChC,MAAD,EAAS,MAAM4D,QAAf,CAApB;AACA,QAAIqW,KAAK,GAAGjY,OAAO,CAAChC,MAAD,EAAS,MAAM2D,QAAf,CAAnB;AACAzB,IAAAA,MAAM,CAAC,KAAKgpB,QAAL,CAAcG,SAAf,CAAN;;AACA,QAAI,KAAK9f,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,IAAiD,CAAC,KAAK+M,SAA3D,EAAsE;AAClE,WAAKwc,aAAL,CAAmB,QAAnB,EAA6B,IAA7B,EAAmC7R,KAAnC,EAA0C2R,OAA1C,EAAmD,IAAnD,EAAyD,IAAzD,EAA+D,IAA/D;AACH,KAFD,MAGK;AACD,WAAKG,aAAL,CAAmB9R,KAAnB,EAA0B4R,MAA1B,EAAkCD,OAAlC,EAA2C,IAA3C;AACH;AACJ,GAfD;;AAgBArkB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBmsB,aAAnB,GAAmC,UAAU9R,KAAV,EAAiB4R,MAAjB,EAAyBD,OAAzB,EAAkCI,OAAlC,EAA2C;AAC1E,QAAItkB,KAAK,GAAG,IAAZ;;AACA,QAAIuP,SAAS,GAAG,KAAK4T,YAAL,CAAkB5Q,KAAlB,EAAyB2R,OAAzB,EAAkC,IAAlC,CAAhB;AACA,SAAKzb,OAAL,CAAa,YAAb,EAA2B8G,SAA3B,EAAsC,UAAU0E,YAAV,EAAwB;AAC1DiQ,MAAAA,OAAO,GAAGjQ,YAAY,CAACC,MAAb,GAAsBD,YAAY,CAACsJ,OAAnC,GAA6CtJ,YAAY,CAACiQ,OAApE;;AACAlkB,MAAAA,KAAK,CAACukB,UAAN,CAAiBhS,KAAjB,EAAwB4R,MAAxB,EAAgCD,OAAhC,EAAyCI,OAAzC;;AACA,UAAIrQ,YAAY,CAACsJ,OAAb,KAAyB2G,OAA7B,EAAsC;AAClClkB,QAAAA,KAAK,CAACwkB,YAAN;AACH;AACJ,KAND;AAOH,GAVD;;AAWA3kB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqsB,UAAnB,GAAgC,UAAUhS,KAAV,EAAiB4R,MAAjB,EAAyBD,OAAzB,EAAkCI,OAAlC,EAA2C;AACvE,QAAIG,OAAO,GAAGvpB,QAAQ,CAAC,KAAK8oB,UAAL,CAAgB/Z,IAAjB,EAAuBia,OAAvB,EAAgC,KAAKH,QAArC,CAAtB;;AACA,QAAI,CAAChpB,KAAK,CAAC,KAAKkL,cAAN,CAAV,EAAiC;AAC7Bke,MAAAA,MAAM,CAACO,SAAP,GAAmB,EAAnB;AACA,UAAIrV,MAAM,GAAGkD,KAAK,CAAC3E,YAAN,CAAmB,UAAnB,CAAb;AACA,WAAK0B,kBAAL,CAAwBmV,OAAxB,EAAiCN,MAAjC,EAAyC9U,MAAzC;AACA,WAAKyF,oBAAL;AACH,KALD,MAMK;AACDqP,MAAAA,MAAM,CAACO,SAAP,GAAmBR,OAAnB;AACH;;AACD,QAAII,OAAJ,EAAa;AACTjqB,MAAAA,WAAW,CAAC,CAACkY,KAAD,CAAD,EAAUxV,OAAV,CAAX;AACAonB,MAAAA,MAAM,CAAC7G,KAAP;AACH;;AACD,QAAI,KAAK1I,aAAT,EAAwB;AACpB,WAAKQ,aAAL,CAAmB7C,KAAnB;AACH;AACJ,GAlBD;;AAmBA1S,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBiC,UAAnB,GAAgC,UAAU8X,GAAV,EAAe;AAC3C,QAAIlX,KAAK,CAACkX,GAAD,CAAT,EAAgB;AACZ,aAAO,IAAP;AACH,KAFD,MAGK,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC9B,aAAO,KAAKlS,OAAL,CAAauH,aAAb,CAA2B,gBAAgB2K,GAAhB,GAAsB,IAAjD,CAAP;AACH,KAFI,MAGA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC9B,aAAO9X,UAAU,CAAC8X,GAAD,CAAjB;AACH,KAFI,MAGA;AACD,aAAO,IAAP;AACH;AACJ,GAbD;;AAcApS,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB+kB,KAAnB,GAA2B,UAAUhL,GAAV,EAAe;AACtC,QAAIlX,KAAK,CAACkX,GAAD,CAAT,EAAgB;AACZ,aAAO,IAAP;AACH,KAFD,MAGK,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC9B,aAAOA,GAAP;AACH,KAFI,MAGA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC9B,aAAQ9X,UAAU,CAAC8X,GAAD,CAAX,CAAkBrE,YAAlB,CAA+B,UAA/B,CAAP;AACH,KAFI,MAGA;AACD,aAAO,IAAP;AACH;AACJ,GAbD;;AAcA/N,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBirB,YAAnB,GAAkC,UAAU5Q,KAAV,EAAiB2R,OAAjB,EAA0B9G,MAA1B,EAAkC;AAChE,QAAIrP,IAAI,GAAG,KAAKkF,WAAL,CAAiBV,KAAjB,CAAX;AACA,WAAO;AAAE2B,MAAAA,MAAM,EAAE,KAAV;AAAiBgQ,MAAAA,OAAO,EAAEA,OAA1B;AAAmCxW,MAAAA,IAAI,EAAE6E,KAAzC;AAAgD/C,MAAAA,QAAQ,EAAEzB,IAA1D;AAAgEwP,MAAAA,OAAO,EAAE,KAAKA,OAA9E;AAAuFgG,MAAAA,SAAS,EAAEnG;AAAlG,KAAP;AACH,GAHD;;AAIAvd,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBsiB,aAAnB,GAAmC,UAAU9U,EAAV,EAAc;AAC7C,QAAI0H,UAAJ;;AACA,QAAIrS,KAAK,CAAC2K,EAAD,CAAT,EAAe;AACX,aAAO0H,UAAP;AACH,KAFD,MAGK,IAAI,KAAK/C,QAAL,KAAkB,CAAtB,EAAyB;AAC1B,WAAK,IAAIrR,CAAC,GAAG,CAAR,EAAWkiB,MAAM,GAAG,KAAKjT,QAAL,CAActP,MAAvC,EAA+CK,CAAC,GAAGkiB,MAAnD,EAA2DliB,CAAC,EAA5D,EAAgE;AAC5D,YAAIqW,MAAM,GAAGpU,QAAQ,CAAC,KAAK4I,MAAL,CAAY6B,EAAb,EAAiB,KAAKuC,QAAL,CAAcjP,CAAd,CAAjB,CAArB;;AACA,YAAI,CAAC+B,KAAK,CAAC,KAAKkN,QAAL,CAAcjP,CAAd,CAAD,CAAN,IAA4B,CAAC+B,KAAK,CAACsU,MAAD,CAAlC,IAA8CA,MAAM,CAACpD,QAAP,OAAsBvG,EAAxE,EAA4E;AACxE,iBAAO,KAAKuC,QAAL,CAAcjP,CAAd,CAAP;AACH;AACJ;AACJ,KAPI,MAQA;AACD,aAAO,KAAK2rB,kBAAL,CAAwB,KAAK1c,QAA7B,EAAuC,KAAKpE,MAA5C,EAAoD6B,EAApD,CAAP;AACH;;AACD,WAAO0H,UAAP;AACH,GAjBD;;AAkBAvN,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBysB,kBAAnB,GAAwC,UAAU7J,GAAV,EAAe7R,MAAf,EAAuBvD,EAAvB,EAA2B;AAC/D,QAAIkf,OAAJ;;AACA,QAAI7pB,KAAK,CAAC+f,GAAD,CAAT,EAAgB;AACZ,aAAO8J,OAAP;AACH;;AACD,SAAK,IAAI5rB,CAAC,GAAG,CAAR,EAAWkiB,MAAM,GAAGJ,GAAG,CAACniB,MAA7B,EAAqCK,CAAC,GAAGkiB,MAAzC,EAAiDliB,CAAC,EAAlD,EAAsD;AAClD,UAAIqW,MAAM,GAAGpU,QAAQ,CAACgO,MAAM,CAACvD,EAAR,EAAYoV,GAAG,CAAC9hB,CAAD,CAAf,CAArB;;AACA,UAAI8hB,GAAG,CAAC9hB,CAAD,CAAH,IAAUqW,MAAV,IAAoBA,MAAM,CAACpD,QAAP,OAAsBvG,EAA9C,EAAkD;AAC9C,eAAOoV,GAAG,CAAC9hB,CAAD,CAAV;AACH,OAFD,MAGK,IAAI,OAAOiQ,MAAM,CAACqD,KAAd,KAAwB,QAAxB,IAAoC,CAACvR,KAAK,CAACE,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAewO,GAAG,CAAC9hB,CAAD,CAAlB,CAAT,CAA9C,EAAgF;AACjF,YAAIqT,SAAS,GAAGpR,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAewO,GAAG,CAAC9hB,CAAD,CAAlB,CAAxB;AACA4rB,QAAAA,OAAO,GAAG,KAAKD,kBAAL,CAAwBtY,SAAxB,EAAmC,KAAKwO,cAAL,CAAoB5R,MAApB,CAAnC,EAAgEvD,EAAhE,CAAV;;AACA,YAAIkf,OAAO,KAAKnd,SAAhB,EAA2B;AACvB;AACH;AACJ,OANI,MAOA,IAAI,KAAK5D,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,IAAiD,CAACE,KAAK,CAACE,QAAQ,CAAC,OAAD,EAAU6f,GAAG,CAAC9hB,CAAD,CAAb,CAAT,CAA3D,EAAwF;AACzF,YAAIsT,KAAK,GAAG,OAAZ;AACAsY,QAAAA,OAAO,GAAG,KAAKD,kBAAL,CAAwB1pB,QAAQ,CAACqR,KAAD,EAAQwO,GAAG,CAAC9hB,CAAD,CAAX,CAAhC,EAAiD,KAAK6hB,cAAL,CAAoB5R,MAApB,CAAjD,EAA8EvD,EAA9E,CAAV;;AACA,YAAIkf,OAAO,KAAKnd,SAAhB,EAA2B;AACvB;AACH;AACJ;AACJ;;AACD,WAAOmd,OAAP;AACH,GA1BD;;AA2BA/kB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBmN,cAAnB,GAAoC,UAAUwf,MAAV,EAAkB;AAClD,QAAIA,MAAM,IAAI,CAAC,KAAK5f,QAApB,EAA8B;AAC1B,WAAK6f,cAAL;AACH,KAFD,MAGK;AACD,WAAKC,WAAL;AACH;AACJ,GAPD;;AAQAllB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4sB,cAAnB,GAAoC,YAAY;AAC5C,QAAI9kB,KAAK,GAAG,IAAZ;;AACA,QAAIglB,UAAJ;AACA,QAAIjP,KAAK,GAAG,IAAZ;AACA,SAAKkP,OAAL,GAAe,IAAIhrB,SAAJ,CAAc,KAAK8F,OAAnB,EAA4B;AACvCmlB,MAAAA,cAAc,EAAE,IADuB;AACjBC,MAAAA,gBAAgB,EAAE,IADD;AAEvCC,MAAAA,QAAQ,EAAE,KAAKA,QAFwB;AAGvCC,MAAAA,UAAU,EAAE,MAAM1oB,QAHqB;AAIvC2oB,MAAAA,MAAM,EAAE,UAAU/hB,CAAV,EAAa;AACjBvD,QAAAA,KAAK,CAACqlB,UAAN,GAAmB9hB,CAAC,CAACgiB,MAAF,CAASjtB,MAA5B;AACA,YAAIktB,QAAQ,GAAGlrB,OAAO,CAAC0F,KAAK,CAACqlB,UAAP,EAAmB,MAAMxpB,IAAzB,CAAtB;AACA,YAAI4pB,QAAQ,GAAGnrB,OAAO,CAAC0F,KAAK,CAACqlB,UAAP,EAAmB,MAAM1oB,QAAzB,CAAtB;AACAqD,QAAAA,KAAK,CAAC0lB,MAAN,GAAeprB,OAAO,CAAC0F,KAAK,CAACqlB,UAAP,EAAmB,MAAMppB,QAAzB,CAAtB;;AACA,YAAI+D,KAAK,CAAC+F,aAAN,IAAuB,CAAC0f,QAAxB,IAAoCzlB,KAAK,CAACqlB,UAAN,CAAiBjf,SAAjB,CAA2B4I,QAA3B,CAAoCrR,OAApC,CAAxC,EAAsF;AAClF8nB,UAAAA,QAAQ,GAAGzlB,KAAK,CAACqlB,UAAN,CAAiBhQ,kBAA5B;AACH;;AACD,YAAI,CAACrV,KAAK,CAACqlB,UAAP,IAAqB,CAAC9hB,CAAC,CAACxD,OAAF,CAAU4lB,UAAV,CAAqBH,QAArB,CAAtB,IAAwD,CAACC,QAAzD,IACAzlB,KAAK,CAACqlB,UAAN,CAAiBjf,SAAjB,CAA2B4I,QAA3B,CAAoCnT,IAApC,CADA,IAC6CmE,KAAK,CAACqlB,UAAN,CAAiBjf,SAAjB,CAA2B4I,QAA3B,CAAoC3S,UAApC,CAD7C,IAEA2D,KAAK,CAACqlB,UAAN,CAAiBjf,SAAjB,CAA2B4I,QAA3B,CAAoC/S,QAApC,CAFA,IAEiD+D,KAAK,CAAC0lB,MAAN,CAAatf,SAAb,CAAuB4I,QAAvB,CAAgC,WAAhC,CAFrD,EAEmG;AAC/F,iBAAO,KAAP;AACH;;AACD,YAAI4W,QAAQ,GAAIH,QAAQ,CAACI,SAAT,CAAmB,IAAnB,CAAhB;;AACA,YAAI9qB,KAAK,CAACN,MAAM,CAAC,SAASiC,IAAV,EAAgBkpB,QAAhB,CAAP,CAAT,EAA4C;AACxC,cAAItX,IAAI,GAAGyH,KAAK,CAAC9K,aAAN,CAAoB,KAApB,EAA2B;AAAEgY,YAAAA,SAAS,EAAEvmB,IAAI,GAAG,GAAP,GAAaV;AAA1B,WAA3B,CAAX;AACA4pB,UAAAA,QAAQ,CAACpX,YAAT,CAAsBF,IAAtB,EAA4BsX,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAA5B;AACH;;AACD,YAAIlgB,QAAQ,GAAG1I,QAAQ,GAAG,GAAX,GAAiBrB,IAAjB,GAAwB,GAAxB,GAA8BmE,KAAK,CAAC4F,QAApC,GAA+C,GAA/C,IAAsD5F,KAAK,CAACsG,SAAN,GAAkBtJ,GAAlB,GAAwB,EAA9E,CAAf;AACAgoB,QAAAA,UAAU,GAAGjP,KAAK,CAAC9K,aAAN,CAAoB,KAApB,EAA2B;AAAEgY,UAAAA,SAAS,EAAErd;AAAb,SAA3B,CAAb;AACAof,QAAAA,UAAU,CAAC9Z,WAAX,CAAuB0a,QAAvB;AACA,YAAIG,IAAI,GAAG/lB,KAAK,CAACoE,aAAN,CAAoBzL,MAA/B;;AACA,YAAIotB,IAAI,GAAG,CAAP,IAAY/lB,KAAK,CAAC+O,mBAAlB,IAAyC/O,KAAK,CAAC0lB,MAAN,CAAatf,SAAb,CAAuB4I,QAAvB,CAAgCzS,MAAhC,CAA7C,EAAsF;AAClF,cAAIypB,KAAK,GAAGjQ,KAAK,CAAC9K,aAAN,CAAoB,MAApB,EAA4B;AAAEgY,YAAAA,SAAS,EAAEjlB,SAAb;AAAwBuJ,YAAAA,SAAS,EAAE,KAAKwe;AAAxC,WAA5B,CAAZ;AACAf,UAAAA,UAAU,CAAC9Z,WAAX,CAAuB8a,KAAvB;AACH;;AACD5e,QAAAA,QAAQ,CAAC6e,IAAT,CAAc/a,WAAd,CAA0B8Z,UAA1B;AACA5d,QAAAA,QAAQ,CAAC6e,IAAT,CAAc3Q,KAAd,CAAoB4Q,MAApB,GAA6B,EAA7B;AACAlmB,QAAAA,KAAK,CAACmmB,QAAN,GAAiBnmB,KAAK,CAACiT,WAAN,CAAkBjT,KAAK,CAAC0lB,MAAxB,CAAjB;AACA,eAAOV,UAAP;AACH,OAlCsC;AAmCvCoB,MAAAA,SAAS,EAAE,UAAU7iB,CAAV,EAAa;AACpBnJ,QAAAA,QAAQ,CAAC,CAAC4F,KAAK,CAACD,OAAP,CAAD,EAAkB3C,QAAlB,CAAR;AACA,YAAIipB,QAAQ,GAAG/rB,OAAO,CAACiJ,CAAC,CAACjL,MAAH,EAAW,cAAX,CAAtB;AACA,YAAIsS,KAAJ;;AACA,YAAIyb,QAAJ,EAAc;AACVzb,UAAAA,KAAK,GAAG0b,QAAQ,CAACD,QAAQ,CAACzY,YAAT,CAAsB,YAAtB,CAAD,EAAsC,EAAtC,CAAhB;AACH;;AACD,YAAI2B,SAAS,GAAGvP,KAAK,CAACumB,YAAN,CAAmBhjB,CAAC,CAACiT,KAArB,EAA4BxW,KAA5B,EAAmC,IAAnC,EAAyCuD,CAAC,CAACjL,MAA3C,EAAmD,IAAnD,EAAyD0sB,UAAzD,EAAqEpa,KAArE,CAAhB;;AACA,YAAI2E,SAAS,CAACiX,WAAV,CAAsBpgB,SAAtB,CAAgC4I,QAAhC,CAAyCjS,OAAzC,CAAJ,EAAuD;AACnDiD,UAAAA,KAAK,CAACilB,OAAN,CAAcwB,UAAd,CAAyBljB,CAAC,CAACiT,KAA3B;;AACAxW,UAAAA,KAAK,CAAC0mB,gBAAN,CAAuB1B,UAAvB;AACH,SAHD,MAIK;AACDhlB,UAAAA,KAAK,CAACyI,OAAN,CAAc,eAAd,EAA+B8G,SAA/B,EAA0C,UAAU0E,YAAV,EAAwB;AAC9D,gBAAIA,YAAY,CAACC,MAAjB,EAAyB;AACrBlU,cAAAA,KAAK,CAACilB,OAAN,CAAcwB,UAAd,CAAyBljB,CAAC,CAACiT,KAA3B;;AACAxW,cAAAA,KAAK,CAAC0mB,gBAAN,CAAuB1B,UAAvB;AACH,aAHD,MAIK;AACDhlB,cAAAA,KAAK,CAACmB,eAAN,GAAwB,IAAxB;AACH;AACJ,WARD;AASH;AACJ,OA1DsC;AA2DvCwlB,MAAAA,IAAI,EAAE,UAAUpjB,CAAV,EAAa;AACfvD,QAAAA,KAAK,CAACilB,OAAN,CAAc5gB,aAAd,CAA4B;AAAEuiB,UAAAA,QAAQ,EAAE;AAAEpI,YAAAA,GAAG,EAAG,CAACzjB,KAAK,CAACwI,CAAC,CAACiT,KAAF,CAAQqQ,aAAT,CAAN,IAAiCztB,OAAO,CAACujB,QAA1C,GAAsD,EAAtD,GAA2D,CAAC;AAAnE;AAAZ,SAA5B;;AACA3c,QAAAA,KAAK,CAAC8mB,UAAN,CAAiBvjB,CAAjB,EAAoByhB,UAApB;AACH,OA9DsC;AA+DvC+B,MAAAA,QAAQ,EAAE,UAAUxjB,CAAV,EAAa;AACnBlJ,QAAAA,WAAW,CAAC,CAAC2F,KAAK,CAACD,OAAP,CAAD,EAAkB3C,QAAlB,CAAX;;AACA4C,QAAAA,KAAK,CAACgnB,gBAAN;;AACA,YAAIC,UAAU,GAAG1jB,CAAC,CAACjL,MAAnB;AACA,YAAI4uB,mBAAmB,GAAG,KAA1B;AACA,YAAIC,QAAQ,GAAI7sB,OAAO,CAAC2sB,UAAD,EAAa,MAAM9pB,SAAnB,CAAvB;AACA,YAAIiqB,eAAe,GAAG,IAAtB;;AACA,YAAI,CAACH,UAAD,IAAe,CAACE,QAApB,EAA8B;AAC1B3sB,UAAAA,MAAM,CAAC+I,CAAC,CAAC+hB,MAAH,CAAN;AACAle,UAAAA,QAAQ,CAAC6e,IAAT,CAAc3Q,KAAd,CAAoB4Q,MAApB,GAA6B,EAA7B;AACAkB,UAAAA,eAAe,GAAG,KAAlB;AACH;;AACD,YAAIf,QAAQ,GAAG/rB,OAAO,CAAC2sB,UAAD,EAAa,cAAb,CAAtB;AACA,YAAIrc,KAAJ;;AACA,YAAIyb,QAAJ,EAAc;AACVzb,UAAAA,KAAK,GAAG0b,QAAQ,CAACD,QAAQ,CAACzY,YAAT,CAAsB,YAAtB,CAAD,EAAsC,EAAtC,CAAhB;AACH;;AACD,YAAI2B,SAAS,GAAGvP,KAAK,CAACumB,YAAN,CAAmBhjB,CAAC,CAACiT,KAArB,EAA4BxW,KAA5B,EAAmCinB,UAAnC,EAA+CA,UAA/C,EAA2D,IAA3D,EAAiE1jB,CAAC,CAAC+hB,MAAnE,EAA2E1a,KAA3E,CAAhB;;AACA2E,QAAAA,SAAS,CAAC2X,mBAAV,GAAgCA,mBAAhC;;AACAlnB,QAAAA,KAAK,CAACyI,OAAN,CAAc,cAAd,EAA8B8G,SAA9B,EAAyC,UAAU0E,YAAV,EAAwB;AAC7DjU,UAAAA,KAAK,CAACqnB,UAAN,GAAmBpT,YAAY,CAACqT,iBAAhC;AACAtnB,UAAAA,KAAK,CAACG,aAAN,GAAsB8T,YAAY,CAACiT,mBAAnC;;AACA,cAAIjT,YAAY,CAACC,MAAjB,EAAyB;AACrB,gBAAI3Q,CAAC,CAAC+hB,MAAF,CAASvD,UAAb,EAAyB;AACrBvnB,cAAAA,MAAM,CAAC+I,CAAC,CAAC+hB,MAAH,CAAN;AACH;;AACDle,YAAAA,QAAQ,CAAC6e,IAAT,CAAc3Q,KAAd,CAAoB4Q,MAApB,GAA6B,EAA7B;AACAkB,YAAAA,eAAe,GAAG,KAAlB;AACH;;AACDpnB,UAAAA,KAAK,CAACmB,eAAN,GAAwB,KAAxB;AACH,SAXD;AAYH;AA9FsC,KAA5B,CAAf;AAgGA,SAAKomB,OAAL,GAAe,IAAIrtB,SAAJ,CAAc,KAAK6F,OAAnB,EAA4B;AACvCynB,MAAAA,GAAG,EAAE,UAAUjkB,CAAV,EAAa;AACd,YAAI,CAACxI,KAAK,CAACwI,CAAD,CAAN,IAAa,CAACA,CAAC,CAACjL,MAAF,CAAS8N,SAAT,CAAmB4I,QAAnB,CAA4B3R,OAA5B,CAAlB,EAAwD;AACpD+J,UAAAA,QAAQ,CAAC6e,IAAT,CAAc3Q,KAAd,CAAoB4Q,MAApB,GAA6B,aAA7B;AACH;AACJ,OALsC;AAMvCuB,MAAAA,IAAI,EAAE,UAAUlkB,CAAV,EAAa;AACf6D,QAAAA,QAAQ,CAAC6e,IAAT,CAAc3Q,KAAd,CAAoB4Q,MAApB,GAA6B,EAA7B;AACH,OARsC;AASvCwB,MAAAA,IAAI,EAAE,UAAUnkB,CAAV,EAAa;AACfvD,QAAAA,KAAK,CAAC2nB,UAAN,CAAiBpkB,CAAjB;AACH;AAXsC,KAA5B,CAAf;AAaH,GAjHD;;AAkHA1D,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBwuB,gBAAnB,GAAsC,UAAU1B,UAAV,EAAsB;AACxDxqB,IAAAA,MAAM,CAACwqB,UAAD,CAAN;AACA3qB,IAAAA,WAAW,CAAC,CAAC,KAAK0F,OAAN,CAAD,EAAiB3C,QAAjB,CAAX;AACA,SAAK+D,eAAL,GAAuB,KAAvB;AACH,GAJD;;AAKAtB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4uB,UAAnB,GAAgC,UAAUvjB,CAAV,EAAayhB,UAAb,EAAyB;AACrD,QAAImC,QAAQ,GAAG7sB,OAAO,CAACiJ,CAAC,CAACjL,MAAH,EAAW,MAAM6E,SAAjB,CAAtB;AACA,QAAIyqB,QAAQ,GAAGttB,OAAO,CAACiJ,CAAC,CAACjL,MAAH,EAAW,MAAMqE,QAAjB,CAAtB;AACA,QAAI2R,IAAI,GAAG7T,MAAM,CAAC,SAASiC,IAAV,EAAgBsoB,UAAhB,CAAjB;AACA3qB,IAAAA,WAAW,CAAC,CAACiU,IAAD,CAAD,EAAS,CAAChR,MAAD,EAASC,QAAT,EAAmBC,OAAnB,EAA4BC,MAA5B,CAAT,CAAX;AACA,SAAKupB,gBAAL;AACA5f,IAAAA,QAAQ,CAAC6e,IAAT,CAAc3Q,KAAd,CAAoB4Q,MAApB,GAA6B,EAA7B;AACA,QAAI9f,SAAS,GAAG7C,CAAC,CAACjL,MAAF,CAAS8N,SAAzB;;AACA,QAAI,KAAKL,aAAL,IAAsB,CAAC6hB,QAAvB,IAAmC,CAAC7sB,KAAK,CAACqL,SAAD,CAAzC,IAAwDA,SAAS,CAAC4I,QAAV,CAAmBrR,OAAnB,CAA5D,EAAyF;AACrFiqB,MAAAA,QAAQ,GAAGrkB,CAAC,CAACjL,MAAF,CAAS+c,kBAApB;AACH;;AACD,QAAI8R,QAAJ,EAAc;AACV,UAAIU,MAAM,GAAGvtB,OAAO,CAACiJ,CAAC,CAACjL,MAAH,EAAW,MAAM2D,QAAjB,CAApB;AACA,UAAI+a,YAAY,GAAG1c,OAAO,CAACiJ,CAAC,CAACjL,MAAH,EAAW,MAAM6F,YAAjB,CAA1B;AACA,UAAIkb,QAAQ,GAAG/e,OAAO,CAACiJ,CAAC,CAACjL,MAAH,EAAW,MAAMyD,WAAjB,CAAtB;AACA,UAAIoc,MAAM,GAAG7d,OAAO,CAACiJ,CAAC,CAACjL,MAAH,EAAW,MAAM0D,UAAjB,CAApB;;AACA,UAAI,CAACmrB,QAAQ,CAAC/gB,SAAT,CAAmB4I,QAAnB,CAA4BnT,IAA5B,CAAD,IAAuC+rB,QAAQ,IAC9C,CAACC,MAAM,CAAClC,UAAP,CAAkB,KAAKD,MAAvB,CAAD,IAAmC,CAAC,KAAKoC,YAAL,CAAkB,KAAKpC,MAAvB,EAA+BmC,MAA/B,CADzC,EACmF;AAC/E,YAAI,KAAKlnB,WAAL,IAAoBknB,MAAxB,EAAgC;AAC5B,cAAIE,cAAc,GAAGttB,MAAM,CAAC,KAAKsL,aAAL,GAAqB,MAAMpI,OAA3B,GAAqC,MAAMhB,QAA5C,EAAsDkrB,MAAtD,CAA3B;;AACA,cAAKtkB,CAAC,IAAK,CAAC4U,MAAD,IAAW,CAACkB,QAAlB,IAA+B9V,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkB,CAAjD,IAAsD,CAAChR,YAAxD,IAA4EmB,MAAM,IAAI5U,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkB,CAA7B,IAAoC3O,QAAQ,IAAI9V,CAAC,CAACiT,KAAF,CAAQyR,OAAR,GAAkB,CAAjJ,EAAuJ;AACnJ,gBAAI/jB,KAAK,GAAG,KAAK6B,aAAL,GAAsB,CAAtB,GAA4B,CAAxC;AACA,iBAAKmiB,eAAL,CAAqBL,MAArB,EAA6BvZ,IAA7B,EAAmCpK,KAAnC;AACH,WAHD,MAIK,IAAKX,CAAC,IAAK,CAAC4U,MAAD,IAAW,CAACkB,QAAlB,IAA+B,CAACrC,YAAhC,IAAgD+Q,cAAhD,IAAkExkB,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkBD,cAAc,CAACvS,YAAf,GAA8B,EAAnH,IAA4H2C,MAAM,IAAI5U,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkB,EAA7B,IAAqC3O,QAAQ,IAAI9V,CAAC,CAACiT,KAAF,CAAQyR,OAAR,GAAkB,EAAlM,EAAwM;AACzM,gBAAI/jB,KAAK,GAAG,KAAK6B,aAAL,GAAsB,CAAtB,GAA4B,CAAxC;AACA,iBAAKmiB,eAAL,CAAqBL,MAArB,EAA6BvZ,IAA7B,EAAmCpK,KAAnC;AACH,WAHI,MAIA;AACD9J,YAAAA,QAAQ,CAAC,CAACkU,IAAD,CAAD,EAAShR,MAAT,CAAR;AACH;AACJ,SAbD,MAcK;AACD,cAAKuqB,MAAM,IAAItkB,CAAV,IAAgB,CAAC4U,MAAD,IAAW,CAACkB,QAA5B,IAA0C9V,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkB,CAA5D,IAAkE,CAAChR,YAApE,IAAwFmB,MAAM,IAAI5U,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkB,CAA7B,IAAoC3O,QAAQ,IAAI9V,CAAC,CAACiT,KAAF,CAAQyR,OAAR,GAAkB,CAA7J,EAAmK;AAC/J,gBAAI/jB,KAAK,GAAG,KAAK6B,aAAL,GAAsB,CAAtB,GAA4B,CAAxC;AACA,iBAAKmiB,eAAL,CAAqBL,MAArB,EAA6BvZ,IAA7B,EAAmCpK,KAAnC;AACH,WAHD,MAIK,IAAK2jB,MAAM,IAAItkB,CAAV,IAAgB,CAAC4U,MAAD,IAAW,CAACkB,QAA5B,IAA0C9V,CAAC,CAACjL,MAAF,CAASkd,YAAT,GAAwB,CAAxB,IAA6BjS,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAmBzkB,CAAC,CAACjL,MAAF,CAASkd,YAAT,GAAwB,EAAlH,IAA0H,CAACwB,YAA5H,IAAgJmB,MAAM,IAAI5U,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkB,EAA7B,IAAqC3O,QAAQ,IAAI9V,CAAC,CAACiT,KAAF,CAAQyR,OAAR,GAAkB,EAAtN,EAA6N;AAC9N,gBAAI/jB,KAAK,GAAG,KAAK6B,aAAL,GAAsB,CAAtB,GAA4B,CAAxC;AACA,iBAAKmiB,eAAL,CAAqBL,MAArB,EAA6BvZ,IAA7B,EAAmCpK,KAAnC;AACH,WAHI,MAIA;AACD9J,YAAAA,QAAQ,CAAC,CAACkU,IAAD,CAAD,EAAShR,MAAT,CAAR;AACH;AACJ;AACJ,OA7BD,MA8BK,IAAIiG,CAAC,CAACjL,MAAF,CAASykB,QAAT,KAAsB,IAAtB,IAA+B,CAAC8K,MAAM,CAAClC,UAAP,CAAkB,KAAKD,MAAvB,CAAD,IAAmC,CAAC,KAAKoC,YAAL,CAAkB,KAAKpC,MAAvB,EAA+BmC,MAA/B,CAAvE,EAAgH;AACjHztB,QAAAA,QAAQ,CAAC,CAACkU,IAAD,CAAD,EAAS/Q,QAAT,CAAR;AACA,aAAK4qB,gBAAL,CAAsB5kB,CAAtB;AACH,OAHI,MAIA,IAAIA,CAAC,CAACjL,MAAF,CAAS8N,SAAT,CAAmB4I,QAAnB,CAA4B3R,OAA5B,CAAJ,EAA0C;AAC3CjD,QAAAA,QAAQ,CAAC,CAACkU,IAAD,CAAD,EAAS/Q,QAAT,CAAR;AACH,OAFI,MAGA;AACDnD,QAAAA,QAAQ,CAAC,CAACkU,IAAD,CAAD,EAAS9Q,OAAT,CAAR;AACH;AACJ,KA7CD,MA8CK;AACDpD,MAAAA,QAAQ,CAAC,CAACkU,IAAD,CAAD,EAAS7Q,MAAT,CAAR;AACA2J,MAAAA,QAAQ,CAAC6e,IAAT,CAAc3Q,KAAd,CAAoB4Q,MAApB,GAA6B,aAA7B;AACH;;AACD,QAAIG,QAAQ,GAAG/rB,OAAO,CAACiJ,CAAC,CAACjL,MAAH,EAAW,cAAX,CAAtB;AACA,QAAIsS,KAAJ;;AACA,QAAIyb,QAAJ,EAAc;AACVzb,MAAAA,KAAK,GAAG0b,QAAQ,CAACD,QAAQ,CAACzY,YAAT,CAAsB,YAAtB,CAAD,EAAsC,EAAtC,CAAhB;AACH;;AACD,QAAI2B,SAAS,GAAG,KAAKgX,YAAL,CAAkBhjB,CAAC,CAACiT,KAApB,EAA2B,IAA3B,EAAiCjT,CAAC,CAACjL,MAAnC,EAA2CiL,CAAC,CAACjL,MAA7C,EAAqD,IAArD,EAA2D0sB,UAA3D,EAAuEpa,KAAvE,CAAhB;;AACA,QAAI2E,SAAS,CAAC6Y,aAAd,EAA6B;AACzB/tB,MAAAA,WAAW,CAAC,CAACiU,IAAD,CAAD,EAASiB,SAAS,CAAC6Y,aAAnB,CAAX;AACH;;AACD,SAAK3f,OAAL,CAAa,cAAb,EAA6B8G,SAA7B;;AACA,QAAIA,SAAS,CAAC6Y,aAAd,EAA6B;AACzBhuB,MAAAA,QAAQ,CAAC,CAACkU,IAAD,CAAD,EAASiB,SAAS,CAAC6Y,aAAnB,CAAR;AACH;AACJ,GA1ED;;AA2EAvoB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBgwB,eAAnB,GAAqC,UAAUL,MAAV,EAAkBvZ,IAAlB,EAAwBpK,KAAxB,EAA+B;AAChE9J,IAAAA,QAAQ,CAAC,CAACkU,IAAD,CAAD,EAAS/Q,QAAT,CAAR;AACA,QAAI8qB,MAAM,GAAG,KAAKpd,aAAL,CAAmB,KAAnB,EAA0B;AAAEgY,MAAAA,SAAS,EAAE5lB;AAAb,KAA1B,CAAb;AACAwqB,IAAAA,MAAM,CAACrZ,YAAP,CAAoB6Z,MAApB,EAA4BR,MAAM,CAAC/B,QAAP,CAAgB5hB,KAAhB,CAA5B;AACH,GAJD;AAKA;;;AACArE,EAAAA,QAAQ,CAAC3H,SAAT,CAAmByvB,UAAnB,GAAgC,UAAUpkB,CAAV,EAAa;AACzC,QAAIykB,OAAO,GAAGzkB,CAAC,CAACiT,KAAF,CAAQwR,OAAtB;AACA,QAAIf,UAAU,GAAG1jB,CAAC,CAACjL,MAAnB;AACA,QAAI2sB,OAAJ;AACA,QAAIra,KAAJ;AACA,QAAI8c,IAAI,GAAG,KAAX;AACA,QAAIY,YAAJ;AACAA,IAAAA,YAAY,GAAG/kB,CAAC,CAAC4iB,QAAF,CAAWoC,SAA1B;;AACA,SAAK,IAAIvvB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsvB,YAAY,CAACE,aAAb,CAA2B7vB,MAA/C,EAAuDK,CAAC,EAAxD,EAA4D;AACxD,UAAIsvB,YAAY,CAACE,aAAb,CAA2BxvB,CAA3B,aAAyC8H,UAA7C,EAAyD;AACrDmkB,QAAAA,OAAO,GAAGqD,YAAY,CAACE,aAAb,CAA2BxvB,CAA3B,CAAV;AACA;AACH;AACJ;;AACD,QAAIisB,OAAO,IAAIA,OAAO,CAACI,UAAvB,EAAmC;AAC/B,UAAIA,UAAU,GAAGJ,OAAO,CAACI,UAAzB;AACA,UAAIK,MAAM,GAAIprB,OAAO,CAAC+qB,UAAD,EAAa,MAAMppB,QAAnB,CAArB;AACA,UAAI4rB,MAAM,GAAIvtB,OAAO,CAAC2sB,UAAD,EAAa,MAAMhrB,QAAnB,CAArB;;AACA,UAAI4rB,MAAM,IAAI,IAAV,IAAkBZ,UAAU,CAAC7gB,SAAX,CAAqB4I,QAArB,CAA8BnT,IAA9B,CAAtB,EAA2D;AACvDgsB,QAAAA,MAAM,GAAGZ,UAAU,CAACnG,iBAApB;AACH;;AACDtmB,MAAAA,MAAM,CAAC+I,CAAC,CAACklB,cAAH,CAAN;AACArhB,MAAAA,QAAQ,CAAC6e,IAAT,CAAc3Q,KAAd,CAAoB4Q,MAApB,GAA6B,EAA7B;;AACA,UAAI,CAAC2B,MAAD,IAAWA,MAAM,CAAClC,UAAP,CAAkBD,MAAlB,CAAX,IAAwC,KAAKoC,YAAL,CAAkBpC,MAAlB,EAA0BmC,MAA1B,CAA5C,EAA+E;AAC3E,YAAI,KAAKhkB,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,KAAkD,KAAtD,EAA6D;AACzD,eAAKsF,aAAL,GAAqB,KAArB;AACH;;AACD;AACH;;AACD,UAAI8kB,OAAO,CAAClW,mBAAR,IAA+B2W,MAAM,CAACtf,SAAP,CAAiB4I,QAAjB,CAA0BzS,MAA1B,CAAnC,EAAsE;AAClE,YAAIiU,MAAM,GAAG9V,SAAS,CAAC,MAAM6B,MAAP,EAAe0oB,OAAO,CAACllB,OAAvB,CAAtB;;AACA,YAAIwD,CAAC,CAACjL,MAAF,CAASkd,YAAT,IAAyB,EAAzB,IAA+BwS,OAAO,GAAGzkB,CAAC,CAACjL,MAAF,CAASkd,YAAT,GAAwB,EAAjE,IAAuEwS,OAAO,GAAG,CAArF,EAAwF;AACpF,eAAK,IAAIhvB,CAAC,GAAGwX,MAAM,CAAC7X,MAAP,GAAgB,CAA7B,EAAgCK,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AACzC,gBAAI6uB,MAAM,CAAClC,UAAP,CAAkBnV,MAAM,CAACxX,CAAD,CAAxB,KAAgC,KAAK8uB,YAAL,CAAkBtX,MAAM,CAACxX,CAAD,CAAxB,EAA6B6uB,MAA7B,CAApC,EAA0E;AACtE;AACH;;AACD,iBAAKa,UAAL,CAAgBzB,UAAhB,EAA4BzW,MAAM,CAACxX,CAAD,CAAlC,EAAuC6uB,MAAvC,EAA+CtkB,CAA/C,EAAkD0hB,OAAlD,EAA2D+C,OAA3D;AACH;AACJ,SAPD,MAQK;AACD,eAAK,IAAIhvB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwX,MAAM,CAAC7X,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;AACpC,gBAAI6uB,MAAM,CAAClC,UAAP,CAAkBnV,MAAM,CAACxX,CAAD,CAAxB,KAAgC,KAAK8uB,YAAL,CAAkBtX,MAAM,CAACxX,CAAD,CAAxB,EAA6B6uB,MAA7B,CAApC,EAA0E;AACtE;AACH;;AACD,iBAAKa,UAAL,CAAgBzB,UAAhB,EAA4BzW,MAAM,CAACxX,CAAD,CAAlC,EAAuC6uB,MAAvC,EAA+CtkB,CAA/C,EAAkD0hB,OAAlD,EAA2D+C,OAA3D;AACH;AACJ;AACJ,OAlBD,MAmBK;AACD,aAAKU,UAAL,CAAgBzB,UAAhB,EAA4BvB,MAA5B,EAAoCmC,MAApC,EAA4CtkB,CAA5C,EAA+C0hB,OAA/C,EAAwD+C,OAAxD;AACH;;AACDpd,MAAAA,KAAK,GAAG0b,QAAQ,CAACZ,MAAM,CAAC9X,YAAP,CAAoB,YAApB,CAAD,EAAoC,EAApC,CAAhB;AACA8Z,MAAAA,IAAI,GAAG,IAAP;AACH;;AACD,QAAI,KAAK7jB,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,KAAkD,KAAtD,EAA6D;AACzD,WAAKsF,aAAL,GAAqB,KAArB;AACH;;AACD,SAAKsI,OAAL,CAAa,aAAb,EAA4B,KAAK8d,YAAL,CAAkBhjB,CAAC,CAACiT,KAApB,EAA2ByO,OAA3B,EAAoCgC,UAApC,EAAgD1jB,CAAC,CAACjL,MAAlD,EAA0DiL,CAAC,CAAC4iB,QAAF,CAAWwC,cAArE,EAAqF,IAArF,EAA2F/d,KAA3F,EAAkG8c,IAAlG,CAA5B;;AACA,QAAIzC,OAAO,CAACllB,OAAR,CAAgB2F,EAAhB,KAAuB,KAAK3F,OAAL,CAAa2F,EAAxC,EAA4C;AACxCuf,MAAAA,OAAO,CAACT,YAAR;AACH;;AACD,SAAKA,YAAL;AACH,GA9DD;;AA+DA3kB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBwwB,UAAnB,GAAgC,UAAUzB,UAAV,EAAsBvB,MAAtB,EAA8BmC,MAA9B,EAAsCtkB,CAAtC,EAAyC0hB,OAAzC,EAAkD+C,OAAlD,EAA2D;AACvF,QAAIhR,YAAY,GAAG1c,OAAO,CAAC2sB,UAAD,EAAa,MAAM9oB,YAAnB,CAA1B;AACA,QAAIkb,QAAQ,GAAG/e,OAAO,CAACiJ,CAAC,CAACjL,MAAH,EAAW,MAAMyD,WAAjB,CAAtB;AACA,QAAIoc,MAAM,GAAG7d,OAAO,CAACiJ,CAAC,CAACjL,MAAH,EAAW,MAAM0D,UAAjB,CAApB;;AACA,QAAI,CAAC0pB,MAAM,CAACtf,SAAP,CAAiB4I,QAAjB,CAA0B,WAA1B,CAAD,IAA2C,CAACgI,YAA5C,KAA8DmB,MAAM,IAAI5U,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkB,CAA7B,IAAoC3O,QAAQ,IAAI9V,CAAC,CAACiT,KAAF,CAAQyR,OAAR,GAAkB,CAAlE,IAAyE9P,MAAM,IAAI5U,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkB,EAArG,IAA6G3O,QAAQ,IAAI9V,CAAC,CAACiT,KAAF,CAAQyR,OAAR,GAAkB,EAA3I,IAAmJ,CAAC9P,MAAD,IAAW,CAACkB,QAA5N,CAAJ,EAA4O;AACxO,UAAI4N,UAAU,CAAClK,QAAX,KAAwB,IAA5B,EAAkC;AAC9B,aAAK6L,iBAAL,CAAuBlD,MAAvB,EAA+BmC,MAA/B,EAAuCtkB,CAAvC,EAA0C0hB,OAA1C;AACH,OAFD,MAGK,IAAIgC,UAAU,CAACnG,iBAAX,IAAgCmG,UAAU,CAAC7gB,SAAX,CAAqB4I,QAArB,CAA8BnT,IAA9B,CAApC,EAAyE;AAC1E,YAAIorB,UAAU,CAACnG,iBAAX,CAA6B/D,QAA7B,KAA0C,IAA9C,EAAoD;AAChD,eAAK6L,iBAAL,CAAuBlD,MAAvB,EAA+BmC,MAA/B,EAAuCtkB,CAAvC,EAA0C0hB,OAA1C;AACH;AACJ,OAJI,MAKA,IAAKgC,UAAU,CAAC7gB,SAAX,CAAqB4I,QAArB,CAA8B,oBAA9B,CAAD,IAA0DiY,UAAU,CAAC7gB,SAAX,CAAqB4I,QAArB,CAA8B,mBAA9B,CAA9D,EAAmH;AACpH,aAAK4Z,iBAAL,CAAuBlD,MAAvB,EAA+BmC,MAA/B,EAAuCtkB,CAAvC,EAA0C0hB,OAA1C;AACH,OAFI,MAGA;AACD,aAAK4D,eAAL,CAAqBnD,MAArB,EAA6BmC,MAA7B,EAAqC5C,OAArC,EAA8C,IAA9C,EAAoD1hB,CAApD,EAAuDykB,OAAvD;AACH;AACJ,KAfD,MAgBK;AACD,WAAKa,eAAL,CAAqBnD,MAArB,EAA6BmC,MAA7B,EAAqC5C,OAArC,EAA8C,IAA9C,EAAoD1hB,CAApD,EAAuDykB,OAAvD,EAAgE,IAAhE;AACH;AACJ,GAvBD;;AAwBAnoB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB0wB,iBAAnB,GAAuC,UAAUlD,MAAV,EAAkBmC,MAAlB,EAA0BtkB,CAA1B,EAA6B0hB,OAA7B,EAAsC;AACzE,QAAI6D,MAAM,GAAGxuB,OAAO,CAACutB,MAAD,EAAS,MAAMxrB,UAAf,CAApB;AACA,QAAI0sB,YAAY,GAAGzuB,OAAO,CAACorB,MAAD,EAAS,MAAMrpB,UAAf,CAA1B;AACA,QAAI2sB,YAAY,GAAG1uB,OAAO,CAACyuB,YAAD,EAAe,MAAM9sB,QAArB,CAA1B;AACA,QAAIgtB,GAAJ;;AACA,QAAI1lB,CAAC,CAACjL,MAAF,CAASkd,YAAT,GAAwB,CAAxB,IAA6BjS,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkBzkB,CAAC,CAACjL,MAAF,CAASkd,YAAT,GAAwB,CAA3E,EAA8E;AAC1EyT,MAAAA,GAAG,GAAG,KAAN;AACH,KAFD,MAGK,IAAI1lB,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkB,CAAtB,EAAyB;AAC1BiB,MAAAA,GAAG,GAAG,IAAN;AACH,KAFI,MAGA,IAAI1lB,CAAC,CAACjL,MAAF,CAAS8N,SAAT,CAAmB4I,QAAnB,CAA4B,mBAA5B,KAAqDzL,CAAC,CAACjL,MAAF,CAAS8N,SAAT,CAAmB4I,QAAnB,CAA4B,oBAA5B,CAAzD,EAA6G;AAC9G,UAAKzL,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkB,CAAnB,IAA0BzkB,CAAC,CAACiT,KAAF,CAAQyR,OAAR,GAAkB,CAAhD,EAAoD;AAChDgB,QAAAA,GAAG,GAAG,IAAN;AACH,OAFD,MAGK,IAAK1lB,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkB,EAAnB,IAA2BzkB,CAAC,CAACiT,KAAF,CAAQyR,OAAR,GAAkB,EAAjD,EAAsD;AACvDgB,QAAAA,GAAG,GAAG,KAAN;AACH;AACJ;;AACD,QAAK1lB,CAAC,CAACjL,MAAF,CAAS8N,SAAT,CAAmB4I,QAAnB,CAA4B,mBAA5B,CAAD,IAAuDzL,CAAC,CAACjL,MAAF,CAAS8N,SAAT,CAAmB4I,QAAnB,CAA4B,oBAA5B,CAA3D,EAA+G;AAC3G,UAAI1W,MAAM,GAAGiL,CAAC,CAACjL,MAAF,CAASgC,OAAT,CAAiB,IAAjB,CAAb;AACAwuB,MAAAA,MAAM,CAACta,YAAP,CAAoBkX,MAApB,EAA4BuD,GAAG,GAAG3wB,MAAH,GAAYA,MAAM,CAAC+c,kBAAlD;AACH,KAHD,MAIK;AACDyT,MAAAA,MAAM,CAACta,YAAP,CAAoBkX,MAApB,EAA4BuD,GAAG,GAAG1lB,CAAC,CAACjL,MAAL,GAAciL,CAAC,CAACjL,MAAF,CAAS+c,kBAAtD;AACH;;AACD,SAAK6T,QAAL,CAAcxD,MAAd,EAAsBmC,MAAtB,EAA8BiB,MAA9B,EAAsCG,GAAtC,EAA2ChE,OAA3C;AACA,SAAKkE,aAAL,CAAmBJ,YAAnB,EAAiCC,YAAjC;AACA,SAAKI,eAAL,CAAqB1D,MAArB;;AACA,QAAIT,OAAO,CAACllB,OAAR,CAAgB2F,EAAhB,KAAuB,KAAK3F,OAAL,CAAa2F,EAAxC,EAA4C;AACxC,WAAKmL,UAAL;AACH,KAFD,MAGK;AACDoU,MAAAA,OAAO,CAACoE,cAAR;AACA,WAAKA,cAAL;AACH;AACJ,GApCD;;AAqCAxpB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2wB,eAAnB,GAAqC,UAAUnD,MAAV,EAAkBmC,MAAlB,EAA0B5C,OAA1B,EAAmC/gB,KAAnC,EAA0CX,CAA1C,EAA6C2a,GAA7C,EAAkD5G,OAAlD,EAA2D;AAC5F,QAAIyR,YAAY,GAAGzuB,OAAO,CAACorB,MAAD,EAAS,MAAMrpB,UAAf,CAA1B;AACA,QAAI2sB,YAAY,GAAG1uB,OAAO,CAACyuB,YAAD,EAAe,MAAM9sB,QAArB,CAA1B;AACA,QAAIqtB,YAAY,GAAGhvB,OAAO,CAACutB,MAAD,EAAS,MAAMxrB,UAAf,CAA1B;AACA,QAAI0rB,cAAJ;;AACA,QAAIxkB,CAAC,IAAIA,CAAC,CAACjL,MAAX,EAAmB;AACfyvB,MAAAA,cAAc,GAAGttB,MAAM,CAAC,KAAKsL,aAAL,GAAqB,MAAMpI,OAA3B,GAAqC,MAAMhB,QAA5C,EAAsDkrB,MAAtD,CAAvB;AACH;;AACD,QAAItkB,CAAC,IAAK2a,GAAG,GAAG,CAAZ,IAAkB,CAAC5G,OAAvB,EAAgC;AAC5BgS,MAAAA,YAAY,CAAC9a,YAAb,CAA0BkX,MAA1B,EAAkCmC,MAAlC;AACA,WAAKqB,QAAL,CAAcxD,MAAd,EAAsBmC,MAAtB,EAA8ByB,YAA9B,EAA4C,IAA5C,EAAkDrE,OAAlD;AACH,KAHD,MAIK,IAAI1hB,CAAC,IAAKA,CAAC,CAACjL,MAAF,CAASkd,YAAT,GAAwB,CAAxB,IAA6B0I,GAAG,GAAI3a,CAAC,CAACjL,MAAF,CAASkd,YAAT,GAAwB,EAAlE,IAA0E,CAAC8B,OAA3E,IAAsF,CAAC,KAAK3W,WAAhG,EAA6G;AAC9G2oB,MAAAA,YAAY,CAAC9a,YAAb,CAA0BkX,MAA1B,EAAkCmC,MAAM,CAACxS,kBAAzC;AACA,WAAK6T,QAAL,CAAcxD,MAAd,EAAsBmC,MAAtB,EAA8ByB,YAA9B,EAA4C,KAA5C,EAAmDrE,OAAnD;AACH,KAHI,MAIA,IAAI,KAAKtkB,WAAL,IAAoBonB,cAApB,IAAsC7J,GAAG,GAAG6J,cAAc,CAACvS,YAAf,GAA8B,EAA1E,IAAgF,CAAC8B,OAArF,EAA8F;AAC/FgS,MAAAA,YAAY,CAAC9a,YAAb,CAA0BkX,MAA1B,EAAkCmC,MAAM,CAACxS,kBAAzC;AACA,WAAK6T,QAAL,CAAcxD,MAAd,EAAsBmC,MAAtB,EAA8ByB,YAA9B,EAA4C,KAA5C,EAAmDrE,OAAnD;AACH,KAHI,MAIA;AACD,UAAI6D,MAAM,GAAG,KAAKS,YAAL,CAAkB1B,MAAlB,CAAb;AACA,UAAI2B,OAAO,GAAGV,MAAM,CAAC1b,UAAP,CAAkBlJ,KAAlB,CAAd;AACA4kB,MAAAA,MAAM,CAACta,YAAP,CAAoBkX,MAApB,EAA4B8D,OAA5B;AACA,WAAKN,QAAL,CAAcxD,MAAd,EAAsB8D,OAAtB,EAA+BV,MAA/B,EAAuC,IAAvC,EAA6C7D,OAA7C;AACH;;AACD,SAAKkE,aAAL,CAAmBJ,YAAnB,EAAiCC,YAAjC;AACA,SAAKI,eAAL,CAAqB1D,MAArB;;AACA,QAAIT,OAAO,CAACllB,OAAR,CAAgB2F,EAAhB,KAAuB,KAAK3F,OAAL,CAAa2F,EAAxC,EAA4C;AACxC,WAAKmL,UAAL;AACH,KAFD,MAGK;AACDoU,MAAAA,OAAO,CAACoE,cAAR;AACA,WAAKA,cAAL;AACH;AACJ,GAnCD;;AAoCAxpB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBgxB,QAAnB,GAA8B,UAAUxD,MAAV,EAAkBmC,MAAlB,EAA0BiB,MAA1B,EAAkCG,GAAlC,EAAuChE,OAAvC,EAAgD;AAC1E,QAAIwE,YAAY,GAAGnvB,OAAO,CAACwuB,MAAD,EAAS,MAAM7sB,QAAf,CAA1B;AACA,QAAIyJ,EAAE,GAAG,KAAKuX,KAAL,CAAWyI,MAAX,CAAT;AACA,QAAIgE,WAAW,GAAGzE,OAAO,CAAC0E,gBAAR,CAAyB1E,OAAO,CAAChd,QAAjC,EAA2Cgd,OAAO,CAACphB,MAAnD,EAA2D6B,EAA3D,EAA+D,IAA/D,EAAqE,IAArE,EAA2E,IAA3E,CAAlB;AACA,QAAIkkB,KAAK,GAAG,KAAK3M,KAAL,CAAW4K,MAAX,CAAZ;AACA,QAAI3jB,KAAK,GAAG,KAAK2lB,UAAL,CAAgB,KAAK5hB,QAArB,EAA+B,KAAKpE,MAApC,EAA4C+lB,KAA5C,CAAZ;AACA,QAAI7O,QAAQ,GAAG,KAAKkC,KAAL,CAAWwM,YAAX,CAAf;;AACA,QAAI,KAAKpf,QAAL,KAAkB,CAAtB,EAAyB;AACrB,WAAKqI,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6CkX,QAA7C,EAAuD,aAAvD,EAAsE,IAAtE;AACA,UAAImD,GAAG,GAAGnjB,KAAK,CAACmJ,KAAD,CAAL,GAAe,KAAK+D,QAAL,CAActP,MAA7B,GAAuCswB,GAAG,GAAG/kB,KAAH,GAAWA,KAAK,GAAG,CAAvE;;AACA,UAAInJ,KAAK,CAACggB,QAAD,CAAL,IAAmB,CAAC,KAAKhG,MAA7B,EAAqC;AACjC,eAAO2U,WAAW,CAAC,CAAD,CAAX,CAAe,KAAK7lB,MAAL,CAAYqG,QAA3B,CAAP;AACH,OAFD,MAGK;AACD,YAAI4f,OAAO,GAAG,KAAK3hB,cAAL,GAAsBiC,UAAU,CAAC2Q,QAAD,CAAhC,GAA6CA,QAA3D;AACA7f,QAAAA,QAAQ,CAAC,KAAK2I,MAAL,CAAYqG,QAAb,EAAuB4f,OAAvB,EAAgCJ,WAAW,CAAC,CAAD,CAA3C,CAAR;AACH;;AACD,WAAKzhB,QAAL,CAAciK,MAAd,CAAqBgM,GAArB,EAA0B,CAA1B,EAA6BwL,WAAW,CAAC,CAAD,CAAxC;;AACA,UAAIzE,OAAO,CAACllB,OAAR,CAAgB2F,EAAhB,KAAuB,KAAK3F,OAAL,CAAa2F,EAAxC,EAA4C;AACxC,YAAI2G,SAAS,GAAG4Y,OAAO,CAAC8E,gBAAR,CAAyBrkB,EAAzB,CAAhB;AACAwY,QAAAA,GAAG;;AACH,aAAK,IAAIllB,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAGd,SAAS,CAAC1T,MAAhC,EAAwCK,CAAC,GAAGmU,GAA5C,EAAiDnU,CAAC,EAAlD,EAAsD;AAClD,eAAKiP,QAAL,CAAciK,MAAd,CAAqBgM,GAArB,EAA0B,CAA1B,EAA6B7R,SAAS,CAACrT,CAAD,CAAtC;AACAklB,UAAAA,GAAG;AACN;;AACD+G,QAAAA,OAAO,CAAC1a,WAAR,GAAsB0a,OAAO,CAACza,cAAR,CAAuBya,OAAO,CAAChd,QAA/B,EAAyCgd,OAAO,CAACphB,MAAR,CAAeqG,QAAxD,CAAtB;AACH;;AACD,WAAKK,WAAL,GAAmB,KAAKC,cAAL,CAAoB,KAAKvC,QAAzB,EAAmC,KAAKpE,MAAL,CAAYqG,QAA/C,CAAnB;AACH,KArBD,MAsBK;AACD,WAAK8f,YAAL,CAAkB,KAAK/hB,QAAvB,EAAiC,KAAKpE,MAAtC,EAA8CkX,QAA9C,EAAwD2O,WAAxD,EAAqET,GAAG,GAAG/kB,KAAH,GAAWA,KAAK,GAAG,CAA3F;AACH;AACJ,GAhCD;;AAiCArE,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqxB,YAAnB,GAAkC,UAAU1B,MAAV,EAAkB;AAChD,QAAIoC,QAAQ,GAAGxvB,MAAM,CAAC,SAASiC,IAAV,EAAgBmrB,MAAhB,CAArB;;AACA,QAAIoC,QAAQ,IAAIA,QAAQ,CAAC7jB,SAAT,CAAmB4I,QAAnB,CAA4BhT,UAA5B,CAAZ,IAAuD,KAAKmE,aAAL,KAAuB,IAAlF,EAAwF;AACpF,WAAKyV,YAAL,CAAkBiS,MAAlB,EAA0BoC,QAA1B,EAAoC,IAApC;AACH;;AACD,QAAInB,MAAM,GAAGruB,MAAM,CAAC,MAAM4B,UAAP,EAAmBwrB,MAAnB,CAAnB;;AACA,QAAI,KAAK1nB,aAAL,KAAuB,IAAvB,IAA+B,CAAC2oB,MAAhC,IAA0CmB,QAA9C,EAAwD;AACpD,WAAK5e,gBAAL,CAAsBwc,MAAtB;AACH;;AACDiB,IAAAA,MAAM,GAAGruB,MAAM,CAAC,MAAM4B,UAAP,EAAmBwrB,MAAnB,CAAf;;AACA,QAAI,CAAC9sB,KAAK,CAAC+tB,MAAD,CAAN,IAAkB,KAAK3oB,aAAL,KAAuB,IAA7C,EAAmD;AAC/C2oB,MAAAA,MAAM,CAACxT,KAAP,CAAaoD,OAAb,GAAuB,MAAvB;AACH;;AACD,QAAI,CAAC3d,KAAK,CAAC+tB,MAAD,CAAN,IAAkB,KAAK3oB,aAAL,KAAuB,KAA7C,EAAoD;AAChD2oB,MAAAA,MAAM,CAACxT,KAAP,CAAaoD,OAAb,GAAuB,OAAvB;AACH;;AACD,QAAI3d,KAAK,CAAC+tB,MAAD,CAAL,IAAiB,KAAK3oB,aAAL,KAAuB,IAA5C,EAAkD;AAC9C,UAAIpF,KAAK,CAACkvB,QAAD,CAAT,EAAqB;AACjB3uB,QAAAA,QAAQ,CAAC4uB,YAAT,CAAsB,KAAKjf,aAA3B,EAA0C4c,MAA1C,EAAkD7rB,UAAlD,EAA8D,KAAKgH,cAAnE;AACH;;AACD,UAAIsL,IAAI,GAAG7T,MAAM,CAAC,SAASiC,IAAV,EAAgBmrB,MAAhB,CAAjB;;AACA,UAAIvZ,IAAJ,EAAU;AACNA,QAAAA,IAAI,CAAClI,SAAL,CAAeC,GAAf,CAAmB,mBAAnB;AACH;;AACDyiB,MAAAA,MAAM,GAAGxtB,QAAQ,CAAC6uB,UAAT,CAAoB,KAAKlf,aAAzB,EAAwC,EAAxC,EAA4C,IAA5C,EAAkD,KAAKjI,cAAvD,CAAT;AACA6kB,MAAAA,MAAM,CAAC3c,WAAP,CAAmB4d,MAAnB;;AACA,UAAIxa,IAAJ,EAAU;AACNjU,QAAAA,WAAW,CAAC,CAACiU,IAAD,CAAD,EAASvS,WAAT,CAAX;AACH,OAFD,MAGK;AACDT,QAAAA,QAAQ,CAAC4uB,YAAT,CAAsB,KAAKjf,aAA3B,EAA0C4c,MAA1C,EAAkD7rB,UAAlD,EAA8D,KAAKgH,cAAnE;AACH;;AACD6kB,MAAAA,MAAM,CAACpiB,YAAP,CAAoB,eAApB,EAAqC,OAArC;AACAqjB,MAAAA,MAAM,CAACxT,KAAP,CAAaoD,OAAb,GAAuB,MAAvB;AACH;;AACD,QAAI3d,KAAK,CAAC+tB,MAAD,CAAT,EAAmB;AACf,WAAKrgB,OAAL,CAAa,eAAb,EAA8B,KAAKuQ,cAAL,CAAoB6O,MAApB,EAA4B,IAA5B,CAA9B;;AACA,UAAI9sB,KAAK,CAACkvB,QAAD,CAAT,EAAqB;AACjB3uB,QAAAA,QAAQ,CAAC4uB,YAAT,CAAsB,KAAKjf,aAA3B,EAA0C4c,MAA1C,EAAkD9rB,WAAlD,EAA+D,KAAKiH,cAApE;AACH;;AACD,UAAIsL,IAAI,GAAG7T,MAAM,CAAC,SAASiC,IAAV,EAAgBmrB,MAAhB,CAAjB;;AACA,UAAIvZ,IAAJ,EAAU;AACNjU,QAAAA,WAAW,CAAC,CAACiU,IAAD,CAAD,EAAStS,UAAT,CAAX;AACH,OAFD,MAGK;AACDV,QAAAA,QAAQ,CAAC4uB,YAAT,CAAsB,KAAKjf,aAA3B,EAA0C4c,MAA1C,EAAkD9rB,WAAlD,EAA+D,KAAKiH,cAApE;AACAsL,QAAAA,IAAI,GAAG7T,MAAM,CAAC,SAASiC,IAAV,EAAgBmrB,MAAhB,CAAb;AACAxtB,QAAAA,WAAW,CAAC,CAACiU,IAAD,CAAD,EAAStS,UAAT,CAAX;AACH;;AACD8sB,MAAAA,MAAM,GAAGxtB,QAAQ,CAAC6uB,UAAT,CAAoB,KAAKlf,aAAzB,EAAwC,EAAxC,EAA4C,IAA5C,EAAkD,KAAKjI,cAAvD,CAAT;AACA6kB,MAAAA,MAAM,CAAC3c,WAAP,CAAmB4d,MAAnB;AACA,WAAKhQ,SAAL,CAAe+O,MAAf;AACA,WAAKpf,OAAL,CAAa,cAAb,EAA6B,KAAKuQ,cAAL,CAAoB6O,MAApB,EAA4B,IAA5B,CAA7B;AACH;;AACD,WAAOiB,MAAP;AACH,GAvDD;;AAwDAjpB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBixB,aAAnB,GAAmC,UAAUJ,YAAV,EAAwBC,YAAxB,EAAsC;AACrE,QAAIA,YAAY,IAAID,YAAY,CAACqB,iBAAb,KAAmC,CAAvD,EAA0D;AACtD,UAAIC,QAAQ,GAAG5vB,MAAM,CAAC,SAASiC,IAAV,EAAgBssB,YAAhB,CAArB;AACAxuB,MAAAA,MAAM,CAACuuB,YAAD,CAAN;AACAvuB,MAAAA,MAAM,CAAC6vB,QAAD,CAAN;AACA,UAAItP,QAAQ,GAAG,KAAKkC,KAAL,CAAW+L,YAAX,CAAf;AACA,WAAKtW,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6CkX,QAA7C,EAAuD,aAAvD,EAAsE,KAAtE;AACA,WAAKxB,YAAL,CAAkByP,YAAlB,EAAgC,IAAhC;AACH;AACJ,GATD;;AAUAnpB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBkxB,eAAnB,GAAqC,UAAU1D,MAAV,EAAkB;AACnD,QAAI9a,KAAK,GAAG,KAAKoP,OAAL,CAAa0L,MAAb,EAAqB,MAAMrpB,UAA3B,EAAuC1D,MAAnD;AACA+sB,IAAAA,MAAM,CAACjgB,YAAP,CAAoB,YAApB,EAAkC,KAAKmF,KAAvC;AACA,SAAK0f,oBAAL,CAA0B7vB,MAAM,CAAC,MAAM4B,UAAP,EAAmBqpB,MAAnB,CAAhC,EAA4D9a,KAAK,GAAG,CAApE;AACH,GAJD;;AAKA/K,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBoyB,oBAAnB,GAA0C,UAAUvqB,OAAV,EAAmB6K,KAAnB,EAA0B;AAChE,QAAI,CAAC7P,KAAK,CAACgF,OAAD,CAAV,EAAqB;AACjB,UAAI2Q,MAAM,GAAG3Q,OAAO,CAACqN,UAArB;;AACA,WAAK,IAAIpU,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAGuD,MAAM,CAAC/X,MAA7B,EAAqCK,CAAC,GAAGmU,GAAzC,EAA8CnU,CAAC,EAA/C,EAAmD;AAC/C,YAAIuZ,KAAK,GAAG7B,MAAM,CAAC1X,CAAD,CAAlB;AACAuZ,QAAAA,KAAK,CAAC9M,YAAN,CAAmB,YAAnB,EAAiC,KAAKmF,KAAtC;AACA,aAAK0f,oBAAL,CAA0B7vB,MAAM,CAAC,MAAM4B,UAAP,EAAmBkW,KAAnB,CAAhC,EAA2D3H,KAAK,GAAG,CAAnE;AACH;AACJ;AACJ,GATD;;AAUA/K,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBiwB,gBAAnB,GAAsC,UAAU5kB,CAAV,EAAa;AAC/C,QAAI0lB,GAAJ;;AACA,QAAI1lB,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkBzkB,CAAC,CAACjL,MAAF,CAASkd,YAAT,GAAwB,CAA9C,EAAiD;AAC7CyT,MAAAA,GAAG,GAAG,KAAN;AACH,KAFD,MAGK,IAAI1lB,CAAC,CAACiT,KAAF,CAAQwR,OAAR,GAAkB,CAAtB,EAAyB;AAC1BiB,MAAAA,GAAG,GAAG,IAAN;AACH;;AACD,QAAIZ,MAAM,GAAG,KAAKpd,aAAL,CAAmB,KAAnB,EAA0B;AAAEgY,MAAAA,SAAS,EAAE5lB;AAAb,KAA1B,CAAb;AACA,QAAI6G,KAAK,GAAG,KAAK6B,aAAL,GAAsBkjB,GAAG,GAAG,CAAH,GAAO,CAAhC,GAAsCA,GAAG,GAAG,CAAH,GAAO,CAA5D;AACA1lB,IAAAA,CAAC,CAACjL,MAAF,CAASkW,YAAT,CAAsB6Z,MAAtB,EAA8B9kB,CAAC,CAACjL,MAAF,CAASwtB,QAAT,CAAkB5hB,KAAlB,CAA9B;AACH,GAXD;;AAYArE,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB8uB,gBAAnB,GAAsC,YAAY;AAC9C,QAAIuD,MAAM,GAAG9vB,MAAM,CAAC,MAAM4C,OAAP,CAAnB;;AACA,QAAIktB,MAAJ,EAAY;AACR/vB,MAAAA,MAAM,CAAC+vB,MAAD,CAAN;AACH;AACJ,GALD;;AAMA1qB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB6sB,WAAnB,GAAiC,YAAY;AACzC,QAAI,KAAKE,OAAL,IAAgB,KAAKsC,OAAzB,EAAkC;AAC9B,WAAKtC,OAAL,CAAauF,OAAb;AACA,WAAKjD,OAAL,CAAaiD,OAAb;AACH;AACJ,GALD;;AAMA3qB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBquB,YAAnB,GAAkC,UAAU/P,KAAV,EAAiBsE,GAAjB,EAAsBmM,UAAtB,EAAkC3uB,MAAlC,EAA0CmyB,QAA1C,EAAoD7E,QAApD,EAA8Dhb,KAA9D,EAAqE8c,IAArE,EAA2E;AACzG,QAAIG,MAAM,GAAGZ,UAAU,GAAG3sB,OAAO,CAAC2sB,UAAD,EAAa,MAAMhrB,QAAnB,CAAV,GAAyC,IAAhE;AACA,QAAIyuB,QAAQ,GAAG7C,MAAM,GAAG,KAAK5U,WAAL,CAAiB4U,MAAjB,CAAH,GAA8B,IAAnD;AACA,QAAIrB,WAAW,GAAG1L,GAAG,GAAGA,GAAG,CAAC4K,MAAP,GAAgB+E,QAArC;AACA,QAAIE,eAAe,GAAG7P,GAAG,GAAGA,GAAG,CAACqL,QAAP,GAAkB,IAA3C;AACA,QAAIyE,SAAS,GAAG3D,UAAU,GAAG,KAAKjN,OAAL,CAAaiN,UAAb,EAAyB,MAAMhrB,QAA/B,CAAH,GAA8C,IAAxE;AACA,QAAI4uB,YAAY,GAAG/P,GAAG,CAAC4K,MAAJ,CAAWhW,aAA9B;AACA,QAAI2X,UAAU,GAAGvM,GAAG,CAAC4K,MAAJ,GAAaprB,OAAO,CAACuwB,YAAD,EAAe,MAAM5uB,QAArB,CAApB,GAAqD,IAAtE;AACA,QAAI6uB,YAAY,GAAG,IAAnB;AACA,QAAIC,UAAU,GAAG,IAAjB;AACA,QAAIC,OAAO,GAAG,CAACztB,QAAD,EAAWD,MAAX,EAAmBE,OAAnB,EAA4BC,MAA5B,CAAd;AACA,QAAIwtB,SAAS,GAAG,IAAhB;AACA,QAAIvd,IAAI,GAAIga,IAAI,KAAK,IAAV,GAAkBlB,WAAlB,GAAgCqB,MAA3C;AACA,QAAI3jB,KAAK,GAAGwJ,IAAI,GAAGpT,OAAO,CAACoT,IAAD,EAAO,gBAAP,CAAV,GAAqC,IAArD;AACA,QAAI1U,CAAC,GAAG,CAAR;AACA,QAAIkyB,QAAQ,GAAG,IAAf;AACA7D,IAAAA,UAAU,GAAIvM,GAAG,CAAC4K,MAAJ,IAAc2B,UAAU,KAAK,IAA9B,GAAsC/sB,OAAO,CAACuwB,YAAD,EAAe,MAAMhvB,IAArB,CAA7C,GAA0EwrB,UAAvF;AACAA,IAAAA,UAAU,GAAIK,IAAI,KAAK,IAAV,GAAkB,KAAKL,UAAvB,GAAoCA,UAAjD;;AACA,QAAIzB,QAAJ,EAAc;AACV,aAAO5sB,CAAC,GAAG,CAAX,EAAc;AACV,YAAIyB,MAAM,CAAC,MAAMiC,IAAP,EAAakpB,QAAb,CAAN,CAA6Bxf,SAA7B,CAAuC4I,QAAvC,CAAgDgc,OAAO,CAAChyB,CAAD,CAAvD,CAAJ,EAAiE;AAC7DiyB,UAAAA,SAAS,GAAGD,OAAO,CAAChyB,CAAD,CAAnB;AACA;AACH;;AACDA,QAAAA,CAAC;AACJ;AACJ;;AACD,QAAIkL,KAAJ,EAAW;AACP,UAAIinB,OAAO,GAAG,CAAd;;AACA,WAAKnyB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGkL,KAAK,CAACkmB,iBAAtB,EAAyCpxB,CAAC,EAA1C,EAA8C;AAC1CmyB,QAAAA,OAAO,GAAIzD,IAAI,KAAK,IAAT,IAAiBxjB,KAAK,CAAC4hB,QAAN,CAAe9sB,CAAf,MAAsBwtB,WAAvC,IAAsDqB,MAAM,KAAKrB,WAAlE,GAAiF,EAAE2E,OAAnF,GAA6FA,OAAvG;;AACA,YAAKzD,IAAI,KAAK,IAAT,IAAiBxjB,KAAK,CAAC4hB,QAAN,CAAe9sB,CAAf,EAAkBoN,SAAlB,CAA4B4I,QAA5B,CAAqC,SAArC,CAAtB,EAAwE;AACpE+b,UAAAA,UAAU,GAAIvU,KAAK,CAACwR,OAAN,IAAiB,EAAlB,GAAwBhvB,CAAC,GAAG,CAA5B,GAAgCA,CAA7C;AACA;AACH,SAHD,MAIK,IAAIkL,KAAK,CAAC4hB,QAAN,CAAe9sB,CAAf,MAAsB0U,IAA1B,EAAgC;AACjCqd,UAAAA,UAAU,GAAIvU,KAAK,CAACwR,OAAN,IAAiB,EAAlB,GAAwBhvB,CAAxB,GAA4BA,CAAzC;AACA;AACH;AACJ;;AACD+xB,MAAAA,UAAU,GAAII,OAAO,KAAK,CAAb,GAAkB,EAAEJ,UAApB,GAAiCA,UAA9C;AACAG,MAAAA,QAAQ,GAAID,SAAS,IAAI,WAAd,GAA6B,QAA7B,GAA0CzU,KAAK,CAACwR,OAAN,GAAgB,CAAjB,GAAsB,QAAtB,GAAiC,OAArF;AACH;;AACD,QAAIf,UAAJ,EAAgB;AACZ,UAAI2D,SAAS,CAACjyB,MAAV,KAAqB,CAAzB,EAA4B;AACxBmyB,QAAAA,YAAY,GAAG,IAAf;AACH,OAFD,MAGK,IAAI7D,UAAU,CAAC7gB,SAAX,CAAqB4I,QAArB,CAA8B/S,QAA9B,CAAJ,EAA6C;AAC9C6uB,QAAAA,YAAY,GAAGF,SAAS,CAAC,CAAD,CAAxB;AACH,OAFI,MAGA;AACDE,QAAAA,YAAY,GAAGF,SAAS,CAAC,CAAD,CAAxB;AACH;AACJ;;AACD,QAAI/C,MAAM,KAAKrB,WAAf,EAA4B;AACxBsE,MAAAA,YAAY,GAAGjD,MAAf;AACH;;AACD,QAAIZ,UAAU,IAAI3uB,MAAM,CAACkd,YAAP,IAAuB,EAArC,IAA2CgB,KAAK,CAACwR,OAAN,GAAgB1vB,MAAM,CAACkd,YAAP,GAAsB,EAAjF,IAAuFgB,KAAK,CAACwR,OAAN,GAAgB,CAA3G,EAA8G;AAC1G8C,MAAAA,YAAY,GAAGjD,MAAf;;AACA,UAAIH,IAAI,KAAK,IAAb,EAAmB;AACf9c,QAAAA,KAAK,GAAG,EAAEA,KAAV;AACA,YAAIwgB,QAAQ,GAAGN,YAAY,GAAGrwB,MAAM,CAAC,gBAAD,EAAmBqwB,YAAnB,CAAT,GAA4C,IAAvE;AACAC,QAAAA,UAAU,GAAIK,QAAD,GAAaA,QAAQ,CAACtF,QAAT,CAAkBntB,MAA/B,GAAwC,CAArD;;AACA,YAAI,EAAE,KAAKkL,MAAL,CAAY8D,UAAZ,YAAkC9M,WAApC,KAAoDuwB,QAAQ,KAAK,IAAjE,IAAyEN,YAA7E,EAA2F;AACvF,cAAIO,QAAQ,GAAGP,YAAY,CAACQ,YAAb,CAA0B,UAA1B,IACX,KAAK5gB,aAAL,CAAmB,KAAK7G,MAAL,CAAY8D,UAA/B,EAA2CmjB,YAAY,CAACld,YAAb,CAA0B,UAA1B,EAAsC3B,QAAtC,EAA3C,CADW,GACoF,IADnG;AAEA8e,UAAAA,UAAU,GAAIM,QAAD,GAAaA,QAAQ,CAAC1yB,MAAtB,GAA+B,CAA5C;AACH;AACJ;AACJ;;AACD,WAAO;AACHub,MAAAA,MAAM,EAAE,KADL;AAEHqX,MAAAA,UAAU,EAAE3F,QAFT;AAGHpP,MAAAA,KAAK,EAAEA,KAHJ;AAIHgQ,MAAAA,WAAW,EAAEA,WAJV;AAKHmE,MAAAA,eAAe,EAAEA,eALd;AAMHa,MAAAA,WAAW,EAAE3D,MANV;AAOH4D,MAAAA,eAAe,EAAEf,QAPd;AAQHgB,MAAAA,SAAS,EAAEX,UARR;AASHY,MAAAA,SAAS,EAAE/gB,KATR;AAUH0c,MAAAA,iBAAiB,EAAED,UAVhB;AAWHJ,MAAAA,UAAU,EAAE6D,YAXT;AAYH1C,MAAAA,aAAa,EAAE6C,SAZZ;AAaH3yB,MAAAA,MAAM,EAAEA,MAbL;AAcH4yB,MAAAA,QAAQ,EAAEA;AAdP,KAAP;AAgBH,GAtFD;;AAuFArrB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB0zB,UAAnB,GAAgC,UAAUC,KAAV,EAAiB;AAC7C,QAAI1e,GAAG,GAAG,KAAKgI,MAAL,CAAYxc,MAAtB;;AACA,QAAIkzB,KAAJ,EAAW;AACP,WAAK,IAAI7yB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmU,GAApB,EAAyBnU,CAAC,EAA1B,EAA8B;AAC1B,aAAK8V,aAAL,CAAmB,KAAKqG,MAAL,CAAYnc,CAAZ,CAAnB;AACH;AACJ,KAJD,MAKK;AACD,WAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmU,GAApB,EAAyBnU,CAAC,EAA1B,EAA8B;AAC1B,YAAI8yB,MAAM,GAAGrxB,MAAM,CAAC,MAAMkD,OAAP,EAAgB,KAAKwX,MAAL,CAAYnc,CAAZ,CAAhB,CAAnB;AACAwB,QAAAA,MAAM,CAACsxB,MAAD,CAAN;AACH;AACJ;AACJ,GAbD;;AAcAjsB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4W,aAAnB,GAAmC,UAAUP,IAAV,EAAgB;AAC/C,QAAIud,MAAM,GAAG,KAAK7gB,aAAL,CAAmB,KAAnB,EAA0B;AAAEgY,MAAAA,SAAS,EAAEtlB;AAAb,KAA1B,CAAb;AACA4Q,IAAAA,IAAI,CAACC,YAAL,CAAkBsd,MAAlB,EAA0Bvd,IAAI,CAACnB,UAAL,CAAgB,CAAhB,CAA1B;AACH,GAHD;;AAIAvN,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB6zB,cAAnB,GAAoC,UAAUF,KAAV,EAAiB;AACjD,QAAIA,KAAJ,EAAW;AACP,UAAI7O,MAAM,GAAGtiB,SAAS,CAAC,MAAMuB,QAAN,GAAiB,8BAAlB,EAAkD,KAAK8D,OAAvD,CAAtB;;AACA,WAAK,IAAIwJ,EAAE,GAAG,CAAT,EAAYyiB,QAAQ,GAAGhP,MAA5B,EAAoCzT,EAAE,GAAGyiB,QAAQ,CAACrzB,MAAlD,EAA0D4Q,EAAE,EAA5D,EAAgE;AAC5D,YAAI0I,GAAG,GAAG+Z,QAAQ,CAACziB,EAAD,CAAlB;AACA0I,QAAAA,GAAG,CAACxM,YAAJ,CAAiB,eAAjB,EAAkC,OAAlC;AACH;AACJ,KAND,MAOK;AACD,UAAIuX,MAAM,GAAGtiB,SAAS,CAAC,MAAMuB,QAAN,GAAiB,yBAAlB,EAA6C,KAAK8D,OAAlD,CAAtB;;AACA,WAAK,IAAIyJ,EAAE,GAAG,CAAT,EAAYyiB,QAAQ,GAAGjP,MAA5B,EAAoCxT,EAAE,GAAGyiB,QAAQ,CAACtzB,MAAlD,EAA0D6Q,EAAE,EAA5D,EAAgE;AAC5D,YAAIyI,GAAG,GAAGga,QAAQ,CAACziB,EAAD,CAAlB;AACAyI,QAAAA,GAAG,CAAC/K,eAAJ,CAAoB,eAApB;AACH;AACJ;AACJ,GAfD;;AAgBArH,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBg0B,eAAnB,GAAqC,UAAUnsB,OAAV,EAAmB6K,KAAnB,EAA0BuhB,kBAA1B,EAA8C;AAC/E,QAAIvhB,KAAK,GAAG,CAAR,IAAa,CAAC7P,KAAK,CAACgF,OAAD,CAAvB,EAAkC;AAC9B,UAAI2Q,MAAM,GAAG,KAAK0b,eAAL,CAAqBD,kBAArB,EAAyCpsB,OAAO,CAACqN,UAAjD,CAAb;;AACA,WAAK,IAAIpU,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAGuD,MAAM,CAAC/X,MAA7B,EAAqCK,CAAC,GAAGmU,GAAzC,EAA8CnU,CAAC,EAA/C,EAAmD;AAC/C,YAAIuZ,KAAK,GAAG7B,MAAM,CAAC1X,CAAD,CAAlB;AACA,YAAIsV,IAAI,GAAG7T,MAAM,CAAC,MAAMsB,WAAP,EAAoBtB,MAAM,CAAC,MAAMkC,QAAP,EAAiB4V,KAAjB,CAA1B,CAAjB;;AACA,YAAI,CAACxX,KAAK,CAACuT,IAAD,CAAV,EAAkB;AACd,eAAK6I,YAAL,CAAkB5E,KAAlB,EAAyBjE,IAAzB,EAA+B,IAA/B;AACH;;AACD,aAAK4d,eAAL,CAAqBzxB,MAAM,CAAC,MAAM4B,UAAP,EAAmBkW,KAAnB,CAA3B,EAAsD3H,KAAK,GAAG,CAA9D,EAAiEuhB,kBAAjE;AACH;AACJ;AACJ,GAZD;;AAaAtsB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBm0B,gBAAnB,GAAsC,UAAUF,kBAAV,EAA8B;AAChE,QAAIhR,MAAM,GAAG,KAAKiR,eAAL,CAAqBD,kBAArB,EAAyCzxB,SAAS,CAAC,MAAMqB,WAAP,EAAoB,KAAKgE,OAAzB,CAAlD,CAAb;;AACA,SAAK,IAAI/G,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAGgO,MAAM,CAACxiB,MAA7B,EAAqCK,CAAC,GAAGmU,GAAzC,EAA8CnU,CAAC,EAA/C,EAAmD;AAC/C,UAAIsV,IAAI,GAAG6M,MAAM,CAACniB,CAAD,CAAjB;AACA,UAAIuZ,KAAK,GAAGjY,OAAO,CAACgU,IAAD,EAAO,MAAMrS,QAAb,CAAnB;AACA,WAAKkb,YAAL,CAAkB5E,KAAlB,EAAyBjE,IAAzB,EAA+B,IAA/B;AACH;AACJ,GAPD;;AAQAzO,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBo0B,aAAnB,GAAmC,UAAUvsB,OAAV,EAAmB6K,KAAnB,EAA0BuhB,kBAA1B,EAA8C;AAC7E,QAAIvhB,KAAK,GAAG,CAAR,IAAa,CAAC7P,KAAK,CAACgF,OAAD,CAAvB,EAAkC;AAC9B,UAAI6Q,MAAM,GAAG,KAAKwb,eAAL,CAAqBD,kBAArB,EAAyCpsB,OAAO,CAACqN,UAAjD,CAAb;;AACA,WAAK,IAAIpU,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAGyD,MAAM,CAACjY,MAA7B,EAAqCK,CAAC,GAAGmU,GAAzC,EAA8CnU,CAAC,EAA/C,EAAmD;AAC/C,YAAIuZ,KAAK,GAAG3B,MAAM,CAAC5X,CAAD,CAAlB;AACA,YAAIsV,IAAI,GAAG7T,MAAM,CAAC,MAAMuB,UAAP,EAAmBvB,MAAM,CAAC,MAAMkC,QAAP,EAAiB4V,KAAjB,CAAzB,CAAjB;;AACA,YAAI,CAACxX,KAAK,CAACuT,IAAD,CAAV,EAAkB;AACd,eAAKsH,YAAL,CAAkBrD,KAAlB,EAAyBjE,IAAzB,EAA+B,IAA/B;AACH;;AACD,aAAKge,aAAL,CAAmB7xB,MAAM,CAAC,MAAM4B,UAAP,EAAmBkW,KAAnB,CAAzB,EAAoD3H,KAAK,GAAG,CAA5D,EAA+DuhB,kBAA/D;AACH;AACJ;AACJ,GAZD;;AAaAtsB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBq0B,cAAnB,GAAoC,UAAUJ,kBAAV,EAA8B;AAC9D,QAAIK,MAAM,GAAG,KAAKJ,eAAL,CAAqBD,kBAArB,EAAyCzxB,SAAS,CAAC,MAAMsB,UAAP,EAAmB,KAAK+D,OAAxB,CAAlD,CAAb;;AACA,SAAK,IAAI/G,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAGqf,MAAM,CAAC7zB,MAA7B,EAAqCK,CAAC,GAAGmU,GAAzC,EAA8CnU,CAAC,EAA/C,EAAmD;AAC/C,UAAIsV,IAAI,GAAGke,MAAM,CAACxzB,CAAD,CAAjB;AACA,UAAIuZ,KAAK,GAAGjY,OAAO,CAACgU,IAAD,EAAO,MAAMrS,QAAb,CAAnB;AACA,WAAK2Z,YAAL,CAAkBrD,KAAlB,EAAyBjE,IAAzB,EAA+B,IAA/B,EAAqC,IAArC;AACH;AACJ,GAPD;;AAQAzO,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBk0B,eAAnB,GAAqC,UAAUD,kBAAV,EAA8Bpb,KAA9B,EAAqC;AACtE,QAAI0b,MAAM,GAAG50B,KAAK,CAACK,SAAN,CAAgBmqB,KAAhB,CAAsBpiB,IAAtB,CAA2B8Q,KAA3B,CAAb;;AACA,QAAIob,kBAAJ,EAAwB;AACpB,WAAK,IAAInzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyzB,MAAM,CAAC9zB,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;AACpC,YAAI,CAAC2B,SAAS,CAAC8xB,MAAM,CAACzzB,CAAD,CAAP,CAAd,EAA2B;AACvByzB,UAAAA,MAAM,CAACva,MAAP,CAAclZ,CAAd,EAAiB,CAAjB;AACAA,UAAAA,CAAC;AACJ;AACJ;AACJ;;AACD,WAAOyzB,MAAP;AACH,GAXD;;AAYA5sB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBw0B,UAAnB,GAAgC,UAAUhf,IAAV,EAAgB;AAC5C,QAAIqb,YAAY,GAAGzuB,OAAO,CAACoT,IAAD,EAAO,MAAMrR,UAAb,CAA1B;AACA,QAAI2sB,YAAY,GAAG1uB,OAAO,CAACyuB,YAAD,EAAe,MAAM9sB,QAArB,CAA1B;;AACA,QAAI,CAAClB,KAAK,CAAC,KAAKkL,cAAN,CAAV,EAAiC;AAC7B,WAAKqc,eAAL,CAAqB5U,IAArB;AACH;;AACDlT,IAAAA,MAAM,CAACkT,IAAD,CAAN;AACA,SAAKyb,aAAL,CAAmBJ,YAAnB,EAAiCC,YAAjC;AACA,SAAK2D,UAAL,CAAgBjf,IAAhB;AACH,GATD;;AAUA7N,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBmxB,cAAnB,GAAoC,YAAY;AAC5C,SAAKxY,UAAL;AACA,SAAK+b,mBAAL;AACA,SAAKC,mBAAL;AACH,GAJD;;AAKAhtB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2Y,UAAnB,GAAgC,YAAY;AACxC,SAAKsE,MAAL,GAActd,KAAK,CAACK,SAAN,CAAgBmqB,KAAhB,CAAsBpiB,IAAtB,CAA2BvF,SAAS,CAAC,MAAMuB,QAAP,EAAiB,KAAK8D,OAAtB,CAApC,CAAd;AACH,GAFD;;AAGAF,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB00B,mBAAnB,GAAyC,YAAY;AACjD,SAAKvoB,aAAL,CAAmB;AAAED,MAAAA,aAAa,EAAE;AAAjB,KAAnB,EAA0C,IAA1C;AACA,QAAIoM,MAAM,GAAG9V,SAAS,CAAC,MAAM6B,MAAP,EAAe,KAAKwD,OAApB,CAAtB;AACA,SAAKuW,gBAAL,CAAsB9F,MAAtB;AACH,GAJD;;AAKA3Q,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB20B,mBAAnB,GAAyC,YAAY;AACjD,SAAKxoB,aAAL,CAAmB;AAAEE,MAAAA,aAAa,EAAE;AAAjB,KAAnB,EAA0C,IAA1C;AACA,QAAIqM,MAAM,GAAGlW,SAAS,CAAC,wBAAD,EAA2B,KAAKqF,OAAhC,CAAtB;;AACA,SAAK,IAAI/G,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAGyD,MAAM,CAACjY,MAA7B,EAAqCK,CAAC,GAAGmU,GAAzC,EAA8CnU,CAAC,EAA/C,EAAmD;AAC/C,WAAK8f,SAAL,CAAelI,MAAM,CAAC5X,CAAD,CAArB;AACH;AACJ,GAND;;AAOA6G,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBy0B,UAAnB,GAAgC,UAAUjf,IAAV,EAAgB;AAC5C,QAAI,KAAKrD,QAAL,KAAkB,CAAtB,EAAyB;AACrB,UAAIyiB,EAAE,GAAG,IAAIjyB,WAAJ,CAAgB,KAAKoN,QAArB,CAAT;AACA,UAAIvC,EAAE,GAAG,KAAKuX,KAAL,CAAWvP,IAAX,CAAT;AACA,UAAIK,IAAI,GAAG,EAAX;AACA,UAAIgf,KAAK,GAAG,KAAK5kB,cAAL,GAAsBiC,UAAU,CAAC1E,EAAD,CAAhC,GAAuCA,EAAnD;AACAqI,MAAAA,IAAI,CAAC,KAAKlK,MAAL,CAAY6B,EAAb,CAAJ,GAAuBqnB,KAAvB;AACAD,MAAAA,EAAE,CAAC9yB,MAAH,CAAU,KAAK6J,MAAL,CAAY6B,EAAtB,EAA0BqI,IAA1B;AACA,WAAKgc,gBAAL,CAAsBrkB,EAAtB;AACH,KARD,MASK;AACD,UAAIA,EAAE,GAAG,KAAKuX,KAAL,CAAWvP,IAAX,CAAT;AACA,WAAKic,gBAAL,CAAsB,KAAK1hB,QAA3B,EAAqC,KAAKpE,MAA1C,EAAkD6B,EAAlD,EAAsD,IAAtD,EAA4D,IAA5D,EAAkE,IAAlE;AACH;AACJ,GAdD;;AAeA7F,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB6xB,gBAAnB,GAAsC,UAAUhP,QAAV,EAAoB;AACtD,QAAIrK,MAAM,GAAG,KAAKuK,aAAL,CAAmB,KAAK1Q,WAAxB,EAAqCwQ,QAArC,EAA+C,KAA/C,CAAb;AACA,QAAI1O,SAAS,GAAG,EAAhB;;AACA,QAAIqE,MAAJ,EAAY;AACR,WAAK,IAAI1X,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAGuD,MAAM,CAAC/X,MAA7B,EAAqCK,CAAC,GAAGmU,GAAzC,EAA8CnU,CAAC,EAA/C,EAAmD;AAC/C,YAAI8zB,EAAE,GAAG,IAAIjyB,WAAJ,CAAgB,KAAKoN,QAArB,CAAT;AACA,YAAIvC,EAAE,GAAGzK,QAAQ,CAAC,KAAK4I,MAAL,CAAY6B,EAAb,EAAiBgL,MAAM,CAAC1X,CAAD,CAAvB,CAAR,CAAoCiT,QAApC,EAAT;AACA,YAAI8B,IAAI,GAAG,EAAX;AACA,YAAIif,MAAM,GAAG,KAAK7kB,cAAL,GAAsBiC,UAAU,CAAC1E,EAAD,CAAhC,GAAuCA,EAApD;AACAqI,QAAAA,IAAI,CAAC,KAAKlK,MAAL,CAAY6B,EAAb,CAAJ,GAAuBsnB,MAAvB;AACA,YAAIxd,QAAQ,GAAGsd,EAAE,CAAC9yB,MAAH,CAAU,KAAK6J,MAAL,CAAY6B,EAAtB,EAA0BqI,IAA1B,CAAf;AACA1B,QAAAA,SAAS,CAAC3E,IAAV,CAAe8H,QAAQ,CAAC,CAAD,CAAvB;AACA,aAAKua,gBAAL,CAAsBrkB,EAAtB;AACH;AACJ;;AACD,WAAO2G,SAAP;AACH,GAhBD;;AAiBAxM,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB+0B,aAAnB,GAAmC,UAAUlc,KAAV,EAAiBtK,QAAjB,EAA2BymB,QAA3B,EAAqC;AACpE,SAAK,IAAIl0B,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAG4D,KAAK,CAACpY,MAA5B,EAAoCK,CAAC,GAAGmU,GAAxC,EAA6CnU,CAAC,EAA9C,EAAkD;AAC9C,UAAIuZ,KAAK,GAAG,KAAKpY,UAAL,CAAgB4W,KAAK,CAAC/X,CAAD,CAArB,CAAZ;;AACA,UAAI+B,KAAK,CAACwX,KAAD,CAAT,EAAkB;AACd;AACH;;AACD,UAAIjE,IAAI,GAAG7T,MAAM,CAAC,MAAMgM,QAAP,EAAiBhM,MAAM,CAAC,MAAMkC,QAAP,EAAiB4V,KAAjB,CAAvB,CAAjB;;AACA,UAAI,CAACxX,KAAK,CAACuT,IAAD,CAAV,EAAkB;AACd4e,QAAAA,QAAQ,GAAG,KAAKtX,YAAL,CAAkBrD,KAAlB,EAAyBjE,IAAzB,EAA+B,IAA/B,CAAH,GAA0C,KAAK6I,YAAL,CAAkB5E,KAAlB,EAAyBjE,IAAzB,EAA+B,IAA/B,CAAlD;AACH;AACJ;AACJ,GAXD;;AAYAzO,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBi1B,aAAnB,GAAmC,UAAUpc,KAAV,EAAiB8W,MAAjB,EAAyB3jB,KAAzB,EAAgCkpB,QAAhC,EAA0CC,OAA1C,EAAmD;AAClF,QAAItc,KAAK,CAACpY,MAAN,KAAiB,CAArB,EAAwB;AACpB;AACH;;AACD,QAAI6X,MAAM,GAAG,KAAK1F,aAAL,CAAmBiG,KAAnB,CAAb;AACA,QAAInG,KAAK,GAAGid,MAAM,GAAGzd,UAAU,CAACyd,MAAM,CAACja,YAAP,CAAoB,YAApB,CAAD,CAAV,GAAgD,CAAnD,GAAuD,CAAzE;;AACA,QAAIwf,QAAJ,EAAc;AACV,WAAKE,YAAL,CAAkB1iB,KAAlB;AACH;;AACD,QAAI0H,EAAE,GAAGhX,QAAQ,CAACiyB,sBAAT,CAAgC,KAAKtiB,aAArC,EAAoDuF,MAApD,EAA4D,KAAKxN,cAAjE,EAAiF4H,KAAjF,CAAT;AACA,QAAIke,MAAJ;;AACA,QAAI,CAACuE,OAAL,EAAc;AACVvE,MAAAA,MAAM,GAAGjB,MAAM,GAAG,KAAK0B,YAAL,CAAkB1B,MAAlB,CAAH,GAA+BptB,MAAM,CAAC,MAAM4B,UAAP,EAAmB,KAAK0D,OAAxB,CAApD;AACH,KAFD,MAGK;AACD+oB,MAAAA,MAAM,GAAGuE,OAAT;AACH;;AACD,QAAIG,OAAO,GAAG1E,MAAM,CAAC1b,UAAP,CAAkBlJ,KAAlB,CAAd;;AACA,SAAK,IAAIlL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsZ,EAAE,CAAC3Z,MAAvB,EAA+BK,CAAC,EAAhC,EAAoC;AAChC8vB,MAAAA,MAAM,CAACta,YAAP,CAAoB8D,EAAE,CAACtZ,CAAD,CAAtB,EAA2Bw0B,OAA3B;AACH;;AACD,QAAI9nB,EAAE,GAAG,KAAKuX,KAAL,CAAW4K,MAAX,CAAT;;AACA,QAAI,KAAKxd,QAAL,KAAkB,CAAtB,EAAyB;AACrB,WAAKqI,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6C6B,EAA7C,EAAiD,aAAjD,EAAgE,IAAhE;AACA,UAAIkkB,KAAK,GAAG,KAAK3M,KAAL,CAAWuQ,OAAX,CAAZ;AACA,UAAItP,GAAG,GAAGnjB,KAAK,CAAC6uB,KAAD,CAAL,GAAe,KAAK3hB,QAAL,CAActP,MAA7B,GAAsC,KAAKkxB,UAAL,CAAgB,KAAK5hB,QAArB,EAA+B,KAAKpE,MAApC,EAA4C+lB,KAA5C,CAAhD;;AACA,WAAK,IAAI/b,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkD,KAAK,CAACpY,MAA1B,EAAkCkV,CAAC,EAAnC,EAAuC;AACnC,YAAI,CAAC9S,KAAK,CAAC2K,EAAD,CAAV,EAAgB;AACZ,cAAIsnB,MAAM,GAAG,KAAK7kB,cAAL,GAAsBiC,UAAU,CAAC1E,EAAD,CAAhC,GAAuCA,EAApD;AACAxK,UAAAA,QAAQ,CAAC,KAAK2I,MAAL,CAAYqG,QAAb,EAAuB8iB,MAAvB,EAA+Bjc,KAAK,CAAClD,CAAD,CAApC,CAAR;AACH;;AACD,aAAK5F,QAAL,CAAciK,MAAd,CAAqBgM,GAArB,EAA0B,CAA1B,EAA6BnN,KAAK,CAAClD,CAAD,CAAlC;AACAqQ,QAAAA,GAAG;AACN;AACJ,KAZD,MAaK;AACD,WAAK8L,YAAL,CAAkB,KAAK/hB,QAAvB,EAAiC,KAAKpE,MAAtC,EAA8C6B,EAA9C,EAAkDqL,KAAlD,EAAyD7M,KAAzD;AACH;;AACD,SAAKqH,YAAL,CAAkBud,MAAlB;AACH,GAvCD;;AAwCAjpB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBo1B,YAAnB,GAAkC,UAAU1iB,KAAV,EAAiB;AAC/C,QAAI3B,MAAM,GAAI2B,KAAK,KAAK,CAAX,GAAgB,KAAK/G,MAArB,GAA8B,KAAKqW,cAAL,CAAoB,KAAKrW,MAAzB,EAAiC+G,KAAK,GAAG,CAAzC,EAA4C,CAA5C,CAA3C;AACA,SAAKhH,cAAL,CAAoBqF,MAApB;AACH,GAHD;;AAIApJ,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB0L,cAAnB,GAAoC,UAAUqF,MAAV,EAAkB;AAClD,QAAII,IAAI,GAAG,KAAKC,mBAAL,CAAyBL,MAAzB,CAAX;AACA,SAAKjG,cAAL,CAAoBa,MAApB,GAA6BwF,IAA7B;AACA,SAAKrG,cAAL,CAAoBa,MAApB,CAA2B4pB,GAA3B,GAAiCpkB,IAAI,CAACtR,cAAL,CAAoB,aAApB,IAAqCsR,IAAI,CAACqkB,WAA1C,GAAwD,aAAzF;AACH,GAJD;;AAKA7tB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB2xB,UAAnB,GAAgC,UAAU/O,GAAV,EAAe7R,MAAf,EAAuBvD,EAAvB,EAA2B;AACvD,QAAIwY,GAAG,GAAG,IAAV;;AACA,SAAK,IAAIllB,CAAC,GAAG,CAAR,EAAWkiB,MAAM,GAAGJ,GAAG,CAACniB,MAA7B,EAAqCK,CAAC,GAAGkiB,MAAzC,EAAiDliB,CAAC,EAAlD,EAAsD;AAClD,UAAI2U,MAAM,GAAG1S,QAAQ,CAACgO,MAAM,CAACvD,EAAR,EAAYoV,GAAG,CAAC9hB,CAAD,CAAf,CAArB;;AACA,UAAI8hB,GAAG,CAAC9hB,CAAD,CAAH,IAAU2U,MAAV,IAAoBA,MAAM,CAAC1B,QAAP,OAAsBvG,EAA9C,EAAkD;AAC9C,eAAO1M,CAAP;AACH,OAFD,MAGK,IAAI,OAAOiQ,MAAM,CAACqD,KAAd,KAAwB,QAAxB,IAAoC,CAACvR,KAAK,CAACE,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAewO,GAAG,CAAC9hB,CAAD,CAAlB,CAAT,CAA9C,EAAgF;AACjF,YAAI+U,IAAI,GAAG9S,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAewO,GAAG,CAAC9hB,CAAD,CAAlB,CAAnB;AACAklB,QAAAA,GAAG,GAAG,KAAK2L,UAAL,CAAgB9b,IAAhB,EAAsB,KAAK8M,cAAL,CAAoB5R,MAApB,CAAtB,EAAmDvD,EAAnD,CAAN;;AACA,YAAIwY,GAAG,KAAK,IAAZ,EAAkB;AACd;AACH;AACJ,OANI,MAOA,IAAI,KAAKra,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,IAAiD,CAACE,KAAK,CAACE,QAAQ,CAAC,OAAD,EAAU6f,GAAG,CAAC9hB,CAAD,CAAb,CAAT,CAA3D,EAAwF;AACzF,YAAIoX,KAAK,GAAGnV,QAAQ,CAAC,OAAD,EAAU6f,GAAG,CAAC9hB,CAAD,CAAb,CAApB;AACAklB,QAAAA,GAAG,GAAG,KAAK2L,UAAL,CAAgBzZ,KAAhB,EAAuB,KAAKyK,cAAL,CAAoB5R,MAApB,CAAvB,EAAoDvD,EAApD,CAAN;;AACA,YAAIwY,GAAG,KAAK,IAAZ,EAAkB;AACd;AACH;AACJ;AACJ;;AACD,WAAOA,GAAP;AACH,GAvBD;;AAwBAre,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB8xB,YAAnB,GAAkC,UAAUlP,GAAV,EAAe7R,MAAf,EAAuBvD,EAAvB,EAA2BqI,IAA3B,EAAiC7J,KAAjC,EAAwC;AACtE,QAAIypB,OAAJ;;AACA,QAAI5yB,KAAK,CAAC2K,EAAD,CAAT,EAAe;AACXxB,MAAAA,KAAK,GAAGnJ,KAAK,CAACmJ,KAAD,CAAL,GAAe4W,GAAG,CAACniB,MAAnB,GAA4BuL,KAApC;;AACA,WAAK,IAAIqM,CAAC,GAAG,CAAR,EAAWpD,GAAG,GAAGY,IAAI,CAACpV,MAA3B,EAAmC4X,CAAC,GAAGpD,GAAvC,EAA4CoD,CAAC,EAA7C,EAAiD;AAC7CuK,QAAAA,GAAG,CAAC5I,MAAJ,CAAWhO,KAAX,EAAkB,CAAlB,EAAqB6J,IAAI,CAACwC,CAAD,CAAzB;AACArM,QAAAA,KAAK;AACR;;AACD,aAAOypB,OAAP;AACH;;AACD,SAAK,IAAI30B,CAAC,GAAG,CAAR,EAAWkiB,MAAM,GAAGJ,GAAG,CAACniB,MAA7B,EAAqCK,CAAC,GAAGkiB,MAAzC,EAAiDliB,CAAC,EAAlD,EAAsD;AAClD,UAAI2U,MAAM,GAAG1S,QAAQ,CAACgO,MAAM,CAACvD,EAAR,EAAYoV,GAAG,CAAC9hB,CAAD,CAAf,CAArB;;AACA,UAAI8hB,GAAG,CAAC9hB,CAAD,CAAH,IAAU2U,MAAV,IAAoBA,MAAM,CAAC1B,QAAP,OAAsBvG,EAA9C,EAAkD;AAC9C,YAAK,OAAOuD,MAAM,CAACqD,KAAd,KAAwB,QAAxB,IAAqCwO,GAAG,CAAC9hB,CAAD,CAAH,CAAOjB,cAAP,CAAsBkR,MAAM,CAACqD,KAA7B,KAAuCwO,GAAG,CAAC9hB,CAAD,CAAH,CAAOiQ,MAAM,CAACqD,KAAd,MAAyB,IAAtG,IACE,KAAKzI,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAnC,IAAmDigB,GAAG,CAAC9hB,CAAD,CAAH,CAAOjB,cAAP,CAAsB,OAAtB,CADxD,EACyF;AACrF,cAAIQ,GAAG,GAAI,OAAO0Q,MAAM,CAACqD,KAAd,KAAwB,QAAzB,GAAqCrD,MAAM,CAACqD,KAA5C,GAAoD,OAA9D;AACA,cAAID,SAAS,GAAGpR,QAAQ,CAAC1C,GAAD,EAAMuiB,GAAG,CAAC9hB,CAAD,CAAT,CAAxB;;AACA,cAAI+B,KAAK,CAACsR,SAAD,CAAT,EAAsB;AAClBA,YAAAA,SAAS,GAAG,EAAZ;AACH;;AACDnI,UAAAA,KAAK,GAAGnJ,KAAK,CAACmJ,KAAD,CAAL,GAAemI,SAAS,CAAC1T,MAAzB,GAAkCuL,KAA1C;;AACA,eAAK,IAAIqM,CAAC,GAAG,CAAR,EAAWpD,GAAG,GAAGY,IAAI,CAACpV,MAA3B,EAAmC4X,CAAC,GAAGpD,GAAvC,EAA4CoD,CAAC,EAA7C,EAAiD;AAC7ClE,YAAAA,SAAS,CAAC6F,MAAV,CAAiBhO,KAAjB,EAAwB,CAAxB,EAA2B6J,IAAI,CAACwC,CAAD,CAA/B;AACArM,YAAAA,KAAK;AACR;AACJ,SAZD,MAaK;AACD,cAAI3L,GAAG,GAAI,OAAO0Q,MAAM,CAACqD,KAAd,KAAwB,QAAzB,GAAqCrD,MAAM,CAACqD,KAA5C,GAAoD,OAA9D;AACAwO,UAAAA,GAAG,CAAC9hB,CAAD,CAAH,CAAOT,GAAP,IAAcwV,IAAd;AACH;;AACD,eAAO,IAAP;AACH,OAnBD,MAoBK,IAAI,OAAO9E,MAAM,CAACqD,KAAd,KAAwB,QAAxB,IAAoC,CAACvR,KAAK,CAACE,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAewO,GAAG,CAAC9hB,CAAD,CAAlB,CAAT,CAA9C,EAAgF;AACjF,YAAI40B,QAAQ,GAAG3yB,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAewO,GAAG,CAAC9hB,CAAD,CAAlB,CAAvB;AACA20B,QAAAA,OAAO,GAAG,KAAK3D,YAAL,CAAkB4D,QAAlB,EAA4B,KAAK/S,cAAL,CAAoB5R,MAApB,CAA5B,EAAyDvD,EAAzD,EAA6DqI,IAA7D,EAAmE7J,KAAnE,CAAV;;AACA,YAAIypB,OAAO,KAAKlmB,SAAhB,EAA2B;AACvB;AACH;AACJ,OANI,MAOA,IAAK,KAAK5D,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAnC,IAAmD,CAACE,KAAK,CAACE,QAAQ,CAAC,OAAD,EAAU6f,GAAG,CAAC9hB,CAAD,CAAb,CAAT,CAA7D,EAA0F;AAC3F,YAAIqT,SAAS,GAAGpR,QAAQ,CAAC,OAAD,EAAU6f,GAAG,CAAC9hB,CAAD,CAAb,CAAxB;AACA20B,QAAAA,OAAO,GAAG,KAAK3D,YAAL,CAAkB3d,SAAlB,EAA6B,KAAKwO,cAAL,CAAoB5R,MAApB,CAA7B,EAA0DvD,EAA1D,EAA8DqI,IAA9D,EAAoE7J,KAApE,CAAV;;AACA,YAAIypB,OAAO,KAAKlmB,SAAhB,EAA2B;AACvB;AACH;AACJ;AACJ;;AACD,WAAOkmB,OAAP;AACH,GAhDD;;AAiDA9tB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBuiB,eAAnB,GAAqC,UAAU1J,KAAV,EAAiB;AAClD,QAAIxQ,UAAU,GAAG,KAAKstB,QAAL,CAAc9c,KAAd,CAAjB;AACA,QAAI+c,OAAO,GAAG,KAAKC,YAAL,CAAkBxtB,UAAlB,CAAd;AACA,SAAKD,QAAL,GAAgB,EAAhB;;AACA,SAAK,IAAItH,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAG2gB,OAAO,CAACn1B,MAA9B,EAAsCK,CAAC,GAAGmU,GAA1C,EAA+CnU,CAAC,EAAhD,EAAoD;AAChD,UAAI0M,EAAE,GAAGooB,OAAO,CAAC90B,CAAD,CAAP,CAAW,KAAK6K,MAAL,CAAY6B,EAAvB,EAA2BuG,QAA3B,EAAT;;AACA,UAAIvG,EAAE,IAAI,KAAKrF,WAAL,CAAiBsJ,OAAjB,CAAyBjE,EAAzB,MAAiC,CAAC,CAA5C,EAA+C;AAC3C,aAAKrF,WAAL,CAAiBqH,IAAjB,CAAsBhC,EAAtB;AACH;;AACD,UAAI6M,KAAK,GAAG,KAAKpY,UAAL,CAAgBuL,EAAhB,CAAZ;;AACA,UAAI6M,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAAC9M,YAAN,CAAmB,eAAnB,EAAoC,MAApC;AACArL,QAAAA,QAAQ,CAAC,CAACmY,KAAD,CAAD,EAAUxU,OAAV,CAAR;AACH;AACJ;AACJ,GAfD;;AAgBA8B,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB81B,cAAnB,GAAoC,UAAUjd,KAAV,EAAiB;AACjD,QAAIkd,QAAQ,GAAG,KAAKJ,QAAL,CAAc9c,KAAd,CAAf;;AACA,SAAK,IAAI/X,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAG8gB,QAAQ,CAACt1B,MAA/B,EAAuCK,CAAC,GAAGmU,GAA3C,EAAgDnU,CAAC,EAAjD,EAAqD;AACjD,UAAIuZ,KAAK,GAAG,KAAKpY,UAAL,CAAgB8zB,QAAQ,CAACj1B,CAAD,CAAxB,CAAZ;AACA,UAAI0M,EAAE,GAAGuoB,QAAQ,CAACj1B,CAAD,CAAjB;;AACA,UAAI0M,EAAE,IAAI,KAAKrF,WAAL,CAAiBsJ,OAAjB,CAAyBjE,EAAzB,MAAiC,CAAC,CAA5C,EAA+C;AAC3C,aAAKrF,WAAL,CAAiB6R,MAAjB,CAAwB,KAAK7R,WAAL,CAAiBsJ,OAAjB,CAAyBjE,EAAzB,CAAxB,EAAsD,CAAtD;AACH;;AACD,UAAI6M,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAACrL,eAAN,CAAsB,eAAtB;AACA7M,QAAAA,WAAW,CAAC,CAACkY,KAAD,CAAD,EAAUxU,OAAV,CAAX;AACH;AACJ;AACJ,GAbD;;AAcA8B,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB21B,QAAnB,GAA8B,UAAU9c,KAAV,EAAiB;AAC3C,QAAI+c,OAAO,GAAG,EAAd;;AACA,SAAK,IAAI90B,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAG4D,KAAK,CAACpY,MAA5B,EAAoCK,CAAC,GAAGmU,GAAxC,EAA6CnU,CAAC,EAA9C,EAAkD;AAC9C,UAAI0M,EAAE,GAAG,KAAK,CAAd;;AACA,UAAI,OAAOqL,KAAK,CAAC/X,CAAD,CAAZ,IAAmB,QAAvB,EAAiC;AAC7B0M,QAAAA,EAAE,GAAIqL,KAAK,CAAC/X,CAAD,CAAN,GAAa+X,KAAK,CAAC/X,CAAD,CAAL,CAASiT,QAAT,EAAb,GAAmC,IAAxC;AACH,OAFD,MAGK,IAAI,OAAO8E,KAAK,CAAC/X,CAAD,CAAZ,KAAoB,QAAxB,EAAkC;AACnC0M,QAAAA,EAAE,GAAGqL,KAAK,CAAC/X,CAAD,CAAL,GAAW+X,KAAK,CAAC/X,CAAD,CAAL,CAAS4U,YAAT,CAAsB,UAAtB,EAAkC3B,QAAlC,EAAX,GAA0D,IAA/D;AACH;;AACD,UAAI6hB,OAAO,CAACnkB,OAAR,CAAgBjE,EAAhB,KAAuB,CAAC,CAA5B,EAA+B;AAC3BooB,QAAAA,OAAO,CAACpmB,IAAR,CAAahC,EAAb;AACH;AACJ;;AACD,WAAOooB,OAAP;AACH,GAfD;;AAgBAjuB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB61B,YAAnB,GAAkC,UAAUrgB,IAAV,EAAgB;AAC9C,QAAI1N,KAAK,GAAG,IAAZ;;AACA,QAAI,KAAKqK,QAAL,KAAkB,CAAtB,EAAyB;AACrB,WAAK/J,QAAL,GAAgB,KAAK2H,QAAL,CAAcimB,MAAd,CAAqB,UAAUngB,IAAV,EAAgB;AACjD,eAAOL,IAAI,CAAC/D,OAAL,CAAaoE,IAAI,CAAC/N,KAAK,CAAC6D,MAAN,CAAa6B,EAAd,CAAJ,GAAwBqI,IAAI,CAAC/N,KAAK,CAAC6D,MAAN,CAAa6B,EAAd,CAAJ,CAAsBuG,QAAtB,EAAxB,GAA2D,IAAxE,MAAkF,CAAC,CAA1F;AACH,OAFe,CAAhB;AAGH,KAJD,MAKK,IAAI,KAAK5B,QAAL,KAAkB,CAAtB,EAAyB;AAC1B,WAAK,IAAIkG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKtI,QAAL,CAActP,MAAlC,EAA0C4X,CAAC,EAA3C,EAA+C;AAC3C,YAAI7K,EAAE,GAAG,KAAKuC,QAAL,CAAcsI,CAAd,EAAiB,KAAK1M,MAAL,CAAY6B,EAA7B,IAAmC,KAAKuC,QAAL,CAAcsI,CAAd,EAAiB,KAAK1M,MAAL,CAAY6B,EAA7B,EAAiCuG,QAAjC,EAAnC,GAAiF,IAA1F;;AACA,YAAIyB,IAAI,CAAC/D,OAAL,CAAajE,EAAb,MAAqB,CAAC,CAA1B,EAA6B;AACzB,eAAKpF,QAAL,CAAcoH,IAAd,CAAmB,KAAKO,QAAL,CAAcsI,CAAd,CAAnB;AACH;;AACD,YAAIxD,UAAU,GAAG9R,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAZ,CAAkBL,QAAlB,EAAD,EAA+B,KAAKhE,QAAL,CAAcsI,CAAd,CAA/B,CAAzB;;AACA,YAAIxD,UAAJ,EAAgB;AACZ,eAAKohB,iBAAL,CAAuBphB,UAAvB,EAAmCW,IAAnC;AACH;AACJ;AACJ;;AACD,WAAO,KAAKpN,QAAZ;AACH,GApBD;;AAqBAT,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBi2B,iBAAnB,GAAuC,UAAUlmB,QAAV,EAAoB8I,KAApB,EAA2B;AAC9D,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtI,QAAQ,CAACtP,MAA7B,EAAqC4X,CAAC,EAAtC,EAA0C;AACtC,UAAI7K,EAAE,GAAGuC,QAAQ,CAACsI,CAAD,CAAR,CAAY,KAAK1M,MAAL,CAAY6B,EAAxB,IAA8BuC,QAAQ,CAACsI,CAAD,CAAR,CAAY,KAAK1M,MAAL,CAAY6B,EAAxB,EAA4BuG,QAA5B,EAA9B,GAAuE,IAAhF;;AACA,UAAI8E,KAAK,CAACpH,OAAN,CAAcjE,EAAd,MAAsB,CAAC,CAA3B,EAA8B;AAC1B,aAAKpF,QAAL,CAAcoH,IAAd,CAAmBO,QAAQ,CAACsI,CAAD,CAA3B;AACH;;AACD,UAAIxD,UAAU,GAAG9R,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAZ,CAAkBL,QAAlB,EAAD,EAA+BhE,QAAQ,CAACsI,CAAD,CAAvC,CAAzB;;AACA,UAAIxD,UAAJ,EAAgB;AACZ,aAAKohB,iBAAL,CAAuBphB,UAAvB,EAAmCgE,KAAnC;AACH;AACJ;AACJ,GAXD;;AAYAlR,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBiM,aAAnB,GAAmC,YAAY;AAC3C,QAAI8N,GAAG,GAAG3X,OAAO,CAAC,KAAKyF,OAAN,EAAe,MAAMrB,MAArB,CAAjB;AACA,SAAK2P,UAAL,GAAkBtT,KAAK,CAACkX,GAAD,CAAL,GAAa,EAAb,GAAkBtT,KAApC;AACH,GAHD;;AAIAkB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBk2B,iBAAnB,GAAuC,YAAY;AAC/C,SAAKC,WAAL,CAAiB,KAAKpmB,QAAtB,EAAgC,KAAKpE,MAArC,EAA6C,CAAC,UAAD,EAAa,UAAb,CAA7C;AACA,QAAIyqB,QAAQ,GAAG,KAAKlqB,aAApB;;AACA,SAAK,IAAImqB,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGF,QAAQ,CAAC31B,MAAlC,EAA0C41B,CAAC,GAAGC,MAA9C,EAAsDD,CAAC,EAAvD,EAA2D;AACvD,WAAK7b,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6CyqB,QAAQ,CAACC,CAAD,CAArD,EAA0D,UAA1D,EAAsE,IAAtE;AACH;;AACD,QAAIE,MAAM,GAAG,KAAKlqB,aAAlB;;AACA,SAAK,IAAIgM,CAAC,GAAG,CAAR,EAAWme,OAAO,GAAGD,MAAM,CAAC91B,MAAjC,EAAyC4X,CAAC,GAAGme,OAA7C,EAAsDne,CAAC,EAAvD,EAA2D;AACvD,WAAKmC,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6C4qB,MAAM,CAACle,CAAD,CAAnD,EAAwD,UAAxD,EAAoE,IAApE;AACH;;AACD,QAAI,KAAK5E,YAAT,EAAuB;AACnB,WAAK0iB,WAAL,CAAiB,KAAKpmB,QAAtB,EAAgC,KAAKpE,MAArC,EAA6C,CAAC,WAAD,CAA7C;AACA,UAAI8qB,MAAM,GAAG,KAAKrqB,YAAlB;;AACA,WAAK,IAAIsqB,CAAC,GAAG,CAAR,EAAWF,OAAO,GAAGC,MAAM,CAACh2B,MAAjC,EAAyCi2B,CAAC,GAAGF,OAA7C,EAAsDE,CAAC,EAAvD,EAA2D;AACvD,aAAKlc,WAAL,CAAiB,KAAKzK,QAAtB,EAAgC,KAAKpE,MAArC,EAA6C8qB,MAAM,CAACC,CAAD,CAAnD,EAAwD,WAAxD,EAAqE,IAArE;AACH;AACJ;AACJ,GAjBD;;AAkBA/uB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBm2B,WAAnB,GAAiC,UAAUvT,GAAV,EAAe7R,MAAf,EAAuB4lB,KAAvB,EAA8B;AAC3D,QAAI9zB,KAAK,CAAC+f,GAAD,CAAL,IAAc/f,KAAK,CAACkO,MAAD,CAAvB,EAAiC;AAC7B;AACH;;AACD,SAAK,IAAIjQ,CAAC,GAAG,CAAR,EAAWkiB,MAAM,GAAGJ,GAAG,CAACniB,MAA7B,EAAqCK,CAAC,GAAGkiB,MAAzC,EAAiDliB,CAAC,EAAlD,EAAsD;AAClD,WAAK,IAAI6U,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGghB,KAAK,CAACl2B,MAA1B,EAAkCkV,CAAC,EAAnC,EAAuC;AACnC,YAAIihB,KAAK,GAAG,KAAKC,aAAL,CAAmB9lB,MAAnB,EAA2B4lB,KAAK,CAAChhB,CAAD,CAAhC,CAAZ;;AACA,YAAI,CAAC9S,KAAK,CAAC+f,GAAG,CAAC9hB,CAAD,CAAH,CAAO81B,KAAP,CAAD,CAAV,EAA2B;AACvB,iBAAOhU,GAAG,CAAC9hB,CAAD,CAAH,CAAO81B,KAAP,CAAP;AACH;AACJ;;AACD,UAAI,OAAO7lB,MAAM,CAACqD,KAAd,KAAwB,QAAxB,IAAoC,CAACvR,KAAK,CAACE,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAewO,GAAG,CAAC9hB,CAAD,CAAlB,CAAT,CAA9C,EAAgF;AAC5E,aAAKq1B,WAAL,CAAiBpzB,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAewO,GAAG,CAAC9hB,CAAD,CAAlB,CAAzB,EAAiD,KAAK6hB,cAAL,CAAoB5R,MAApB,CAAjD,EAA8E4lB,KAA9E;AACH,OAFD,MAGK,IAAI,KAAKhrB,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,IAAiD,CAACE,KAAK,CAACE,QAAQ,CAAC,OAAD,EAAU6f,GAAG,CAAC9hB,CAAD,CAAb,CAAT,CAA3D,EAAwF;AACzF,aAAKq1B,WAAL,CAAiBpzB,QAAQ,CAAC,OAAD,EAAU6f,GAAG,CAAC9hB,CAAD,CAAb,CAAzB,EAA4C,KAAK6hB,cAAL,CAAoB5R,MAApB,CAA5C,EAAyE4lB,KAAzE;AACH;AACJ;AACJ,GAlBD;;AAmBAhvB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB62B,aAAnB,GAAmC,UAAU9lB,MAAV,EAAkB+lB,SAAlB,EAA6B;AAC5D,YAAQA,SAAR;AACI,WAAK,UAAL;AACI,eAAO,CAACj0B,KAAK,CAACkO,MAAM,CAACiG,QAAR,CAAN,GAA0BjG,MAAM,CAACiG,QAAjC,GAA4C,UAAnD;;AACJ,WAAK,UAAL;AACI,eAAO,CAACnU,KAAK,CAACkO,MAAM,CAACkG,QAAR,CAAN,GAA0BlG,MAAM,CAACkG,QAAjC,GAA4C,UAAnD;;AACJ,WAAK,WAAL;AACI,eAAO,CAACpU,KAAK,CAACkO,MAAM,CAAC8C,SAAR,CAAN,GAA2B9C,MAAM,CAAC8C,SAAlC,GAA8C,WAArD;;AACJ,WAAK,aAAL;AACI,eAAO,CAAChR,KAAK,CAACkO,MAAM,CAACkD,WAAR,CAAN,GAA6BlD,MAAM,CAACkD,WAApC,GAAkD,aAAzD;;AACJ;AACI,eAAO6iB,SAAP;AAVR;AAYH,GAbD;;AAcAnvB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBwa,WAAnB,GAAiC,UAAUoI,GAAV,EAAe7R,MAAf,EAAuBvD,EAAvB,EAA2BnN,GAA3B,EAAgC2Q,KAAhC,EAAuC;AACpE,QAAIkE,UAAJ;;AACA,QAAIrS,KAAK,CAAC2K,EAAD,CAAT,EAAe;AACX;AACH,KAFD,MAGK,IAAI,KAAK2E,QAAL,KAAkB,CAAtB,EAAyB;AAC1B,UAAI0iB,KAAK,GAAG,KAAK5kB,cAAL,GAAsBiC,UAAU,CAAC1E,EAAD,CAAhC,GAAuCA,EAAnD;AACA,UAAImG,UAAU,GAAG,IAAIhR,WAAJ,CAAgB,KAAKoN,QAArB,EAA+B6D,YAA/B,CAA4C,IAAIhR,KAAJ,GAAYqP,KAAZ,CAAkBlB,MAAM,CAACvD,EAAzB,EAA6B,OAA7B,EAAsCqnB,KAAtC,EAA6C,KAA7C,CAA5C,CAAjB;AACA7xB,MAAAA,QAAQ,CAAC,KAAK6zB,aAAL,CAAmB9lB,MAAnB,EAA2B1Q,GAA3B,CAAD,EAAkC2Q,KAAlC,EAAyC2C,UAAU,CAAC,CAAD,CAAnD,CAAR;AACH,KAJI,MAKA;AACD,WAAK8d,gBAAL,CAAsB7O,GAAtB,EAA2B7R,MAA3B,EAAmCvD,EAAnC,EAAuCnN,GAAvC,EAA4C2Q,KAA5C;AACH;AACJ,GAbD;;AAcArJ,EAAAA,QAAQ,CAAC3H,SAAT,CAAmByxB,gBAAnB,GAAsC,UAAU7O,GAAV,EAAe7R,MAAf,EAAuBvD,EAAvB,EAA2BnN,GAA3B,EAAgC2Q,KAAhC,EAAuClP,MAAvC,EAA+C;AACjF,QAAI0vB,WAAJ;;AACA,QAAI3uB,KAAK,CAAC+f,GAAD,CAAT,EAAgB;AACZ,aAAO4O,WAAP;AACH;;AACD,SAAK,IAAI1wB,CAAC,GAAG,CAAR,EAAWkiB,MAAM,GAAGJ,GAAG,CAACniB,MAA7B,EAAqCK,CAAC,GAAGkiB,MAAzC,EAAiDliB,CAAC,EAAlD,EAAsD;AAClD,UAAI2U,MAAM,GAAG1S,QAAQ,CAACgO,MAAM,CAACvD,EAAR,EAAYoV,GAAG,CAAC9hB,CAAD,CAAf,CAArB;;AACA,UAAI8hB,GAAG,CAAC9hB,CAAD,CAAH,IAAU2U,MAAV,IAAoBA,MAAM,CAAC1B,QAAP,OAAsBvG,EAA9C,EAAkD;AAC9C,YAAI1L,MAAJ,EAAY;AACR0vB,UAAAA,WAAW,GAAG5O,GAAG,CAAC5I,MAAJ,CAAWlZ,CAAX,EAAc,CAAd,CAAd;AACH,SAFD,MAGK;AACDkC,UAAAA,QAAQ,CAAC,KAAK6zB,aAAL,CAAmB9lB,MAAnB,EAA2B1Q,GAA3B,CAAD,EAAkC2Q,KAAlC,EAAyC4R,GAAG,CAAC9hB,CAAD,CAA5C,CAAR;AACA0wB,UAAAA,WAAW,GAAG,EAAd;AACH;;AACD,eAAOA,WAAP;AACH,OATD,MAUK,IAAI,OAAOzgB,MAAM,CAACqD,KAAd,KAAwB,QAAxB,IAAoC,CAACvR,KAAK,CAACE,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAewO,GAAG,CAAC9hB,CAAD,CAAlB,CAAT,CAA9C,EAAgF;AACjF,YAAIqT,SAAS,GAAGpR,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAewO,GAAG,CAAC9hB,CAAD,CAAlB,CAAxB;AACA0wB,QAAAA,WAAW,GAAG,KAAKC,gBAAL,CAAsBtd,SAAtB,EAAiC,KAAKwO,cAAL,CAAoB5R,MAApB,CAAjC,EAA8DvD,EAA9D,EAAkEnN,GAAlE,EAAuE2Q,KAAvE,EAA8ElP,MAA9E,CAAd;;AACA,YAAI0vB,WAAW,KAAKjiB,SAApB,EAA+B;AAC3B;AACH;AACJ,OANI,MAOA,IAAI,KAAK5D,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,IAAiD,CAACE,KAAK,CAACE,QAAQ,CAAC,OAAD,EAAU6f,GAAG,CAAC9hB,CAAD,CAAb,CAAT,CAA3D,EAAwF;AACzF,YAAI+T,UAAU,GAAG9R,QAAQ,CAAC,OAAD,EAAU6f,GAAG,CAAC9hB,CAAD,CAAb,CAAzB;AACA0wB,QAAAA,WAAW,GAAG,KAAKC,gBAAL,CAAsB5c,UAAtB,EAAkC,KAAK8N,cAAL,CAAoB5R,MAApB,CAAlC,EAA+DvD,EAA/D,EAAmEnN,GAAnE,EAAwE2Q,KAAxE,EAA+ElP,MAA/E,CAAd;;AACA,YAAI0vB,WAAW,KAAKjiB,SAApB,EAA+B;AAC3B;AACH;AACJ;AACJ;;AACD,WAAOiiB,WAAP;AACH,GAjCD;;AAkCA7pB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBssB,YAAnB,GAAkC,YAAY;AAC1C,SAAK1P,oBAAL;AACA,QAAIvF,SAAS,GAAG;AAAExB,MAAAA,IAAI,EAAE,KAAK9F;AAAb,KAAhB;AACA,SAAKQ,OAAL,CAAa,mBAAb,EAAkC8G,SAAlC;AACH,GAJD;;AAKA1P,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4rB,eAAnB,GAAqC,UAAU1G,MAAV,EAAkB;AACnDxjB,IAAAA,YAAY,CAACyM,GAAb,CAAiB+W,MAAjB,EAAyB,MAAzB,EAAiC,KAAK6G,aAAtC,EAAqD,IAArD;AACH,GAFD;;AAGApkB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBiN,iBAAnB,GAAuC,UAAU0f,MAAV,EAAkB;AACrD,QAAI7kB,KAAK,GAAG,IAAZ;;AACA,QAAI6kB,MAAM,IAAI,CAAC,KAAK5f,QAApB,EAA8B;AAC1B,UAAIgqB,OAAO,GAAG,IAAd;AACA,WAAKC,YAAL,GAAoB,IAAIl0B,KAAJ,CAAU,KAAK+E,OAAf,EAAwB;AACxCovB,QAAAA,GAAG,EAAE,UAAU5rB,CAAV,EAAa;AACd,cAAIvD,KAAK,CAACovB,cAAN,CAAqB7rB,CAArB,KAA2BA,CAAC,CAAC8rB,QAAF,KAAe,CAA9C,EAAiD;AAC7C9rB,YAAAA,CAAC,CAACkT,aAAF,CAAgB+G,cAAhB;AACAyR,YAAAA,OAAO,CAACpM,cAAR,CAAuBtf,CAAC,CAACkT,aAAzB;AACH;AACJ;AANuC,OAAxB,CAApB;AAQH,KAVD,MAWK;AACD,UAAI,KAAKyY,YAAT,EAAuB;AACnB,aAAKA,YAAL,CAAkB1E,OAAlB;AACH;AACJ;AACJ,GAlBD;;AAmBA3qB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBo3B,cAAnB,GAAoC,UAAUzK,MAAV,EAAkB;AAClD,QAAIA,MAAJ,EAAY;AACR,UAAI0K,OAAO,GAAG,IAAd;AACA,WAAKC,aAAL,GAAqB,IAAIx0B,KAAJ,CAAU,KAAK+E,OAAf,EAAwB;AACzCovB,QAAAA,GAAG,EAAE,UAAU5rB,CAAV,EAAa;AACdgsB,UAAAA,OAAO,CAAChZ,YAAR,CAAqBhT,CAArB;AACH;AAHwC,OAAxB,CAArB;AAKH,KAPD,MAQK;AACD,UAAI,KAAKisB,aAAT,EAAwB;AACpB,aAAKA,aAAL,CAAmBhF,OAAnB;AACH;AACJ;AACJ,GAdD;;AAeA3qB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBu3B,iBAAnB,GAAuC,UAAU5K,MAAV,EAAkB;AACrD,QAAI7kB,KAAK,GAAG,IAAZ;;AACA,QAAI6kB,MAAJ,EAAY;AACR,UAAI6K,OAAO,GAAG,IAAd;AACA,WAAKC,cAAL,GAAsB,IAAI30B,KAAJ,CAAU,KAAK+E,OAAf,EAAwB;AAC1CovB,QAAAA,GAAG,EAAE,UAAU5rB,CAAV,EAAa;AACd,cAAI,CAACvD,KAAK,CAACyc,YAAN,KAAuB,OAAvB,IAAmCzc,KAAK,CAACyc,YAAN,KAAuB,UAAvB,IAAqCzc,KAAK,CAACovB,cAAN,CAAqB7rB,CAArB,CAArC,IAAgEA,CAAC,CAAC8rB,QAAF,KAAe,CAAnH,KACG9rB,CAAC,CAACkT,aAAF,CAAgBE,KAAhB,KAA0B,CADjC,EACoC;AAChC+Y,YAAAA,OAAO,CAAC9S,aAAR,CAAsBrZ,CAAtB;AACH;AACJ;AANyC,OAAxB,CAAtB;AAQH,KAVD,MAWK;AACD,UAAI,KAAKosB,cAAT,EAAyB;AACrB,aAAKA,cAAL,CAAoBnF,OAApB;AACH;AACJ;AACJ,GAlBD;;AAmBA3qB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB03B,gBAAnB,GAAsC,UAAUrsB,CAAV,EAAa;AAC/C,SAAK1C,eAAL,GAAuB,IAAvB;;AACA,QAAI0C,CAAC,CAACqY,QAAF,IAAcrY,CAAC,CAAC+X,OAApB,EAA6B;AACzB/X,MAAAA,CAAC,CAACia,cAAF;AACH;;AACD,QAAIja,CAAC,CAAC+X,OAAF,IAAa,KAAKvM,mBAAtB,EAA2C;AACvCnV,MAAAA,YAAY,CAACyM,GAAb,CAAiB,KAAKtG,OAAtB,EAA+B,aAA/B,EAA8C,KAAK2W,kBAAnD,EAAuE,IAAvE;AACH;AACJ,GARD;;AASA;;AACA7W,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBwe,kBAAnB,GAAwC,UAAUnT,CAAV,EAAa;AACjDA,IAAAA,CAAC,CAACia,cAAF;AACH,GAFD;;AAGA3d,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqN,UAAnB,GAAgC,YAAY;AACxC3L,IAAAA,YAAY,CAACyM,GAAb,CAAiB,KAAKtG,OAAtB,EAA+B,WAA/B,EAA4C,KAAK6vB,gBAAjD,EAAmE,IAAnE;AACA,SAAKN,cAAL,CAAoB,IAApB;;AACA,QAAI,KAAK7S,YAAL,KAAsB,MAA1B,EAAkC;AAC9B,WAAKgT,iBAAL,CAAuB,IAAvB;AACH;;AACD71B,IAAAA,YAAY,CAACyM,GAAb,CAAiB,KAAKtG,OAAtB,EAA+B,OAA/B,EAAwC,KAAKshB,OAA7C,EAAsD,IAAtD;AACAznB,IAAAA,YAAY,CAACyM,GAAb,CAAiB,KAAKtG,OAAtB,EAA+B,MAA/B,EAAuC,KAAKuhB,QAA5C,EAAsD,IAAtD;AACA1nB,IAAAA,YAAY,CAACyM,GAAb,CAAiB,KAAKtG,OAAtB,EAA+B,WAA/B,EAA4C,KAAKwhB,WAAjD,EAA8D,IAA9D;AACA3nB,IAAAA,YAAY,CAACyM,GAAb,CAAiB,KAAKtG,OAAtB,EAA+B,UAA/B,EAA2C,KAAK2hB,YAAhD,EAA8D,IAA9D;AACA,SAAKmO,cAAL,GAAsB,IAAIh2B,cAAJ,CAAmB,KAAKkG,OAAxB,EAAiC;AACnD+vB,MAAAA,SAAS,EAAE,KAAK3S,gBAAL,CAAsB4S,IAAtB,CAA2B,IAA3B,CADwC;AAEnD1uB,MAAAA,UAAU,EAAE,KAAKA,UAFkC;AAGnD2uB,MAAAA,SAAS,EAAE;AAHwC,KAAjC,CAAtB;AAKH,GAfD;;AAgBAnwB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB+3B,YAAnB,GAAkC,YAAY;AAC1Cr2B,IAAAA,YAAY,CAACI,MAAb,CAAoB,KAAK+F,OAAzB,EAAkC,WAAlC,EAA+C,KAAK6vB,gBAApD;AACA,SAAKN,cAAL,CAAoB,KAApB;AACA,SAAKG,iBAAL,CAAuB,KAAvB;AACA71B,IAAAA,YAAY,CAACI,MAAb,CAAoB,KAAK+F,OAAzB,EAAkC,OAAlC,EAA2C,KAAKshB,OAAhD;AACAznB,IAAAA,YAAY,CAACI,MAAb,CAAoB,KAAK+F,OAAzB,EAAkC,MAAlC,EAA0C,KAAKuhB,QAA/C;AACA1nB,IAAAA,YAAY,CAACI,MAAb,CAAoB,KAAK+F,OAAzB,EAAkC,WAAlC,EAA+C,KAAKwhB,WAApD;AACA3nB,IAAAA,YAAY,CAACI,MAAb,CAAoB,KAAK+F,OAAzB,EAAkC,UAAlC,EAA8C,KAAK2hB,YAAnD;;AACA,QAAI,CAAC,KAAKzc,QAAV,EAAoB;AAChB,WAAK4qB,cAAL,CAAoBrF,OAApB;AACH;AACJ,GAXD;;AAYA3qB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB8hB,OAAnB,GAA6B,UAAUja,OAAV,EAAmB0G,QAAnB,EAA6B;AACtD,QAAIypB,OAAO,GAAG,EAAd;AACA,QAAIC,EAAE,GAAGpwB,OAAO,CAACgiB,UAAjB;;AACA,WAAO,CAAChnB,KAAK,CAACo1B,EAAD,CAAb,EAAmB;AACf,UAAI51B,OAAO,CAAC41B,EAAD,EAAK1pB,QAAL,CAAX,EAA2B;AACvBypB,QAAAA,OAAO,CAACxoB,IAAR,CAAayoB,EAAb;AACH;;AACDA,MAAAA,EAAE,GAAGA,EAAE,CAACpO,UAAR;AACH;;AACD,WAAOmO,OAAP;AACH,GAVD;;AAWArwB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBk3B,cAAnB,GAAoC,UAAU7rB,CAAV,EAAa;AAC7C,QAAIjL,MAAM,GAAGiL,CAAC,CAACkT,aAAF,CAAgBne,MAA7B;AACA,QAAI83B,SAAJ;;AACA,QAAI93B,MAAM,IAAIiL,CAAC,CAAC8rB,QAAhB,EAA0B;AACtB,UAAI9rB,CAAC,CAAC8rB,QAAF,KAAe,CAAnB,EAAsB;AAClB,aAAKgB,QAAL,GAAgB/1B,OAAO,CAAChC,MAAD,EAAS,MAAM2D,QAAf,CAAvB;AACH,OAFD,MAGK,IAAIsH,CAAC,CAAC8rB,QAAF,KAAe,CAAnB,EAAsB;AACvBe,QAAAA,SAAS,GAAG91B,OAAO,CAAChC,MAAD,EAAS,MAAM2D,QAAf,CAAnB;AACH;AACJ;;AACD,WAAQ,KAAKo0B,QAAL,KAAkBD,SAA1B;AACH,GAZD;;AAaAvwB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB4vB,YAAnB,GAAkC,UAAUtU,MAAV,EAAkBlH,KAAlB,EAAyB;AACvD,QAAIoB,IAAI,GAAGpB,KAAK,CAACyV,UAAjB;;AACA,WAAO,CAAChnB,KAAK,CAAC2S,IAAD,CAAb,EAAqB;AACjB,UAAIA,IAAI,KAAK8F,MAAb,EAAqB;AACjB,eAAO,IAAP;AACH;;AACD9F,MAAAA,IAAI,GAAGA,IAAI,CAACqU,UAAZ;AACH;;AACD,WAAO,KAAP;AACH,GATD;;AAUAliB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmByD,WAAnB,GAAiC,UAAUoE,OAAV,EAAmB;AAChD3F,IAAAA,QAAQ,CAAC,CAAC2F,OAAD,CAAD,EAAYvD,IAAZ,CAAR;AACAd,IAAAA,aAAa,CAAC;AACVpD,MAAAA,MAAM,EAAEyH,OADE;AAEVuwB,MAAAA,KAAK,EAAEl3B,OAAO,CAACujB,QAAR,GAAmB,EAAnB,GAAwB;AAFrB,KAAD,EAGV,KAAK1R,aAHK,CAAb;AAIAtP,IAAAA,WAAW,CAACoE,OAAD,CAAX;AACH,GAPD;;AAQAF,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB0D,WAAnB,GAAiC,UAAUmE,OAAV,EAAmB;AAChDnE,IAAAA,WAAW,CAACmE,OAAD,CAAX;AACAA,IAAAA,OAAO,CAACwH,SAAR,GAAoB,EAApB;AACAlN,IAAAA,WAAW,CAAC,CAAC0F,OAAD,CAAD,EAAYvD,IAAZ,CAAX;AACH,GAJD;;AAKAqD,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBq4B,eAAnB,GAAqC,UAAUxf,KAAV,EAAiB;AAClDA,IAAAA,KAAK,GAAGjI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe+H,KAAf,CAAX,CAAR;AACA,SAAKyf,UAAL,CAAgB,KAAKlsB,YAArB;AACA,SAAKmsB,gBAAL,CAAsB1f,KAAtB;;AACA,QAAIA,KAAK,CAACpY,MAAN,GAAe,CAAnB,EAAsB;AAClB,WAAK+3B,QAAL,CAAc3f,KAAd;AACH;AACJ,GAPD;AAQA;AACJ;AACA;;;AACIlR,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBsa,mBAAnB,GAAyC,UAAU9E,IAAV,EAAgB;AACrD,QAAI,KAAKrD,QAAL,KAAkB,CAAtB,EAAyB;AACrB,UAAIpB,MAAM,GAAG,KAAKpF,MAAlB;AACA,UAAIgI,UAAU,GAAG,IAAIhR,WAAJ,CAAgB,KAAKoN,QAArB,EAA+B6D,YAA/B,CAA4C,IAAIhR,KAAJ,GAAYqP,KAAZ,CAAkBlB,MAAM,CAACvD,EAAzB,EAA6B,OAA7B,EAAsCgI,IAAtC,EAA4C,IAA5C,CAA5C,CAAjB;;AACA,UAAI7B,UAAU,CAAC,CAAD,CAAd,EAAmB;AACf,aAAK8kB,kBAAL,CAAwB9kB,UAAxB,EAAoC6B,IAApC,EAA0C7B,UAAU,CAAC,CAAD,CAApD;;AACA,YAAI,KAAKH,SAAT,EAAoB;AAChB,cAAIklB,QAAQ,GAAG/kB,UAAU,CAAC,CAAD,CAAV,CAAc,KAAKhI,MAAL,CAAYqG,QAA1B,IAAsC2B,UAAU,CAAC,CAAD,CAAV,CAAc,KAAKhI,MAAL,CAAYqG,QAA1B,EAAoC+B,QAApC,EAAtC,GAAuF,IAAtG;AACA,cAAImB,UAAU,GAAG,KAAK1C,aAAL,CAAmB,KAAKzC,QAAxB,EAAkC2oB,QAAlC,CAAjB;AACA,cAAI1jB,KAAK,GAAG,CAAZ;;AACA,eAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGC,UAAU,CAACzU,MAAnC,EAA2CwU,GAAG,EAA9C,EAAkD;AAC9C,gBAAIZ,OAAO,GAAGa,UAAU,CAACD,GAAD,CAAV,CAAgB,KAAKtJ,MAAL,CAAY6B,EAA5B,EAAgCuG,QAAhC,EAAd;;AACA,gBAAI,KAAK3H,YAAL,CAAkBqF,OAAlB,CAA0B4C,OAA1B,MAAuC,CAAC,CAA5C,EAA+C;AAC3CW,cAAAA,KAAK;AACR;AACJ;;AACD,cAAIA,KAAK,KAAKE,UAAU,CAACzU,MAArB,IAA+B,KAAK2L,YAAL,CAAkBqF,OAAlB,CAA0BinB,QAA1B,MAAwC,CAAC,CAAxE,IAA6EA,QAAjF,EAA2F;AACvF,iBAAKtsB,YAAL,CAAkBoD,IAAlB,CAAuBkpB,QAAvB;AACH;AACJ;AACJ;AACJ,KApBD,MAqBK,IAAI,KAAKvmB,QAAL,KAAkB,CAAtB,EAAyB;AAC1B,WAAK,IAAIwmB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK5oB,QAAL,CAActP,MAAlC,EAA0Ck4B,CAAC,EAA3C,EAA+C;AAC3C,YAAI3sB,KAAK,GAAG,KAAK+D,QAAL,CAAc4oB,CAAd,EAAiB,KAAKhtB,MAAL,CAAY6B,EAA7B,IAAmC,KAAKuC,QAAL,CAAc4oB,CAAd,EAAiB,KAAKhtB,MAAL,CAAY6B,EAA7B,EAAiCuG,QAAjC,EAAnC,GAAiF,EAA7F;;AACA,YAAI/H,KAAK,KAAKwJ,IAAV,IAAkB,KAAKpJ,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAA3D,EAA8D;AAC1D,eAAKpJ,YAAL,CAAkBoD,IAAlB,CAAuBgG,IAAvB;AACA;AACH;;AACD,YAAIX,UAAU,GAAG9R,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAZ,CAAkBL,QAAlB,EAAD,EAA+B,KAAKhE,QAAL,CAAc4oB,CAAd,CAA/B,CAAzB;;AACA,YAAI9jB,UAAJ,EAAgB;AACZ,eAAK4jB,kBAAL,CAAwB5jB,UAAxB,EAAoCW,IAApC,EAA0C,KAAKzF,QAAL,CAAc4oB,CAAd,CAA1C;AACH;AACJ;AACJ;AACJ,GAnCD;AAoCA;AACJ;AACA;;;AACIhxB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBy4B,kBAAnB,GAAwC,UAAU5jB,UAAV,EAAsBW,IAAtB,EAA4BzF,QAA5B,EAAsC;AAC1E,QAAIgG,aAAJ;AACA,QAAIf,KAAK,GAAG,CAAZ;;AACA,QAAI,KAAK7C,QAAL,KAAkB,CAAtB,EAAyB;AACrB,UAAIpC,QAAJ,EAAc;AACVgG,QAAAA,aAAa,GAAGhG,QAAQ,CAAC,KAAKpE,MAAL,CAAY6B,EAAb,CAAR,GAA2BuC,QAAQ,CAAC,KAAKpE,MAAL,CAAY6B,EAAb,CAAR,CAAyBuG,QAAzB,EAA3B,GAAiE,IAAjF;AACH;;AACD,WAAK,IAAI/H,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG6I,UAAU,CAACpU,MAAvC,EAA+CuL,KAAK,EAApD,EAAwD;AACpD,YAAIuZ,SAAS,GAAG1Q,UAAU,CAAC7I,KAAD,CAAV,CAAkB,KAAKL,MAAL,CAAY6B,EAA9B,IAAoCqH,UAAU,CAAC7I,KAAD,CAAV,CAAkB,KAAKL,MAAL,CAAY6B,EAA9B,EAAkCuG,QAAlC,EAApC,GAAmF,IAAnG;;AACA,YAAIhE,QAAQ,IAAIgG,aAAZ,IAA6B,KAAKvC,SAAtC,EAAiD;AAC7C,cAAI,KAAKpH,YAAL,CAAkBqF,OAAlB,CAA0BsE,aAA1B,MAA6C,CAAC,CAA9C,IAAmD,KAAK3J,YAAL,CAAkBqF,OAAlB,CAA0B8T,SAA1B,MAAyC,CAAC,CAAjG,EAAoG;AAChG,iBAAKnZ,YAAL,CAAkBoD,IAAlB,CAAuB+V,SAAvB;AACH;AACJ;;AACD,YAAIA,SAAS,KAAK/P,IAAd,IAAsB,KAAKpJ,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAA/D,EAAkE;AAC9D,eAAKpJ,YAAL,CAAkBoD,IAAlB,CAAuBgG,IAAvB;AACH;;AACD,YAAIS,aAAa,GAAG,KAAKzD,aAAL,CAAmB,KAAKzC,QAAxB,EAAkCwV,SAAlC,CAApB;;AACA,YAAItP,aAAJ,EAAmB;AACf,eAAKwiB,kBAAL,CAAwBxiB,aAAxB,EAAuCT,IAAvC,EAA6CzF,QAA7C;AACH;AACJ;AACJ,KAnBD,MAoBK;AACD,UAAIA,QAAJ,EAAc;AACVgG,QAAAA,aAAa,GAAGhG,QAAQ,CAAC,KAAKpE,MAAL,CAAY6B,EAAb,CAAR,GAA2BuC,QAAQ,CAAC,KAAKpE,MAAL,CAAY6B,EAAb,CAAR,CAAyBuG,QAAzB,EAA3B,GAAiE,EAAjF;AACH;;AACD,WAAK,IAAI/H,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG6I,UAAU,CAACpU,MAAvC,EAA+CuL,KAAK,EAApD,EAAwD;AACpD,YAAIgK,YAAY,GAAGnB,UAAU,CAAC7I,KAAD,CAAV,CAAkB,KAAKL,MAAL,CAAY6B,EAA9B,IAAoCqH,UAAU,CAAC7I,KAAD,CAAV,CAAkB,KAAKL,MAAL,CAAY6B,EAA9B,EAAkCuG,QAAlC,EAApC,GAAmF,EAAtG;;AACA,YAAIhE,QAAQ,IAAIgG,aAAZ,IAA6B,KAAKvC,SAAtC,EAAiD;AAC7C,cAAI,KAAKpH,YAAL,CAAkBqF,OAAlB,CAA0BsE,aAA1B,MAA6C,CAAC,CAA9C,IAAmD,KAAK3J,YAAL,CAAkBqF,OAAlB,CAA0BuE,YAA1B,MAA4C,CAAC,CAApG,EAAuG;AACnG,iBAAK5J,YAAL,CAAkBoD,IAAlB,CAAuBwG,YAAvB;AACH;AACJ;;AACD,YAAIA,YAAY,KAAKR,IAAjB,IAAyB,KAAKpJ,YAAL,CAAkBqF,OAAlB,CAA0B+D,IAA1B,MAAoC,CAAC,CAAlE,EAAqE;AACjE,eAAKpJ,YAAL,CAAkBoD,IAAlB,CAAuBgG,IAAvB;AACH;;AACD,YAAIS,aAAa,GAAGlT,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAZ,CAAkBL,QAAlB,EAAD,EAA+Bc,UAAU,CAAC7I,KAAD,CAAzC,CAA5B;;AACA,YAAIiK,aAAJ,EAAmB;AACf,eAAKwiB,kBAAL,CAAwBxiB,aAAxB,EAAuCT,IAAvC,EAA6CX,UAAU,CAAC7I,KAAD,CAAvD;AACH;;AACD,YAAI,KAAKI,YAAL,CAAkBqF,OAAlB,CAA0BuE,YAA1B,MAA4C,CAAC,CAA7C,IAAkD,KAAKxC,SAA3D,EAAsE;AAClEwB,UAAAA,KAAK;AACR;;AACD,YAAIA,KAAK,KAAKH,UAAU,CAACpU,MAArB,IAA+B,KAAK2L,YAAL,CAAkBqF,OAAlB,CAA0BsE,aAA1B,MAA6C,CAAC,CAA7E,IAAkF,KAAKvC,SAA3F,EAAsG;AAClG,eAAKpH,YAAL,CAAkBoD,IAAlB,CAAuBuG,aAAvB;AACH;AACJ;AACJ;AACJ,GAjDD;;AAkDApO,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBu4B,gBAAnB,GAAsC,UAAU1f,KAAV,EAAiB;AACnD,SAAK,IAAI/X,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+X,KAAK,CAACpY,MAA1B,EAAkCK,CAAC,EAAnC,EAAuC;AACnC,WAAKwZ,mBAAL,CAAyBzB,KAAK,CAAC/X,CAAD,CAA9B;AACH;AACJ,GAJD;;AAKA6G,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB44B,cAAnB,GAAoC,UAAUprB,EAAV,EAAc+e,OAAd,EAAuBsM,cAAvB,EAAuCC,UAAvC,EAAmD;AACnF,QAAI,KAAK3mB,QAAL,KAAkB,CAAtB,EAAyB;AACrB,UAAI6T,GAAG,GAAG,KAAK2L,UAAL,CAAgB,KAAK5hB,QAArB,EAA+B,KAAKpE,MAApC,EAA4C6B,EAA5C,CAAV;AACA,WAAKuC,QAAL,CAAciK,MAAd,CAAqBgM,GAArB,EAA0B,CAA1B,EAA6BuG,OAA7B;;AACA,UAAIsM,cAAJ,EAAoB;AAChB,aAAKhH,gBAAL,CAAsBrkB,EAAtB;;AACA,aAAK,IAAImI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmjB,UAAU,CAACr4B,MAA/B,EAAuCkV,CAAC,EAAxC,EAA4C;AACxC,eAAK5F,QAAL,CAAciK,MAAd,CAAqBgM,GAArB,EAA0B,CAA1B,EAA6B8S,UAAU,CAACnjB,CAAD,CAAvC;AACAqQ,UAAAA,GAAG;AACN;AACJ;;AACD,WAAK3T,WAAL,GAAmB,KAAKC,cAAL,CAAoB,KAAKvC,QAAzB,EAAmC,KAAKpE,MAAL,CAAYqG,QAA/C,CAAnB;AACH,KAXD,MAYK;AACD,WAAK+mB,mBAAL,CAAyB,KAAKhpB,QAA9B,EAAwC,KAAKpE,MAA7C,EAAqD6B,EAArD,EAAyD,CAAC+e,OAAD,CAAzD,EAAoEhd,SAApE;AACH;AACJ,GAhBD;;AAiBA5H,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB+4B,mBAAnB,GAAyC,UAAUhpB,QAAV,EAAoBgB,MAApB,EAA4BioB,MAA5B,EAAoCzM,OAApC,EAA6CvgB,KAA7C,EAAoD;AACzF,QAAIitB,KAAJ;;AACA,SAAK,IAAIn4B,CAAC,GAAG,CAAR,EAAWkiB,MAAM,GAAGjT,QAAQ,CAACtP,MAAlC,EAA0CK,CAAC,GAAGkiB,MAA9C,EAAsDliB,CAAC,EAAvD,EAA2D;AACvD,UAAI2U,MAAM,GAAG1S,QAAQ,CAACgO,MAAM,CAACvD,EAAR,EAAYuC,QAAQ,CAACjP,CAAD,CAApB,CAArB;;AACA,UAAIiP,QAAQ,CAACjP,CAAD,CAAR,IAAe2U,MAAf,IAAyBA,MAAM,CAAC1B,QAAP,OAAsBilB,MAAnD,EAA2D;AACvDjpB,QAAAA,QAAQ,CAACjP,CAAD,CAAR,GAAcyrB,OAAO,CAAC,CAAD,CAArB;AACA,eAAO,IAAP;AACH,OAHD,MAIK,IAAI,OAAOxb,MAAM,CAACqD,KAAd,KAAwB,QAAxB,IAAoC,CAACvR,KAAK,CAACE,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAerE,QAAQ,CAACjP,CAAD,CAAvB,CAAT,CAA9C,EAAqF;AACtF,YAAI40B,QAAQ,GAAG3yB,QAAQ,CAACgO,MAAM,CAACqD,KAAR,EAAerE,QAAQ,CAACjP,CAAD,CAAvB,CAAvB;AACAm4B,QAAAA,KAAK,GAAG,KAAKF,mBAAL,CAAyBrD,QAAzB,EAAmC,KAAK/S,cAAL,CAAoB5R,MAApB,CAAnC,EAAgEioB,MAAhE,EAAwEzM,OAAxE,EAAiFvgB,KAAjF,CAAR;;AACA,YAAIitB,KAAK,KAAK1pB,SAAd,EAAyB;AACrB;AACH;AACJ,OANI,MAOA,IAAI,KAAK5D,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,IAAiD,CAACE,KAAK,CAACE,QAAQ,CAAC,OAAD,EAAUgN,QAAQ,CAACjP,CAAD,CAAlB,CAAT,CAA3D,EAA6F;AAC9F,YAAIqT,SAAS,GAAGpR,QAAQ,CAAC,OAAD,EAAUgN,QAAQ,CAACjP,CAAD,CAAlB,CAAxB;AACAm4B,QAAAA,KAAK,GAAG,KAAKF,mBAAL,CAAyB5kB,SAAzB,EAAoC,KAAKwO,cAAL,CAAoB5R,MAApB,CAApC,EAAiEioB,MAAjE,EAAyEzM,OAAzE,EAAkFvgB,KAAlF,CAAR;;AACA,YAAIitB,KAAK,KAAK1pB,SAAd,EAAyB;AACrB;AACH;AACJ;AACJ;;AACD,WAAO0pB,KAAP;AACH,GAxBD;;AAyBAtxB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBk5B,YAAnB,GAAkC,YAAY;AAC1C,SAAK/rB,cAAL,CAAoB,KAAKC,gBAAzB;AACA,SAAKH,iBAAL,CAAuB,KAAKC,YAA5B;;AACA,QAAI,CAAC,KAAKH,QAAV,EAAoB;AAChB,WAAKM,UAAL;AACA,WAAKL,SAAL;AACH,KAHD,MAIK;AACD,WAAK+qB,YAAL;AACA,WAAKtpB,QAAL;AACA,WAAKG,YAAL;AACH;AACJ,GAZD;;AAaAjH,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBksB,aAAnB,GAAmC,UAAUiN,SAAV,EAAqBtgB,KAArB,EAA4BzY,MAA5B,EAAoC4rB,OAApC,EAA6CoN,OAA7C,EAAsDptB,KAAtD,EAA6DqtB,OAA7D,EAAsE;AACrG,QAAIvxB,KAAK,GAAG,IAAZ;;AACA,QAAI+N,IAAI,GAAG,KAAKlK,MAAL,CAAY8D,UAAvB;AACA,QAAI6pB,UAAU,GAAG,EAAjB;AACA,QAAIpoB,KAAK,GAAG,KAAKR,QAAL,CAAc,KAAK/E,MAAnB,CAAZ;AACA,QAAItL,GAAG,GAAG,KAAKsL,MAAL,CAAY6B,EAAtB;AACA,QAAI+rB,IAAJ;AACA,QAAIC,OAAO,GAAG;AACVC,MAAAA,YAAY,EAAE,EADJ;AAEVC,MAAAA,cAAc,EAAE,EAFN;AAGVC,MAAAA,cAAc,EAAE;AAHN,KAAd;AAKA,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAI/gB,KAAJ,EAAW;AACP+gB,MAAAA,OAAO,GAAG,KAAKjE,QAAL,CAAc9c,KAAd,CAAV;AACH,KAFD,MAGK,IAAIzY,MAAJ,EAAY;AACb,UAAI,OAAOA,MAAP,IAAiB,QAArB,EAA+B;AAC3Bw5B,QAAAA,OAAO,CAAC,CAAD,CAAP,GAAax5B,MAAM,CAAC2T,QAAP,EAAb;AACH,OAFD,MAGK,IAAI,OAAO3T,MAAP,KAAkB,QAAtB,EAAgC;AACjCw5B,QAAAA,OAAO,CAAC,CAAD,CAAP,GAAax5B,MAAM,CAACsV,YAAP,CAAoB,UAApB,EAAgC3B,QAAhC,EAAb;AACH;AACJ;;AACD,SAAK,IAAIjT,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAG2kB,OAAO,CAACn5B,MAA9B,EAAsCK,CAAC,GAAGmU,GAA1C,EAA+CnU,CAAC,EAAhD,EAAoD;AAChD,UAAIuZ,KAAK,GAAG,KAAKpY,UAAL,CAAgB23B,OAAO,CAAC94B,CAAD,CAAvB,CAAZ;;AACA,UAAIM,iBAAiB,CAACiZ,KAAD,CAArB,EAA8B;AAC1B;AACH;;AACD,UAAImX,WAAW,GAAG,KAAKlP,aAAL,CAAmBsX,OAAO,CAAC94B,CAAD,CAA1B,CAAlB;AACAw4B,MAAAA,UAAU,CAAC9pB,IAAX,CAAgBgiB,WAAhB;AACH;;AACD,YAAQ2H,SAAR;AACI,WAAK,QAAL;AACI,YAAItgB,KAAK,CAACpY,MAAN,IAAgB,CAApB,EAAuB;AACnB84B,UAAAA,IAAI,GAAG1jB,IAAI,CAAC/T,MAAL,CAAYzB,GAAZ,EAAiBi5B,UAAU,CAAC,CAAD,CAA3B,EAAgCpoB,KAAK,CAAC2oB,SAAtC,EAAiD3oB,KAAjD,CAAP;AACH,SAFD,MAGK;AACDsoB,UAAAA,OAAO,CAACE,cAAR,GAAyBJ,UAAzB;AACAC,UAAAA,IAAI,GAAG1jB,IAAI,CAACikB,WAAL,CAAiBN,OAAjB,EAA0Bn5B,GAA1B,EAA+B6Q,KAAK,CAAC2oB,SAArC,EAAgD3oB,KAAhD,CAAP;AACH;;AACDqoB,QAAAA,IAAI,CAAC1pB,IAAL,CAAU,UAAUxE,CAAV,EAAa;AAAE,iBAAOvD,KAAK,CAACiyB,aAAN,CAAoBH,OAApB,CAAP;AAAsC,SAA/D,EACKtpB,KADL,CACW,UAAUjF,CAAV,EAAa;AAAE,iBAAOvD,KAAK,CAACkyB,SAAN,CAAgB3uB,CAAhB,CAAP;AAA4B,SADtD;AAEA;;AACJ,WAAK,QAAL;AACIiuB,QAAAA,UAAU,CAAC,CAAD,CAAV,CAAc,KAAK3tB,MAAL,CAAYoG,IAA1B,IAAkCia,OAAlC;AACAuN,QAAAA,IAAI,GAAG1jB,IAAI,CAACokB,MAAL,CAAY55B,GAAZ,EAAiBi5B,UAAU,CAAC,CAAD,CAA3B,EAAgCpoB,KAAK,CAAC2oB,SAAtC,EAAiD3oB,KAAjD,CAAP;AACAqoB,QAAAA,IAAI,CAAC1pB,IAAL,CAAU,UAAUxE,CAAV,EAAa;AAAE,iBAAOvD,KAAK,CAACoyB,UAAN,CAAiB95B,MAAjB,EAAyB4rB,OAAzB,EAAkCqN,OAAlC,CAAP;AAAoD,SAA7E,EACK/oB,KADL,CACW,UAAUjF,CAAV,EAAa;AAAE,iBAAOvD,KAAK,CAACkyB,SAAN,CAAgB3uB,CAAhB,EAAmBjL,MAAnB,EAA2Bi5B,OAA3B,CAAP;AAA6C,SADvE;AAEA;;AACJ,WAAK,QAAL;AACI,YAAID,OAAO,CAAC34B,MAAR,IAAkB,CAAtB,EAAyB;AACrB84B,UAAAA,IAAI,GAAG1jB,IAAI,CAACskB,MAAL,CAAYf,OAAO,CAAC,CAAD,CAAnB,EAAwBloB,KAAK,CAAC2oB,SAA9B,EAAyC3oB,KAAzC,CAAP;AACH,SAFD,MAGK;AACD,cAAI0M,GAAG,GAAG,EAAV;;AACA,eAAK,IAAI9c,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAGmkB,OAAO,CAAC34B,MAA9B,EAAsCK,CAAC,GAAGmU,GAA1C,EAA+CnU,CAAC,EAAhD,EAAoD;AAChD8c,YAAAA,GAAG,CAACpO,IAAJ,CAAS4pB,OAAO,CAACt4B,CAAD,CAAhB;AACH;;AACD04B,UAAAA,OAAO,CAACC,YAAR,GAAuB7b,GAAvB;AACA2b,UAAAA,IAAI,GAAG1jB,IAAI,CAACikB,WAAL,CAAiBN,OAAjB,EAA0Bn5B,GAA1B,EAA+B6Q,KAAK,CAAC2oB,SAArC,EAAgD3oB,KAAhD,CAAP;AACH;;AACDqoB,QAAAA,IAAI,CAAC1pB,IAAL,CAAU,UAAUxE,CAAV,EAAa;AACnB,cAAIskB,MAAM,GAAG7nB,KAAK,CAAC7F,UAAN,CAAiB7B,MAAjB,CAAb;;AACA0H,UAAAA,KAAK,CAACsyB,UAAN,CAAiBhB,OAAjB,EAA0BzJ,MAA1B,EAAkC3jB,KAAlC;;AACAlE,UAAAA,KAAK,CAACG,aAAN,GAAsB,KAAtB;AACH,SAJD,EAIGqI,KAJH,CAIS,UAAUjF,CAAV,EAAa;AAAE,iBAAOvD,KAAK,CAACkyB,SAAN,CAAgB3uB,CAAhB,CAAP;AAA4B,SAJpD;AAKA;AAnCR;AAqCH,GArED;;AAsEA1D,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB+5B,aAAnB,GAAmC,UAAUlhB,KAAV,EAAiB;AAChD,SAAK,IAAI/X,CAAC,GAAG,CAAR,EAAWmU,GAAG,GAAG4D,KAAK,CAACpY,MAA5B,EAAoCK,CAAC,GAAGmU,GAAxC,EAA6CnU,CAAC,EAA9C,EAAkD;AAC9C,UAAIuZ,KAAK,GAAG,KAAKpY,UAAL,CAAgB4W,KAAK,CAAC/X,CAAD,CAArB,CAAZ;;AACA,UAAI+B,KAAK,CAACwX,KAAD,CAAT,EAAkB;AACd;AACH;;AACD,WAAKma,UAAL,CAAgBna,KAAhB;AACH;;AACD,SAAK8W,cAAL;;AACA,QAAI,KAAKhf,QAAL,KAAkB,CAAtB,EAAyB;AACrB,WAAKE,WAAL,GAAmB,KAAKC,cAAL,CAAoB,KAAKvC,QAAzB,EAAmC,KAAKpE,MAAL,CAAYqG,QAA/C,CAAnB;AACH;;AACD,SAAKsa,YAAL;AACH,GAbD;;AAcA3kB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBk6B,UAAnB,GAAgC,UAAU95B,MAAV,EAAkB4rB,OAAlB,EAA2BqN,OAA3B,EAAoC;AAChE,QAAIhf,KAAK,GAAG,KAAKpY,UAAL,CAAgB7B,MAAhB,CAAZ;AACA,QAAI6rB,MAAM,GAAG1pB,MAAM,CAAC,MAAMyB,QAAP,EAAiBqW,KAAjB,CAAnB;AACA,SAAK8R,aAAL,CAAmB9R,KAAnB,EAA0B4R,MAA1B,EAAkCD,OAAlC,EAA2CqN,OAA3C;AACH,GAJD;;AAKA1xB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBo6B,UAAnB,GAAgC,UAAUvhB,KAAV,EAAiB8W,MAAjB,EAAyB3jB,KAAzB,EAAgC;AAC5D,QAAI4kB,MAAJ;AACA,QAAIxa,IAAI,GAAGuZ,MAAM,GAAGA,MAAM,CAACvgB,aAAP,CAAqB,MAAM5K,IAA3B,CAAH,GAAsC,IAAvD;AACA,QAAIqZ,KAAK,GAAG,IAAZ;;AACA,QAAI8R,MAAM,IAAIvZ,IAAV,IAAkBA,IAAI,CAAClI,SAAL,CAAe4I,QAAf,CAAwBhT,UAAxB,CAAlB,IACA6rB,MAAM,CAACvgB,aAAP,CAAqB,MAAMjL,UAA3B,MAA2C,IAD/C,EACqD;AACjD0Z,MAAAA,KAAK,CAAC1K,gBAAN,CAAuBwc,MAAvB,EAA+B,IAA/B,EAAqC,YAAY;AAC7CiB,QAAAA,MAAM,GAAGjB,MAAM,CAACvgB,aAAP,CAAqB,MAAMjL,UAA3B,CAAT;AACA0Z,QAAAA,KAAK,CAACoX,aAAN,CAAoBpc,KAApB,EAA2B8W,MAA3B,EAAmC3jB,KAAnC,EAA0C,IAA1C,EAAgD4kB,MAAhD;AACA/S,QAAAA,KAAK,CAACyO,YAAN;AACH,OAJD;AAKH,KAPD,MAQK;AACD,WAAK2I,aAAL,CAAmBpc,KAAnB,EAA0B8W,MAA1B,EAAkC3jB,KAAlC,EAAyC,IAAzC;AACA,WAAKsgB,YAAL;AACH;AACJ,GAhBD;;AAiBA3kB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBg6B,SAAnB,GAA+B,UAAU3uB,CAAV,EAAajL,MAAb,EAAqBi5B,OAArB,EAA8B;AACzD,QAAIj5B,MAAJ,EAAY;AACR,WAAKi6B,kBAAL,CAAwBj6B,MAAxB,EAAgCi5B,OAAhC;AACH;;AACD,SAAK9oB,OAAL,CAAa,eAAb,EAA8B;AAAEC,MAAAA,KAAK,EAAEnF;AAAT,KAA9B;AACH,GALD;;AAMA1D,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBq6B,kBAAnB,GAAwC,UAAUj6B,MAAV,EAAkBi5B,OAAlB,EAA2B;AAC/D,QAAIhf,KAAK,GAAG,KAAKpY,UAAL,CAAgB7B,MAAhB,CAAZ;AACA,QAAI6rB,MAAM,GAAG1pB,MAAM,CAAC,MAAMyB,QAAP,EAAiBqW,KAAjB,CAAnB;AACA,SAAKgS,UAAL,CAAgBhS,KAAhB,EAAuB4R,MAAvB,EAA+B,KAAK5G,OAApC,EAA6CgU,OAA7C;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI1xB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBs6B,iBAAnB,GAAuC,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AAC/D,SAAK,IAAInpB,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG9R,MAAM,CAAC+R,IAAP,CAAYgpB,OAAZ,CAAtB,EAA4ClpB,EAAE,GAAGC,EAAE,CAAC7Q,MAApD,EAA4D4Q,EAAE,EAA9D,EAAkE;AAC9D,UAAIF,IAAI,GAAGG,EAAE,CAACD,EAAD,CAAb;;AACA,cAAQF,IAAR;AACI,aAAK,kBAAL;AACI,eAAKhE,cAAL,CAAoB,KAAKC,gBAAzB;AACA;;AACJ,aAAK,UAAL;AACI,cAAI,KAAKA,gBAAT,EAA2B;AACvB,iBAAK2f,OAAL,CAAaG,QAAb,GAAwB,KAAKA,QAA7B;AACH;;AACD;;AACJ,aAAK,cAAL;AACI,eAAKjgB,iBAAL,CAAuB,KAAKC,YAA5B;AACA;;AACJ,aAAK,qBAAL;AACI,cAAI,KAAKhB,aAAL,CAAmBzL,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,gBAAI0d,KAAK,GAAG,KAAKlc,UAAL,CAAgB,KAAKiK,aAAL,CAAmB,CAAnB,CAAhB,CAAZ;AACA,iBAAKJ,QAAL,GAAgB,KAAhB;AACA,iBAAK2X,eAAL;AACA,iBAAKlL,UAAL,CAAgB4F,KAAhB,EAAuB,IAAvB;AACA,iBAAKrS,QAAL,GAAgB,IAAhB;AACH;;AACD,eAAKgD,cAAL,CAAoB,KAAK+H,mBAAzB;AACA,eAAKgd,cAAL,CAAoB,KAAKhd,mBAAzB;AACA;;AACJ,aAAK,eAAL;AACI,eAAK/I,WAAL;AACA,eAAK6O,UAAL;AACA;;AACJ,aAAK,cAAL;AACI,cAAI,KAAKlJ,YAAT,EAAuB;AACnB,iBAAKrH,YAAL,GAAoBouB,OAAO,CAACpuB,YAA5B;AACA,iBAAKisB,eAAL,CAAqBkC,OAAO,CAACnuB,YAA7B;AACH;;AACD;;AACJ,aAAK,WAAL;AACI,cAAI,KAAKqH,YAAT,EAAuB;AACnB,iBAAKD,SAAL,GAAiB+mB,OAAO,CAAC/mB,SAAzB;AACA,iBAAKuF,mBAAL;AACH;;AACD;;AACJ,aAAK,UAAL;AACI,eAAKtL,WAAL,CAAiB+sB,OAAO,CAAC9sB,QAAzB,EAAmC6sB,OAAO,CAAC7sB,QAA3C;AACA;;AACJ,aAAK,WAAL;AACI,eAAKC,YAAL;AACA;;AACJ,aAAK,eAAL;AACI,eAAKzE,SAAL,GAAiB,KAAjB;AACA,eAAKiD,aAAL,CAAmB;AAAEE,YAAAA,aAAa,EAAE;AAAjB,WAAnB,EAA0C,IAA1C;AACA,eAAKouB,WAAL;AACA,eAAK1uB,cAAL,GAAsB,IAAtB;AACA,eAAKI,aAAL,CAAmB;AAAEE,YAAAA,aAAa,EAAExJ,KAAK,CAAC03B,OAAO,CAACluB,aAAT,CAAL,GAA+B,EAA/B,GAAoCkuB,OAAO,CAACluB;AAA7D,WAAnB,EAAiG,IAAjG;AACA,eAAKyQ,cAAL;AACA,eAAK/Q,cAAL,GAAsB,KAAtB;AACA,eAAK7C,SAAL,GAAiB,IAAjB;AACA;;AACJ,aAAK,UAAL;AACI,eAAKquB,iBAAL,CAAuB,KAAvB;AACA,eAAKzqB,eAAL;;AACA,cAAI,KAAKyX,YAAL,KAAsB,MAAtB,IAAgC,CAAC,KAAKxX,QAA1C,EAAoD;AAChD,iBAAKwqB,iBAAL,CAAuB,IAAvB;AACH;;AACD;;AACJ,aAAK,UAAL;AACI,eAAK1qB,eAAL;AACA,eAAKqsB,YAAL;AACA;;AACJ,aAAK,QAAL;AACI,eAAKhwB,SAAL,GAAiB,KAAjB;AACA,eAAKX,aAAL,GAAqB,IAArB;AACA,eAAKmE,aAAL,GAAqB,IAArB;AACA,eAAK4d,aAAL;AACA,eAAK5d,aAAL,GAAqB,KAArB;AACA,eAAKxD,SAAL,GAAiB,IAAjB;AACA,eAAKX,aAAL,GAAqB,KAArB;AACA;;AACJ,aAAK,eAAL;AACI,eAAKqF,UAAL,CAAgB,KAAKC,aAArB;AACA,eAAK6lB,UAAL,CAAgB,KAAK7lB,aAArB;;AACA,cAAI,KAAK6O,aAAT,EAAwB;AACpB,iBAAK5O,WAAL;AACA,iBAAK6O,UAAL;AACH;;AACD;;AACJ,aAAK,cAAL;AACI,cAAI,KAAKzJ,YAAL,KAAsB,KAAtB,IAA+B,CAAC,KAAKwnB,QAAzC,EAAmD;AAC/C,gBAAI7hB,KAAK,GAAG,KAAKhR,OAAL,CAAasH,gBAAb,CAA8B,IAA9B,CAAZ;AACA,gBAAIrO,CAAC,GAAG,CAAR;;AACA,mBAAOA,CAAC,GAAG+X,KAAK,CAACpY,MAAjB,EAAyB;AACrB,kBAAIoY,KAAK,CAAC/X,CAAD,CAAL,CAAS4U,YAAT,CAAsB,eAAtB,MAA2C,MAA/C,EAAuD;AACnD,qBAAKvC,gBAAL,CAAsB0F,KAAK,CAAC/X,CAAD,CAA3B,EAAgC,IAAhC,EAAsC,IAAtC,EAA4C,IAA5C;AACH;;AACDA,cAAAA,CAAC;AACJ;;AACD,iBAAK45B,QAAL,GAAgB,IAAhB;AACH;;AACD;;AACJ,aAAK,cAAL;AACI,eAAKjyB,WAAL,GAAmB,KAAnB;AACA,eAAKsF,cAAL,GAAsB,KAAKC,gBAAL,CAAsB,KAAKC,YAA3B,CAAtB;AACA,eAAKqc,aAAL;AACA;;AACJ,aAAK,eAAL;AACI,eAAK7G,eAAL;AACA,eAAKtX,aAAL,CAAmB;AAAED,YAAAA,aAAa,EAAEquB,OAAO,CAACruB;AAAzB,WAAnB,EAA6D,IAA7D;AACA,eAAK+R,iBAAL;AACA;;AACJ,aAAK,cAAL;AACI,eAAKqM,aAAL;AACA;;AACJ,aAAK,WAAL;AACI,eAAKA,aAAL;AACA;;AACJ,aAAK,kBAAL;AACI,eAAKne,aAAL,CAAmB;AAAEV,YAAAA,gBAAgB,EAAE8uB,OAAO,CAAC9uB;AAA5B,WAAnB,EAAmE,IAAnE;AACA,eAAKX,cAAL,CAAoBU,aAApB,GAAoC+uB,OAAO,CAAC9uB,gBAA5C;AACA,eAAK6e,aAAL;AACA;AApHR;AAsHH;AACJ,GA1HD;AA2HA;AACJ;AACA;;;AACI3iB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBsyB,OAAnB,GAA6B,YAAY;AACrC,SAAKjI,aAAL;AACA,SAAKxiB,OAAL,CAAamH,eAAb,CAA6B,uBAA7B;AACA,SAAKnH,OAAL,CAAamH,eAAb,CAA6B,UAA7B;AACA,SAAK+oB,YAAL;AACA,SAAK9qB,iBAAL,CAAuB,KAAvB;;AACA,QAAI,CAAC,KAAKF,QAAV,EAAoB;AAChB,WAAK0B,QAAL;AACA,WAAKG,YAAL;AACH;;AACD,SAAKnB,WAAL,CAAiB,KAAKC,QAAtB,EAAgC,IAAhC;AACA,SAAKP,cAAL,CAAoB,KAApB;AACA,SAAKS,UAAL,CAAgB,KAAhB;;AACA,QAAI,KAAKiF,SAAL,IAAkB,KAAKA,SAAL,CAAe2E,aAArC,EAAoD;AAChD,WAAK3E,SAAL,CAAe2E,aAAf,CAA6B+S,WAA7B,CAAyC,KAAK1X,SAA9C;AACH;;AACDzL,IAAAA,MAAM,CAACpH,SAAP,CAAiBsyB,OAAjB,CAAyBvqB,IAAzB,CAA8B,IAA9B;AACH,GAjBD;AAkBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIJ,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB26B,QAAnB,GAA8B,UAAU9hB,KAAV,EAAiBzY,MAAjB,EAAyB4L,KAAzB,EAAgCgjB,mBAAhC,EAAqD;AAC/E,QAAInsB,KAAK,CAACgW,KAAD,CAAT,EAAkB;AACd;AACH;;AACDA,IAAAA,KAAK,GAAGjI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe+H,KAAf,CAAX,CAAR;AACA,QAAI8W,MAAM,GAAG,KAAK1tB,UAAL,CAAgB7B,MAAhB,CAAb;AACA,SAAK6H,aAAL,GAAqB+mB,mBAArB;;AACA,QAAI,KAAKrjB,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAtC,EAAmD;AAC/C,UAAI,CAAC,KAAK+M,SAAV,EAAqB;AACjB,aAAKwc,aAAL,CAAmB,QAAnB,EAA6B,IAA7B,EAAmC9rB,MAAnC,EAA2C,IAA3C,EAAiDyY,KAAjD,EAAwD7M,KAAxD,EAA+D,KAAK/D,aAApE;AACH,OAFD,MAGK;AACD,aAAKmyB,UAAL,CAAgBvhB,KAAhB,EAAuB8W,MAAvB,EAA+B3jB,KAA/B;AACH;AACJ,KAPD,MAQK,IAAI,KAAKmG,QAAL,KAAkB,CAAtB,EAAyB;AAC1B,WAAK8iB,aAAL,CAAmBpc,KAAnB,EAA0B8W,MAA1B,EAAkC3jB,KAAlC;AACH,KAFI,MAGA;AACD,UAAI2jB,MAAJ,EAAY;AACR,aAAKsF,aAAL,CAAmBpc,KAAnB,EAA0B8W,MAA1B,EAAkC3jB,KAAlC;AACH,OAFD,MAGK;AACD6M,QAAAA,KAAK,GAAG,KAAKjG,aAAL,CAAmBiG,KAAnB,CAAR;;AACA,aAAK,IAAI/X,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+X,KAAK,CAACpY,MAA1B,EAAkCK,CAAC,EAAnC,EAAuC;AACnC,cAAIgpB,GAAG,GAAG/mB,QAAQ,CAAC,KAAK4I,MAAL,CAAYqG,QAAb,EAAuB6G,KAAK,CAAC/X,CAAD,CAA5B,CAAlB;AACA6uB,UAAAA,MAAM,GAAG7F,GAAG,GAAG,KAAK7nB,UAAL,CAAgB6nB,GAAG,CAAC/V,QAAJ,EAAhB,CAAH,GAAqC+V,GAAjD;AACA,eAAKmL,aAAL,CAAmB,CAACpc,KAAK,CAAC/X,CAAD,CAAN,CAAnB,EAA+B6uB,MAA/B,EAAuC3jB,KAAvC;AACH;AACJ;;AACD,WAAKqG,WAAL,GAAmB,KAAKC,cAAL,CAAoB,KAAKvC,QAAzB,EAAmC,KAAKpE,MAAL,CAAYqG,QAA/C,CAAnB;AACH;;AACD,SAAKuB,wBAAL;;AACA,QAAI,KAAKE,YAAL,IAAqBkc,MAAzB,EAAiC;AAC7B,WAAK1W,sBAAL,CAA4B0W,MAA5B;AACH;;AACD,QAAK,KAAKhkB,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,KAAkD,KAAvD,EAA+D;AAC3D,WAAKsF,aAAL,GAAqB,KAArB;AACA,WAAKqkB,YAAL;AACH;AACJ,GAxCD;AAyCA;AACJ;AACA;AACA;AACA;AACA;;;AACI3kB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB46B,SAAnB,GAA+B,UAAUplB,IAAV,EAAgB;AAC3C,QAAIuE,GAAG,GAAG,KAAK9X,UAAL,CAAgBuT,IAAhB,CAAV;;AACA,QAAI3S,KAAK,CAACkX,GAAD,CAAL,IAAc,KAAKhN,QAAvB,EAAiC;AAC7B;AACH;;AACD,SAAK6Y,aAAL,CAAmB7L,GAAnB,EAAwB,IAAxB;AACH,GAND;AAOA;AACJ;AACA;AACA;AACA;;;AACIpS,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBw4B,QAAnB,GAA8B,UAAU3f,KAAV,EAAiB;AAC3C,QAAI,KAAKpF,YAAT,EAAuB;AACnB,WAAKyG,gBAAL,CAAsBrB,KAAtB,EAA6B,IAA7B;AACH;AACJ,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIlR,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBy6B,WAAnB,GAAiC,UAAU5hB,KAAV,EAAiBnG,KAAjB,EAAwBuhB,kBAAxB,EAA4C;AACzE,QAAI,CAACpxB,KAAK,CAACgW,KAAD,CAAV,EAAmB;AACf,WAAKkc,aAAL,CAAmBlc,KAAnB,EAA0BhV,WAA1B,EAAuC,KAAvC;AACH,KAFD,MAGK;AACD,UAAI6O,KAAK,GAAG,CAAZ,EAAe;AACX,aAAKshB,eAAL,CAAqBzxB,MAAM,CAAC,MAAM4B,UAAP,EAAmB,KAAK0D,OAAxB,CAA3B,EAA6D6K,KAA7D,EAAoEuhB,kBAApE;AACH,OAFD,MAGK;AACD,aAAKE,gBAAL,CAAsBF,kBAAtB;AACH;AACJ;AACJ,GAZD;AAaA;AACJ;AACA;AACA;;;AACItsB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB66B,YAAnB,GAAkC,UAAUhiB,KAAV,EAAiB;AAC/C,QAAI,CAAChW,KAAK,CAACgW,KAAD,CAAV,EAAmB;AACf,WAAK0J,eAAL,CAAqB1J,KAArB;AACH;AACJ,GAJD;AAKA;AACJ;AACA;AACA;;;AACIlR,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB86B,WAAnB,GAAiC,UAAUjiB,KAAV,EAAiB;AAC9C,QAAI,CAAChW,KAAK,CAACgW,KAAD,CAAV,EAAmB;AACf,WAAKid,cAAL,CAAoBjd,KAApB;AACH;AACJ,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;;;AACIlR,EAAAA,QAAQ,CAAC3H,SAAT,CAAmB+6B,aAAnB,GAAmC,UAAUvlB,IAAV,EAAgB;AAC/C,QAAI6E,KAAK,GAAG,KAAKpY,UAAL,CAAgBuT,IAAhB,CAAZ;;AACA,QAAI3S,KAAK,CAACwX,KAAD,CAAT,EAAkB;AACd;AACH;;AACD,QAAIyH,OAAO,GAAG,KAAKA,OAAL,CAAazH,KAAb,EAAoB,MAAMtW,QAA1B,CAAd;AACA,SAAKi3B,SAAL,CAAelZ,OAAf;AACAmZ,IAAAA,UAAU,CAAC,YAAY;AAAE5gB,MAAAA,KAAK,CAACmM,cAAN,CAAqB,IAArB;AAA6B,KAA5C,EAA8C,GAA9C,CAAV;AACH,GARD;AASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7e,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBg7B,SAAnB,GAA+B,UAAUniB,KAAV,EAAiBnG,KAAjB,EAAwBuhB,kBAAxB,EAA4C;AACvE,QAAI,CAACpxB,KAAK,CAACgW,KAAD,CAAV,EAAmB;AACf,WAAKkc,aAAL,CAAmBlc,KAAnB,EAA0B/U,UAA1B,EAAsC,IAAtC;AACH,KAFD,MAGK;AACD,UAAI4O,KAAK,GAAG,CAAZ,EAAe;AACX,aAAK0hB,aAAL,CAAmB7xB,MAAM,CAAC,MAAM4B,UAAP,EAAmB,KAAK0D,OAAxB,CAAzB,EAA2D6K,KAA3D,EAAkEuhB,kBAAlE;AACH,OAFD,MAGK;AACD,aAAKI,cAAL,CAAoBJ,kBAApB;AACH;AACJ;AACJ,GAZD;AAaA;AACJ;AACA;;;AACItsB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBk7B,kBAAnB,GAAwC,YAAY;AAChD,QAAInmB,UAAU,GAAG,KAAK3I,YAAtB;AACA,WAAO2I,UAAP;AACH,GAHD;AAIA;AACJ;AACA;;;AACIpN,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBm7B,gBAAnB,GAAsC,YAAY;AAC9C,QAAIC,aAAa,GAAG,KAAKjzB,WAAzB;AACA,WAAOizB,aAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;;;AACIzzB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBq7B,OAAnB,GAA6B,UAAU7lB,IAAV,EAAgB;AACzC,QAAIuE,GAAG,GAAG,KAAK9X,UAAL,CAAgBuT,IAAhB,CAAV;AACA,WAAO,KAAKuF,WAAL,CAAiBhB,GAAjB,EAAsB,IAAtB,CAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpS,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBqb,WAAnB,GAAiC,UAAU7F,IAAV,EAAgB;AAC7C,QAAIhI,EAAE,GAAG,KAAKuX,KAAL,CAAWvP,IAAX,CAAT;AACA,SAAK0gB,iBAAL;;AACA,QAAIrzB,KAAK,CAAC2K,EAAD,CAAT,EAAe;AACX,aAAO,KAAKuC,QAAZ;AACH,KAFD,MAGK;AACD,UAAI8F,IAAI,GAAG,KAAKyM,aAAL,CAAmB9U,EAAnB,CAAX;AACA,aAAO3K,KAAK,CAACgT,IAAD,CAAL,GAAc,EAAd,GAAmB,CAACA,IAAD,CAA1B;AACH;AACJ,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIlO,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBs7B,SAAnB,GAA+B,UAAUC,WAAV,EAAuBn7B,MAAvB,EAA+B4L,KAA/B,EAAsCgjB,mBAAtC,EAA2D;AACtF,QAAIW,MAAM,GAAG,KAAK1tB,UAAL,CAAgB7B,MAAhB,CAAb;;AACA,QAAIyC,KAAK,CAAC8sB,MAAD,CAAT,EAAmB;AACf;AACH;;AACD,SAAK,IAAI7uB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGy6B,WAAW,CAAC96B,MAAhC,EAAwCK,CAAC,EAAzC,EAA6C;AACzC,UAAI0sB,MAAM,GAAG,KAAKvrB,UAAL,CAAgBs5B,WAAW,CAACz6B,CAAD,CAA3B,CAAb;;AACA,UAAI+B,KAAK,CAAC2qB,MAAD,CAAL,IAAiBmC,MAAM,CAAClC,UAAP,CAAkBD,MAAlB,CAAjB,IAA8C,KAAKoC,YAAL,CAAkBpC,MAAlB,EAA0BmC,MAA1B,CAAlD,EAAqF;AACjF;AACH;;AACD,WAAK1nB,aAAL,GAAqB+mB,mBAArB;AACA,WAAK2B,eAAL,CAAqBnD,MAArB,EAA6BmC,MAA7B,EAAqC,IAArC,EAA2C3jB,KAA3C;AACH;;AACD,QAAI,KAAKL,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,KAAkD,KAAtD,EAA6D;AACzD,WAAKsF,aAAL,GAAqB,KAArB;AACH;;AACD,SAAKqkB,YAAL;AACH,GAjBD;AAkBA;AACJ;AACA;AACA;AACA;;;AACI3kB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBw7B,WAAnB,GAAiC,UAAUp7B,MAAV,EAAkBmsB,OAAlB,EAA2B;AACxD,QAAI1pB,KAAK,CAACzC,MAAD,CAAL,IAAiByC,KAAK,CAAC0pB,OAAD,CAA1B,EAAqC;AACjC;AACH;;AACD,QAAI/e,EAAJ;AACA,QAAIqrB,cAAc,GAAG,KAArB;;AACA,QAAI,KAAK1mB,QAAL,IAAiB,CAAjB,IAAsBoa,OAAO,CAAC9rB,MAAR,GAAiB,CAA3C,EAA8C;AAC1Co4B,MAAAA,cAAc,GAAG,IAAjB;AACH,KAFD,MAGK,IAAI,KAAK1mB,QAAL,IAAiB,CAAjB,IAAsBoa,OAAO,CAAC9rB,MAAR,KAAmB,CAA7C,EAAgD;AACjD,UAAIg7B,iBAAiB,GAAG14B,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAZ,CAAkBL,QAAlB,EAAD,EAA+BwY,OAAO,CAAC,CAAD,CAAtC,CAAhC;;AACA,UAAI,CAAC1pB,KAAK,CAAC44B,iBAAD,CAAV,EAA+B;AAC3B5C,QAAAA,cAAc,GAAG,IAAjB;AACH;AACJ;;AACD,QAAIxe,KAAK,GAAG,KAAKpY,UAAL,CAAgB7B,MAAhB,CAAZ;AACAoN,IAAAA,EAAE,GAAG6M,KAAK,GAAGA,KAAK,CAAC3E,YAAN,CAAmB,UAAnB,CAAH,GAAsCtV,MAAD,GAAWA,MAAM,CAAC2T,QAAP,EAAX,GAA+B,IAA9E;AACA,SAAK2nB,WAAL,GAAmB,KAAKpZ,aAAL,CAAmB9U,EAAnB,CAAnB;AACA+e,IAAAA,OAAO,GAAG3b,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeyb,OAAf,CAAX,CAAV;AACA;;AACA,QAAIoP,WAAJ;AACA,QAAIC,UAAJ;;AACA,QAAI,KAAKzpB,QAAL,IAAiB,CAAjB,IAAsB0mB,cAA1B,EAA0C;AACtC,WAAK,IAAIxgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkU,OAAO,CAAC9rB,MAA5B,EAAoC4X,CAAC,EAArC,EAAyC;AACrC,YAAIxV,KAAK,CAAC0pB,OAAO,CAAClU,CAAD,CAAP,CAAW,KAAK1M,MAAL,CAAYqG,QAAvB,CAAD,CAAT,EAA6C;AACzC4pB,UAAAA,UAAU,GAAGrP,OAAO,CAAClU,CAAD,CAApB;AACAkU,UAAAA,OAAO,CAACvS,MAAR,CAAe3B,CAAf,EAAkB,CAAlB;AACA;AACH;AACJ;;AACDsjB,MAAAA,WAAW,GAAG14B,MAAM,CAAC,EAAD,EAAK,KAAKy4B,WAAV,EAAuBE,UAAvB,CAApB;AACH,KATD,MAUK;AACDD,MAAAA,WAAW,GAAG14B,MAAM,CAAC,EAAD,EAAK,KAAKy4B,WAAV,EAAuBnP,OAAO,CAAC,CAAD,CAA9B,CAApB;AACH;;AACD,QAAI1pB,KAAK,CAACwX,KAAD,CAAT,EAAkB;AACd,WAAKue,cAAL,CAAoBprB,EAApB,EAAwBmuB,WAAxB,EAAqC9C,cAArC,EAAqDtM,OAArD;AACA;AACH;;AACD,SAAKvkB,WAAL,GAAmB,IAAnB;AACA,QAAI0K,KAAK,GAAGR,UAAU,CAACmI,KAAK,CAAC3E,YAAN,CAAmB,YAAnB,CAAD,CAAtB;AACA,QAAImmB,QAAQ,GAAGz4B,QAAQ,CAACiyB,sBAAT,CAAgC,KAAKtiB,aAArC,EAAoD,CAAC4oB,WAAD,CAApD,EAAmE,KAAK7wB,cAAxE,EAAwF4H,KAAxF,CAAf;AACA,QAAIiO,EAAE,GAAGpe,MAAM,CAAC,MAAM4B,UAAP,EAAmBkW,KAAnB,CAAf;AACA,QAAIxF,UAAU,GAAG9R,QAAQ,CAAC,KAAK4I,MAAL,CAAYyI,KAAZ,CAAkBL,QAAlB,EAAD,EAA+B4nB,WAA/B,CAAzB;;AACA,QAAK9C,cAAc,IAAIlY,EAAnB,IAA2BkY,cAAc,IAAI,CAACh2B,KAAK,CAACgS,UAAD,CAAvD,EAAsE;AAClE,UAAIzB,SAAS,GAAGiH,KAAK,CAAC7C,aAAtB;AACA,UAAIxL,KAAK,GAAGrM,KAAK,CAACK,SAAN,CAAgByR,OAAhB,CAAwB1J,IAAxB,CAA6BqL,SAAS,CAAC8B,UAAvC,EAAmDmF,KAAnD,CAAZ;AACAvY,MAAAA,MAAM,CAACuY,KAAD,CAAN;AACAjH,MAAAA,SAAS,CAACkD,YAAV,CAAuBulB,QAAQ,CAAC,CAAD,CAA/B,EAAoCzoB,SAAS,CAAC8B,UAAV,CAAqBlJ,KAArB,CAApC;AACA,WAAK4sB,cAAL,CAAoBprB,EAApB,EAAwBmuB,WAAxB,EAAqC9C,cAArC,EAAqDtM,OAArD;;AACA,UAAIsM,cAAc,IAAIlY,EAAtB,EAA0B;AACtB,aAAKqa,SAAL,CAAe,CAACxtB,EAAD,CAAf;AACH;AACJ,KATD,MAUK;AACD,UAAIye,MAAM,GAAG1pB,MAAM,CAAC,MAAMkC,QAAP,EAAiB4V,KAAjB,CAAnB;AACA,UAAIyhB,UAAU,GAAGv5B,MAAM,CAAC,MAAMkC,QAAP,EAAiBo3B,QAAQ,CAAC,CAAD,CAAzB,CAAvB;AACA,UAAIzlB,IAAI,GAAG7T,MAAM,CAAC,SAASiC,IAAV,EAAgBynB,MAAhB,CAAjB;AACA,UAAI8P,OAAO,GAAGx5B,MAAM,CAAC,SAASiC,IAAV,EAAgBs3B,UAAhB,CAApB;;AACA,UAAI1lB,IAAI,IAAI2lB,OAAZ,EAAqB;AACjB,YAAIA,OAAO,CAAC7tB,SAAR,CAAkB4I,QAAlB,CAA2BhT,UAA3B,KAA0CsS,IAAI,CAAClI,SAAL,CAAe4I,QAAf,CAAwBjT,WAAxB,CAA9C,EAAoF;AAChF1B,UAAAA,WAAW,CAAC,CAAC45B,OAAD,CAAD,EAAYj4B,UAAZ,CAAX;AACA5B,UAAAA,QAAQ,CAAC,CAAC65B,OAAD,CAAD,EAAYl4B,WAAZ,CAAR;AACH,SAHD,MAIK,IAAIk4B,OAAO,CAAC7tB,SAAR,CAAkB4I,QAAlB,CAA2BjT,WAA3B,KAA2CuS,IAAI,CAAClI,SAAL,CAAe4I,QAAf,CAAwBhT,UAAxB,CAA/C,EAAoF;AACrF3B,UAAAA,WAAW,CAAC,CAAC45B,OAAD,CAAD,EAAYl4B,WAAZ,CAAX;AACA3B,UAAAA,QAAQ,CAAC,CAAC65B,OAAD,CAAD,EAAYj4B,UAAZ,CAAR;AACH,SAHI,MAIA,IAAIsS,IAAI,CAAClI,SAAL,CAAe4I,QAAf,CAAwB,aAAxB,CAAJ,EAA4C;AAC7C5U,UAAAA,QAAQ,CAAC,CAAC65B,OAAD,CAAD,EAAY,aAAZ,CAAR;AACH;AACJ;;AACDj6B,MAAAA,MAAM,CAACmqB,MAAD,CAAN;AACA,UAAI+P,OAAO,GAAGz5B,MAAM,CAAC,MAAMkD,OAAP,EAAgB4U,KAAhB,CAApB;AACA2hB,MAAAA,OAAO,CAACnS,UAAR,CAAmBvT,YAAnB,CAAgCwlB,UAAhC,EAA4CE,OAAO,CAACjT,WAApD;AACA,WAAK6P,cAAL,CAAoBprB,EAApB,EAAwBmuB,WAAxB,EAAqC9C,cAArC,EAAqDtM,OAArD;AACH;;AACDlS,IAAAA,KAAK,GAAG,KAAKpY,UAAL,CAAgB7B,MAAhB,CAAR;;AACA,QAAIu7B,WAAW,CAAC,KAAKhwB,MAAL,CAAYswB,OAAb,CAAf,EAAsC;AAClC5hB,MAAAA,KAAK,CAAC9M,YAAN,CAAmB,OAAnB,EAA4BouB,WAAW,CAAC,KAAKhwB,MAAL,CAAYswB,OAAb,CAAvC;AACH;;AACD,QAAIN,WAAW,CAAC97B,cAAZ,CAA2B,KAAK8L,MAAL,CAAYuwB,cAAvC,KAA0DP,WAAW,CAAC,KAAKhwB,MAAL,CAAYuwB,cAAb,CAAzE,EAAuG;AACnG,UAAIC,IAAI,GAAG,EAAX;AACAj5B,MAAAA,KAAK,CAACi5B,IAAD,EAAOR,WAAW,CAAC,KAAKhwB,MAAL,CAAYuwB,cAAb,CAAlB,CAAL;;AACA,UAAIC,IAAI,CAACC,KAAT,EAAgB;AACZl6B,QAAAA,QAAQ,CAAC,CAACmY,KAAD,CAAD,EAAU8hB,IAAI,CAACC,KAAL,CAAW1R,KAAX,CAAiB,GAAjB,CAAV,CAAR;AACA,eAAOyR,IAAI,CAACC,KAAZ;AACH,OAHD,MAIK;AACDj5B,QAAAA,UAAU,CAACkX,KAAD,EAAQ8hB,IAAR,CAAV;AACH;AACJ;;AACD,QAAI,KAAKjwB,aAAL,CAAmBuF,OAAnB,CAA2BjE,EAA3B,MAAmC,CAAC,CAAxC,EAA2C;AACvC6M,MAAAA,KAAK,CAAC9M,YAAN,CAAmB,eAAnB,EAAoC,MAApC;AACArL,MAAAA,QAAQ,CAAC,CAACmY,KAAD,CAAD,EAAUhW,MAAV,CAAR;AACH;;AACD,SAAK2D,WAAL,GAAmB,KAAnB;AACA,SAAKskB,YAAL;AACH,GAlGD;AAmGA;AACJ;AACA;AACA;;;AACI3kB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBq8B,WAAnB,GAAiC,UAAUxjB,KAAV,EAAiB;AAC9C,QAAI,CAAChW,KAAK,CAACgW,KAAD,CAAV,EAAmB;AACf,UAAI,KAAKlN,MAAL,CAAY8D,UAAZ,YAAkC9M,WAAlC,IAAiD,CAAC,KAAK+M,SAA3D,EAAsE;AAClE,aAAKwc,aAAL,CAAmB,QAAnB,EAA6BrT,KAA7B;AACH,OAFD,MAGK;AACD,aAAKkhB,aAAL,CAAmBlhB,KAAnB;AACH;AACJ;AACJ,GATD;AAUA;AACJ;AACA;AACA;AACA;;;AACIlR,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBs8B,UAAnB,GAAgC,UAAUl8B,MAAV,EAAkB4rB,OAAlB,EAA2B;AACvD,QAAIlkB,KAAK,GAAG,IAAZ;;AACA,QAAIjF,KAAK,CAACzC,MAAD,CAAL,IAAiByC,KAAK,CAACmpB,OAAD,CAAtB,IAAmC,CAAC,KAAK9e,YAA7C,EAA2D;AACvD;AACH;;AACD,QAAImN,KAAK,GAAG,KAAKpY,UAAL,CAAgB7B,MAAhB,CAAZ;;AACA,QAAIyC,KAAK,CAACwX,KAAD,CAAT,EAAkB;AACd;AACH;;AACD,QAAI4R,MAAM,GAAG1pB,MAAM,CAAC,MAAMyB,QAAP,EAAiBqW,KAAjB,CAAnB;AACA,SAAKwQ,aAAL,CAAmBxQ,KAAnB;AACA,QAAIhD,SAAS,GAAG,KAAK4T,YAAL,CAAkB5Q,KAAlB,EAAyB,IAAzB,EAA+B,IAA/B,CAAhB;AACA,SAAK9J,OAAL,CAAa,aAAb,EAA4B8G,SAA5B,EAAuC,UAAU0E,YAAV,EAAwB;AAC3D,UAAI,CAACA,YAAY,CAACC,MAAlB,EAA0B;AACtB,YAAIlU,KAAK,CAAC6D,MAAN,CAAa8D,UAAb,YAAmC9M,WAAnC,IAAkD,CAACmF,KAAK,CAAC4H,SAA7D,EAAwE;AACpE5H,UAAAA,KAAK,CAACokB,aAAN,CAAoB,QAApB,EAA8B,IAA9B,EAAoC9rB,MAApC,EAA4C4rB,OAA5C,EAAqD,IAArD,EAA2D,IAA3D,EAAiE,KAAjE;AACH,SAFD,MAGK;AACDlkB,UAAAA,KAAK,CAACqkB,aAAN,CAAoB9R,KAApB,EAA2B4R,MAA3B,EAAmCD,OAAnC,EAA4C,KAA5C;AACH;AACJ;AACJ,KATD;AAUH,GAtBD;AAuBA;AACJ;AACA;AACA;AACA;;;AACIrkB,EAAAA,QAAQ,CAAC3H,SAAT,CAAmBs4B,UAAnB,GAAgC,UAAUzf,KAAV,EAAiB;AAC7C,QAAI,KAAKpF,YAAT,EAAuB;AACnB,WAAKyG,gBAAL,CAAsBrB,KAAtB,EAA6B,KAA7B;AACH;AACJ,GAJD;;AAKA,MAAIjQ,UAAJ;;AACA1I,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,KAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,kBAFb,EAEiC,KAAK,CAFtC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,KAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,cAFb,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,KAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,qBAFb,EAEoC,KAAK,CAFzC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,KAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,eAFb,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsB,OAAO,CAAC,EAAD,EAAK+F,qBAAL,CADA,CAAD,EAEPI,QAAQ,CAAC3H,SAFF,EAEa,WAFb,EAE0B,KAAK,CAF/B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,EADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,cAFb,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,EAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,UAFb,EAEyB,KAAK,CAF9B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,KAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,UAFb,EAEyB,KAAK,CAF9B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,IAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,UAFb,EAEyB,KAAK,CAF9B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,KAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,qBAFb,EAEoC,KAAK,CAFzC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,KAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,mBAFb,EAEkC,KAAK,CAFvC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,EADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,eAFb,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,MAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,UAFb,EAEyB,KAAK,CAF9B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsB,OAAO,CAAC,EAAD,EAAK2F,cAAL,CADA,CAAD,EAEPQ,QAAQ,CAAC3H,SAFF,EAEa,QAFb,EAEuB,KAAK,CAF5B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,IAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,eAFb,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,IAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,cAFb,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,EADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,QAFb,EAEuB,KAAK,CAF5B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,EADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,cAFb,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,EADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,eAFb,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,MAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,WAFb,EAE0B,KAAK,CAF/B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,KAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,cAFb,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,IAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,WAFb,EAE0B,KAAK,CAF/B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPmB,QAAQ,CAAC,KAAD,CADD,CAAD,EAEPsG,QAAQ,CAAC3H,SAFF,EAEa,kBAFb,EAEiC,KAAK,CAFtC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,eAFb,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,SAFb,EAEwB,KAAK,CAF7B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,WAFb,EAE0B,KAAK,CAF/B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,mBAFb,EAEkC,KAAK,CAFvC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,UAFb,EAEyB,KAAK,CAF9B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,WAFb,EAE0B,KAAK,CAF/B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,UAFb,EAEyB,KAAK,CAF9B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,aAFb,EAE4B,KAAK,CAFjC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,cAFb,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,aAFb,EAE4B,KAAK,CAFjC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,eAFb,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,gBAFb,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,cAFb,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,eAFb,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,cAFb,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,aAFb,EAE4B,KAAK,CAFjC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,YAFb,EAE2B,KAAK,CAFhC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,aAFb,EAE4B,KAAK,CAFjC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,cAFb,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,eAFb,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,cAFb,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuB,KAAK,EADE,CAAD,EAEPkG,QAAQ,CAAC3H,SAFF,EAEa,eAFb,EAE8B,KAAK,CAFnC,CAAV;;AAGA2H,EAAAA,QAAQ,GAAGiB,UAAU,GAAG1I,UAAU,CAAC,CAC/BoB,qBAD+B,CAAD,EAE/BqG,QAF+B,CAAlC;AAGA,SAAOA,QAAP;AACH,CAluJ6B,CAkuJ5B3G,SAluJ4B,CAA9B;;AAmuJA,SAAS2G,QAAT","sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport { Component, isUndefined, Browser, compile, isNullOrUndefined } from '@syncfusion/ej2-base';\r\nimport { Property, NotifyPropertyChanges, ChildProperty, Complex } from '@syncfusion/ej2-base';\r\nimport { Event, EventHandler, KeyboardEvents } from '@syncfusion/ej2-base';\r\nimport { rippleEffect, Animation, remove } from '@syncfusion/ej2-base';\r\nimport { Draggable, Droppable } from '@syncfusion/ej2-base';\r\nimport { getElement } from '@syncfusion/ej2-base';\r\nimport { addClass, removeClass, closest, matches, detach, select, selectAll, isVisible, append } from '@syncfusion/ej2-base';\r\nimport { DataManager, Query } from '@syncfusion/ej2-data';\r\nimport { isNullOrUndefined as isNOU, Touch, getValue, setValue, extend, merge, attributes } from '@syncfusion/ej2-base';\r\nimport { ListBase } from '@syncfusion/ej2-lists';\r\nimport { createCheckBox, rippleMouseHandler } from '@syncfusion/ej2-buttons';\r\nimport { Input } from '@syncfusion/ej2-inputs';\r\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\r\nvar ROOT = 'e-treeview';\r\nvar CONTROL = 'e-control';\r\nvar COLLAPSIBLE = 'e-icon-collapsible';\r\nvar EXPANDABLE = 'e-icon-expandable';\r\nvar LISTITEM = 'e-list-item';\r\nvar LISTTEXT = 'e-list-text';\r\nvar LISTWRAP = 'e-text-wrap';\r\nvar IELISTWRAP = 'e-ie-wrap';\r\nvar PARENTITEM = 'e-list-parent';\r\nvar HOVER = 'e-hover';\r\nvar ACTIVE = 'e-active';\r\nvar LOAD = 'e-icons-spinner';\r\nvar PROCESS = 'e-process';\r\nvar ICON = 'e-icons';\r\nvar TEXTWRAP = 'e-text-content';\r\nvar INPUT = 'e-input';\r\nvar INPUTGROUP = 'e-input-group';\r\nvar TREEINPUT = 'e-tree-input';\r\nvar EDITING = 'e-editing';\r\nvar RTL = 'e-rtl';\r\nvar INTERACTION = 'e-interaction';\r\nvar DRAGITEM = 'e-drag-item';\r\nvar DROPPABLE = 'e-droppable';\r\nvar DRAGGING = 'e-dragging';\r\nvar SIBLING = 'e-sibling';\r\nvar DROPIN = 'e-drop-in';\r\nvar DROPNEXT = 'e-drop-next';\r\nvar DROPOUT = 'e-drop-out';\r\nvar NODROP = 'e-no-drop';\r\nvar FULLROWWRAP = 'e-fullrow-wrap';\r\nvar FULLROW = 'e-fullrow';\r\nvar SELECTED = 'e-selected';\r\nvar EXPANDED = 'e-expanded';\r\nvar NODECOLLAPSED = 'e-node-collapsed';\r\nvar DISABLE = 'e-disable';\r\nvar DROPCOUNT = 'e-drop-count';\r\nvar CHECK = 'e-check';\r\nvar INDETERMINATE = 'e-stop';\r\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\r\nvar CHECKBOXFRAME = 'e-frame';\r\nvar CHECKBOXRIPPLE = 'e-ripple-container';\r\nvar RIPPLE = 'e-ripple';\r\nvar RIPPLEELMENT = 'e-ripple-element';\r\nvar FOCUS = 'e-node-focus';\r\nvar IMAGE = 'e-list-img';\r\nvar BIGGER = 'e-bigger';\r\nvar SMALL = 'e-small';\r\nvar CHILD = 'e-has-child';\r\nvar ITEM_ANIMATION_ACTIVE = 'e-animation-active';\r\nvar DISABLED = 'e-disabled';\r\nvar treeAriaAttr = {\r\n    treeRole: 'tree',\r\n    itemRole: 'treeitem',\r\n    listRole: 'group',\r\n    itemText: '',\r\n    wrapperRole: ''\r\n};\r\n/**\r\n * Configures the fields to bind to the properties of node in the TreeView component.\r\n */\r\nvar FieldsSettings = /** @class */ (function (_super) {\r\n    __extends(FieldsSettings, _super);\r\n    function FieldsSettings() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    __decorate([\r\n        Property('child')\r\n    ], FieldsSettings.prototype, \"child\", void 0);\r\n    __decorate([\r\n        Property([])\r\n    ], FieldsSettings.prototype, \"dataSource\", void 0);\r\n    __decorate([\r\n        Property('expanded')\r\n    ], FieldsSettings.prototype, \"expanded\", void 0);\r\n    __decorate([\r\n        Property('hasChildren')\r\n    ], FieldsSettings.prototype, \"hasChildren\", void 0);\r\n    __decorate([\r\n        Property('htmlAttributes')\r\n    ], FieldsSettings.prototype, \"htmlAttributes\", void 0);\r\n    __decorate([\r\n        Property('iconCss')\r\n    ], FieldsSettings.prototype, \"iconCss\", void 0);\r\n    __decorate([\r\n        Property('id')\r\n    ], FieldsSettings.prototype, \"id\", void 0);\r\n    __decorate([\r\n        Property('imageUrl')\r\n    ], FieldsSettings.prototype, \"imageUrl\", void 0);\r\n    __decorate([\r\n        Property('isChecked')\r\n    ], FieldsSettings.prototype, \"isChecked\", void 0);\r\n    __decorate([\r\n        Property('parentID')\r\n    ], FieldsSettings.prototype, \"parentID\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], FieldsSettings.prototype, \"query\", void 0);\r\n    __decorate([\r\n        Property('selected')\r\n    ], FieldsSettings.prototype, \"selected\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], FieldsSettings.prototype, \"tableName\", void 0);\r\n    __decorate([\r\n        Property('text')\r\n    ], FieldsSettings.prototype, \"text\", void 0);\r\n    __decorate([\r\n        Property('tooltip')\r\n    ], FieldsSettings.prototype, \"tooltip\", void 0);\r\n    __decorate([\r\n        Property('navigateUrl')\r\n    ], FieldsSettings.prototype, \"navigateUrl\", void 0);\r\n    return FieldsSettings;\r\n}(ChildProperty));\r\nexport { FieldsSettings };\r\n/**\r\n * Configures animation settings for the TreeView component.\r\n */\r\nvar ActionSettings = /** @class */ (function (_super) {\r\n    __extends(ActionSettings, _super);\r\n    function ActionSettings() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    __decorate([\r\n        Property('SlideDown')\r\n    ], ActionSettings.prototype, \"effect\", void 0);\r\n    __decorate([\r\n        Property(400)\r\n    ], ActionSettings.prototype, \"duration\", void 0);\r\n    __decorate([\r\n        Property('linear')\r\n    ], ActionSettings.prototype, \"easing\", void 0);\r\n    return ActionSettings;\r\n}(ChildProperty));\r\nexport { ActionSettings };\r\n/**\r\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\r\n */\r\nvar NodeAnimationSettings = /** @class */ (function (_super) {\r\n    __extends(NodeAnimationSettings, _super);\r\n    function NodeAnimationSettings() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    __decorate([\r\n        Complex({ effect: 'SlideUp', duration: 400, easing: 'linear' }, ActionSettings)\r\n    ], NodeAnimationSettings.prototype, \"collapse\", void 0);\r\n    __decorate([\r\n        Complex({ effect: 'SlideDown', duration: 400, easing: 'linear' }, ActionSettings)\r\n    ], NodeAnimationSettings.prototype, \"expand\", void 0);\r\n    return NodeAnimationSettings;\r\n}(ChildProperty));\r\nexport { NodeAnimationSettings };\r\n/**\r\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\r\n * functions to perform edit, drag and drop, selection with check-box, and more.\r\n * ```html\r\n *  <div id=\"tree\"></div>\r\n * ```\r\n * ```typescript\r\n *  let treeObj: TreeView = new TreeView();\r\n *  treeObj.appendTo('#tree');\r\n * ```\r\n */\r\nvar TreeView = /** @class */ (function (_super) {\r\n    __extends(TreeView, _super);\r\n    function TreeView(options, element) {\r\n        var _this = _super.call(this, options, element) || this;\r\n        _this.isRefreshed = false;\r\n        _this.preventExpand = false;\r\n        _this.checkedElement = [];\r\n        _this.disableNode = [];\r\n        // eslint-disable-next-line\r\n        _this.validArr = [];\r\n        _this.validNodes = [];\r\n        _this.expandChildren = [];\r\n        _this.isFieldChange = false;\r\n        _this.changeDataSource = false;\r\n        _this.hasTemplate = false;\r\n        _this.isFirstRender = false;\r\n        _this.mouseDownStatus = false;\r\n        return _this;\r\n    }\r\n    TreeView_1 = TreeView;\r\n    /**\r\n     * Get component name.\r\n     *\r\n     * @returns {string} - returns module name.\r\n     * @private\r\n     */\r\n    TreeView.prototype.getModuleName = function () {\r\n        return 'treeview';\r\n    };\r\n    /**\r\n     * Initialize the event handler\r\n     *\r\n     * @returns {void}\r\n     */\r\n    TreeView.prototype.preRender = function () {\r\n        var _this = this;\r\n        this.checkActionNodes = [];\r\n        this.parentNodeCheck = [];\r\n        this.dragStartAction = false;\r\n        this.isAnimate = false;\r\n        this.keyConfigs = {\r\n            escape: 'escape',\r\n            end: 'end',\r\n            enter: 'enter',\r\n            f2: 'f2',\r\n            home: 'home',\r\n            moveDown: 'downarrow',\r\n            moveLeft: 'leftarrow',\r\n            moveRight: 'rightarrow',\r\n            moveUp: 'uparrow',\r\n            ctrlDown: 'ctrl+downarrow',\r\n            ctrlUp: 'ctrl+uparrow',\r\n            ctrlEnter: 'ctrl+enter',\r\n            ctrlHome: 'ctrl+home',\r\n            ctrlEnd: 'ctrl+end',\r\n            ctrlA: 'ctrl+A',\r\n            shiftDown: 'shift+downarrow',\r\n            shiftUp: 'shift+uparrow',\r\n            shiftEnter: 'shift+enter',\r\n            shiftHome: 'shift+home',\r\n            shiftEnd: 'shift+end',\r\n            csDown: 'ctrl+shift+downarrow',\r\n            csUp: 'ctrl+shift+uparrow',\r\n            csEnter: 'ctrl+shift+enter',\r\n            csHome: 'ctrl+shift+home',\r\n            csEnd: 'ctrl+shift+end',\r\n            space: 'space'\r\n        };\r\n        this.listBaseOption = {\r\n            expandCollapse: true,\r\n            showIcon: true,\r\n            expandIconClass: EXPANDABLE,\r\n            ariaAttributes: treeAriaAttr,\r\n            expandIconPosition: 'Left',\r\n            itemCreated: function (e) {\r\n                _this.beforeNodeCreate(e);\r\n            },\r\n            enableHtmlSanitizer: this.enableHtmlSanitizer,\r\n            itemNavigable: this.fullRowNavigable\r\n        };\r\n        this.updateListProp(this.fields);\r\n        this.aniObj = new Animation({});\r\n        this.treeList = [];\r\n        this.isLoaded = false;\r\n        this.isInitalExpand = false;\r\n        this.expandChildren = [];\r\n        this.index = 0;\r\n        this.setTouchClass();\r\n        if (isNOU(this.selectedNodes)) {\r\n            this.setProperties({ selectedNodes: [] }, true);\r\n        }\r\n        if (isNOU(this.checkedNodes)) {\r\n            this.setProperties({ checkedNodes: [] }, true);\r\n        }\r\n        if (isNOU(this.expandedNodes)) {\r\n            this.setProperties({ expandedNodes: [] }, true);\r\n        }\r\n        else {\r\n            this.isInitalExpand = true;\r\n        }\r\n    };\r\n    /**\r\n     * Get the properties to be maintained in the persisted state.\r\n     *\r\n     * @returns {string} - returns the persisted data\r\n     * @hidden\r\n     */\r\n    TreeView.prototype.getPersistData = function () {\r\n        var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\r\n        return this.addOnPersist(keyEntity);\r\n    };\r\n    /**\r\n     * To Initialize the control rendering\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    TreeView.prototype.render = function () {\r\n        this.initialRender = true;\r\n        this.initialize();\r\n        this.setDataBinding(false);\r\n        this.setDisabledMode();\r\n        this.setExpandOnType();\r\n        if (!this.disabled) {\r\n            this.setRipple();\r\n        }\r\n        this.wireEditingEvents(this.allowEditing);\r\n        this.setDragAndDrop(this.allowDragAndDrop);\r\n        if (!this.disabled) {\r\n            this.wireEvents();\r\n        }\r\n        this.initialRender = false;\r\n        this.renderComplete();\r\n    };\r\n    TreeView.prototype.initialize = function () {\r\n        this.element.setAttribute('role', 'tree');\r\n        this.element.setAttribute('tabindex', '0');\r\n        this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\r\n        this.setCssClass(null, this.cssClass);\r\n        this.setEnableRtl();\r\n        this.setFullRow(this.fullRowSelect);\r\n        this.setTextWrap();\r\n        this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\r\n    };\r\n    TreeView.prototype.setDisabledMode = function () {\r\n        if (this.disabled) {\r\n            this.element.classList.add(DISABLED);\r\n        }\r\n        else {\r\n            this.element.classList.remove(DISABLED);\r\n        }\r\n    };\r\n    TreeView.prototype.setEnableRtl = function () {\r\n        (this.enableRtl ? addClass : removeClass)([this.element], RTL);\r\n    };\r\n    TreeView.prototype.setRipple = function () {\r\n        var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\r\n        var rippleModel = {\r\n            selector: tempStr,\r\n            ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\r\n        };\r\n        this.rippleFn = rippleEffect(this.element, rippleModel);\r\n        var iconModel = {\r\n            selector: '.' + TEXTWRAP + ' > .' + ICON,\r\n            isCenterRipple: true\r\n        };\r\n        this.rippleIconFn = rippleEffect(this.element, iconModel);\r\n    };\r\n    TreeView.prototype.setFullRow = function (isEnabled) {\r\n        (isEnabled ? addClass : removeClass)([this.element], FULLROWWRAP);\r\n    };\r\n    TreeView.prototype.setMultiSelect = function (isEnabled) {\r\n        var firstUl = select('.' + PARENTITEM, this.element);\r\n        if (isEnabled) {\r\n            firstUl.setAttribute('aria-multiselectable', 'true');\r\n        }\r\n        else {\r\n            firstUl.removeAttribute('aria-multiselectable');\r\n        }\r\n    };\r\n    // eslint-disable-next-line\r\n    TreeView.prototype.templateComplier = function (template) {\r\n        if (template) {\r\n            this.hasTemplate = true;\r\n            // eslint-disable-next-line\r\n            var e = void 0;\r\n            this.element.classList.add(INTERACTION);\r\n            try {\r\n                if (document.querySelectorAll(template).length) {\r\n                    return compile(document.querySelector(template).innerHTML.trim());\r\n                }\r\n            }\r\n            catch (e) {\r\n                return compile(template);\r\n            }\r\n        }\r\n        this.element.classList.remove(INTERACTION);\r\n        return undefined;\r\n    };\r\n    TreeView.prototype.setDataBinding = function (changeDataSource) {\r\n        var _this = this;\r\n        this.treeList.push('false');\r\n        if (this.fields.dataSource instanceof DataManager) {\r\n            /* eslint-disable */\r\n            this.isOffline = this.fields.dataSource.dataSource.offline;\r\n            if (this.fields.dataSource.ready) {\r\n                this.fields.dataSource.ready.then(function (e) {\r\n                    /* eslint-disable */\r\n                    _this.isOffline = _this.fields.dataSource.dataSource.offline;\r\n                    if (_this.fields.dataSource instanceof DataManager && _this.isOffline) {\r\n                        _this.treeList.pop();\r\n                        _this.treeData = e.result;\r\n                        _this.isNumberTypeId = _this.getType();\r\n                        _this.setRootData();\r\n                        _this.renderItems(true);\r\n                        if (_this.treeList.length === 0 && !_this.isLoaded) {\r\n                            _this.finalize();\r\n                        }\r\n                    }\r\n                }).catch(function (e) {\r\n                    _this.trigger('actionFailure', { error: e });\r\n                });\r\n            }\r\n            else {\r\n                this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {\r\n                    _this.treeList.pop();\r\n                    _this.treeData = e.result;\r\n                    _this.isNumberTypeId = _this.getType();\r\n                    _this.setRootData();\r\n                    if (changeDataSource) {\r\n                        _this.changeDataSource = true;\r\n                    }\r\n                    _this.renderItems(true);\r\n                    _this.changeDataSource = false;\r\n                    if (_this.treeList.length === 0 && !_this.isLoaded) {\r\n                        _this.finalize();\r\n                    }\r\n                }).catch(function (e) {\r\n                    _this.trigger('actionFailure', { error: e });\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.treeList.pop();\r\n            if (isNOU(this.fields.dataSource)) {\r\n                this.rootData = this.treeData = [];\r\n            }\r\n            else {\r\n                this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\r\n                this.setRootData();\r\n            }\r\n            this.isNumberTypeId = this.getType();\r\n            this.renderItems(false);\r\n        }\r\n        if (this.treeList.length === 0 && !this.isLoaded) {\r\n            this.finalize();\r\n        }\r\n    };\r\n    TreeView.prototype.getQuery = function (mapper, value) {\r\n        if (value === void 0) { value = null; }\r\n        var columns = [];\r\n        var query;\r\n        if (!mapper.query) {\r\n            query = new Query();\r\n            var prop = this.getActualProperties(mapper);\r\n            for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {\r\n                var col = _a[_i];\r\n                if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col]\r\n                    && col !== 'url' && columns.indexOf(mapper[col]) === -1) {\r\n                    columns.push(mapper[col]);\r\n                }\r\n            }\r\n            query.select(columns);\r\n            if (prop.hasOwnProperty('tableName')) {\r\n                query.from(mapper.tableName);\r\n            }\r\n        }\r\n        else {\r\n            query = mapper.query.clone();\r\n        }\r\n        ListBase.addSorting(this.sortOrder, mapper.text, query);\r\n        if (!isNOU(value) && !isNOU(mapper.parentID)) {\r\n            query.where(mapper.parentID, 'equal', (this.isNumberTypeId ? parseFloat(value) : value));\r\n        }\r\n        return query;\r\n    };\r\n    TreeView.prototype.getType = function () {\r\n        return this.treeData[0] ? ((typeof getValue(this.fields.id, this.treeData[0]) === 'number') ? true : false) : false;\r\n    };\r\n    TreeView.prototype.setRootData = function () {\r\n        this.dataType = this.getDataType(this.treeData, this.fields);\r\n        if (this.dataType === 1) {\r\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\r\n            var rootItems = this.getChildNodes(this.treeData, undefined, true);\r\n            if (isNOU(rootItems)) {\r\n                this.rootData = [];\r\n            }\r\n            else {\r\n                this.rootData = rootItems;\r\n            }\r\n        }\r\n        else {\r\n            this.rootData = this.treeData;\r\n        }\r\n    };\r\n    TreeView.prototype.renderItems = function (isSorted) {\r\n        /* eslint-disable */\r\n        this.listBaseOption.ariaAttributes.level = 1;\r\n        var sortedData = this.getSortedData(this.rootData);\r\n        this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);\r\n        this.element.appendChild(this.ulElement);\r\n        var rootNodes = this.ulElement.querySelectorAll('.e-list-item');\r\n        if (this.loadOnDemand === false) {\r\n            var i = 0;\r\n            while (i < rootNodes.length) {\r\n                this.renderChildNodes(rootNodes[i], true, null, true);\r\n                i++;\r\n            }\r\n        }\r\n        var parentEle = selectAll('.' + PARENTITEM, this.element);\r\n        if ((parentEle.length === 1 && (rootNodes && rootNodes.length !== 0)) || this.loadOnDemand) {\r\n            this.finalizeNode(this.element);\r\n        }\r\n        this.parentNodeCheck = [];\r\n        this.parentCheckData = [];\r\n        this.updateCheckedStateFromDS();\r\n        if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\r\n            this.updateParentCheckState();\r\n        }\r\n    };\r\n    /**\r\n     * Update the checkedNodes from datasource at initial rendering\r\n     */\r\n    TreeView.prototype.updateCheckedStateFromDS = function (id) {\r\n        this.validNodes = [];\r\n        if (this.treeData && this.showCheckBox) {\r\n            if (this.dataType === 1) {\r\n                var mapper = this.fields;\r\n                var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\r\n                for (var i = 0; i < resultData.length; i++) {\r\n                    var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\r\n                    var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;\r\n                    if (this.checkedNodes.indexOf(resultId) === -1 && !(this.isLoaded)) {\r\n                        this.checkedNodes.push(resultId);\r\n                    }\r\n                    if (resultData[i][this.fields.hasChildren]) {\r\n                        var id_1 = resultData[i][this.fields.id];\r\n                        var childData = new DataManager(this.treeData).\r\n                            executeLocal(new Query().where(mapper.parentID, 'equal', id_1, false));\r\n                        for (var child = 0; child < childData.length; child++) {\r\n                            var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;\r\n                            if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\r\n                                this.checkedNodes.push(childId);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < this.checkedNodes.length; i++) {\r\n                    var mapper_1 = this.fields;\r\n                    var checkState = new DataManager(this.treeData).\r\n                        executeLocal(new Query().where(mapper_1.id, 'equal', this.checkedNodes[i], true));\r\n                    if (checkState[0] && this.autoCheck) {\r\n                        this.getCheckedNodeDetails(mapper_1, checkState);\r\n                        this.checkIndeterminateState(checkState[0]);\r\n                    }\r\n                    if (checkState.length > 0) {\r\n                        var checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;\r\n                        if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\r\n                            this.validNodes.push(checkedId);\r\n                        }\r\n                    }\r\n                    var checkedData = new DataManager(this.treeData).\r\n                        executeLocal(new Query().where(mapper_1.parentID, 'equal', this.checkedNodes[i], true));\r\n                    for (var index = 0; index < checkedData.length; index++) {\r\n                        var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;\r\n                        if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\r\n                            this.checkedNodes.push(checkedId);\r\n                        }\r\n                        if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\r\n                            this.validNodes.push(checkedId);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if (this.dataType === 2 || (this.fields.dataSource instanceof DataManager &&\r\n                this.isOffline)) {\r\n                for (var index = 0; index < this.treeData.length; index++) {\r\n                    var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';\r\n                    if (this.treeData[index][this.fields.isChecked] && !(this.isLoaded) && this.checkedNodes.indexOf(fieldId) === -1) {\r\n                        this.checkedNodes.push(fieldId);\r\n                    }\r\n                    if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {\r\n                        this.validNodes.push(fieldId);\r\n                    }\r\n                    var childItems = getValue(this.fields.child.toString(), this.treeData[index]);\r\n                    if (childItems) {\r\n                        this.updateChildCheckState(childItems, this.treeData[index]);\r\n                    }\r\n                }\r\n            }\r\n            this.setProperties({ checkedNodes: this.validNodes }, true);\r\n        }\r\n    };\r\n    /**\r\n     * To check whether the list data has sub child and to change the parent check state accordingly\r\n     */\r\n    TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {\r\n        var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\r\n        var count = 0;\r\n        var element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\r\n        var parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\r\n        if (!element && !parentEle) {\r\n            var len = this.parentNodeCheck.length;\r\n            if (this.parentNodeCheck.indexOf(id) === -1) {\r\n                this.parentNodeCheck.push(id);\r\n            }\r\n            var childNodes = this.getChildNodes(this.treeData, id);\r\n            for (var i = 0; i < childNodes.length; i++) {\r\n                var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\r\n                if (this.checkedNodes.indexOf(childId) !== -1) {\r\n                    count++;\r\n                }\r\n                if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\r\n                    this.checkedNodes.push(id);\r\n                }\r\n            }\r\n            var preElement = new DataManager(this.treeData).\r\n                executeLocal(new Query().where(mapper.id, 'equal', id, true));\r\n            this.getCheckedNodeDetails(mapper, preElement);\r\n        }\r\n        else if (parentEle) {\r\n            var check = select('.' + CHECK, parentEle);\r\n            if (!check) {\r\n                this.changeState(parentEle, 'indeterminate', null, true, true);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\r\n     */\r\n    TreeView.prototype.updateParentCheckState = function () {\r\n        var indeterminate = selectAll('.' + INDETERMINATE, this.element);\r\n        var childCheckedElement;\r\n        for (var i = 0; i < indeterminate.length; i++) {\r\n            var node = closest(indeterminate[i], '.' + LISTITEM);\r\n            var nodeId = node.getAttribute('data-uid').toString();\r\n            if (this.dataType === 1) {\r\n                childCheckedElement = new DataManager(this.treeData).\r\n                    executeLocal(new Query().where(this.fields.parentID, 'equal', nodeId, true));\r\n            }\r\n            else {\r\n                childCheckedElement = this.getChildNodes(this.treeData, nodeId);\r\n            }\r\n            var count = 0;\r\n            if (childCheckedElement) {\r\n                for (var j = 0; j < childCheckedElement.length; j++) {\r\n                    var childId = childCheckedElement[j][this.fields.id].toString();\r\n                    if (this.checkedNodes.indexOf(childId) !== -1) {\r\n                        count++;\r\n                    }\r\n                }\r\n                if (count === childCheckedElement.length) {\r\n                    var nodeCheck = node.getAttribute('data-uid');\r\n                    if (this.checkedNodes.indexOf(nodeCheck) === -1) {\r\n                        this.checkedNodes.push(nodeCheck);\r\n                    }\r\n                    this.changeState(node, 'check', null, true, true);\r\n                }\r\n                else if (count === 0 && this.checkedNodes.length === 0) {\r\n                    this.changeState(node, 'uncheck', null, true, true);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\r\n     */\r\n    TreeView.prototype.checkIndeterminateState = function (data) {\r\n        var element;\r\n        if (this.dataType === 1) {\r\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\r\n        }\r\n        else {\r\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\r\n        }\r\n        if (element) {\r\n            var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');\r\n            if (ariaChecked !== 'true') {\r\n                this.changeState(element, 'indeterminate', null, true, true);\r\n            }\r\n        }\r\n        else if (this.dataType === 2) {\r\n            var len = this.parentNodeCheck.length;\r\n            if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\r\n                this.parentNodeCheck.push(data[this.fields.id].toString());\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\r\n     */\r\n    TreeView.prototype.updateChildCheckState = function (childItems, treeData) {\r\n        var count = 0;\r\n        var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\r\n        for (var index = 0; index < childItems.length; index++) {\r\n            var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\r\n            if (childItems[index][this.fields.isChecked] && !(this.isLoaded) && this.checkedNodes.indexOf(checkedChild) === -1) {\r\n                this.checkedNodes.push(checkedChild);\r\n            }\r\n            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\r\n                this.checkedNodes.push(checkedChild);\r\n            }\r\n            if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\r\n                count++;\r\n            }\r\n            if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {\r\n                this.validNodes.push(checkedChild);\r\n            }\r\n            var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\r\n            if (subChildItems) {\r\n                this.parentCheckData.push(treeData);\r\n                this.updateChildCheckState(subChildItems, childItems[index]);\r\n            }\r\n            if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\r\n                this.checkedNodes.push(checkedParent);\r\n            }\r\n        }\r\n        if (count !== 0 && this.autoCheck) {\r\n            this.checkIndeterminateState(treeData);\r\n            for (var len = 0; len < this.parentCheckData.length; len++) {\r\n                if ((treeData !== this.parentCheckData[len]) && (this.parentCheckData[len])) {\r\n                    this.checkIndeterminateState(this.parentCheckData[len]);\r\n                }\r\n            }\r\n        }\r\n        this.parentCheckData = [];\r\n    };\r\n    TreeView.prototype.beforeNodeCreate = function (e) {\r\n        if (this.showCheckBox) {\r\n            var checkboxEle = createCheckBox(this.createElement, true, { cssClass: this.touchClass });\r\n            checkboxEle.setAttribute('role', 'checkbox');\r\n            var icon = select('div.' + ICON, e.item);\r\n            var id = e.item.getAttribute('data-uid');\r\n            e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNOU(icon) ? 0 : 1]);\r\n            var checkValue = getValue(e.fields.isChecked, e.curData);\r\n            if (this.checkedNodes.indexOf(id) > -1) {\r\n                select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\r\n                checkboxEle.setAttribute('aria-checked', 'true');\r\n                this.addCheck(e.item);\r\n            }\r\n            else if (!isNOU(checkValue) && checkValue.toString() === 'true') {\r\n                select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\r\n                checkboxEle.setAttribute('aria-checked', 'true');\r\n                this.addCheck(e.item);\r\n            }\r\n            else {\r\n                checkboxEle.setAttribute('aria-checked', 'false');\r\n            }\r\n            var frame = select('.' + CHECKBOXFRAME, checkboxEle);\r\n            EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\r\n            EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\r\n        }\r\n        if (this.fullRowSelect) {\r\n            this.createFullRow(e.item);\r\n        }\r\n        if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {\r\n            e.item.setAttribute('aria-selected', 'false');\r\n        }\r\n        var fields = e.fields;\r\n        this.addActionClass(e, fields.selected, SELECTED);\r\n        this.addActionClass(e, fields.expanded, EXPANDED);\r\n        if (!isNOU(this.nodeTemplateFn)) {\r\n            var textEle = e.item.querySelector('.' + LISTTEXT);\r\n            var dataId = e.item.getAttribute('data-uid');\r\n            textEle.innerHTML = '';\r\n            this.renderNodeTemplate(e.curData, textEle, dataId);\r\n        }\r\n        var eventArgs = {\r\n            node: e.item,\r\n            nodeData: e.curData,\r\n            text: e.text,\r\n        };\r\n        if (!this.isRefreshed) {\r\n            this.trigger('drawNode', eventArgs);\r\n        }\r\n    };\r\n    TreeView.prototype.frameMouseHandler = function (e) {\r\n        var rippleSpan = select('.' + CHECKBOXRIPPLE, e.target.parentElement);\r\n        rippleMouseHandler(e, rippleSpan);\r\n    };\r\n    TreeView.prototype.addActionClass = function (e, action, cssClass) {\r\n        var data = e.curData;\r\n        var actionValue = getValue(action, data);\r\n        if (!isNOU(actionValue) && actionValue.toString() !== 'false') {\r\n            e.item.classList.add(cssClass);\r\n        }\r\n    };\r\n    TreeView.prototype.getDataType = function (ds, mapper) {\r\n        if (this.fields.dataSource instanceof DataManager) {\r\n            for (var i = 0; i < ds.length; i++) {\r\n                if (this.isOffline) {\r\n                    if ((typeof mapper.child === 'string') && isNOU(getValue(mapper.child, ds[i])) && !isNOU(getValue(mapper.parentID, ds[i]))) {\r\n                        return 1;\r\n                    }\r\n                }\r\n                else if ((typeof mapper.child === 'string') && isNOU(getValue(mapper.child, ds[i]))) {\r\n                    return 1;\r\n                }\r\n            }\r\n            return 2;\r\n        }\r\n        for (var i = 0, len = ds.length; i < len; i++) {\r\n            if ((typeof mapper.child === 'string') && !isNOU(getValue(mapper.child, ds[i]))) {\r\n                return 2;\r\n            }\r\n            if (!isNOU(getValue(mapper.parentID, ds[i])) || !isNOU(getValue(mapper.hasChildren, ds[i]))) {\r\n                return 1;\r\n            }\r\n        }\r\n        return 1;\r\n    };\r\n    TreeView.prototype.getGroupedData = function (dataSource, groupBy) {\r\n        var cusQuery = new Query().group(groupBy);\r\n        var ds = ListBase.getDataSource(dataSource, cusQuery);\r\n        var grpItem = [];\r\n        for (var j = 0; j < ds.length; j++) {\r\n            var itemObj = ds[j].items;\r\n            grpItem.push(itemObj);\r\n        }\r\n        return grpItem;\r\n    };\r\n    TreeView.prototype.getSortedData = function (list) {\r\n        if (list && this.sortOrder !== 'None') {\r\n            list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));\r\n        }\r\n        return list;\r\n    };\r\n    TreeView.prototype.finalizeNode = function (element) {\r\n        var iNodes = selectAll('.' + IMAGE, element);\r\n        for (var k = 0; k < iNodes.length; k++) {\r\n            iNodes[k].setAttribute('alt', IMAGE);\r\n        }\r\n        if (this.isLoaded) {\r\n            var sNodes = selectAll('.' + SELECTED, element);\r\n            for (var i = 0; i < sNodes.length; i++) {\r\n                this.selectNode(sNodes[i], null);\r\n                break;\r\n            }\r\n            removeClass(sNodes, SELECTED);\r\n        }\r\n        var cNodes = selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\r\n        for (var j = 0; j < cNodes.length; j++) {\r\n            var icon = select('div.' + ICON, cNodes[j]);\r\n            if (icon && icon.classList.contains(EXPANDABLE)) {\r\n                this.disableExpandAttr(cNodes[j]);\r\n            }\r\n        }\r\n        var eNodes = selectAll('.' + EXPANDED, element);\r\n        if (!this.isInitalExpand) {\r\n            for (var i = 0; i < eNodes.length; i++) {\r\n                this.renderChildNodes(eNodes[i]);\r\n            }\r\n        }\r\n        removeClass(eNodes, EXPANDED);\r\n        this.updateList();\r\n        if (this.isLoaded) {\r\n            this.updateCheckedProp();\r\n        }\r\n    };\r\n    TreeView.prototype.updateCheckedProp = function () {\r\n        if (this.showCheckBox) {\r\n            var nodes = [].concat([], this.checkedNodes);\r\n            this.setProperties({ checkedNodes: nodes }, true);\r\n        }\r\n    };\r\n    TreeView.prototype.ensureIndeterminate = function () {\r\n        if (this.autoCheck) {\r\n            var liElement = selectAll('li', this.element);\r\n            var ulElement = void 0;\r\n            for (var i = 0; i < liElement.length; i++) {\r\n                if (liElement[i].classList.contains(LISTITEM)) {\r\n                    ulElement = select('.' + PARENTITEM, liElement[i]);\r\n                    if (ulElement) {\r\n                        this.ensureParentCheckState(liElement[i]);\r\n                    }\r\n                    else {\r\n                        this.ensureChildCheckState(liElement[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var indeterminate = selectAll('.' + INDETERMINATE, this.element);\r\n            for (var i = 0; i < indeterminate.length; i++) {\r\n                indeterminate[i].classList.remove(INDETERMINATE);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.ensureParentCheckState = function (element) {\r\n        if (!isNOU(element)) {\r\n            if (element.classList.contains(ROOT)) {\r\n                return;\r\n            }\r\n            var ulElement = element;\r\n            if (element.classList.contains(LISTITEM)) {\r\n                ulElement = select('.' + PARENTITEM, element);\r\n            }\r\n            var checkedNodes = selectAll('.' + CHECK, ulElement);\r\n            var indeterminateNodes = selectAll('.' + INDETERMINATE, ulElement);\r\n            var nodes = selectAll('.' + LISTITEM, ulElement);\r\n            var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\r\n            if (nodes.length === checkedNodes.length) {\r\n                this.changeState(checkBoxEle, 'check', null, true, true);\r\n            }\r\n            else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {\r\n                this.changeState(checkBoxEle, 'indeterminate', null, true, true);\r\n            }\r\n            else if (checkedNodes.length === 0) {\r\n                this.changeState(checkBoxEle, 'uncheck', null, true, true);\r\n            }\r\n            var parentUL = closest(element, '.' + PARENTITEM);\r\n            if (!isNOU(parentUL)) {\r\n                var currentParent = closest(parentUL, '.' + LISTITEM);\r\n                this.ensureParentCheckState(currentParent);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.ensureChildCheckState = function (element, e) {\r\n        if (!isNOU(element)) {\r\n            var childElement = select('.' + PARENTITEM, element);\r\n            var checkBoxes = void 0;\r\n            if (!isNOU(childElement)) {\r\n                checkBoxes = selectAll('.' + CHECKBOXWRAP, childElement);\r\n                var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\r\n                var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\r\n                var childCheck = childElement.querySelectorAll('li');\r\n                var expandState = childElement.parentElement.getAttribute('aria-expanded');\r\n                var checkedState = void 0;\r\n                for (var index = 0; index < checkBoxes.length; index++) {\r\n                    var childId = childCheck[index].getAttribute('data-uid');\r\n                    if (!isNOU(this.currentLoadData) && !isNOU(getValue(this.fields.isChecked, this.currentLoadData[index]))) {\r\n                        checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';\r\n                        if (this.ele !== -1) {\r\n                            checkedState = isChecked ? 'check' : 'uncheck';\r\n                        }\r\n                        if ((checkedState === 'uncheck') && (!isUndefined(this.parentNodeCheck) && this.autoCheck\r\n                            && this.parentNodeCheck.indexOf(childId) !== -1)) {\r\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\r\n                            checkedState = 'indeterminate';\r\n                        }\r\n                    }\r\n                    else {\r\n                        var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\r\n                        if (isChecked) {\r\n                            checkedState = 'check';\r\n                        }\r\n                        else if (isNodeChecked && !this.isLoaded) {\r\n                            checkedState = 'check';\r\n                        }\r\n                        else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\r\n                            checkedState = 'check';\r\n                        }\r\n                        else if (childCheck[index].classList.contains(CHILD) && (!isUndefined(this.parentNodeCheck) && this.autoCheck\r\n                            && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\r\n                            checkedState = 'indeterminate';\r\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\r\n                        }\r\n                        else if (this.dataType === 1 && (!isUndefined(this.parentNodeCheck) && this.autoCheck &&\r\n                            (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\r\n                            checkedState = 'indeterminate';\r\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\r\n                        }\r\n                        else {\r\n                            checkedState = 'uncheck';\r\n                        }\r\n                    }\r\n                    this.changeState(checkBoxes[index], checkedState, e, true, true);\r\n                }\r\n            }\r\n            if (this.autoCheck && this.isLoaded) {\r\n                this.updateParentCheckState();\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {\r\n        var li = selectAll('.' + LISTITEM, this.element);\r\n        if (!isNOU(nodes)) {\r\n            for (var len = nodes.length; len >= 0; len--) {\r\n                var liEle = void 0;\r\n                if (nodes.length === 1) {\r\n                    liEle = this.getElement(nodes[len - 1]);\r\n                }\r\n                else {\r\n                    liEle = this.getElement(nodes[len]);\r\n                }\r\n                if (isNOU(liEle)) {\r\n                    var node = void 0;\r\n                    node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;\r\n                    if (node !== '' && doCheck && node) {\r\n                        this.setValidCheckedNode(node);\r\n                        this.dynamicCheckState(node, doCheck);\r\n                    }\r\n                    else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\r\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\r\n                        var childItems = this.getChildNodes(this.treeData, node);\r\n                        if (childItems) {\r\n                            for (var i = 0; i < childItems.length; i++) {\r\n                                var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\r\n                                if (this.checkedNodes.indexOf(id) !== -1) {\r\n                                    this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\r\n                                    var ele = this.element.querySelector('[data-uid=\"' + id + '\"]');\r\n                                    if (ele) {\r\n                                        this.changeState(ele, 'uncheck', null);\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (this.parentNodeCheck.indexOf(node) !== -1) {\r\n                                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\r\n                            }\r\n                        }\r\n                        if (node) {\r\n                            this.dynamicCheckState(node, doCheck);\r\n                        }\r\n                        this.updateField(this.treeData, this.fields, node, 'isChecked', null);\r\n                    }\r\n                    continue;\r\n                }\r\n                var checkBox = select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\r\n                this.validateCheckNode(checkBox, !doCheck, liEle, null);\r\n            }\r\n        }\r\n        else {\r\n            var checkBoxes = selectAll('.' + CHECKBOXWRAP, this.element);\r\n            if (this.loadOnDemand) {\r\n                for (var index = 0; index < checkBoxes.length; index++) {\r\n                    this.updateFieldChecked(checkBoxes[index], doCheck);\r\n                    this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\r\n                }\r\n            }\r\n            else {\r\n                for (var index = 0; index < checkBoxes.length; index++) {\r\n                    this.updateFieldChecked(checkBoxes[index], doCheck);\r\n                    this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');\r\n                }\r\n            }\r\n        }\r\n        if (nodes) {\r\n            for (var j = 0; j < nodes.length; j++) {\r\n                var node = nodes[j] ? nodes[j].toString() : '';\r\n                if (!doCheck) {\r\n                    this.updateField(this.treeData, this.fields, node, 'isChecked', null);\r\n                }\r\n            }\r\n        }\r\n        if (this.autoCheck) {\r\n            this.updateParentCheckState();\r\n        }\r\n    };\r\n    TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {\r\n        var currLi = closest(checkbox, '.' + LISTITEM);\r\n        var id = currLi.getAttribute('data-uid');\r\n        var nodeDetails = this.getNodeData(currLi);\r\n        if (nodeDetails.isChecked === 'true' && !doCheck) {\r\n            this.updateField(this.treeData, this.fields, id, 'isChecked', null);\r\n        }\r\n    };\r\n    /**\r\n     * Changes the parent and child  check state while changing the checkedNodes via setmodel\r\n     */\r\n    TreeView.prototype.dynamicCheckState = function (node, doCheck) {\r\n        if (this.dataType === 1) {\r\n            var count = 0;\r\n            var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, 'equal', node, true));\r\n            if (resultId[0]) {\r\n                var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\r\n                var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\r\n                var parentElement = this.element.querySelector('[data-uid=\"' + parent_1 + '\"]');\r\n                var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\r\n                var check = parentElement ? select('.' + CHECK, parentElement) : null;\r\n                var element = this.element.querySelector('[data-uid=\"' + id + '\"]');\r\n                var childNodes = this.getChildNodes(this.treeData, parent_1);\r\n                if (childNodes) {\r\n                    for (var i = 0; i < childNodes.length; i++) {\r\n                        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\r\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\r\n                            count++;\r\n                        }\r\n                    }\r\n                }\r\n                if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (id === node) && this.autoCheck) {\r\n                    this.changeState(parentElement, 'indeterminate', null);\r\n                }\r\n                else if (this.checkedNodes.indexOf(node) === -1 && element && (id === node) && !doCheck) {\r\n                    this.changeState(element, 'uncheck', null);\r\n                }\r\n                else if (this.checkedNodes.indexOf(node) !== -1 && element && (id === node) && doCheck) {\r\n                    this.changeState(element, 'check', null);\r\n                }\r\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\r\n                    && count !== 0) {\r\n                    this.changeState(parentElement, 'indeterminate', null);\r\n                }\r\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\r\n                    && count === 0) {\r\n                    this.changeState(parentElement, 'uncheck', null);\r\n                }\r\n                else if (!element && !parentElement && (id === node) && this.autoCheck) {\r\n                    this.updateIndeterminate(node, doCheck);\r\n                }\r\n            }\r\n        }\r\n        else if (this.dataType === 2 || (this.fields.dataSource instanceof DataManager &&\r\n            this.isOffline)) {\r\n            var id = void 0;\r\n            var parentElement = void 0;\r\n            var check = void 0;\r\n            for (var i = 0; i < this.treeData.length; i++) {\r\n                id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';\r\n                parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\r\n                check = parentElement ? select('.' + CHECK, parentElement) : null;\r\n                if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\r\n                    this.changeState(parentElement, 'uncheck', null);\r\n                }\r\n                var subChild = getValue(this.fields.child.toString(), this.treeData[i]);\r\n                if (subChild) {\r\n                    this.updateChildIndeterminate(subChild, id, node, doCheck, id);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\r\n     */\r\n    TreeView.prototype.updateIndeterminate = function (node, doCheck) {\r\n        var indeterminateData = this.getTreeData(node);\r\n        var count = 0;\r\n        var parent;\r\n        if (this.dataType === 1) {\r\n            parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\r\n        }\r\n        var childNodes = this.getChildNodes(this.treeData, parent);\r\n        if (childNodes) {\r\n            for (var i = 0; i < childNodes.length; i++) {\r\n                var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\r\n                if (this.checkedNodes.indexOf(childId) !== -1) {\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n        var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\r\n        if (parentElement && doCheck) {\r\n            this.changeState(parentElement, 'indeterminate', null);\r\n        }\r\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\r\n            this.changeState(parentElement, 'indeterminate', null);\r\n        }\r\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\r\n            this.changeState(parentElement, 'uncheck', null);\r\n        }\r\n        else if (!parentElement) {\r\n            if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\r\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\r\n            }\r\n            else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\r\n                this.parentNodeCheck.push(parent);\r\n            }\r\n            else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1\r\n                && count !== 0) {\r\n                this.parentNodeCheck.push(parent);\r\n            }\r\n            this.updateIndeterminate(parent, doCheck);\r\n            if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\r\n                this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\r\n     */\r\n    TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {\r\n        var count = 0;\r\n        for (var j = 0; j < subChild.length; j++) {\r\n            var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';\r\n            if (this.checkedNodes.indexOf(subId) !== -1) {\r\n                count++;\r\n            }\r\n            var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\r\n            var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\r\n            var check = parentElement ? select('.' + CHECK, parentElement) : null;\r\n            var element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\r\n            var childElementCheck = element ? select('.' + CHECK, element) : null;\r\n            if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (subId === node) && this.autoCheck) {\r\n                this.changeState(parentElement, 'indeterminate', null);\r\n            }\r\n            else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && (subId === node) && !doCheck) {\r\n                if (this.autoCheck) {\r\n                    this.changeState(parentElement, 'uncheck', null);\r\n                }\r\n                else {\r\n                    if (count !== 0) {\r\n                        this.changeState(parentElement, 'indeterminate', null);\r\n                    }\r\n                    else {\r\n                        this.changeState(parentElement, 'uncheck', null);\r\n                    }\r\n                }\r\n            }\r\n            else if (this.checkedNodes.indexOf(node) === -1 && element && (subId === node) && !doCheck) {\r\n                this.changeState(element, 'uncheck', null);\r\n            }\r\n            else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && (subId === node) && this.autoCheck && count === 0\r\n                && !doCheck) {\r\n                indeterminate.classList.remove(INDETERMINATE);\r\n            }\r\n            else if (this.checkedNodes.indexOf(node) === -1 && !element && check && (subId === node) && count === 0) {\r\n                this.changeState(parentElement, 'uncheck', null);\r\n            }\r\n            else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\r\n                this.changeState(element, 'uncheck', null);\r\n            }\r\n            else if (!element && !parentElement && (subId === node) || (this.parentNodeCheck.indexOf(parent) !== -1) && this.autoCheck) {\r\n                var childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\r\n                if (doCheck && count !== 0) {\r\n                    this.changeState(childElement, 'indeterminate', null);\r\n                }\r\n                else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\r\n                    this.checkedNodes.push(parent);\r\n                }\r\n                else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\r\n                    this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\r\n                }\r\n                if (this.parentNodeCheck.indexOf(parent) === -1) {\r\n                    this.parentNodeCheck.push(parent);\r\n                }\r\n            }\r\n            var innerChild = getValue(this.fields.child.toString(), subChild[j]);\r\n            if (innerChild) {\r\n                this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {\r\n        var _this = this;\r\n        var eventArgs;\r\n        var currLi = closest(wrapper, '.' + LISTITEM);\r\n        if (wrapper === currLi) {\r\n            wrapper = select('.' + CHECKBOXWRAP, currLi);\r\n        }\r\n        if (!isPrevent) {\r\n            this.checkActionNodes = [];\r\n            eventArgs = this.getCheckEvent(currLi, state, e);\r\n            this.trigger('nodeChecking', eventArgs, function (observedArgs) {\r\n                if (!observedArgs.cancel) {\r\n                    _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\r\n        }\r\n    };\r\n    TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\r\n        var ariaState;\r\n        var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\r\n        if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\r\n            frameSpan.classList.remove(INDETERMINATE);\r\n            frameSpan.classList.add(CHECK);\r\n            this.addCheck(currLi);\r\n            ariaState = 'true';\r\n        }\r\n        else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\r\n            removeClass([frameSpan], [CHECK, INDETERMINATE]);\r\n            this.removeCheck(currLi);\r\n            ariaState = 'false';\r\n        }\r\n        else if (state === 'indeterminate' && this.autoCheck) {\r\n            frameSpan.classList.remove(CHECK);\r\n            frameSpan.classList.add(INDETERMINATE);\r\n            this.removeCheck(currLi);\r\n            ariaState = 'mixed';\r\n        }\r\n        ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\r\n        if (!isNOU(ariaState)) {\r\n            wrapper.setAttribute('aria-checked', ariaState);\r\n        }\r\n        if (isAdd) {\r\n            var data = [].concat([], this.checkActionNodes);\r\n            eventArgs = this.getCheckEvent(currLi, state, e);\r\n            if (isUndefined(isPrevent)) {\r\n                eventArgs.data = data;\r\n            }\r\n        }\r\n        if (doCheck !== undefined) {\r\n            this.ensureStateChange(currLi, doCheck);\r\n        }\r\n        if (!isPrevent) {\r\n            if (!isNOU(ariaState)) {\r\n                wrapper.setAttribute('aria-checked', ariaState);\r\n                eventArgs.data[0].checked = ariaState;\r\n                this.trigger('nodeChecked', eventArgs);\r\n                this.checkActionNodes = [];\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.addCheck = function (liEle) {\r\n        var id = liEle.getAttribute('data-uid');\r\n        if (!isNOU(id) && this.checkedNodes.indexOf(id) === -1) {\r\n            this.checkedNodes.push(id);\r\n        }\r\n    };\r\n    TreeView.prototype.removeCheck = function (liEle) {\r\n        var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\r\n        if (index > -1) {\r\n            this.checkedNodes.splice(index, 1);\r\n        }\r\n    };\r\n    TreeView.prototype.getCheckEvent = function (currLi, action, e) {\r\n        this.checkActionNodes.push(this.getNodeData(currLi));\r\n        var nodeData = this.checkActionNodes;\r\n        return { action: action, cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, data: nodeData };\r\n    };\r\n    TreeView.prototype.finalize = function () {\r\n        var firstUl = select('.' + PARENTITEM, this.element);\r\n        if (!isNullOrUndefined(firstUl)) {\r\n            firstUl.setAttribute('role', treeAriaAttr.treeRole);\r\n            this.setMultiSelect(this.allowMultiSelection);\r\n            var firstNode = select('.' + LISTITEM, this.element);\r\n            if (firstNode) {\r\n                addClass([firstNode], FOCUS);\r\n                this.updateIdAttr(null, firstNode);\r\n            }\r\n            if (this.allowTextWrap) {\r\n                this.updateWrap();\r\n            }\r\n            this.renderReactTemplates();\r\n            this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;\r\n            this.doExpandAction();\r\n        }\r\n    };\r\n    TreeView.prototype.setTextWrap = function () {\r\n        (this.allowTextWrap ? addClass : removeClass)([this.element], LISTWRAP);\r\n        if (Browser.isIE) {\r\n            (this.allowTextWrap ? addClass : removeClass)([this.element], IELISTWRAP);\r\n        }\r\n    };\r\n    TreeView.prototype.updateWrap = function (ulEle) {\r\n        if (!this.fullRowSelect) {\r\n            return;\r\n        }\r\n        var liEle = ulEle ? selectAll('.' + LISTITEM, ulEle) : this.liList;\r\n        var length = liEle.length;\r\n        for (var i = 0; i < length; i++) {\r\n            this.calculateWrap(liEle[i]);\r\n        }\r\n    };\r\n    TreeView.prototype.calculateWrap = function (liEle) {\r\n        var element = select('.' + FULLROW, liEle);\r\n        if (element && element.nextElementSibling) {\r\n            element.style.height = this.allowTextWrap ? element.nextElementSibling.offsetHeight + 'px' : '';\r\n        }\r\n    };\r\n    TreeView.prototype.doExpandAction = function () {\r\n        var eUids = this.expandedNodes;\r\n        if (this.isInitalExpand && eUids.length > 0) {\r\n            this.setProperties({ expandedNodes: [] }, true);\r\n            /* eslint-disable */\r\n            if (this.fields.dataSource instanceof DataManager) {\r\n                this.expandGivenNodes(eUids);\r\n            }\r\n            else {\r\n                for (var i = 0; i < eUids.length; i++) {\r\n                    var eNode = select('[data-uid=\"' + eUids[i] + '\"]', this.element);\r\n                    if (!isNOU(eNode)) {\r\n                        var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\r\n                        if (!isNOU(icon)) {\r\n                            this.expandAction(eNode, icon, null);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {\r\n                            this.expandChildren.push(eUids[i].toString());\r\n                        }\r\n                        continue;\r\n                    }\r\n                }\r\n                this.afterFinalized();\r\n            }\r\n        }\r\n        else {\r\n            this.afterFinalized();\r\n        }\r\n    };\r\n    TreeView.prototype.expandGivenNodes = function (arr) {\r\n        var proxy = this;\r\n        this.expandCallback(arr[this.index], function () {\r\n            proxy.index++;\r\n            if (proxy.index < arr.length) {\r\n                proxy.expandGivenNodes(arr);\r\n            }\r\n            else {\r\n                proxy.afterFinalized();\r\n            }\r\n        });\r\n    };\r\n    TreeView.prototype.expandCallback = function (eUid, callback) {\r\n        var eNode = select('[data-uid=\"' + eUid + '\"]', this.element);\r\n        if (!isNOU(eNode)) {\r\n            var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\r\n            if (!isNOU(icon)) {\r\n                this.expandAction(eNode, icon, null, false, callback);\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    };\r\n    TreeView.prototype.afterFinalized = function () {\r\n        this.doSelectionAction();\r\n        this.updateCheckedProp();\r\n        this.isAnimate = true;\r\n        this.isInitalExpand = false;\r\n        if (!this.isLoaded || this.isFieldChange) {\r\n            var eventArgs = { data: this.treeData };\r\n            this.trigger('dataBound', eventArgs);\r\n        }\r\n        this.isLoaded = true;\r\n    };\r\n    TreeView.prototype.doSelectionAction = function () {\r\n        var sNodes = selectAll('.' + SELECTED, this.element);\r\n        var sUids = this.selectedNodes;\r\n        if (sUids.length > 0) {\r\n            this.setProperties({ selectedNodes: [] }, true);\r\n            for (var i = 0; i < sUids.length; i++) {\r\n                var sNode = select('[data-uid=\"' + sUids[i] + '\"]', this.element);\r\n                if (sNode && !(sNode.classList.contains('e-active'))) {\r\n                    this.selectNode(sNode, null, true);\r\n                }\r\n                else {\r\n                    this.selectedNodes.push(sUids[i]);\r\n                }\r\n                if (!this.allowMultiSelection) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.selectGivenNodes(sNodes);\r\n        }\r\n        removeClass(sNodes, SELECTED);\r\n    };\r\n    TreeView.prototype.selectGivenNodes = function (sNodes) {\r\n        for (var i = 0; i < sNodes.length; i++) {\r\n            if (!sNodes[i].classList.contains('e-disable')) {\r\n                this.selectNode(sNodes[i], null, true);\r\n            }\r\n            if (!this.allowMultiSelection) {\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.clickHandler = function (event) {\r\n        var target = event.originalEvent.target;\r\n        EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\r\n        if (!target || this.dragStartAction) {\r\n            return;\r\n        }\r\n        else {\r\n            var classList = target.classList;\r\n            var li = closest(target, '.' + LISTITEM);\r\n            if (!li) {\r\n                return;\r\n            }\r\n            else if (event.originalEvent.which !== 3) {\r\n                var rippleElement = select('.' + RIPPLEELMENT, li);\r\n                var rippleIcons = select('.' + ICON, li);\r\n                this.removeHover();\r\n                this.setFocusElement(li);\r\n                if (this.showCheckBox && !li.classList.contains('e-disable')) {\r\n                    var checkWrapper = closest(target, '.' + CHECKBOXWRAP);\r\n                    if (!isNOU(checkWrapper)) {\r\n                        var checkElement = select('.' + CHECKBOXFRAME, checkWrapper);\r\n                        this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\r\n                        this.triggerClickEvent(event.originalEvent, li);\r\n                        return;\r\n                    }\r\n                }\r\n                if (classList.contains(EXPANDABLE)) {\r\n                    this.expandAction(li, target, event);\r\n                }\r\n                else if (classList.contains(COLLAPSIBLE)) {\r\n                    this.collapseNode(li, target, event);\r\n                }\r\n                else if (rippleElement && rippleIcons) {\r\n                    if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\r\n                        this.expandAction(li, rippleIcons, event);\r\n                    }\r\n                    else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\r\n                        this.collapseNode(li, rippleIcons, event);\r\n                    }\r\n                    else if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\r\n                        this.toggleSelect(li, event.originalEvent, false);\r\n                    }\r\n                }\r\n                else {\r\n                    if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\r\n                        this.toggleSelect(li, event.originalEvent, false);\r\n                    }\r\n                }\r\n            }\r\n            this.triggerClickEvent(event.originalEvent, li);\r\n        }\r\n    };\r\n    TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {\r\n        var currLi = closest(wrapper, '.' + LISTITEM);\r\n        var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\r\n        eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\r\n        this.trigger('nodeChecked', eventArgs);\r\n    };\r\n    TreeView.prototype.triggerClickEvent = function (e, li) {\r\n        var eventArgs = {\r\n            event: e,\r\n            node: li,\r\n        };\r\n        this.trigger('nodeClicked', eventArgs);\r\n    };\r\n    TreeView.prototype.expandNode = function (currLi, icon, loaded) {\r\n        var _this = this;\r\n        this.renderReactTemplates();\r\n        if (icon.classList.contains(LOAD)) {\r\n            this.hideSpinner(icon);\r\n        }\r\n        if (!this.initialRender) {\r\n            icon.classList.add('interaction');\r\n        }\r\n        if (loaded !== true || (loaded === true && currLi.classList.contains('e-expanded'))) {\r\n            if (this.preventExpand !== true) {\r\n                removeClass([icon], EXPANDABLE);\r\n                addClass([icon], COLLAPSIBLE);\r\n                var start_1 = 0;\r\n                var end_1 = 0;\r\n                var proxy_1 = this;\r\n                var ul_1 = select('.' + PARENTITEM, currLi);\r\n                var liEle_1 = currLi;\r\n                this.setHeight(liEle_1, ul_1);\r\n                var activeElement_1 = select('.' + LISTITEM + '.' + ACTIVE, currLi);\r\n                if (this.isAnimate && !this.isRefreshed) {\r\n                    this.aniObj.animate(ul_1, {\r\n                        name: this.animation.expand.effect,\r\n                        duration: this.animation.expand.duration,\r\n                        timingFunction: this.animation.expand.easing,\r\n                        begin: function (args) {\r\n                            liEle_1.style.overflow = 'hidden';\r\n                            if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\r\n                                activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);\r\n                            }\r\n                            start_1 = liEle_1.offsetHeight;\r\n                            end_1 = select('.' + TEXTWRAP, currLi).offsetHeight;\r\n                        },\r\n                        progress: function (args) {\r\n                            args.element.style.display = 'block';\r\n                            proxy_1.animateHeight(args, start_1, end_1);\r\n                        },\r\n                        end: function (args) {\r\n                            args.element.style.display = 'block';\r\n                            if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\r\n                                activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);\r\n                            }\r\n                            _this.expandedNode(liEle_1, ul_1, icon);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    this.expandedNode(liEle_1, ul_1, icon);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var ul = select('.' + PARENTITEM, currLi);\r\n            ul.style.display = 'none';\r\n            if (this.fields.dataSource instanceof DataManager === true) {\r\n                this.preventExpand = false;\r\n            }\r\n        }\r\n        if (this.initialRender) {\r\n            icon.classList.add('interaction');\r\n        }\r\n    };\r\n    TreeView.prototype.expandedNode = function (currLi, ul, icon) {\r\n        ul.style.display = 'block';\r\n        currLi.style.display = 'block';\r\n        currLi.style.overflow = '';\r\n        currLi.style.height = '';\r\n        removeClass([icon], PROCESS);\r\n        this.addExpand(currLi);\r\n        if (this.allowTextWrap && this.isLoaded && this.isFirstRender) {\r\n            this.updateWrap(currLi);\r\n            this.isFirstRender = false;\r\n        }\r\n        if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\r\n            this.expandArgs = this.getExpandEvent(currLi, null);\r\n            this.trigger('nodeExpanded', this.expandArgs);\r\n        }\r\n    };\r\n    TreeView.prototype.addExpand = function (liEle) {\r\n        liEle.setAttribute('aria-expanded', 'true');\r\n        removeClass([liEle], NODECOLLAPSED);\r\n        var id = liEle.getAttribute('data-uid');\r\n        if (!isNOU(id) && this.expandedNodes.indexOf(id) === -1) {\r\n            this.expandedNodes.push(id);\r\n        }\r\n    };\r\n    TreeView.prototype.collapseNode = function (currLi, icon, e) {\r\n        var _this = this;\r\n        if (icon.classList.contains(PROCESS)) {\r\n            return;\r\n        }\r\n        else {\r\n            addClass([icon], PROCESS);\r\n        }\r\n        var colArgs;\r\n        if (this.isLoaded) {\r\n            colArgs = this.getExpandEvent(currLi, e);\r\n            this.trigger('nodeCollapsing', colArgs, function (observedArgs) {\r\n                if (observedArgs.cancel) {\r\n                    removeClass([icon], PROCESS);\r\n                }\r\n                else {\r\n                    _this.nodeCollapseAction(currLi, icon, observedArgs);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.nodeCollapseAction(currLi, icon, colArgs);\r\n        }\r\n    };\r\n    TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {\r\n        var _this = this;\r\n        removeClass([icon], COLLAPSIBLE);\r\n        addClass([icon], EXPANDABLE);\r\n        var start = 0;\r\n        var end = 0;\r\n        var proxy = this;\r\n        var ul = select('.' + PARENTITEM, currLi);\r\n        var liEle = currLi;\r\n        var activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\r\n        if (this.isAnimate) {\r\n            this.aniObj.animate(ul, {\r\n                name: this.animation.collapse.effect,\r\n                duration: this.animation.collapse.duration,\r\n                timingFunction: this.animation.collapse.easing,\r\n                begin: function (args) {\r\n                    liEle.style.overflow = 'hidden';\r\n                    if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\r\n                        activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\r\n                    }\r\n                    start = select('.' + TEXTWRAP, currLi).offsetHeight;\r\n                    end = liEle.offsetHeight;\r\n                },\r\n                progress: function (args) {\r\n                    proxy.animateHeight(args, start, end);\r\n                },\r\n                end: function (args) {\r\n                    args.element.style.display = 'none';\r\n                    if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\r\n                        activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\r\n                    }\r\n                    _this.collapsedNode(liEle, ul, icon, colArgs);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.collapsedNode(liEle, ul, icon, colArgs);\r\n        }\r\n    };\r\n    TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {\r\n        ul.style.display = 'none';\r\n        liEle.style.overflow = '';\r\n        liEle.style.height = '';\r\n        removeClass([icon], PROCESS);\r\n        this.removeExpand(liEle);\r\n        if (this.isLoaded) {\r\n            colArgs = this.getExpandEvent(liEle, null);\r\n            this.trigger('nodeCollapsed', colArgs);\r\n        }\r\n    };\r\n    TreeView.prototype.removeExpand = function (liEle, toRemove) {\r\n        if (toRemove) {\r\n            liEle.removeAttribute('aria-expanded');\r\n        }\r\n        else {\r\n            this.disableExpandAttr(liEle);\r\n        }\r\n        var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\r\n        if (index > -1) {\r\n            this.expandedNodes.splice(index, 1);\r\n        }\r\n    };\r\n    TreeView.prototype.disableExpandAttr = function (liEle) {\r\n        liEle.setAttribute('aria-expanded', 'false');\r\n        addClass([liEle], NODECOLLAPSED);\r\n    };\r\n    TreeView.prototype.setHeight = function (currLi, ul) {\r\n        ul.style.display = 'block';\r\n        ul.style.visibility = 'hidden';\r\n        currLi.style.height = currLi.offsetHeight + 'px';\r\n        ul.style.display = 'none';\r\n        ul.style.visibility = '';\r\n    };\r\n    TreeView.prototype.animateHeight = function (args, start, end) {\r\n        var remaining = (args.duration - args.timeStamp) / args.duration;\r\n        var currentHeight = (end - start) * remaining + start;\r\n        args.element.parentElement.style.height = currentHeight + 'px';\r\n    };\r\n    TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded) {\r\n        var _this = this;\r\n        var eicon = select('div.' + ICON, parentLi);\r\n        if (isNOU(eicon)) {\r\n            return;\r\n        }\r\n        this.showSpinner(eicon);\r\n        var childItems;\r\n        /* eslint-disable */\r\n        if (this.fields.dataSource instanceof DataManager) {\r\n            var level = this.parents(parentLi, '.' + PARENTITEM).length;\r\n            var mapper_2 = this.getChildFields(this.fields, level, 1);\r\n            if (isNOU(mapper_2) || isNOU(mapper_2.dataSource)) {\r\n                detach(eicon);\r\n                this.removeExpand(parentLi, true);\r\n                return;\r\n            }\r\n            this.treeList.push('false');\r\n            if (this.fields.dataSource instanceof DataManager && this.isOffline) {\r\n                this.treeList.pop();\r\n                childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\r\n                this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\r\n            }\r\n            else {\r\n                mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {\r\n                    _this.treeList.pop();\r\n                    childItems = e.result;\r\n                    if (_this.dataType === 1) {\r\n                        _this.dataType = 2;\r\n                    }\r\n                    _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\r\n                }).catch(function (e) {\r\n                    _this.trigger('actionFailure', { error: e });\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\r\n            this.currentLoadData = this.getSortedData(childItems);\r\n            if (isNOU(childItems) || childItems.length === 0) {\r\n                detach(eicon);\r\n                this.removeExpand(parentLi, true);\r\n                return;\r\n            }\r\n            else {\r\n                this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\r\n                parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));\r\n                this.expandNode(parentLi, eicon, loaded);\r\n                this.setSelectionForChildNodes(childItems);\r\n                this.ensureCheckNode(parentLi);\r\n                this.finalizeNode(parentLi);\r\n                this.disableTreeNodes(childItems);\r\n                this.renderSubChild(parentLi, expandChild, loaded);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\r\n        this.currentLoadData = childItems;\r\n        if (isNOU(childItems) || childItems.length === 0) {\r\n            detach(eicon);\r\n            this.removeExpand(parentLi, true);\r\n        }\r\n        else {\r\n            this.updateListProp(mapper);\r\n            if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\r\n                var id = parentLi.getAttribute('data-uid');\r\n                var nodeData = this.getNodeObject(id);\r\n                setValue('child', childItems, nodeData);\r\n            }\r\n            this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\r\n            parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));\r\n            this.expandNode(parentLi, eicon, loaded);\r\n            this.setSelectionForChildNodes(childItems);\r\n            this.ensureCheckNode(parentLi);\r\n            this.finalizeNode(parentLi);\r\n            this.disableTreeNodes(childItems);\r\n            this.renderSubChild(parentLi, expandChild, loaded);\r\n        }\r\n        if (callback) {\r\n            callback();\r\n        }\r\n        if (this.treeList.length === 0 && !this.isLoaded) {\r\n            this.finalize();\r\n        }\r\n    };\r\n    TreeView.prototype.disableTreeNodes = function (childItems) {\r\n        var i = 0;\r\n        while (i < childItems.length) {\r\n            var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\r\n            if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\r\n                this.doDisableAction([id]);\r\n            }\r\n            i++;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the child Item in selectedState while rendering the child node\r\n     */\r\n    TreeView.prototype.setSelectionForChildNodes = function (nodes) {\r\n        var i;\r\n        for (i = 0; i < nodes.length; i++) {\r\n            var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;\r\n            if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\r\n                this.doSelectionAction();\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.ensureCheckNode = function (element) {\r\n        if (this.showCheckBox) {\r\n            this.ele = (this.checkedElement) ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\r\n            if (this.autoCheck) {\r\n                this.ensureChildCheckState(element);\r\n                this.ensureParentCheckState(element);\r\n            }\r\n        }\r\n        this.currentLoadData = null;\r\n    };\r\n    TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {\r\n        if (nodeLevel === dataLevel) {\r\n            return mapper;\r\n        }\r\n        else {\r\n            return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\r\n        }\r\n    };\r\n    TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {\r\n        var childData;\r\n        if (nodeLevel === dataLevel) {\r\n            return this.getChildMapper(mapper);\r\n        }\r\n        else {\r\n            return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\r\n        }\r\n    };\r\n    TreeView.prototype.getChildMapper = function (mapper) {\r\n        return (typeof mapper.child === 'string' || isNOU(mapper.child)) ? mapper : mapper.child;\r\n    };\r\n    TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {\r\n        if (isRoot === void 0) { isRoot = false; }\r\n        var childNodes;\r\n        if (isNOU(obj)) {\r\n            return childNodes;\r\n        }\r\n        else if (this.dataType === 1) {\r\n            return this.getChildGroup(this.groupedData, parentId, isRoot);\r\n        }\r\n        else {\r\n            if (typeof this.fields.child === 'string') {\r\n                for (var i = 0, objlen = obj.length; i < objlen; i++) {\r\n                    var dataId = getValue(this.fields.id, obj[i]);\r\n                    if (dataId && dataId.toString() === parentId) {\r\n                        return getValue(this.fields.child, obj[i]);\r\n                    }\r\n                    else if (!isNOU(getValue(this.fields.child, obj[i]))) {\r\n                        childNodes = this.getChildNodes(getValue(this.fields.child, obj[i]), parentId);\r\n                        if (childNodes !== undefined) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return childNodes;\r\n    };\r\n    TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {\r\n        var childNodes;\r\n        if (isNOU(data)) {\r\n            return childNodes;\r\n        }\r\n        for (var i = 0, objlen = data.length; i < objlen; i++) {\r\n            if (!isNOU(data[i][0]) && !isNOU(getValue(this.fields.parentID, data[i][0]))) {\r\n                if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {\r\n                    return data[i];\r\n                }\r\n            }\r\n            else if (isRoot) {\r\n                return data[i];\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        }\r\n        return childNodes;\r\n    };\r\n    TreeView.prototype.renderSubChild = function (element, expandChild, loaded) {\r\n        if (expandChild) {\r\n            var cIcons = selectAll('.' + EXPANDABLE, element);\r\n            for (var i = 0, len = cIcons.length; i < len; i++) {\r\n                var icon = cIcons[i];\r\n                if (element.querySelector('.e-icons') !== cIcons[i]) {\r\n                    var curLi = closest(icon, '.' + LISTITEM);\r\n                    this.expandArgs = this.getExpandEvent(curLi, null);\r\n                    if (loaded !== true) {\r\n                        this.trigger('nodeExpanding', this.expandArgs);\r\n                    }\r\n                    this.renderChildNodes(curLi, expandChild, null, loaded);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.toggleSelect = function (li, e, multiSelect) {\r\n        if (!li.classList.contains('e-disable')) {\r\n            if (this.allowMultiSelection && ((e && e.ctrlKey) || multiSelect) && this.isActive(li)) {\r\n                this.unselectNode(li, e);\r\n            }\r\n            else {\r\n                this.selectNode(li, e, multiSelect);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.isActive = function (li) {\r\n        return li.classList.contains(ACTIVE) ? true : false;\r\n    };\r\n    TreeView.prototype.selectNode = function (li, e, multiSelect) {\r\n        var _this = this;\r\n        if (isNOU(li) || (!this.allowMultiSelection && this.isActive(li) && !isNOU(e))) {\r\n            this.setFocusElement(li);\r\n            return;\r\n        }\r\n        var eventArgs;\r\n        if (this.isLoaded) {\r\n            eventArgs = this.getSelectEvent(li, 'select', e);\r\n            this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\r\n                if (!observedArgs.cancel) {\r\n                    _this.nodeSelectAction(li, e, observedArgs, multiSelect);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.nodeSelectAction(li, e, eventArgs, multiSelect);\r\n        }\r\n    };\r\n    TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {\r\n        if (!this.allowMultiSelection || (!multiSelect && (!e || (e && !e.ctrlKey)))) {\r\n            this.removeSelectAll();\r\n        }\r\n        if (this.allowMultiSelection && e && e.shiftKey) {\r\n            if (!this.startNode) {\r\n                this.startNode = li;\r\n            }\r\n            var startIndex = this.liList.indexOf(this.startNode);\r\n            var endIndex = this.liList.indexOf(li);\r\n            if (startIndex > endIndex) {\r\n                var temp = startIndex;\r\n                startIndex = endIndex;\r\n                endIndex = temp;\r\n            }\r\n            for (var i = startIndex; i <= endIndex; i++) {\r\n                var currNode = this.liList[i];\r\n                if (isVisible(currNode) && !currNode.classList.contains('e-disable')) {\r\n                    this.addSelect(currNode);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.startNode = li;\r\n            this.addSelect(li);\r\n        }\r\n        this.setFocusElement(li);\r\n        if (this.isLoaded) {\r\n            eventArgs.nodeData = this.getNodeData(li);\r\n            this.trigger('nodeSelected', eventArgs);\r\n        }\r\n    };\r\n    TreeView.prototype.unselectNode = function (li, e) {\r\n        var _this = this;\r\n        var eventArgs;\r\n        if (this.isLoaded) {\r\n            eventArgs = this.getSelectEvent(li, 'un-select', e);\r\n            this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\r\n                if (!observedArgs.cancel) {\r\n                    _this.nodeUnselectAction(li, observedArgs);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.nodeUnselectAction(li, eventArgs);\r\n        }\r\n    };\r\n    TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {\r\n        this.removeSelect(li);\r\n        this.setFocusElement(li);\r\n        if (this.isLoaded) {\r\n            eventArgs.nodeData = this.getNodeData(li);\r\n            this.trigger('nodeSelected', eventArgs);\r\n        }\r\n    };\r\n    TreeView.prototype.setFocusElement = function (li) {\r\n        if (!isNOU(li)) {\r\n            var focusedNode = this.getFocusedNode();\r\n            if (focusedNode) {\r\n                removeClass([focusedNode], FOCUS);\r\n            }\r\n            addClass([li], FOCUS);\r\n            this.updateIdAttr(focusedNode, li);\r\n        }\r\n    };\r\n    TreeView.prototype.addSelect = function (liEle) {\r\n        liEle.setAttribute('aria-selected', 'true');\r\n        addClass([liEle], ACTIVE);\r\n        var id = liEle.getAttribute('data-uid');\r\n        if (!isNOU(id) && this.selectedNodes.indexOf(id) === -1) {\r\n            this.selectedNodes.push(id);\r\n        }\r\n    };\r\n    TreeView.prototype.removeSelect = function (liEle) {\r\n        if (this.allowMultiSelection) {\r\n            liEle.setAttribute('aria-selected', 'false');\r\n        }\r\n        else {\r\n            liEle.removeAttribute('aria-selected');\r\n        }\r\n        removeClass([liEle], ACTIVE);\r\n        var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\r\n        if (index > -1) {\r\n            this.selectedNodes.splice(index, 1);\r\n        }\r\n    };\r\n    TreeView.prototype.removeSelectAll = function () {\r\n        var selectedLI = this.element.querySelectorAll('.' + ACTIVE);\r\n        for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {\r\n            var ele = selectedLI_1[_i];\r\n            if (this.allowMultiSelection) {\r\n                ele.setAttribute('aria-selected', 'false');\r\n            }\r\n            else {\r\n                ele.removeAttribute('aria-selected');\r\n            }\r\n        }\r\n        removeClass(selectedLI, ACTIVE);\r\n        this.setProperties({ selectedNodes: [] }, true);\r\n    };\r\n    TreeView.prototype.getSelectEvent = function (currLi, action, e) {\r\n        var nodeData = this.getNodeData(currLi);\r\n        return { action: action, cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, nodeData: nodeData };\r\n    };\r\n    TreeView.prototype.setExpandOnType = function () {\r\n        this.expandOnType = (this.expandOn === 'Auto') ? (Browser.isDevice ? 'Click' : 'DblClick') : this.expandOn;\r\n    };\r\n    TreeView.prototype.expandHandler = function (e) {\r\n        var target = e.originalEvent.target;\r\n        if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) ||\r\n            target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) ||\r\n            target.classList.contains(ICON) || this.showCheckBox && closest(target, '.' + CHECKBOXWRAP)) {\r\n            return;\r\n        }\r\n        else {\r\n            this.expandCollapseAction(closest(target, '.' + LISTITEM), e);\r\n        }\r\n    };\r\n    TreeView.prototype.expandCollapseAction = function (currLi, e) {\r\n        var icon = select('div.' + ICON, currLi);\r\n        if (!icon || icon.classList.contains(PROCESS)) {\r\n            return;\r\n        }\r\n        else {\r\n            var classList = icon.classList;\r\n            if (classList.contains(EXPANDABLE)) {\r\n                this.expandAction(currLi, icon, e);\r\n            }\r\n            else if (classList.contains(COLLAPSIBLE)) {\r\n                this.collapseNode(currLi, icon, e);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback) {\r\n        var _this = this;\r\n        if (icon.classList.contains(PROCESS)) {\r\n            return;\r\n        }\r\n        else {\r\n            addClass([icon], PROCESS);\r\n        }\r\n        if (this.isLoaded && !this.isRefreshed) {\r\n            this.expandArgs = this.getExpandEvent(currLi, e);\r\n            this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {\r\n                if (observedArgs.cancel) {\r\n                    removeClass([icon], PROCESS);\r\n                }\r\n                else {\r\n                    _this.nodeExpandAction(currLi, icon, expandChild, callback);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.nodeExpandAction(currLi, icon, expandChild, callback);\r\n        }\r\n    };\r\n    TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback) {\r\n        var ul = select('.' + PARENTITEM, currLi);\r\n        if (ul && ul.nodeName === 'UL') {\r\n            this.expandNode(currLi, icon);\r\n        }\r\n        else {\r\n            this.isFirstRender = true;\r\n            this.renderChildNodes(currLi, expandChild, callback);\r\n            var liEles = selectAll('.' + LISTITEM, currLi);\r\n            for (var i = 0; i < liEles.length; i++) {\r\n                var id = this.getId(liEles[i]);\r\n                if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\r\n                    var icon_1 = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEles[i]));\r\n                    if (!isNOU(icon_1)) {\r\n                        this.expandAction(liEles[i], icon_1, null);\r\n                    }\r\n                    this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.keyActionHandler = function (e) {\r\n        var _this = this;\r\n        var target = e.target;\r\n        var focusedNode = this.getFocusedNode();\r\n        if (target && target.classList.contains(INPUT)) {\r\n            var inpEle = target;\r\n            if (e.action === 'enter') {\r\n                inpEle.blur();\r\n                this.element.focus();\r\n                addClass([focusedNode], HOVER);\r\n            }\r\n            else if (e.action === 'escape') {\r\n                inpEle.value = this.oldText;\r\n                inpEle.blur();\r\n                this.element.focus();\r\n                addClass([focusedNode], HOVER);\r\n            }\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n        var eventArgs = {\r\n            cancel: false,\r\n            event: e,\r\n            node: focusedNode,\r\n        };\r\n        this.trigger('keyPress', eventArgs, function (observedArgs) {\r\n            if (!observedArgs.cancel) {\r\n                switch (e.action) {\r\n                    case 'space':\r\n                        if (_this.showCheckBox) {\r\n                            _this.checkNode(e);\r\n                        }\r\n                        break;\r\n                    case 'moveRight':\r\n                        _this.openNode(_this.enableRtl ? false : true, e);\r\n                        break;\r\n                    case 'moveLeft':\r\n                        _this.openNode(_this.enableRtl ? true : false, e);\r\n                        break;\r\n                    case 'shiftDown':\r\n                        _this.shiftKeySelect(true, e);\r\n                        break;\r\n                    case 'moveDown':\r\n                    case 'ctrlDown':\r\n                    case 'csDown':\r\n                        _this.navigateNode(true);\r\n                        break;\r\n                    case 'shiftUp':\r\n                        _this.shiftKeySelect(false, e);\r\n                        break;\r\n                    case 'moveUp':\r\n                    case 'ctrlUp':\r\n                    case 'csUp':\r\n                        _this.navigateNode(false);\r\n                        break;\r\n                    case 'home':\r\n                    case 'shiftHome':\r\n                    case 'ctrlHome':\r\n                    case 'csHome':\r\n                        _this.navigateRootNode(true);\r\n                        break;\r\n                    case 'end':\r\n                    case 'shiftEnd':\r\n                    case 'ctrlEnd':\r\n                    case 'csEnd':\r\n                        _this.navigateRootNode(false);\r\n                        break;\r\n                    case 'enter':\r\n                    case 'ctrlEnter':\r\n                    case 'shiftEnter':\r\n                    case 'csEnter':\r\n                        _this.toggleSelect(focusedNode, e);\r\n                        break;\r\n                    case 'f2':\r\n                        if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {\r\n                            _this.createTextbox(focusedNode, e);\r\n                        }\r\n                        break;\r\n                    case 'ctrlA':\r\n                        if (_this.allowMultiSelection) {\r\n                            var sNodes = selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);\r\n                            _this.selectGivenNodes(sNodes);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    TreeView.prototype.navigateToFocus = function (isUp) {\r\n        var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\r\n        var pos = focusNode.getBoundingClientRect();\r\n        var parent = this.getScrollParent(this.element);\r\n        if (!isNOU(parent)) {\r\n            var parentPos = parent.getBoundingClientRect();\r\n            if (pos.bottom > parentPos.bottom) {\r\n                parent.scrollTop += pos.bottom - parentPos.bottom;\r\n            }\r\n            else if (pos.top < parentPos.top) {\r\n                parent.scrollTop -= parentPos.top - pos.top;\r\n            }\r\n        }\r\n        var isVisible = this.isVisibleInViewport(focusNode);\r\n        if (!isVisible) {\r\n            focusNode.scrollIntoView(isUp);\r\n        }\r\n    };\r\n    TreeView.prototype.isVisibleInViewport = function (txtWrap) {\r\n        var pos = txtWrap.getBoundingClientRect();\r\n        return (pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\r\n            pos.right <= (window.innerWidth || document.documentElement.clientWidth));\r\n    };\r\n    TreeView.prototype.getScrollParent = function (node) {\r\n        if (isNOU(node)) {\r\n            return null;\r\n        }\r\n        return (node.scrollHeight > node.clientHeight) ? node : this.getScrollParent(node.parentElement);\r\n    };\r\n    TreeView.prototype.shiftKeySelect = function (isTowards, e) {\r\n        if (this.allowMultiSelection) {\r\n            var focusedNode = this.getFocusedNode();\r\n            var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\r\n            this.removeHover();\r\n            this.setFocusElement(nextNode);\r\n            this.toggleSelect(nextNode, e, false);\r\n            this.navigateToFocus(!isTowards);\r\n        }\r\n        else {\r\n            this.navigateNode(isTowards);\r\n        }\r\n    };\r\n    TreeView.prototype.checkNode = function (e) {\r\n        var focusedNode = this.getFocusedNode();\r\n        var checkWrap = select('.' + CHECKBOXWRAP, focusedNode);\r\n        var isChecked = select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\r\n        if (!focusedNode.classList.contains('e-disable')) {\r\n            if (focusedNode.getElementsByClassName(\"e-checkbox-disabled\").length == 0) {\r\n                this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {\r\n        var _this = this;\r\n        var currLi = closest(checkWrap, '.' + LISTITEM);\r\n        this.checkActionNodes = [];\r\n        var ariaState = !isCheck ? 'true' : 'false';\r\n        if (!isNOU(ariaState)) {\r\n            checkWrap.setAttribute('aria-checked', ariaState);\r\n        }\r\n        var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\r\n        this.trigger('nodeChecking', eventArgs, function (observedArgs) {\r\n            if (!observedArgs.cancel) {\r\n                _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\r\n            }\r\n        });\r\n    };\r\n    TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {\r\n        if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\r\n            this.checkedElement.push(li.getAttribute('data-uid'));\r\n            if (this.autoCheck) {\r\n                var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\r\n                (child !== null) ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;\r\n            }\r\n        }\r\n        this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\r\n        if (this.autoCheck) {\r\n            this.ensureChildCheckState(li);\r\n            this.ensureParentCheckState(closest(closest(li, '.' + PARENTITEM), '.' + LISTITEM));\r\n            var doCheck = void 0;\r\n            if (eventArgs.action === 'check') {\r\n                doCheck = true;\r\n            }\r\n            else if (eventArgs.action === 'uncheck') {\r\n                doCheck = false;\r\n            }\r\n            this.ensureStateChange(li, doCheck);\r\n        }\r\n        this.nodeCheckedEvent(checkWrap, isCheck, e);\r\n    };\r\n    /**\r\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM\r\n     */\r\n    TreeView.prototype.ensureStateChange = function (li, doCheck) {\r\n        var childElement = select('.' + PARENTITEM, li);\r\n        var parentIndex = li.getAttribute('data-uid');\r\n        var mapper = this.fields;\r\n        if (this.dataType === 1 && this.autoCheck) {\r\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', parentIndex, true));\r\n            for (var i = 0; i < resultData.length; i++) {\r\n                var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\r\n                var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;\r\n                if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\r\n                    this.checkedNodes.push(resultId);\r\n                    var childItems = this.getChildNodes(this.treeData, resultId);\r\n                    this.getChildItems(childItems, doCheck);\r\n                    if (this.parentNodeCheck.indexOf(resultId) !== -1) {\r\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\r\n                    }\r\n                }\r\n                else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null &&\r\n                    this.checkedNodes.indexOf(resultId) !== -1) {\r\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\r\n                    if (isCheck === 'true') {\r\n                        this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\r\n                    }\r\n                    if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null ||\r\n                        this.parentNodeCheck.indexOf(resultId) !== -1) {\r\n                        var childNodes = this.getChildNodes(this.treeData, resultId);\r\n                        this.getChildItems(childNodes, doCheck);\r\n                        if (this.parentNodeCheck.indexOf(resultId) !== -1) {\r\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    var childItems = this.getChildNodes(this.treeData, resultId);\r\n                    this.getChildItems(childItems, doCheck);\r\n                }\r\n            }\r\n        }\r\n        else if (this.dataType === 1 && !this.autoCheck) {\r\n            if (!doCheck) {\r\n                var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\r\n                for (var i = 0; i < checkedData.length; i++) {\r\n                    var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;\r\n                    if (this.checkedNodes.indexOf(id) !== -1) {\r\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\r\n                    }\r\n                    this.updateField(this.treeData, this.fields, id, 'isChecked', null);\r\n                }\r\n                this.checkedNodes = [];\r\n            }\r\n            else {\r\n                for (var i = 0; i < this.treeData.length; i++) {\r\n                    var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;\r\n                    if (this.checkedNodes.indexOf(checkedId) === -1) {\r\n                        this.checkedNodes.push(checkedId);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var childItems = this.getChildNodes(this.treeData, parentIndex);\r\n            if (childItems) {\r\n                this.childStateChange(childItems, parentIndex, childElement, doCheck);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.getChildItems = function (childItems, doCheck) {\r\n        for (var i = 0; i < childItems.length; i++) {\r\n            var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\r\n            var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() :\r\n                null;\r\n            if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\r\n                this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\r\n            }\r\n            if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\r\n                this.checkedNodes.push(childId);\r\n            }\r\n            if (childIsCheck === 'true' && !doCheck) {\r\n                this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\r\n            }\r\n            var subChildItems = this.getChildNodes(this.treeData, childId);\r\n            if (subChildItems.length > 0) {\r\n                this.getChildItems(subChildItems, doCheck);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\r\n     */\r\n    TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {\r\n        for (var i = 0; i < childItems.length; i++) {\r\n            var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';\r\n            var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\r\n            if (this.autoCheck) {\r\n                if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\r\n                    this.checkedNodes.push(checkedChild);\r\n                    if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\r\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\r\n                    }\r\n                }\r\n                else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {\r\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\r\n                    if (isCheck === 'true') {\r\n                        this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\r\n                    }\r\n                }\r\n            }\r\n            else if (!this.autoCheck) {\r\n                if (!doCheck) {\r\n                    if (this.checkedNodes.indexOf(checkedChild) !== -1) {\r\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\r\n                    }\r\n                    this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\r\n                    this.checkedNodes = [];\r\n                }\r\n                else {\r\n                    if (this.checkedNodes.indexOf(checkedChild) === -1) {\r\n                        this.checkedNodes.push(checkedChild);\r\n                    }\r\n                }\r\n            }\r\n            var subChild = this.getChildNodes([childItems[i]], checkedChild);\r\n            if (subChild) {\r\n                this.childStateChange(subChild, parent, childElement, doCheck);\r\n            }\r\n        }\r\n    };\r\n    //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\r\n    TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {\r\n        if (child) {\r\n            for (var length_1 = 0; length_1 < child.length; length_1++) {\r\n                var childId = getValue(this.fields.id, child[length_1]);\r\n                var check = this.element.querySelector('[data-uid=\"' + childId + '\"]');\r\n                //Validates isChecked case while no UI interaction has been performed on the node or it's parent\r\n                if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\r\n                    if (((check === null && !isNOU(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1)\r\n                        || childCheck === 0 || checked === 2)) {\r\n                        (child[length_1][this.fields.isChecked] !== false || checked === 2) ? newCheck.push(childId.toString())\r\n                            : childCheck = null;\r\n                        childCheck = (child[length_1][this.fields.isChecked] !== false || checked === 2) ? 0 : null;\r\n                    }\r\n                }\r\n                //Pushes child checked node done thro' UI interaction\r\n                if (newCheck.indexOf(childId.toString()) === -1 && isNOU(checked)) {\r\n                    newCheck.push(childId.toString());\r\n                }\r\n                var hierChildId = getValue(this.fields.child.toString(), child[length_1]);\r\n                //Gets if any next level children are available for child nodes\r\n                if (getValue(this.fields.hasChildren, child[length_1]) === true || hierChildId) {\r\n                    var id = getValue(this.fields.id, child[length_1]);\r\n                    var childId_1 = void 0;\r\n                    if (this.dataType === 1) {\r\n                        childId_1 = this.getChildNodes(this.treeData, id.toString());\r\n                    }\r\n                    else {\r\n                        childId_1 = hierChildId;\r\n                    }\r\n                    if (childId_1) {\r\n                        (isNOU(validateCheck)) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) :\r\n                            this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);\r\n                        childCheck = null;\r\n                    }\r\n                }\r\n                childCheck = null;\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.openNode = function (toBeOpened, e) {\r\n        var focusedNode = this.getFocusedNode();\r\n        var icon = select('div.' + ICON, focusedNode);\r\n        if (toBeOpened) {\r\n            if (!icon) {\r\n                return;\r\n            }\r\n            else if (icon.classList.contains(EXPANDABLE)) {\r\n                this.expandAction(focusedNode, icon, e);\r\n            }\r\n            else {\r\n                this.focusNextNode(focusedNode, true);\r\n            }\r\n        }\r\n        else {\r\n            if (icon && icon.classList.contains(COLLAPSIBLE)) {\r\n                this.collapseNode(focusedNode, icon, e);\r\n            }\r\n            else {\r\n                var parentLi = closest(closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\r\n                if (!parentLi) {\r\n                    return;\r\n                }\r\n                else {\r\n                    if (!parentLi.classList.contains('e-disable')) {\r\n                        this.setFocus(focusedNode, parentLi);\r\n                        this.navigateToFocus(true);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.navigateNode = function (isTowards) {\r\n        var focusedNode = this.getFocusedNode();\r\n        this.focusNextNode(focusedNode, isTowards);\r\n    };\r\n    TreeView.prototype.navigateRootNode = function (isBackwards) {\r\n        var focusedNode = this.getFocusedNode();\r\n        var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\r\n        if (!rootNode.classList.contains('e-disable')) {\r\n            this.setFocus(focusedNode, rootNode);\r\n            this.navigateToFocus(isBackwards);\r\n        }\r\n    };\r\n    TreeView.prototype.getFocusedNode = function () {\r\n        var selectedItem;\r\n        var fNode = select('.' + LISTITEM + '.' + FOCUS, this.element);\r\n        if (isNOU(fNode)) {\r\n            selectedItem = select('.' + LISTITEM, this.element);\r\n        }\r\n        return isNOU(fNode) ? (isNOU(selectedItem) ? this.element.firstElementChild : selectedItem) : fNode;\r\n    };\r\n    TreeView.prototype.focusNextNode = function (li, isTowards) {\r\n        var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\r\n        this.setFocus(li, nextNode);\r\n        this.navigateToFocus(!isTowards);\r\n        if (nextNode.classList.contains('e-disable')) {\r\n            var lastChild = nextNode.lastChild;\r\n            if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\r\n                this.focusNextNode(nextNode, true);\r\n            }\r\n            else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\r\n                this.focusNextNode(nextNode, false);\r\n            }\r\n            else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {\r\n                this.focusNextNode(nextNode, false);\r\n            }\r\n            else {\r\n                this.focusNextNode(nextNode, isTowards);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.getNextNode = function (li) {\r\n        var index = this.liList.indexOf(li);\r\n        var nextNode;\r\n        do {\r\n            index++;\r\n            nextNode = this.liList[index];\r\n            if (isNOU(nextNode)) {\r\n                return li;\r\n            }\r\n        } while (!isVisible(nextNode));\r\n        return nextNode;\r\n    };\r\n    TreeView.prototype.getPrevNode = function (li) {\r\n        var index = this.liList.indexOf(li);\r\n        var prevNode;\r\n        do {\r\n            index--;\r\n            prevNode = this.liList[index];\r\n            if (isNOU(prevNode)) {\r\n                return li;\r\n            }\r\n        } while (!isVisible(prevNode));\r\n        return prevNode;\r\n    };\r\n    TreeView.prototype.getRootNode = function () {\r\n        var index = 0;\r\n        var rootNode;\r\n        do {\r\n            rootNode = this.liList[index];\r\n            index++;\r\n        } while (!isVisible(rootNode));\r\n        return rootNode;\r\n    };\r\n    TreeView.prototype.getEndNode = function () {\r\n        var index = this.liList.length - 1;\r\n        var endNode;\r\n        do {\r\n            endNode = this.liList[index];\r\n            index--;\r\n        } while (!isVisible(endNode));\r\n        return endNode;\r\n    };\r\n    TreeView.prototype.setFocus = function (preNode, nextNode) {\r\n        removeClass([preNode], [HOVER, FOCUS]);\r\n        if (!nextNode.classList.contains('e-disable')) {\r\n            addClass([nextNode], [HOVER, FOCUS]);\r\n            this.updateIdAttr(preNode, nextNode);\r\n        }\r\n    };\r\n    TreeView.prototype.updateIdAttr = function (preNode, nextNode) {\r\n        this.element.removeAttribute('aria-activedescendant');\r\n        if (preNode) {\r\n            preNode.removeAttribute('id');\r\n        }\r\n        nextNode.setAttribute('id', this.element.id + '_active');\r\n        this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\r\n    };\r\n    TreeView.prototype.focusIn = function () {\r\n        if (!this.mouseDownStatus) {\r\n            addClass([this.getFocusedNode()], HOVER);\r\n        }\r\n        this.mouseDownStatus = false;\r\n    };\r\n    TreeView.prototype.focusOut = function () {\r\n        removeClass([this.getFocusedNode()], HOVER);\r\n    };\r\n    TreeView.prototype.onMouseOver = function (e) {\r\n        var target = e.target;\r\n        var classList = target.classList;\r\n        var currentLi = closest(target, '.' + LISTITEM);\r\n        if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {\r\n            this.removeHover();\r\n            return;\r\n        }\r\n        else {\r\n            if (currentLi && !currentLi.classList.contains('e-disable')) {\r\n                this.setHover(currentLi);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.setHover = function (li) {\r\n        if (!li.classList.contains(HOVER)) {\r\n            this.removeHover();\r\n            addClass([li], HOVER);\r\n        }\r\n    };\r\n    ;\r\n    TreeView.prototype.onMouseLeave = function (e) {\r\n        this.removeHover();\r\n    };\r\n    TreeView.prototype.removeHover = function () {\r\n        var hoveredNode = selectAll('.' + HOVER, this.element);\r\n        if (hoveredNode && hoveredNode.length) {\r\n            removeClass(hoveredNode, HOVER);\r\n        }\r\n    };\r\n    ;\r\n    TreeView.prototype.getNodeData = function (currLi, fromDS) {\r\n        if (!isNOU(currLi) && currLi.classList.contains(LISTITEM) &&\r\n            !isNOU(closest(currLi, '.' + CONTROL)) && closest(currLi, '.' + CONTROL).classList.contains(ROOT)) {\r\n            var id = currLi.getAttribute('data-uid');\r\n            var text = this.getText(currLi, fromDS);\r\n            var pNode = closest(currLi.parentNode, '.' + LISTITEM);\r\n            var pid = pNode ? pNode.getAttribute('data-uid') : null;\r\n            var selected = currLi.classList.contains(ACTIVE);\r\n            var expanded = (currLi.getAttribute('aria-expanded') === 'true') ? true : false;\r\n            var hasChildren = currLi.getAttribute('aria-expanded') !== null ? true : (select('.' + EXPANDABLE, currLi) || select('.' + COLLAPSIBLE, currLi)) != null ? true : false;\r\n            var checked = null;\r\n            if (this.showCheckBox) {\r\n                checked = select('.' + CHECKBOXWRAP, currLi).getAttribute('aria-checked');\r\n            }\r\n            return {\r\n                id: id, text: text, parentID: pid, selected: selected, expanded: expanded,\r\n                isChecked: checked, hasChildren: hasChildren\r\n            };\r\n        }\r\n        return { id: '', text: '', parentID: '', selected: false, expanded: false, isChecked: '', hasChildren: false };\r\n    };\r\n    TreeView.prototype.getText = function (currLi, fromDS) {\r\n        if (fromDS) {\r\n            var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\r\n            var level = parseFloat(currLi.getAttribute('aria-level'));\r\n            var nodeFields = this.getFields(this.fields, level, 1);\r\n            return getValue(nodeFields.text, nodeData);\r\n        }\r\n        return select('.' + LISTTEXT, currLi).textContent;\r\n    };\r\n    TreeView.prototype.getExpandEvent = function (currLi, e) {\r\n        var nodeData = this.getNodeData(currLi);\r\n        return { cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, nodeData: nodeData, event: e };\r\n    };\r\n    TreeView.prototype.renderNodeTemplate = function (data, textEle, dataId) {\r\n        var tempArr = this.nodeTemplateFn(data, this, 'nodeTemplate' + dataId, this.element.id + 'nodeTemplate', this.isStringTemplate, undefined, textEle);\r\n        if (tempArr) {\r\n            tempArr = Array.prototype.slice.call(tempArr);\r\n            append(tempArr, textEle);\r\n        }\r\n    };\r\n    TreeView.prototype.destroyTemplate = function (liEle) {\r\n        this.clearTemplate(['nodeTemplate' + liEle.getAttribute('data-uid')]);\r\n    };\r\n    TreeView.prototype.reRenderNodes = function () {\r\n        this.updateListProp(this.fields);\r\n        if (Browser.isIE) {\r\n            this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\r\n            this.ulElement.parentElement.removeChild(this.ulElement);\r\n        }\r\n        else {\r\n            this.element.innerHTML = '';\r\n        }\r\n        if (!isNOU(this.nodeTemplateFn)) {\r\n            this.clearTemplate();\r\n        }\r\n        this.setTouchClass();\r\n        this.setProperties({ selectedNodes: [], checkedNodes: [], expandedNodes: [] }, true);\r\n        this.checkedElement = [];\r\n        this.isLoaded = false;\r\n        this.setDataBinding(true);\r\n    };\r\n    TreeView.prototype.setCssClass = function (oldClass, newClass) {\r\n        if (!isNOU(oldClass) && oldClass !== '') {\r\n            removeClass([this.element], oldClass.split(' '));\r\n        }\r\n        if (!isNOU(newClass) && newClass !== '') {\r\n            addClass([this.element], newClass.split(' '));\r\n        }\r\n    };\r\n    TreeView.prototype.editingHandler = function (e) {\r\n        var target = e.target;\r\n        if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) ||\r\n            target.classList.contains(LISTITEM) || target.classList.contains(ICON) ||\r\n            target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\r\n            return;\r\n        }\r\n        else {\r\n            var liEle = closest(target, '.' + LISTITEM);\r\n            this.createTextbox(liEle, e);\r\n        }\r\n    };\r\n    TreeView.prototype.createTextbox = function (liEle, e) {\r\n        var _this = this;\r\n        var oldInpEle = select('.' + TREEINPUT, this.element);\r\n        if (oldInpEle) {\r\n            oldInpEle.blur();\r\n        }\r\n        var textEle = select('.' + LISTTEXT, liEle);\r\n        this.updateOldText(liEle);\r\n        var innerEle = this.createElement('input', { className: TREEINPUT, attrs: { value: this.oldText } });\r\n        var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\r\n        this.trigger('nodeEditing', eventArgs, function (observedArgs) {\r\n            if (!observedArgs.cancel) {\r\n                var inpWidth = textEle.offsetWidth + 5;\r\n                var style = 'width:' + inpWidth + 'px';\r\n                addClass([liEle], EDITING);\r\n                if (!isNOU(_this.nodeTemplateFn)) {\r\n                    _this.destroyTemplate(liEle);\r\n                }\r\n                textEle.innerHTML = eventArgs.innerHtml;\r\n                var inpEle = select('.' + TREEINPUT, textEle);\r\n                _this.inputObj = Input.createInput({\r\n                    element: inpEle,\r\n                    properties: {\r\n                        enableRtl: _this.enableRtl,\r\n                    }\r\n                }, _this.createElement);\r\n                _this.inputObj.container.setAttribute('style', style);\r\n                inpEle.focus();\r\n                var inputEle = inpEle;\r\n                inputEle.setSelectionRange(0, inputEle.value.length);\r\n                _this.wireInputEvents(inpEle);\r\n            }\r\n        });\r\n    };\r\n    TreeView.prototype.updateOldText = function (liEle) {\r\n        var id = liEle.getAttribute('data-uid');\r\n        this.editData = this.getNodeObject(id);\r\n        var level = parseFloat(liEle.getAttribute('aria-level'));\r\n        this.editFields = this.getFields(this.fields, level, 1);\r\n        this.oldText = getValue(this.editFields.text, this.editData);\r\n    };\r\n    TreeView.prototype.inputFocusOut = function (e) {\r\n        if (!select('.' + TREEINPUT, this.element)) {\r\n            return;\r\n        }\r\n        var target = e.target;\r\n        var newText = target.value;\r\n        var txtEle = closest(target, '.' + LISTTEXT);\r\n        var liEle = closest(target, '.' + LISTITEM);\r\n        detach(this.inputObj.container);\r\n        if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\r\n            this.crudOperation('update', null, liEle, newText, null, null, true);\r\n        }\r\n        else {\r\n            this.appendNewText(liEle, txtEle, newText, true);\r\n        }\r\n    };\r\n    TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {\r\n        var _this = this;\r\n        var eventArgs = this.getEditEvent(liEle, newText, null);\r\n        this.trigger('nodeEdited', eventArgs, function (observedArgs) {\r\n            newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\r\n            _this.updateText(liEle, txtEle, newText, isInput);\r\n            if (observedArgs.oldText !== newText) {\r\n                _this.triggerEvent();\r\n            }\r\n        });\r\n    };\r\n    TreeView.prototype.updateText = function (liEle, txtEle, newText, isInput) {\r\n        var newData = setValue(this.editFields.text, newText, this.editData);\r\n        if (!isNOU(this.nodeTemplateFn)) {\r\n            txtEle.innerText = '';\r\n            var dataId = liEle.getAttribute('data-uid');\r\n            this.renderNodeTemplate(newData, txtEle, dataId);\r\n            this.renderReactTemplates();\r\n        }\r\n        else {\r\n            txtEle.innerText = newText;\r\n        }\r\n        if (isInput) {\r\n            removeClass([liEle], EDITING);\r\n            txtEle.focus();\r\n        }\r\n        if (this.allowTextWrap) {\r\n            this.calculateWrap(liEle);\r\n        }\r\n    };\r\n    TreeView.prototype.getElement = function (ele) {\r\n        if (isNOU(ele)) {\r\n            return null;\r\n        }\r\n        else if (typeof ele === 'string') {\r\n            return this.element.querySelector('[data-uid=\"' + ele + '\"]');\r\n        }\r\n        else if (typeof ele === 'object') {\r\n            return getElement(ele);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    TreeView.prototype.getId = function (ele) {\r\n        if (isNOU(ele)) {\r\n            return null;\r\n        }\r\n        else if (typeof ele === 'string') {\r\n            return ele;\r\n        }\r\n        else if (typeof ele === 'object') {\r\n            return (getElement(ele)).getAttribute('data-uid');\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {\r\n        var data = this.getNodeData(liEle);\r\n        return { cancel: false, newText: newText, node: liEle, nodeData: data, oldText: this.oldText, innerHtml: inpEle };\r\n    };\r\n    TreeView.prototype.getNodeObject = function (id) {\r\n        var childNodes;\r\n        if (isNOU(id)) {\r\n            return childNodes;\r\n        }\r\n        else if (this.dataType === 1) {\r\n            for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {\r\n                var dataId = getValue(this.fields.id, this.treeData[i]);\r\n                if (!isNOU(this.treeData[i]) && !isNOU(dataId) && dataId.toString() === id) {\r\n                    return this.treeData[i];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return this.getChildNodeObject(this.treeData, this.fields, id);\r\n        }\r\n        return childNodes;\r\n    };\r\n    TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {\r\n        var newList;\r\n        if (isNOU(obj)) {\r\n            return newList;\r\n        }\r\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\r\n            var dataId = getValue(mapper.id, obj[i]);\r\n            if (obj[i] && dataId && dataId.toString() === id) {\r\n                return obj[i];\r\n            }\r\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\r\n                var childData = getValue(mapper.child, obj[i]);\r\n                newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\r\n                if (newList !== undefined) {\r\n                    break;\r\n                }\r\n            }\r\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\r\n                var child = 'child';\r\n                newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);\r\n                if (newList !== undefined) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return newList;\r\n    };\r\n    TreeView.prototype.setDragAndDrop = function (toBind) {\r\n        if (toBind && !this.disabled) {\r\n            this.initializeDrag();\r\n        }\r\n        else {\r\n            this.destroyDrag();\r\n        }\r\n    };\r\n    TreeView.prototype.initializeDrag = function () {\r\n        var _this = this;\r\n        var virtualEle;\r\n        var proxy = this;\r\n        this.dragObj = new Draggable(this.element, {\r\n            enableTailMode: true, enableAutoScroll: true,\r\n            dragArea: this.dragArea,\r\n            dragTarget: '.' + TEXTWRAP,\r\n            helper: function (e) {\r\n                _this.dragTarget = e.sender.target;\r\n                var dragRoot = closest(_this.dragTarget, '.' + ROOT);\r\n                var dragWrap = closest(_this.dragTarget, '.' + TEXTWRAP);\r\n                _this.dragLi = closest(_this.dragTarget, '.' + LISTITEM);\r\n                if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {\r\n                    dragWrap = _this.dragTarget.nextElementSibling;\r\n                }\r\n                if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap ||\r\n                    _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) ||\r\n                    _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {\r\n                    return false;\r\n                }\r\n                var cloneEle = (dragWrap.cloneNode(true));\r\n                if (isNOU(select('div.' + ICON, cloneEle))) {\r\n                    var icon = proxy.createElement('div', { className: ICON + ' ' + EXPANDABLE });\r\n                    cloneEle.insertBefore(icon, cloneEle.children[0]);\r\n                }\r\n                var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL : '');\r\n                virtualEle = proxy.createElement('div', { className: cssClass });\r\n                virtualEle.appendChild(cloneEle);\r\n                var nLen = _this.selectedNodes.length;\r\n                if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {\r\n                    var cNode = proxy.createElement('span', { className: DROPCOUNT, innerHTML: '' + nLen });\r\n                    virtualEle.appendChild(cNode);\r\n                }\r\n                document.body.appendChild(virtualEle);\r\n                document.body.style.cursor = '';\r\n                _this.dragData = _this.getNodeData(_this.dragLi);\r\n                return virtualEle;\r\n            },\r\n            dragStart: function (e) {\r\n                addClass([_this.element], DRAGGING);\r\n                var listItem = closest(e.target, '.e-list-item');\r\n                var level;\r\n                if (listItem) {\r\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\r\n                }\r\n                var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);\r\n                if (eventArgs.draggedNode.classList.contains(EDITING)) {\r\n                    _this.dragObj.intDestroy(e.event);\r\n                    _this.dragCancelAction(virtualEle);\r\n                }\r\n                else {\r\n                    _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {\r\n                        if (observedArgs.cancel) {\r\n                            _this.dragObj.intDestroy(e.event);\r\n                            _this.dragCancelAction(virtualEle);\r\n                        }\r\n                        else {\r\n                            _this.dragStartAction = true;\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            drag: function (e) {\r\n                _this.dragObj.setProperties({ cursorAt: { top: (!isNOU(e.event.targetTouches) || Browser.isDevice) ? 60 : -20 } });\r\n                _this.dragAction(e, virtualEle);\r\n            },\r\n            dragStop: function (e) {\r\n                removeClass([_this.element], DRAGGING);\r\n                _this.removeVirtualEle();\r\n                var dropTarget = e.target;\r\n                var preventTargetExpand = false;\r\n                var dropRoot = (closest(dropTarget, '.' + DROPPABLE));\r\n                var isHelperElement = true;\r\n                if (!dropTarget || !dropRoot) {\r\n                    detach(e.helper);\r\n                    document.body.style.cursor = '';\r\n                    isHelperElement = false;\r\n                }\r\n                var listItem = closest(dropTarget, '.e-list-item');\r\n                var level;\r\n                if (listItem) {\r\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\r\n                }\r\n                var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);\r\n                eventArgs.preventTargetExpand = preventTargetExpand;\r\n                _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {\r\n                    _this.dragParent = observedArgs.draggedParentNode;\r\n                    _this.preventExpand = observedArgs.preventTargetExpand;\r\n                    if (observedArgs.cancel) {\r\n                        if (e.helper.parentNode) {\r\n                            detach(e.helper);\r\n                        }\r\n                        document.body.style.cursor = '';\r\n                        isHelperElement = false;\r\n                    }\r\n                    _this.dragStartAction = false;\r\n                });\r\n            }\r\n        });\r\n        this.dropObj = new Droppable(this.element, {\r\n            out: function (e) {\r\n                if (!isNOU(e) && !e.target.classList.contains(SIBLING)) {\r\n                    document.body.style.cursor = 'not-allowed';\r\n                }\r\n            },\r\n            over: function (e) {\r\n                document.body.style.cursor = '';\r\n            },\r\n            drop: function (e) {\r\n                _this.dropAction(e);\r\n            }\r\n        });\r\n    };\r\n    TreeView.prototype.dragCancelAction = function (virtualEle) {\r\n        detach(virtualEle);\r\n        removeClass([this.element], DRAGGING);\r\n        this.dragStartAction = false;\r\n    };\r\n    TreeView.prototype.dragAction = function (e, virtualEle) {\r\n        var dropRoot = closest(e.target, '.' + DROPPABLE);\r\n        var dropWrap = closest(e.target, '.' + TEXTWRAP);\r\n        var icon = select('div.' + ICON, virtualEle);\r\n        removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\r\n        this.removeVirtualEle();\r\n        document.body.style.cursor = '';\r\n        var classList = e.target.classList;\r\n        if (this.fullRowSelect && !dropWrap && !isNOU(classList) && classList.contains(FULLROW)) {\r\n            dropWrap = e.target.nextElementSibling;\r\n        }\r\n        if (dropRoot) {\r\n            var dropLi = closest(e.target, '.' + LISTITEM);\r\n            var checkWrapper = closest(e.target, '.' + CHECKBOXWRAP);\r\n            var collapse = closest(e.target, '.' + COLLAPSIBLE);\r\n            var expand = closest(e.target, '.' + EXPANDABLE);\r\n            if (!dropRoot.classList.contains(ROOT) || (dropWrap &&\r\n                (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)))) {\r\n                if (this.hasTemplate && dropLi) {\r\n                    var templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\r\n                    if ((e && (!expand && !collapse) && e.event.offsetY < 7 && !checkWrapper) || (((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3)))) {\r\n                        var index = this.fullRowSelect ? (1) : (0);\r\n                        this.appendIndicator(dropLi, icon, index);\r\n                    }\r\n                    else if ((e && (!expand && !collapse) && !checkWrapper && templateTarget && e.event.offsetY > templateTarget.offsetHeight - 10) || ((expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19))) {\r\n                        var index = this.fullRowSelect ? (2) : (1);\r\n                        this.appendIndicator(dropLi, icon, index);\r\n                    }\r\n                    else {\r\n                        addClass([icon], DROPIN);\r\n                    }\r\n                }\r\n                else {\r\n                    if ((dropLi && e && (!expand && !collapse) && (e.event.offsetY < 7) && !checkWrapper) || (((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3)))) {\r\n                        var index = this.fullRowSelect ? (1) : (0);\r\n                        this.appendIndicator(dropLi, icon, index);\r\n                    }\r\n                    else if ((dropLi && e && (!expand && !collapse) && (e.target.offsetHeight > 0 && e.event.offsetY > (e.target.offsetHeight - 10)) && !checkWrapper) || (((expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19)))) {\r\n                        var index = this.fullRowSelect ? (2) : (1);\r\n                        this.appendIndicator(dropLi, icon, index);\r\n                    }\r\n                    else {\r\n                        addClass([icon], DROPIN);\r\n                    }\r\n                }\r\n            }\r\n            else if (e.target.nodeName === 'LI' && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {\r\n                addClass([icon], DROPNEXT);\r\n                this.renderVirtualEle(e);\r\n            }\r\n            else if (e.target.classList.contains(SIBLING)) {\r\n                addClass([icon], DROPNEXT);\r\n            }\r\n            else {\r\n                addClass([icon], DROPOUT);\r\n            }\r\n        }\r\n        else {\r\n            addClass([icon], NODROP);\r\n            document.body.style.cursor = 'not-allowed';\r\n        }\r\n        var listItem = closest(e.target, '.e-list-item');\r\n        var level;\r\n        if (listItem) {\r\n            level = parseInt(listItem.getAttribute('aria-level'), 10);\r\n        }\r\n        var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\r\n        if (eventArgs.dropIndicator) {\r\n            removeClass([icon], eventArgs.dropIndicator);\r\n        }\r\n        this.trigger('nodeDragging', eventArgs);\r\n        if (eventArgs.dropIndicator) {\r\n            addClass([icon], eventArgs.dropIndicator);\r\n        }\r\n    };\r\n    TreeView.prototype.appendIndicator = function (dropLi, icon, index) {\r\n        addClass([icon], DROPNEXT);\r\n        var virEle = this.createElement('div', { className: SIBLING });\r\n        dropLi.insertBefore(virEle, dropLi.children[index]);\r\n    };\r\n    /* eslint-disable */\r\n    TreeView.prototype.dropAction = function (e) {\r\n        var offsetY = e.event.offsetY;\r\n        var dropTarget = e.target;\r\n        var dragObj;\r\n        var level;\r\n        var drop = false;\r\n        var dragInstance;\r\n        dragInstance = e.dragData.draggable;\r\n        for (var i = 0; i < dragInstance.ej2_instances.length; i++) {\r\n            if (dragInstance.ej2_instances[i] instanceof TreeView_1) {\r\n                dragObj = dragInstance.ej2_instances[i];\r\n                break;\r\n            }\r\n        }\r\n        if (dragObj && dragObj.dragTarget) {\r\n            var dragTarget = dragObj.dragTarget;\r\n            var dragLi = (closest(dragTarget, '.' + LISTITEM));\r\n            var dropLi = (closest(dropTarget, '.' + LISTITEM));\r\n            if (dropLi == null && dropTarget.classList.contains(ROOT)) {\r\n                dropLi = dropTarget.firstElementChild;\r\n            }\r\n            detach(e.droppedElement);\r\n            document.body.style.cursor = '';\r\n            if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\r\n                if (this.fields.dataSource instanceof DataManager === false) {\r\n                    this.preventExpand = false;\r\n                }\r\n                return;\r\n            }\r\n            if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\r\n                var sNodes = selectAll('.' + ACTIVE, dragObj.element);\r\n                if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\r\n                    for (var i = sNodes.length - 1; i >= 0; i--) {\r\n                        if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\r\n                            continue;\r\n                        }\r\n                        this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\r\n                    }\r\n                }\r\n                else {\r\n                    for (var i = 0; i < sNodes.length; i++) {\r\n                        if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\r\n                            continue;\r\n                        }\r\n                        this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\r\n            }\r\n            level = parseInt(dragLi.getAttribute('aria-level'), 10);\r\n            drop = true;\r\n        }\r\n        if (this.fields.dataSource instanceof DataManager === false) {\r\n            this.preventExpand = false;\r\n        }\r\n        this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\r\n        if (dragObj.element.id !== this.element.id) {\r\n            dragObj.triggerEvent();\r\n        }\r\n        this.triggerEvent();\r\n    };\r\n    TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\r\n        var checkWrapper = closest(dropTarget, '.' + CHECKBOXWRAP);\r\n        var collapse = closest(e.target, '.' + COLLAPSIBLE);\r\n        var expand = closest(e.target, '.' + EXPANDABLE);\r\n        if (!dragLi.classList.contains('e-disable') && !checkWrapper && ((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3) || (expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19) || (!expand && !collapse))) {\r\n            if (dropTarget.nodeName === 'LI') {\r\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\r\n            }\r\n            else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\r\n                if (dropTarget.firstElementChild.nodeName === 'UL') {\r\n                    this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\r\n                }\r\n            }\r\n            else if ((dropTarget.classList.contains('e-icon-collapsible')) || (dropTarget.classList.contains('e-icon-expandable'))) {\r\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\r\n            }\r\n            else {\r\n                this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);\r\n            }\r\n        }\r\n        else {\r\n            this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);\r\n        }\r\n    };\r\n    TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {\r\n        var dropUl = closest(dropLi, '.' + PARENTITEM);\r\n        var dragParentUl = closest(dragLi, '.' + PARENTITEM);\r\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\r\n        var pre;\r\n        if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\r\n            pre = false;\r\n        }\r\n        else if (e.event.offsetY < 2) {\r\n            pre = true;\r\n        }\r\n        else if (e.target.classList.contains('e-icon-expandable') || (e.target.classList.contains('e-icon-collapsible'))) {\r\n            if ((e.event.offsetY < 5) || (e.event.offsetX < 3)) {\r\n                pre = true;\r\n            }\r\n            else if ((e.event.offsetY > 15) || (e.event.offsetX > 17)) {\r\n                pre = false;\r\n            }\r\n        }\r\n        if ((e.target.classList.contains('e-icon-expandable')) || (e.target.classList.contains('e-icon-collapsible'))) {\r\n            var target = e.target.closest('li');\r\n            dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\r\n        }\r\n        else {\r\n            dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\r\n        }\r\n        this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\r\n        this.updateElement(dragParentUl, dragParentLi);\r\n        this.updateAriaLevel(dragLi);\r\n        if (dragObj.element.id === this.element.id) {\r\n            this.updateList();\r\n        }\r\n        else {\r\n            dragObj.updateInstance();\r\n            this.updateInstance();\r\n        }\r\n    };\r\n    TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck) {\r\n        var dragParentUl = closest(dragLi, '.' + PARENTITEM);\r\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\r\n        var dropParentUl = closest(dropLi, '.' + PARENTITEM);\r\n        var templateTarget;\r\n        if (e && e.target) {\r\n            templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\r\n        }\r\n        if (e && (pos < 7) && !isCheck) {\r\n            dropParentUl.insertBefore(dragLi, dropLi);\r\n            this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\r\n        }\r\n        else if (e && (e.target.offsetHeight > 0 && pos > (e.target.offsetHeight - 10)) && !isCheck && !this.hasTemplate) {\r\n            dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\r\n            this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\r\n        }\r\n        else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {\r\n            dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\r\n            this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\r\n        }\r\n        else {\r\n            var dropUl = this.expandParent(dropLi);\r\n            var childLi = dropUl.childNodes[index];\r\n            dropUl.insertBefore(dragLi, childLi);\r\n            this.moveData(dragLi, childLi, dropUl, true, dragObj);\r\n        }\r\n        this.updateElement(dragParentUl, dragParentLi);\r\n        this.updateAriaLevel(dragLi);\r\n        if (dragObj.element.id === this.element.id) {\r\n            this.updateList();\r\n        }\r\n        else {\r\n            dragObj.updateInstance();\r\n            this.updateInstance();\r\n        }\r\n    };\r\n    TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {\r\n        var dropParentLi = closest(dropUl, '.' + LISTITEM);\r\n        var id = this.getId(dragLi);\r\n        var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\r\n        var refId = this.getId(dropLi);\r\n        var index = this.getDataPos(this.treeData, this.fields, refId);\r\n        var parentId = this.getId(dropParentLi);\r\n        if (this.dataType === 1) {\r\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\r\n            var pos = isNOU(index) ? this.treeData.length : (pre ? index : index + 1);\r\n            if (isNOU(parentId) && !this.hasPid) {\r\n                delete removedData[0][this.fields.parentID];\r\n            }\r\n            else {\r\n                var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\r\n                setValue(this.fields.parentID, currPid, removedData[0]);\r\n            }\r\n            this.treeData.splice(pos, 0, removedData[0]);\r\n            if (dragObj.element.id !== this.element.id) {\r\n                var childData = dragObj.removeChildNodes(id);\r\n                pos++;\r\n                for (var i = 0, len = childData.length; i < len; i++) {\r\n                    this.treeData.splice(pos, 0, childData[i]);\r\n                    pos++;\r\n                }\r\n                dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\r\n            }\r\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\r\n        }\r\n        else {\r\n            this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\r\n        }\r\n    };\r\n    TreeView.prototype.expandParent = function (dropLi) {\r\n        var dropIcon = select('div.' + ICON, dropLi);\r\n        if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\r\n            this.expandAction(dropLi, dropIcon, null);\r\n        }\r\n        var dropUl = select('.' + PARENTITEM, dropLi);\r\n        if (this.preventExpand === true && !dropUl && dropIcon) {\r\n            this.renderChildNodes(dropLi);\r\n        }\r\n        dropUl = select('.' + PARENTITEM, dropLi);\r\n        if (!isNOU(dropUl) && this.preventExpand === true) {\r\n            dropUl.style.display = 'none';\r\n        }\r\n        if (!isNOU(dropUl) && this.preventExpand === false) {\r\n            dropUl.style.display = 'block';\r\n        }\r\n        if (isNOU(dropUl) && this.preventExpand === true) {\r\n            if (isNOU(dropIcon)) {\r\n                ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\r\n            }\r\n            var icon = select('div.' + ICON, dropLi);\r\n            if (icon) {\r\n                icon.classList.add('e-icon-expandable');\r\n            }\r\n            dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\r\n            dropLi.appendChild(dropUl);\r\n            if (icon) {\r\n                removeClass([icon], COLLAPSIBLE);\r\n            }\r\n            else {\r\n                ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\r\n            }\r\n            dropLi.setAttribute('aria-expanded', 'false');\r\n            dropUl.style.display = 'none';\r\n        }\r\n        if (isNOU(dropUl)) {\r\n            this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\r\n            if (isNOU(dropIcon)) {\r\n                ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\r\n            }\r\n            var icon = select('div.' + ICON, dropLi);\r\n            if (icon) {\r\n                removeClass([icon], EXPANDABLE);\r\n            }\r\n            else {\r\n                ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\r\n                icon = select('div.' + ICON, dropLi);\r\n                removeClass([icon], EXPANDABLE);\r\n            }\r\n            dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\r\n            dropLi.appendChild(dropUl);\r\n            this.addExpand(dropLi);\r\n            this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\r\n        }\r\n        return dropUl;\r\n    };\r\n    TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {\r\n        if (dragParentLi && dragParentUl.childElementCount === 0) {\r\n            var dragIcon = select('div.' + ICON, dragParentLi);\r\n            detach(dragParentUl);\r\n            detach(dragIcon);\r\n            var parentId = this.getId(dragParentLi);\r\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\r\n            this.removeExpand(dragParentLi, true);\r\n        }\r\n    };\r\n    TreeView.prototype.updateAriaLevel = function (dragLi) {\r\n        var level = this.parents(dragLi, '.' + PARENTITEM).length;\r\n        dragLi.setAttribute('aria-level', '' + level);\r\n        this.updateChildAriaLevel(select('.' + PARENTITEM, dragLi), level + 1);\r\n    };\r\n    TreeView.prototype.updateChildAriaLevel = function (element, level) {\r\n        if (!isNOU(element)) {\r\n            var cNodes = element.childNodes;\r\n            for (var i = 0, len = cNodes.length; i < len; i++) {\r\n                var liEle = cNodes[i];\r\n                liEle.setAttribute('aria-level', '' + level);\r\n                this.updateChildAriaLevel(select('.' + PARENTITEM, liEle), level + 1);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.renderVirtualEle = function (e) {\r\n        var pre;\r\n        if (e.event.offsetY > e.target.offsetHeight - 2) {\r\n            pre = false;\r\n        }\r\n        else if (e.event.offsetY < 2) {\r\n            pre = true;\r\n        }\r\n        var virEle = this.createElement('div', { className: SIBLING });\r\n        var index = this.fullRowSelect ? (pre ? 1 : 2) : (pre ? 0 : 1);\r\n        e.target.insertBefore(virEle, e.target.children[index]);\r\n    };\r\n    TreeView.prototype.removeVirtualEle = function () {\r\n        var sibEle = select('.' + SIBLING);\r\n        if (sibEle) {\r\n            detach(sibEle);\r\n        }\r\n    };\r\n    TreeView.prototype.destroyDrag = function () {\r\n        if (this.dragObj && this.dropObj) {\r\n            this.dragObj.destroy();\r\n            this.dropObj.destroy();\r\n        }\r\n    };\r\n    TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\r\n        var dropLi = dropTarget ? closest(dropTarget, '.' + LISTITEM) : null;\r\n        var dropData = dropLi ? this.getNodeData(dropLi) : null;\r\n        var draggedNode = obj ? obj.dragLi : dragNode;\r\n        var draggedNodeData = obj ? obj.dragData : null;\r\n        var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\r\n        var dragLiParent = obj.dragLi.parentElement;\r\n        var dragParent = obj.dragLi ? closest(dragLiParent, '.' + LISTITEM) : null;\r\n        var targetParent = null;\r\n        var indexValue = null;\r\n        var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\r\n        var iconClass = null;\r\n        var node = (drop === true) ? draggedNode : dropLi;\r\n        var index = node ? closest(node, '.e-list-parent') : null;\r\n        var i = 0;\r\n        var position = null;\r\n        dragParent = (obj.dragLi && dragParent === null) ? closest(dragLiParent, '.' + ROOT) : dragParent;\r\n        dragParent = (drop === true) ? this.dragParent : dragParent;\r\n        if (cloneEle) {\r\n            while (i < 4) {\r\n                if (select('.' + ICON, cloneEle).classList.contains(iconCss[i])) {\r\n                    iconClass = iconCss[i];\r\n                    break;\r\n                }\r\n                i++;\r\n            }\r\n        }\r\n        if (index) {\r\n            var dropTar = 0;\r\n            for (i = 0; i < index.childElementCount; i++) {\r\n                dropTar = (drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode) ? ++dropTar : dropTar;\r\n                if ((drop !== true && index.children[i].classList.contains('e-hover'))) {\r\n                    indexValue = (event.offsetY >= 23) ? i + 1 : i;\r\n                    break;\r\n                }\r\n                else if (index.children[i] === node) {\r\n                    indexValue = (event.offsetY >= 23) ? i : i;\r\n                    break;\r\n                }\r\n            }\r\n            indexValue = (dropTar !== 0) ? --indexValue : indexValue;\r\n            position = (iconClass == \"e-drop-in\") ? \"Inside\" : ((event.offsetY < 7) ? \"Before\" : \"After\");\r\n        }\r\n        if (dropTarget) {\r\n            if (newParent.length === 0) {\r\n                targetParent = null;\r\n            }\r\n            else if (dropTarget.classList.contains(LISTITEM)) {\r\n                targetParent = newParent[0];\r\n            }\r\n            else {\r\n                targetParent = newParent[1];\r\n            }\r\n        }\r\n        if (dropLi === draggedNode) {\r\n            targetParent = dropLi;\r\n        }\r\n        if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\r\n            targetParent = dropLi;\r\n            if (drop !== true) {\r\n                level = ++level;\r\n                var parent_2 = targetParent ? select('.e-list-parent', targetParent) : null;\r\n                indexValue = (parent_2) ? parent_2.children.length : 0;\r\n                if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {\r\n                    var parent_3 = targetParent.hasAttribute('data-uid') ?\r\n                        this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\r\n                    indexValue = (parent_3) ? parent_3.length : 0;\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            cancel: false,\r\n            clonedNode: cloneEle,\r\n            event: event,\r\n            draggedNode: draggedNode,\r\n            draggedNodeData: draggedNodeData,\r\n            droppedNode: dropLi,\r\n            droppedNodeData: dropData,\r\n            dropIndex: indexValue,\r\n            dropLevel: level,\r\n            draggedParentNode: dragParent,\r\n            dropTarget: targetParent,\r\n            dropIndicator: iconClass,\r\n            target: target,\r\n            position: position,\r\n        };\r\n    };\r\n    TreeView.prototype.addFullRow = function (toAdd) {\r\n        var len = this.liList.length;\r\n        if (toAdd) {\r\n            for (var i = 0; i < len; i++) {\r\n                this.createFullRow(this.liList[i]);\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < len; i++) {\r\n                var rowDiv = select('.' + FULLROW, this.liList[i]);\r\n                detach(rowDiv);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.createFullRow = function (item) {\r\n        var rowDiv = this.createElement('div', { className: FULLROW });\r\n        item.insertBefore(rowDiv, item.childNodes[0]);\r\n    };\r\n    TreeView.prototype.addMultiSelect = function (toAdd) {\r\n        if (toAdd) {\r\n            var liEles = selectAll('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\r\n            for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {\r\n                var ele = liEles_1[_i];\r\n                ele.setAttribute('aria-selected', 'false');\r\n            }\r\n        }\r\n        else {\r\n            var liEles = selectAll('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\r\n            for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {\r\n                var ele = liEles_2[_a];\r\n                ele.removeAttribute('aria-selected');\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {\r\n        if (level > 0 && !isNOU(element)) {\r\n            var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\r\n            for (var i = 0, len = cNodes.length; i < len; i++) {\r\n                var liEle = cNodes[i];\r\n                var icon = select('.' + COLLAPSIBLE, select('.' + TEXTWRAP, liEle));\r\n                if (!isNOU(icon)) {\r\n                    this.collapseNode(liEle, icon, null);\r\n                }\r\n                this.collapseByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {\r\n        var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + COLLAPSIBLE, this.element));\r\n        for (var i = 0, len = cIcons.length; i < len; i++) {\r\n            var icon = cIcons[i];\r\n            var liEle = closest(icon, '.' + LISTITEM);\r\n            this.collapseNode(liEle, icon, null);\r\n        }\r\n    };\r\n    TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {\r\n        if (level > 0 && !isNOU(element)) {\r\n            var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\r\n            for (var i = 0, len = eNodes.length; i < len; i++) {\r\n                var liEle = eNodes[i];\r\n                var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEle));\r\n                if (!isNOU(icon)) {\r\n                    this.expandAction(liEle, icon, null);\r\n                }\r\n                this.expandByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {\r\n        var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + EXPANDABLE, this.element));\r\n        for (var i = 0, len = eIcons.length; i < len; i++) {\r\n            var icon = eIcons[i];\r\n            var liEle = closest(icon, '.' + LISTITEM);\r\n            this.expandAction(liEle, icon, null, true);\r\n        }\r\n    };\r\n    TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {\r\n        var vNodes = Array.prototype.slice.call(nodes);\r\n        if (excludeHiddenNodes) {\r\n            for (var i = 0; i < vNodes.length; i++) {\r\n                if (!isVisible(vNodes[i])) {\r\n                    vNodes.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n        return vNodes;\r\n    };\r\n    TreeView.prototype.removeNode = function (node) {\r\n        var dragParentUl = closest(node, '.' + PARENTITEM);\r\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\r\n        if (!isNOU(this.nodeTemplateFn)) {\r\n            this.destroyTemplate(node);\r\n        }\r\n        detach(node);\r\n        this.updateElement(dragParentUl, dragParentLi);\r\n        this.removeData(node);\r\n    };\r\n    TreeView.prototype.updateInstance = function () {\r\n        this.updateList();\r\n        this.updateSelectedNodes();\r\n        this.updateExpandedNodes();\r\n    };\r\n    TreeView.prototype.updateList = function () {\r\n        this.liList = Array.prototype.slice.call(selectAll('.' + LISTITEM, this.element));\r\n    };\r\n    TreeView.prototype.updateSelectedNodes = function () {\r\n        this.setProperties({ selectedNodes: [] }, true);\r\n        var sNodes = selectAll('.' + ACTIVE, this.element);\r\n        this.selectGivenNodes(sNodes);\r\n    };\r\n    TreeView.prototype.updateExpandedNodes = function () {\r\n        this.setProperties({ expandedNodes: [] }, true);\r\n        var eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\r\n        for (var i = 0, len = eNodes.length; i < len; i++) {\r\n            this.addExpand(eNodes[i]);\r\n        }\r\n    };\r\n    TreeView.prototype.removeData = function (node) {\r\n        if (this.dataType === 1) {\r\n            var dm = new DataManager(this.treeData);\r\n            var id = this.getId(node);\r\n            var data = {};\r\n            var newId = this.isNumberTypeId ? parseFloat(id) : id;\r\n            data[this.fields.id] = newId;\r\n            dm.remove(this.fields.id, data);\r\n            this.removeChildNodes(id);\r\n        }\r\n        else {\r\n            var id = this.getId(node);\r\n            this.updateChildField(this.treeData, this.fields, id, null, null, true);\r\n        }\r\n    };\r\n    TreeView.prototype.removeChildNodes = function (parentId) {\r\n        var cNodes = this.getChildGroup(this.groupedData, parentId, false);\r\n        var childData = [];\r\n        if (cNodes) {\r\n            for (var i = 0, len = cNodes.length; i < len; i++) {\r\n                var dm = new DataManager(this.treeData);\r\n                var id = getValue(this.fields.id, cNodes[i]).toString();\r\n                var data = {};\r\n                var currId = this.isNumberTypeId ? parseFloat(id) : id;\r\n                data[this.fields.id] = currId;\r\n                var nodeData = dm.remove(this.fields.id, data);\r\n                childData.push(nodeData[0]);\r\n                this.removeChildNodes(id);\r\n            }\r\n        }\r\n        return childData;\r\n    };\r\n    TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            var liEle = this.getElement(nodes[i]);\r\n            if (isNOU(liEle)) {\r\n                continue;\r\n            }\r\n            var icon = select('.' + selector, select('.' + TEXTWRAP, liEle));\r\n            if (!isNOU(icon)) {\r\n                toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {\r\n        if (nodes.length === 0) {\r\n            return;\r\n        }\r\n        var sNodes = this.getSortedData(nodes);\r\n        var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\r\n        if (isRemote) {\r\n            this.updateMapper(level);\r\n        }\r\n        var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\r\n        var dropUl;\r\n        if (!dropEle) {\r\n            dropUl = dropLi ? this.expandParent(dropLi) : select('.' + PARENTITEM, this.element);\r\n        }\r\n        else {\r\n            dropUl = dropEle;\r\n        }\r\n        var refNode = dropUl.childNodes[index];\r\n        for (var i = 0; i < li.length; i++) {\r\n            dropUl.insertBefore(li[i], refNode);\r\n        }\r\n        var id = this.getId(dropLi);\r\n        if (this.dataType === 1) {\r\n            this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\r\n            var refId = this.getId(refNode);\r\n            var pos = isNOU(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\r\n            for (var j = 0; j < nodes.length; j++) {\r\n                if (!isNOU(id)) {\r\n                    var currId = this.isNumberTypeId ? parseFloat(id) : id;\r\n                    setValue(this.fields.parentID, currId, nodes[j]);\r\n                }\r\n                this.treeData.splice(pos, 0, nodes[j]);\r\n                pos++;\r\n            }\r\n        }\r\n        else {\r\n            this.addChildData(this.treeData, this.fields, id, nodes, index);\r\n        }\r\n        this.finalizeNode(dropUl);\r\n    };\r\n    TreeView.prototype.updateMapper = function (level) {\r\n        var mapper = (level === 1) ? this.fields : this.getChildFields(this.fields, level - 1, 1);\r\n        this.updateListProp(mapper);\r\n    };\r\n    TreeView.prototype.updateListProp = function (mapper) {\r\n        var prop = this.getActualProperties(mapper);\r\n        this.listBaseOption.fields = prop;\r\n        this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';\r\n    };\r\n    TreeView.prototype.getDataPos = function (obj, mapper, id) {\r\n        var pos = null;\r\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\r\n            var nodeId = getValue(mapper.id, obj[i]);\r\n            if (obj[i] && nodeId && nodeId.toString() === id) {\r\n                return i;\r\n            }\r\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\r\n                var data = getValue(mapper.child, obj[i]);\r\n                pos = this.getDataPos(data, this.getChildMapper(mapper), id);\r\n                if (pos !== null) {\r\n                    break;\r\n                }\r\n            }\r\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\r\n                var items = getValue('child', obj[i]);\r\n                pos = this.getDataPos(items, this.getChildMapper(mapper), id);\r\n                if (pos !== null) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return pos;\r\n    };\r\n    TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {\r\n        var updated;\r\n        if (isNOU(id)) {\r\n            index = isNOU(index) ? obj.length : index;\r\n            for (var k = 0, len = data.length; k < len; k++) {\r\n                obj.splice(index, 0, data[k]);\r\n                index++;\r\n            }\r\n            return updated;\r\n        }\r\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\r\n            var nodeId = getValue(mapper.id, obj[i]);\r\n            if (obj[i] && nodeId && nodeId.toString() === id) {\r\n                if ((typeof mapper.child === 'string' && (obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null)) ||\r\n                    ((this.fields.dataSource instanceof DataManager) && obj[i].hasOwnProperty('child'))) {\r\n                    var key = (typeof mapper.child === 'string') ? mapper.child : 'child';\r\n                    var childData = getValue(key, obj[i]);\r\n                    if (isNOU(childData)) {\r\n                        childData = [];\r\n                    }\r\n                    index = isNOU(index) ? childData.length : index;\r\n                    for (var k = 0, len = data.length; k < len; k++) {\r\n                        childData.splice(index, 0, data[k]);\r\n                        index++;\r\n                    }\r\n                }\r\n                else {\r\n                    var key = (typeof mapper.child === 'string') ? mapper.child : 'child';\r\n                    obj[i][key] = data;\r\n                }\r\n                return true;\r\n            }\r\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\r\n                var childObj = getValue(mapper.child, obj[i]);\r\n                updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\r\n                if (updated !== undefined) {\r\n                    break;\r\n                }\r\n            }\r\n            else if ((this.fields.dataSource instanceof DataManager) && !isNOU(getValue('child', obj[i]))) {\r\n                var childData = getValue('child', obj[i]);\r\n                updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\r\n                if (updated !== undefined) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return updated;\r\n    };\r\n    TreeView.prototype.doDisableAction = function (nodes) {\r\n        var validNodes = this.nodeType(nodes);\r\n        var validID = this.checkValidId(validNodes);\r\n        this.validArr = [];\r\n        for (var i = 0, len = validID.length; i < len; i++) {\r\n            var id = validID[i][this.fields.id].toString();\r\n            if (id && this.disableNode.indexOf(id) === -1) {\r\n                this.disableNode.push(id);\r\n            }\r\n            var liEle = this.getElement(id);\r\n            if (liEle) {\r\n                liEle.setAttribute('aria-disabled', 'true');\r\n                addClass([liEle], DISABLE);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.doEnableAction = function (nodes) {\r\n        var strNodes = this.nodeType(nodes);\r\n        for (var i = 0, len = strNodes.length; i < len; i++) {\r\n            var liEle = this.getElement(strNodes[i]);\r\n            var id = strNodes[i];\r\n            if (id && this.disableNode.indexOf(id) !== -1) {\r\n                this.disableNode.splice(this.disableNode.indexOf(id), 1);\r\n            }\r\n            if (liEle) {\r\n                liEle.removeAttribute('aria-disabled');\r\n                removeClass([liEle], DISABLE);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.nodeType = function (nodes) {\r\n        var validID = [];\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            var id = void 0;\r\n            if (typeof nodes[i] == \"string\") {\r\n                id = (nodes[i]) ? nodes[i].toString() : null;\r\n            }\r\n            else if (typeof nodes[i] === \"object\") {\r\n                id = nodes[i] ? nodes[i].getAttribute(\"data-uid\").toString() : null;\r\n            }\r\n            if (validID.indexOf(id) == -1) {\r\n                validID.push(id);\r\n            }\r\n        }\r\n        return validID;\r\n    };\r\n    TreeView.prototype.checkValidId = function (node) {\r\n        var _this = this;\r\n        if (this.dataType === 1) {\r\n            this.validArr = this.treeData.filter(function (data) {\r\n                return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;\r\n            });\r\n        }\r\n        else if (this.dataType === 2) {\r\n            for (var k = 0; k < this.treeData.length; k++) {\r\n                var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;\r\n                if (node.indexOf(id) !== -1) {\r\n                    this.validArr.push(this.treeData[k]);\r\n                }\r\n                var childItems = getValue(this.fields.child.toString(), this.treeData[k]);\r\n                if (childItems) {\r\n                    this.filterNestedChild(childItems, node);\r\n                }\r\n            }\r\n        }\r\n        return this.validArr;\r\n    };\r\n    TreeView.prototype.filterNestedChild = function (treeData, nodes) {\r\n        for (var k = 0; k < treeData.length; k++) {\r\n            var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;\r\n            if (nodes.indexOf(id) !== -1) {\r\n                this.validArr.push(treeData[k]);\r\n            }\r\n            var childItems = getValue(this.fields.child.toString(), treeData[k]);\r\n            if (childItems) {\r\n                this.filterNestedChild(childItems, nodes);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.setTouchClass = function () {\r\n        var ele = closest(this.element, '.' + BIGGER);\r\n        this.touchClass = isNOU(ele) ? '' : SMALL;\r\n    };\r\n    TreeView.prototype.updatePersistProp = function () {\r\n        this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\r\n        var sleNodes = this.selectedNodes;\r\n        for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {\r\n            this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);\r\n        }\r\n        var enodes = this.expandedNodes;\r\n        for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {\r\n            this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);\r\n        }\r\n        if (this.showCheckBox) {\r\n            this.removeField(this.treeData, this.fields, ['isChecked']);\r\n            var cnodes = this.checkedNodes;\r\n            for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {\r\n                this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.removeField = function (obj, mapper, names) {\r\n        if (isNOU(obj) || isNOU(mapper)) {\r\n            return;\r\n        }\r\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\r\n            for (var j = 0; j < names.length; j++) {\r\n                var field = this.getMapperProp(mapper, names[j]);\r\n                if (!isNOU(obj[i][field])) {\r\n                    delete obj[i][field];\r\n                }\r\n            }\r\n            if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\r\n                this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);\r\n            }\r\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\r\n                this.removeField(getValue('child', obj[i]), this.getChildMapper(mapper), names);\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.getMapperProp = function (mapper, fieldName) {\r\n        switch (fieldName) {\r\n            case 'selected':\r\n                return !isNOU(mapper.selected) ? mapper.selected : 'selected';\r\n            case 'expanded':\r\n                return !isNOU(mapper.expanded) ? mapper.expanded : 'expanded';\r\n            case 'isChecked':\r\n                return !isNOU(mapper.isChecked) ? mapper.isChecked : 'isChecked';\r\n            case 'hasChildren':\r\n                return !isNOU(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\r\n            default:\r\n                return fieldName;\r\n        }\r\n    };\r\n    TreeView.prototype.updateField = function (obj, mapper, id, key, value) {\r\n        var childNodes;\r\n        if (isNOU(id)) {\r\n            return;\r\n        }\r\n        else if (this.dataType === 1) {\r\n            var newId = this.isNumberTypeId ? parseFloat(id) : id;\r\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', newId, false));\r\n            setValue(this.getMapperProp(mapper, key), value, resultData[0]);\r\n        }\r\n        else {\r\n            this.updateChildField(obj, mapper, id, key, value);\r\n        }\r\n    };\r\n    TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove) {\r\n        var removedData;\r\n        if (isNOU(obj)) {\r\n            return removedData;\r\n        }\r\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\r\n            var nodeId = getValue(mapper.id, obj[i]);\r\n            if (obj[i] && nodeId && nodeId.toString() === id) {\r\n                if (remove) {\r\n                    removedData = obj.splice(i, 1);\r\n                }\r\n                else {\r\n                    setValue(this.getMapperProp(mapper, key), value, obj[i]);\r\n                    removedData = [];\r\n                }\r\n                return removedData;\r\n            }\r\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\r\n                var childData = getValue(mapper.child, obj[i]);\r\n                removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove);\r\n                if (removedData !== undefined) {\r\n                    break;\r\n                }\r\n            }\r\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\r\n                var childItems = getValue('child', obj[i]);\r\n                removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove);\r\n                if (removedData !== undefined) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return removedData;\r\n    };\r\n    TreeView.prototype.triggerEvent = function () {\r\n        this.renderReactTemplates();\r\n        var eventArgs = { data: this.treeData };\r\n        this.trigger('dataSourceChanged', eventArgs);\r\n    };\r\n    TreeView.prototype.wireInputEvents = function (inpEle) {\r\n        EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\r\n    };\r\n    TreeView.prototype.wireEditingEvents = function (toBind) {\r\n        var _this = this;\r\n        if (toBind && !this.disabled) {\r\n            var proxy_2 = this;\r\n            this.touchEditObj = new Touch(this.element, {\r\n                tap: function (e) {\r\n                    if (_this.isDoubleTapped(e) && e.tapCount === 2) {\r\n                        e.originalEvent.preventDefault();\r\n                        proxy_2.editingHandler(e.originalEvent);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (this.touchEditObj) {\r\n                this.touchEditObj.destroy();\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.wireClickEvent = function (toBind) {\r\n        if (toBind) {\r\n            var proxy_3 = this;\r\n            this.touchClickObj = new Touch(this.element, {\r\n                tap: function (e) {\r\n                    proxy_3.clickHandler(e);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (this.touchClickObj) {\r\n                this.touchClickObj.destroy();\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.wireExpandOnEvent = function (toBind) {\r\n        var _this = this;\r\n        if (toBind) {\r\n            var proxy_4 = this;\r\n            this.touchExpandObj = new Touch(this.element, {\r\n                tap: function (e) {\r\n                    if ((_this.expandOnType === 'Click' || (_this.expandOnType === 'DblClick' && _this.isDoubleTapped(e) && e.tapCount === 2))\r\n                        && e.originalEvent.which !== 3) {\r\n                        proxy_4.expandHandler(e);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (this.touchExpandObj) {\r\n                this.touchExpandObj.destroy();\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.mouseDownHandler = function (e) {\r\n        this.mouseDownStatus = true;\r\n        if (e.shiftKey || e.ctrlKey) {\r\n            e.preventDefault();\r\n        }\r\n        if (e.ctrlKey && this.allowMultiSelection) {\r\n            EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\r\n        }\r\n    };\r\n    ;\r\n    TreeView.prototype.preventContextMenu = function (e) {\r\n        e.preventDefault();\r\n    };\r\n    TreeView.prototype.wireEvents = function () {\r\n        EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\r\n        this.wireClickEvent(true);\r\n        if (this.expandOnType !== 'None') {\r\n            this.wireExpandOnEvent(true);\r\n        }\r\n        EventHandler.add(this.element, 'focus', this.focusIn, this);\r\n        EventHandler.add(this.element, 'blur', this.focusOut, this);\r\n        EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\r\n        EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\r\n        this.keyboardModule = new KeyboardEvents(this.element, {\r\n            keyAction: this.keyActionHandler.bind(this),\r\n            keyConfigs: this.keyConfigs,\r\n            eventName: 'keydown',\r\n        });\r\n    };\r\n    TreeView.prototype.unWireEvents = function () {\r\n        EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\r\n        this.wireClickEvent(false);\r\n        this.wireExpandOnEvent(false);\r\n        EventHandler.remove(this.element, 'focus', this.focusIn);\r\n        EventHandler.remove(this.element, 'blur', this.focusOut);\r\n        EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\r\n        EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\r\n        if (!this.disabled) {\r\n            this.keyboardModule.destroy();\r\n        }\r\n    };\r\n    TreeView.prototype.parents = function (element, selector) {\r\n        var matched = [];\r\n        var el = element.parentNode;\r\n        while (!isNOU(el)) {\r\n            if (matches(el, selector)) {\r\n                matched.push(el);\r\n            }\r\n            el = el.parentNode;\r\n        }\r\n        return matched;\r\n    };\r\n    TreeView.prototype.isDoubleTapped = function (e) {\r\n        var target = e.originalEvent.target;\r\n        var secondTap;\r\n        if (target && e.tapCount) {\r\n            if (e.tapCount === 1) {\r\n                this.firstTap = closest(target, '.' + LISTITEM);\r\n            }\r\n            else if (e.tapCount === 2) {\r\n                secondTap = closest(target, '.' + LISTITEM);\r\n            }\r\n        }\r\n        return (this.firstTap === secondTap);\r\n    };\r\n    TreeView.prototype.isDescendant = function (parent, child) {\r\n        var node = child.parentNode;\r\n        while (!isNOU(node)) {\r\n            if (node === parent) {\r\n                return true;\r\n            }\r\n            node = node.parentNode;\r\n        }\r\n        return false;\r\n    };\r\n    TreeView.prototype.showSpinner = function (element) {\r\n        addClass([element], LOAD);\r\n        createSpinner({\r\n            target: element,\r\n            width: Browser.isDevice ? 16 : 14\r\n        }, this.createElement);\r\n        showSpinner(element);\r\n    };\r\n    TreeView.prototype.hideSpinner = function (element) {\r\n        hideSpinner(element);\r\n        element.innerHTML = '';\r\n        removeClass([element], LOAD);\r\n    };\r\n    TreeView.prototype.setCheckedNodes = function (nodes) {\r\n        nodes = JSON.parse(JSON.stringify(nodes));\r\n        this.uncheckAll(this.checkedNodes);\r\n        this.setIndeterminate(nodes);\r\n        if (nodes.length > 0) {\r\n            this.checkAll(nodes);\r\n        }\r\n    };\r\n    /**\r\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\r\n     */\r\n    TreeView.prototype.setValidCheckedNode = function (node) {\r\n        if (this.dataType === 1) {\r\n            var mapper = this.fields;\r\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', node, true));\r\n            if (resultData[0]) {\r\n                this.setChildCheckState(resultData, node, resultData[0]);\r\n                if (this.autoCheck) {\r\n                    var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\r\n                    var childNodes = this.getChildNodes(this.treeData, parent_4);\r\n                    var count = 0;\r\n                    for (var len = 0; len < childNodes.length; len++) {\r\n                        var childId = childNodes[len][this.fields.id].toString();\r\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\r\n                            count++;\r\n                        }\r\n                    }\r\n                    if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {\r\n                        this.checkedNodes.push(parent_4);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (this.dataType === 2) {\r\n            for (var a = 0; a < this.treeData.length; a++) {\r\n                var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';\r\n                if (index === node && this.checkedNodes.indexOf(node) === -1) {\r\n                    this.checkedNodes.push(node);\r\n                    break;\r\n                }\r\n                var childItems = getValue(this.fields.child.toString(), this.treeData[a]);\r\n                if (childItems) {\r\n                    this.setChildCheckState(childItems, node, this.treeData[a]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\r\n     */\r\n    TreeView.prototype.setChildCheckState = function (childItems, node, treeData) {\r\n        var checkedParent;\r\n        var count = 0;\r\n        if (this.dataType === 1) {\r\n            if (treeData) {\r\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\r\n            }\r\n            for (var index = 0; index < childItems.length; index++) {\r\n                var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;\r\n                if (treeData && checkedParent && this.autoCheck) {\r\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\r\n                        this.checkedNodes.push(checkNode);\r\n                    }\r\n                }\r\n                if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\r\n                    this.checkedNodes.push(node);\r\n                }\r\n                var subChildItems = this.getChildNodes(this.treeData, checkNode);\r\n                if (subChildItems) {\r\n                    this.setChildCheckState(subChildItems, node, treeData);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (treeData) {\r\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\r\n            }\r\n            for (var index = 0; index < childItems.length; index++) {\r\n                var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\r\n                if (treeData && checkedParent && this.autoCheck) {\r\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\r\n                        this.checkedNodes.push(checkedChild);\r\n                    }\r\n                }\r\n                if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\r\n                    this.checkedNodes.push(node);\r\n                }\r\n                var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\r\n                if (subChildItems) {\r\n                    this.setChildCheckState(subChildItems, node, childItems[index]);\r\n                }\r\n                if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\r\n                    count++;\r\n                }\r\n                if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\r\n                    this.checkedNodes.push(checkedParent);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    TreeView.prototype.setIndeterminate = function (nodes) {\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            this.setValidCheckedNode(nodes[i]);\r\n        }\r\n    };\r\n    TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {\r\n        if (this.dataType === 1) {\r\n            var pos = this.getDataPos(this.treeData, this.fields, id);\r\n            this.treeData.splice(pos, 1, newData);\r\n            if (isRefreshChild) {\r\n                this.removeChildNodes(id);\r\n                for (var j = 0; j < childValue.length; j++) {\r\n                    this.treeData.splice(pos, 0, childValue[j]);\r\n                    pos++;\r\n                }\r\n            }\r\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\r\n        }\r\n        else {\r\n            this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\r\n        }\r\n    };\r\n    TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {\r\n        var found;\r\n        for (var i = 0, objlen = treeData.length; i < objlen; i++) {\r\n            var nodeId = getValue(mapper.id, treeData[i]);\r\n            if (treeData[i] && nodeId && nodeId.toString() === currID) {\r\n                treeData[i] = newData[0];\r\n                return true;\r\n            }\r\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, treeData[i]))) {\r\n                var childObj = getValue(mapper.child, treeData[i]);\r\n                found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\r\n                if (found !== undefined) {\r\n                    break;\r\n                }\r\n            }\r\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', treeData[i]))) {\r\n                var childData = getValue('child', treeData[i]);\r\n                found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\r\n                if (found !== undefined) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return found;\r\n    };\r\n    TreeView.prototype.dynamicState = function () {\r\n        this.setDragAndDrop(this.allowDragAndDrop);\r\n        this.wireEditingEvents(this.allowEditing);\r\n        if (!this.disabled) {\r\n            this.wireEvents();\r\n            this.setRipple();\r\n        }\r\n        else {\r\n            this.unWireEvents();\r\n            this.rippleFn();\r\n            this.rippleIconFn();\r\n        }\r\n    };\r\n    TreeView.prototype.crudOperation = function (operation, nodes, target, newText, newNode, index, prevent) {\r\n        var _this = this;\r\n        var data = this.fields.dataSource;\r\n        var matchedArr = [];\r\n        var query = this.getQuery(this.fields);\r\n        var key = this.fields.id;\r\n        var crud;\r\n        var changes = {\r\n            addedRecords: [],\r\n            deletedRecords: [],\r\n            changedRecords: []\r\n        };\r\n        var nodesID = [];\r\n        if (nodes) {\r\n            nodesID = this.nodeType(nodes);\r\n        }\r\n        else if (target) {\r\n            if (typeof target == \"string\") {\r\n                nodesID[0] = target.toString();\r\n            }\r\n            else if (typeof target === \"object\") {\r\n                nodesID[0] = target.getAttribute(\"data-uid\").toString();\r\n            }\r\n        }\r\n        for (var i = 0, len = nodesID.length; i < len; i++) {\r\n            var liEle = this.getElement(nodesID[i]);\r\n            if (isNullOrUndefined(liEle)) {\r\n                continue;\r\n            }\r\n            var removedData = this.getNodeObject(nodesID[i]);\r\n            matchedArr.push(removedData);\r\n        }\r\n        switch (operation) {\r\n            case 'delete':\r\n                if (nodes.length == 1) {\r\n                    crud = data.remove(key, matchedArr[0], query.fromTable, query);\r\n                }\r\n                else {\r\n                    changes.deletedRecords = matchedArr;\r\n                    crud = data.saveChanges(changes, key, query.fromTable, query);\r\n                }\r\n                crud.then(function (e) { return _this.deleteSuccess(nodesID); })\r\n                    .catch(function (e) { return _this.dmFailure(e); });\r\n                break;\r\n            case 'update':\r\n                matchedArr[0][this.fields.text] = newText;\r\n                crud = data.update(key, matchedArr[0], query.fromTable, query);\r\n                crud.then(function (e) { return _this.editSucess(target, newText, prevent); })\r\n                    .catch(function (e) { return _this.dmFailure(e, target, prevent); });\r\n                break;\r\n            case 'insert':\r\n                if (newNode.length == 1) {\r\n                    crud = data.insert(newNode[0], query.fromTable, query);\r\n                }\r\n                else {\r\n                    var arr = [];\r\n                    for (var i = 0, len = newNode.length; i < len; i++) {\r\n                        arr.push(newNode[i]);\r\n                    }\r\n                    changes.addedRecords = arr;\r\n                    crud = data.saveChanges(changes, key, query.fromTable, query);\r\n                }\r\n                crud.then(function (e) {\r\n                    var dropLi = _this.getElement(target);\r\n                    _this.addSuccess(newNode, dropLi, index);\r\n                    _this.preventExpand = false;\r\n                }).catch(function (e) { return _this.dmFailure(e); });\r\n                break;\r\n        }\r\n    };\r\n    TreeView.prototype.deleteSuccess = function (nodes) {\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            var liEle = this.getElement(nodes[i]);\r\n            if (isNOU(liEle)) {\r\n                continue;\r\n            }\r\n            this.removeNode(liEle);\r\n        }\r\n        this.updateInstance();\r\n        if (this.dataType === 1) {\r\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\r\n        }\r\n        this.triggerEvent();\r\n    };\r\n    TreeView.prototype.editSucess = function (target, newText, prevent) {\r\n        var liEle = this.getElement(target);\r\n        var txtEle = select('.' + LISTTEXT, liEle);\r\n        this.appendNewText(liEle, txtEle, newText, prevent);\r\n    };\r\n    TreeView.prototype.addSuccess = function (nodes, dropLi, index) {\r\n        var dropUl;\r\n        var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\r\n        var proxy = this;\r\n        if (dropLi && icon && icon.classList.contains(EXPANDABLE) &&\r\n            dropLi.querySelector('.' + PARENTITEM) === null) {\r\n            proxy.renderChildNodes(dropLi, null, function () {\r\n                dropUl = dropLi.querySelector('.' + PARENTITEM);\r\n                proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);\r\n                proxy.triggerEvent();\r\n            });\r\n        }\r\n        else {\r\n            this.addGivenNodes(nodes, dropLi, index, true);\r\n            this.triggerEvent();\r\n        }\r\n    };\r\n    TreeView.prototype.dmFailure = function (e, target, prevent) {\r\n        if (target) {\r\n            this.updatePreviousText(target, prevent);\r\n        }\r\n        this.trigger('actionFailure', { error: e });\r\n    };\r\n    TreeView.prototype.updatePreviousText = function (target, prevent) {\r\n        var liEle = this.getElement(target);\r\n        var txtEle = select('.' + LISTTEXT, liEle);\r\n        this.updateText(liEle, txtEle, this.oldText, prevent);\r\n    };\r\n    /**\r\n     * Called internally if any of the property value changed.\r\n     * @param  {TreeView} newProp\r\n     * @param  {TreeView} oldProp\r\n     * @returns void\r\n     * @private\r\n     */\r\n    TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {\r\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\r\n            var prop = _a[_i];\r\n            switch (prop) {\r\n                case 'allowDragAndDrop':\r\n                    this.setDragAndDrop(this.allowDragAndDrop);\r\n                    break;\r\n                case 'dragArea':\r\n                    if (this.allowDragAndDrop) {\r\n                        this.dragObj.dragArea = this.dragArea;\r\n                    }\r\n                    break;\r\n                case 'allowEditing':\r\n                    this.wireEditingEvents(this.allowEditing);\r\n                    break;\r\n                case 'allowMultiSelection':\r\n                    if (this.selectedNodes.length > 1) {\r\n                        var sNode = this.getElement(this.selectedNodes[0]);\r\n                        this.isLoaded = false;\r\n                        this.removeSelectAll();\r\n                        this.selectNode(sNode, null);\r\n                        this.isLoaded = true;\r\n                    }\r\n                    this.setMultiSelect(this.allowMultiSelection);\r\n                    this.addMultiSelect(this.allowMultiSelection);\r\n                    break;\r\n                case 'allowTextWrap':\r\n                    this.setTextWrap();\r\n                    this.updateWrap();\r\n                    break;\r\n                case 'checkedNodes':\r\n                    if (this.showCheckBox) {\r\n                        this.checkedNodes = oldProp.checkedNodes;\r\n                        this.setCheckedNodes(newProp.checkedNodes);\r\n                    }\r\n                    break;\r\n                case 'autoCheck':\r\n                    if (this.showCheckBox) {\r\n                        this.autoCheck = newProp.autoCheck;\r\n                        this.ensureIndeterminate();\r\n                    }\r\n                    break;\r\n                case 'cssClass':\r\n                    this.setCssClass(oldProp.cssClass, newProp.cssClass);\r\n                    break;\r\n                case 'enableRtl':\r\n                    this.setEnableRtl();\r\n                    break;\r\n                case 'expandedNodes':\r\n                    this.isAnimate = false;\r\n                    this.setProperties({ expandedNodes: [] }, true);\r\n                    this.collapseAll();\r\n                    this.isInitalExpand = true;\r\n                    this.setProperties({ expandedNodes: isNOU(newProp.expandedNodes) ? [] : newProp.expandedNodes }, true);\r\n                    this.doExpandAction();\r\n                    this.isInitalExpand = false;\r\n                    this.isAnimate = true;\r\n                    break;\r\n                case 'expandOn':\r\n                    this.wireExpandOnEvent(false);\r\n                    this.setExpandOnType();\r\n                    if (this.expandOnType !== 'None' && !this.disabled) {\r\n                        this.wireExpandOnEvent(true);\r\n                    }\r\n                    break;\r\n                case 'disabled':\r\n                    this.setDisabledMode();\r\n                    this.dynamicState();\r\n                    break;\r\n                case 'fields':\r\n                    this.isAnimate = false;\r\n                    this.isFieldChange = true;\r\n                    this.initialRender = true;\r\n                    this.reRenderNodes();\r\n                    this.initialRender = false;\r\n                    this.isAnimate = true;\r\n                    this.isFieldChange = false;\r\n                    break;\r\n                case 'fullRowSelect':\r\n                    this.setFullRow(this.fullRowSelect);\r\n                    this.addFullRow(this.fullRowSelect);\r\n                    if (this.allowTextWrap) {\r\n                        this.setTextWrap();\r\n                        this.updateWrap();\r\n                    }\r\n                    break;\r\n                case 'loadOnDemand':\r\n                    if (this.loadOnDemand === false && !this.onLoaded) {\r\n                        var nodes = this.element.querySelectorAll('li');\r\n                        var i = 0;\r\n                        while (i < nodes.length) {\r\n                            if (nodes[i].getAttribute('aria-expanded') !== 'true') {\r\n                                this.renderChildNodes(nodes[i], true, null, true);\r\n                            }\r\n                            i++;\r\n                        }\r\n                        this.onLoaded = true;\r\n                    }\r\n                    break;\r\n                case 'nodeTemplate':\r\n                    this.hasTemplate = false;\r\n                    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\r\n                    this.reRenderNodes();\r\n                    break;\r\n                case 'selectedNodes':\r\n                    this.removeSelectAll();\r\n                    this.setProperties({ selectedNodes: newProp.selectedNodes }, true);\r\n                    this.doSelectionAction();\r\n                    break;\r\n                case 'showCheckBox':\r\n                    this.reRenderNodes();\r\n                    break;\r\n                case 'sortOrder':\r\n                    this.reRenderNodes();\r\n                    break;\r\n                case 'fullRowNavigable':\r\n                    this.setProperties({ fullRowNavigable: newProp.fullRowNavigable }, true);\r\n                    this.listBaseOption.itemNavigable = newProp.fullRowNavigable;\r\n                    this.reRenderNodes();\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\r\n     */\r\n    TreeView.prototype.destroy = function () {\r\n        this.clearTemplate();\r\n        this.element.removeAttribute('aria-activedescendant');\r\n        this.element.removeAttribute('tabindex');\r\n        this.unWireEvents();\r\n        this.wireEditingEvents(false);\r\n        if (!this.disabled) {\r\n            this.rippleFn();\r\n            this.rippleIconFn();\r\n        }\r\n        this.setCssClass(this.cssClass, null);\r\n        this.setDragAndDrop(false);\r\n        this.setFullRow(false);\r\n        if (this.ulElement && this.ulElement.parentElement) {\r\n            this.ulElement.parentElement.removeChild(this.ulElement);\r\n        }\r\n        _super.prototype.destroy.call(this);\r\n    };\r\n    /**\r\n     * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\r\n     * then the nodes are added as children of the given parentID or in the root level of TreeView.\r\n     * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.\r\n     * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\r\n     * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\r\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\r\n     */\r\n    TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {\r\n        if (isNOU(nodes)) {\r\n            return;\r\n        }\r\n        nodes = JSON.parse(JSON.stringify(nodes));\r\n        var dropLi = this.getElement(target);\r\n        this.preventExpand = preventTargetExpand;\r\n        if (this.fields.dataSource instanceof DataManager) {\r\n            if (!this.isOffline) {\r\n                this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);\r\n            }\r\n            else {\r\n                this.addSuccess(nodes, dropLi, index);\r\n            }\r\n        }\r\n        else if (this.dataType === 2) {\r\n            this.addGivenNodes(nodes, dropLi, index);\r\n        }\r\n        else {\r\n            if (dropLi) {\r\n                this.addGivenNodes(nodes, dropLi, index);\r\n            }\r\n            else {\r\n                nodes = this.getSortedData(nodes);\r\n                for (var i = 0; i < nodes.length; i++) {\r\n                    var pid = getValue(this.fields.parentID, nodes[i]);\r\n                    dropLi = pid ? this.getElement(pid.toString()) : pid;\r\n                    this.addGivenNodes([nodes[i]], dropLi, index);\r\n                }\r\n            }\r\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\r\n        }\r\n        this.updateCheckedStateFromDS();\r\n        if (this.showCheckBox && dropLi) {\r\n            this.ensureParentCheckState(dropLi);\r\n        }\r\n        if ((this.fields.dataSource instanceof DataManager === false)) {\r\n            this.preventExpand = false;\r\n            this.triggerEvent();\r\n        }\r\n    };\r\n    /**\r\n     * Instead of clicking on the TreeView node for editing, we can enable it by using\r\n     * `beginEdit` property. On passing the node ID or element through this property, the edit textBox\r\n     * will be created for the particular node thus allowing us to edit it.\r\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\r\n     */\r\n    TreeView.prototype.beginEdit = function (node) {\r\n        var ele = this.getElement(node);\r\n        if (isNOU(ele) || this.disabled) {\r\n            return;\r\n        }\r\n        this.createTextbox(ele, null);\r\n    };\r\n    /**\r\n     * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\r\n     * as argument to this method.\r\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\r\n     */\r\n    TreeView.prototype.checkAll = function (nodes) {\r\n        if (this.showCheckBox) {\r\n            this.doCheckBoxAction(nodes, true);\r\n        }\r\n    };\r\n    /**\r\n     * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\r\n     * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\r\n     * a specific level of nodes, set **level** as argument to collapseAll method.\r\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\r\n     * @param  {number} level - TreeView nodes will collapse up to the given level.\r\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\r\n     */\r\n    TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {\r\n        if (!isNOU(nodes)) {\r\n            this.doGivenAction(nodes, COLLAPSIBLE, false);\r\n        }\r\n        else {\r\n            if (level > 0) {\r\n                this.collapseByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\r\n            }\r\n            else {\r\n                this.collapseAllNodes(excludeHiddenNodes);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\r\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\r\n     */\r\n    TreeView.prototype.disableNodes = function (nodes) {\r\n        if (!isNOU(nodes)) {\r\n            this.doDisableAction(nodes);\r\n        }\r\n    };\r\n    /**\r\n     * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\r\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\r\n     */\r\n    TreeView.prototype.enableNodes = function (nodes) {\r\n        if (!isNOU(nodes)) {\r\n            this.doEnableAction(nodes);\r\n        }\r\n    };\r\n    /**\r\n     * Ensures visibility of the TreeView node by using node ID or node element.\r\n     * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\r\n     * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\r\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\r\n     */\r\n    TreeView.prototype.ensureVisible = function (node) {\r\n        var liEle = this.getElement(node);\r\n        if (isNOU(liEle)) {\r\n            return;\r\n        }\r\n        var parents = this.parents(liEle, '.' + LISTITEM);\r\n        this.expandAll(parents);\r\n        setTimeout(function () { liEle.scrollIntoView(true); }, 450);\r\n    };\r\n    /**\r\n     * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\r\n     * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\r\n     * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\r\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\r\n     * @param  {number} level - TreeView nodes will expand up to the given level.\r\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\r\n     */\r\n    TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {\r\n        if (!isNOU(nodes)) {\r\n            this.doGivenAction(nodes, EXPANDABLE, true);\r\n        }\r\n        else {\r\n            if (level > 0) {\r\n                this.expandByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\r\n            }\r\n            else {\r\n                this.expandAllNodes(excludeHiddenNodes);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets all the checked nodes including child, whether it is loaded or not.\r\n     */\r\n    TreeView.prototype.getAllCheckedNodes = function () {\r\n        var checkNodes = this.checkedNodes;\r\n        return checkNodes;\r\n    };\r\n    /**\r\n    * Gets all the disabled nodes including child, whether it is loaded or not.\r\n    */\r\n    TreeView.prototype.getDisabledNodes = function () {\r\n        var disabledNodes = this.disableNode;\r\n        return disabledNodes;\r\n    };\r\n    /**\r\n     * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\r\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\r\n     */\r\n    TreeView.prototype.getNode = function (node) {\r\n        var ele = this.getElement(node);\r\n        return this.getNodeData(ele, true);\r\n    };\r\n    /**\r\n     * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\r\n     * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\r\n     * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\r\n     * of the corresponding node otherwise it will return the entire updated data source of TreeView.\r\n     * * The updated data source also contains custom attributes if you specified in data source.\r\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\r\n     * @isGenericType true\r\n     */\r\n    TreeView.prototype.getTreeData = function (node) {\r\n        var id = this.getId(node);\r\n        this.updatePersistProp();\r\n        if (isNOU(id)) {\r\n            return this.treeData;\r\n        }\r\n        else {\r\n            var data = this.getNodeObject(id);\r\n            return isNOU(data) ? [] : [data];\r\n        }\r\n    };\r\n    /**\r\n     * Moves the collection of nodes within the same TreeView based on target or its index position.\r\n     * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\r\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\r\n     * @param  {number} index - Specifies the index to place the moved nodes in the target element.\r\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\r\n     */\r\n    TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {\r\n        var dropLi = this.getElement(target);\r\n        if (isNOU(dropLi)) {\r\n            return;\r\n        }\r\n        for (var i = 0; i < sourceNodes.length; i++) {\r\n            var dragLi = this.getElement(sourceNodes[i]);\r\n            if (isNOU(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\r\n                continue;\r\n            }\r\n            this.preventExpand = preventTargetExpand;\r\n            this.dropAsChildNode(dragLi, dropLi, this, index);\r\n        }\r\n        if (this.fields.dataSource instanceof DataManager === false) {\r\n            this.preventExpand = false;\r\n        }\r\n        this.triggerEvent();\r\n    };\r\n    /**\r\n     * Refreshes a particular node of the TreeView.\r\n     * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\r\n     * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.\r\n     */\r\n    TreeView.prototype.refreshNode = function (target, newData) {\r\n        if (isNOU(target) || isNOU(newData)) {\r\n            return;\r\n        }\r\n        var id;\r\n        var isRefreshChild = false;\r\n        if (this.dataType == 1 && newData.length > 1) {\r\n            isRefreshChild = true;\r\n        }\r\n        else if (this.dataType == 2 && newData.length === 1) {\r\n            var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);\r\n            if (!isNOU(updatedChildValue)) {\r\n                isRefreshChild = true;\r\n            }\r\n        }\r\n        var liEle = this.getElement(target);\r\n        id = liEle ? liEle.getAttribute('data-uid') : ((target) ? target.toString() : null);\r\n        this.refreshData = this.getNodeObject(id);\r\n        newData = JSON.parse(JSON.stringify(newData));\r\n        /* eslint-disable */\r\n        var newNodeData;\r\n        var parentData;\r\n        if (this.dataType == 1 && isRefreshChild) {\r\n            for (var k = 0; k < newData.length; k++) {\r\n                if (isNOU(newData[k][this.fields.parentID])) {\r\n                    parentData = newData[k];\r\n                    newData.splice(k, 1);\r\n                    break;\r\n                }\r\n            }\r\n            newNodeData = extend({}, this.refreshData, parentData);\r\n        }\r\n        else {\r\n            newNodeData = extend({}, this.refreshData, newData[0]);\r\n        }\r\n        if (isNOU(liEle)) {\r\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\r\n            return;\r\n        }\r\n        this.isRefreshed = true;\r\n        var level = parseFloat(liEle.getAttribute('aria-level'));\r\n        var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\r\n        var ul = select('.' + PARENTITEM, liEle);\r\n        var childItems = getValue(this.fields.child.toString(), newNodeData);\r\n        if ((isRefreshChild && ul) || (isRefreshChild && !isNOU(childItems))) {\r\n            var parentEle = liEle.parentElement;\r\n            var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);\r\n            remove(liEle);\r\n            parentEle.insertBefore(newliEle[0], parentEle.childNodes[index]);\r\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\r\n            if (isRefreshChild && ul) {\r\n                this.expandAll([id]);\r\n            }\r\n        }\r\n        else {\r\n            var txtEle = select('.' + TEXTWRAP, liEle);\r\n            var newTextEle = select('.' + TEXTWRAP, newliEle[0]);\r\n            var icon = select('div.' + ICON, txtEle);\r\n            var newIcon = select('div.' + ICON, newTextEle);\r\n            if (icon && newIcon) {\r\n                if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\r\n                    removeClass([newIcon], EXPANDABLE);\r\n                    addClass([newIcon], COLLAPSIBLE);\r\n                }\r\n                else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\r\n                    removeClass([newIcon], COLLAPSIBLE);\r\n                    addClass([newIcon], EXPANDABLE);\r\n                }\r\n                else if (icon.classList.contains('interaction')) {\r\n                    addClass([newIcon], 'interaction');\r\n                }\r\n            }\r\n            remove(txtEle);\r\n            var fullEle = select('.' + FULLROW, liEle);\r\n            fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);\r\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\r\n        }\r\n        liEle = this.getElement(target);\r\n        if (newNodeData[this.fields.tooltip]) {\r\n            liEle.setAttribute(\"title\", newNodeData[this.fields.tooltip]);\r\n        }\r\n        if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\r\n            var attr = {};\r\n            merge(attr, newNodeData[this.fields.htmlAttributes]);\r\n            if (attr.class) {\r\n                addClass([liEle], attr.class.split(' '));\r\n                delete attr.class;\r\n            }\r\n            else {\r\n                attributes(liEle, attr);\r\n            }\r\n        }\r\n        if (this.selectedNodes.indexOf(id) !== -1) {\r\n            liEle.setAttribute('aria-selected', 'true');\r\n            addClass([liEle], ACTIVE);\r\n        }\r\n        this.isRefreshed = false;\r\n        this.triggerEvent();\r\n    };\r\n    /**\r\n     * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\r\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\r\n     */\r\n    TreeView.prototype.removeNodes = function (nodes) {\r\n        if (!isNOU(nodes)) {\r\n            if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\r\n                this.crudOperation('delete', nodes);\r\n            }\r\n            else {\r\n                this.deleteSuccess(nodes);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Replaces the text of the TreeView node with the given text.\r\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\r\n     * @param  {string} newText - Specifies the new text of TreeView node.\r\n     */\r\n    TreeView.prototype.updateNode = function (target, newText) {\r\n        var _this = this;\r\n        if (isNOU(target) || isNOU(newText) || !this.allowEditing) {\r\n            return;\r\n        }\r\n        var liEle = this.getElement(target);\r\n        if (isNOU(liEle)) {\r\n            return;\r\n        }\r\n        var txtEle = select('.' + LISTTEXT, liEle);\r\n        this.updateOldText(liEle);\r\n        var eventArgs = this.getEditEvent(liEle, null, null);\r\n        this.trigger('nodeEditing', eventArgs, function (observedArgs) {\r\n            if (!observedArgs.cancel) {\r\n                if (_this.fields.dataSource instanceof DataManager && !_this.isOffline) {\r\n                    _this.crudOperation('update', null, target, newText, null, null, false);\r\n                }\r\n                else {\r\n                    _this.appendNewText(liEle, txtEle, newText, false);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\r\n     * as argument to this method.\r\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\r\n     */\r\n    TreeView.prototype.uncheckAll = function (nodes) {\r\n        if (this.showCheckBox) {\r\n            this.doCheckBoxAction(nodes, false);\r\n        }\r\n    };\r\n    var TreeView_1;\r\n    __decorate([\r\n        Property(false)\r\n    ], TreeView.prototype, \"allowDragAndDrop\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], TreeView.prototype, \"allowEditing\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], TreeView.prototype, \"allowMultiSelection\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], TreeView.prototype, \"allowTextWrap\", void 0);\r\n    __decorate([\r\n        Complex({}, NodeAnimationSettings)\r\n    ], TreeView.prototype, \"animation\", void 0);\r\n    __decorate([\r\n        Property()\r\n    ], TreeView.prototype, \"checkedNodes\", void 0);\r\n    __decorate([\r\n        Property('')\r\n    ], TreeView.prototype, \"cssClass\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], TreeView.prototype, \"disabled\", void 0);\r\n    __decorate([\r\n        Property(null)\r\n    ], TreeView.prototype, \"dragArea\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], TreeView.prototype, \"enablePersistence\", void 0);\r\n    __decorate([\r\n        Property()\r\n    ], TreeView.prototype, \"expandedNodes\", void 0);\r\n    __decorate([\r\n        Property('Auto')\r\n    ], TreeView.prototype, \"expandOn\", void 0);\r\n    __decorate([\r\n        Complex({}, FieldsSettings)\r\n    ], TreeView.prototype, \"fields\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], TreeView.prototype, \"fullRowSelect\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], TreeView.prototype, \"loadOnDemand\", void 0);\r\n    __decorate([\r\n        Property()\r\n    ], TreeView.prototype, \"locale\", void 0);\r\n    __decorate([\r\n        Property()\r\n    ], TreeView.prototype, \"nodeTemplate\", void 0);\r\n    __decorate([\r\n        Property()\r\n    ], TreeView.prototype, \"selectedNodes\", void 0);\r\n    __decorate([\r\n        Property('None')\r\n    ], TreeView.prototype, \"sortOrder\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], TreeView.prototype, \"showCheckBox\", void 0);\r\n    __decorate([\r\n        Property(true)\r\n    ], TreeView.prototype, \"autoCheck\", void 0);\r\n    __decorate([\r\n        Property(false)\r\n    ], TreeView.prototype, \"fullRowNavigable\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"actionFailure\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"created\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"dataBound\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"dataSourceChanged\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"drawNode\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"destroyed\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"keyPress\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeChecked\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeChecking\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeClicked\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeCollapsed\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeCollapsing\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeDragging\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeDragStart\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeDragStop\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeDropped\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeEdited\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeEditing\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeExpanded\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeExpanding\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeSelected\", void 0);\r\n    __decorate([\r\n        Event()\r\n    ], TreeView.prototype, \"nodeSelecting\", void 0);\r\n    TreeView = TreeView_1 = __decorate([\r\n        NotifyPropertyChanges\r\n    ], TreeView);\r\n    return TreeView;\r\n}(Component));\r\nexport { TreeView };\r\n"]},"metadata":{},"sourceType":"module"}