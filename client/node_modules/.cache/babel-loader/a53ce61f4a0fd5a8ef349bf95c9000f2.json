{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\nhap_mon_cnpm\\\\my-app\\\\src\\\\component\\\\dat\\\\eventContent.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport React from \"react\";\nimport { useTable } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EventContent() {\n  _s();\n\n  const [textValue, setTextValue] = useState('');\n\n  const handleOnChange = (e, editor) => {\n    console.log(editor.getData());\n  };\n\n  const editorRich = /*#__PURE__*/_jsxDEV(CKEditor, {\n    editor: ClassicEditor,\n    onChange: handleOnChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n\n  const data = React.useMemo(() => [{\n    col1: 'Hello',\n    col2: 'World'\n  }, {\n    col1: 'react-table',\n    col2: 'rocks'\n  }, {\n    col1: 'whatever',\n    col2: 'you want'\n  }], []);\n  const columns = React.useMemo(() => [{\n    Header: 'STT',\n    accessor: 'Ten' // accessor is the \"key\" in the data\n\n  }, {\n    Header: 'Luot tuong tac',\n    accessor: 'col2'\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blogList\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      style: {\n        border: 'solid 1px blue'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            style: {\n              borderBottom: 'solid 3px red',\n              background: 'aliceblue',\n              color: 'black',\n              fontWeight: 'bold'\n            },\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                style: {\n                  padding: '10px',\n                  border: 'solid 1px gray',\n                  background: 'papayawhip'\n                },\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 29\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EventContent, \"0892N1/Q0i/1KNE2PKaREr2mnFM=\", false, function () {\n  return [useTable];\n});\n\n_c = EventContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventContent\");","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/src/component/dat/eventContent.jsx"],"names":["useState","CKEditor","ClassicEditor","React","useTable","EventContent","textValue","setTextValue","handleOnChange","e","editor","console","log","getData","editorRich","data","useMemo","col1","col2","columns","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","border","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","borderBottom","background","color","fontWeight","render","row","getRowProps","cells","cell","getCellProps","padding"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\n\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n\r\nimport React from \"react\";\r\nimport {useTable} from 'react-table'\r\n\r\n\r\nexport default function EventContent(){\r\n\r\n    const [textValue,setTextValue]=useState('')\r\n    const handleOnChange=(e,editor)=>{\r\n        console.log(editor.getData())\r\n    }\r\n    const editorRich=\r\n        <CKEditor\r\n            editor={ClassicEditor}\r\n            onChange={handleOnChange}\r\n        >\r\n        </CKEditor>\r\n\r\n\r\n\r\n    const data = React.useMemo(\r\n        () => [\r\n        {\r\n            col1: 'Hello',\r\n            col2: 'World',\r\n        },\r\n        {\r\n            col1: 'react-table',\r\n            col2: 'rocks',\r\n        },\r\n        {\r\n            col1: 'whatever',\r\n            col2: 'you want',\r\n        },\r\n        ],\r\n        []\r\n    )\r\n\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n          {\r\n            Header: 'STT',\r\n            accessor: 'Ten', // accessor is the \"key\" in the data\r\n          },\r\n          {\r\n            Header: 'Luot tuong tac',\r\n            accessor: 'col2',\r\n          },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n      } = useTable({ columns, data })\r\n\r\n    return(\r\n        <div className='blogList'>\r\n            <table {...getTableProps()} style={{ border: 'solid 1px blue' }}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                        <th\r\n                            {...column.getHeaderProps()}\r\n                            style={{\r\n                            borderBottom: 'solid 3px red',\r\n                            background: 'aliceblue',\r\n                            color: 'black',\r\n                            fontWeight: 'bold',\r\n                            }}\r\n                        >\r\n                            {column.render('Header')}\r\n                        </th>\r\n                        ))}\r\n                    </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map(row => {\r\n                    prepareRow(row)\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                        {row.cells.map(cell => {\r\n                            return (\r\n                            <td\r\n                                {...cell.getCellProps()}\r\n                                style={{\r\n                                padding: '10px',\r\n                                border: 'solid 1px gray',\r\n                                background: 'papayawhip',\r\n                                }}\r\n                            >\r\n                                {cell.render('Cell')}\r\n                            </td>\r\n                            )\r\n                        })}\r\n                        </tr>\r\n                    )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}