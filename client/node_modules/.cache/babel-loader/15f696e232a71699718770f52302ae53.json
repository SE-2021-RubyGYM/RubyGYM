{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/adapters/simpleuploadadapter\n */\n\n/* globals XMLHttpRequest, FormData */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '../filerepository';\nimport { logWarning } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The Simple upload adapter allows uploading images to an application running on your server using\n * the [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) API with a\n * minimal {@link module:upload/adapters/simpleuploadadapter~SimpleUploadConfig editor configuration}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( document.querySelector( '#editor' ), {\n *\t\t\t\tsimpleUpload: {\n *\t\t\t\t\tuploadUrl: 'http://example.com',\n *\t\t\t\t\theaders: {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See the {@glink features/images/image-upload/simple-upload-adapter \"Simple upload adapter\"} guide to learn how to\n * learn more about the feature (configuration, serverâ€“side requirements, etc.).\n *\n * Check out the {@glink features/images/image-upload/image-upload comprehensive \"Image upload overview\"} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class SimpleUploadAdapter extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [FileRepository];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'SimpleUploadAdapter';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const options = this.editor.config.get('simpleUpload');\n\n    if (!options) {\n      return;\n    }\n\n    if (!options.uploadUrl) {\n      /**\n       * The {@link module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#uploadUrl `config.simpleUpload.uploadUrl`}\n       * configuration required by the {@link module:upload/adapters/simpleuploadadapter~SimpleUploadAdapter `SimpleUploadAdapter`}\n       * is missing. Make sure the correct URL is specified for the image upload to work properly.\n       *\n       * @error simple-upload-adapter-missing-uploadurl\n       */\n      logWarning('simple-upload-adapter-missing-uploadurl');\n      return;\n    }\n\n    this.editor.plugins.get(FileRepository).createUploadAdapter = loader => {\n      return new Adapter(loader, options);\n    };\n  }\n\n}\n/**\n * Upload adapter.\n *\n * @private\n * @implements module:upload/filerepository~UploadAdapter\n */\n\nclass Adapter {\n  /**\n   * Creates a new adapter instance.\n   *\n   * @param {module:upload/filerepository~FileLoader} loader\n   * @param {module:upload/adapters/simpleuploadadapter~SimpleUploadConfig} options\n   */\n  constructor(loader, options) {\n    /**\n     * FileLoader instance to use during the upload.\n     *\n     * @member {module:upload/filerepository~FileLoader} #loader\n     */\n    this.loader = loader;\n    /**\n     * The configuration of the adapter.\n     *\n     * @member {module:upload/adapters/simpleuploadadapter~SimpleUploadConfig} #options\n     */\n\n    this.options = options;\n  }\n  /**\n   * Starts the upload process.\n   *\n   * @see module:upload/filerepository~UploadAdapter#upload\n   * @returns {Promise}\n   */\n\n\n  upload() {\n    return this.loader.file.then(file => new Promise((resolve, reject) => {\n      this._initRequest();\n\n      this._initListeners(resolve, reject, file);\n\n      this._sendRequest(file);\n    }));\n  }\n  /**\n   * Aborts the upload process.\n   *\n   * @see module:upload/filerepository~UploadAdapter#abort\n   * @returns {Promise}\n   */\n\n\n  abort() {\n    if (this.xhr) {\n      this.xhr.abort();\n    }\n  }\n  /**\n   * Initializes the `XMLHttpRequest` object using the URL specified as\n   * {@link module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#uploadUrl `simpleUpload.uploadUrl`} in the editor's\n   * configuration.\n   *\n   * @private\n   */\n\n\n  _initRequest() {\n    const xhr = this.xhr = new XMLHttpRequest();\n    xhr.open('POST', this.options.uploadUrl, true);\n    xhr.responseType = 'json';\n  }\n  /**\n   * Initializes XMLHttpRequest listeners\n   *\n   * @private\n   * @param {Function} resolve Callback function to be called when the request is successful.\n   * @param {Function} reject Callback function to be called when the request cannot be completed.\n   * @param {File} file Native File object.\n   */\n\n\n  _initListeners(resolve, reject, file) {\n    const xhr = this.xhr;\n    const loader = this.loader;\n    const genericErrorText = `Couldn't upload file: ${file.name}.`;\n    xhr.addEventListener('error', () => reject(genericErrorText));\n    xhr.addEventListener('abort', () => reject());\n    xhr.addEventListener('load', () => {\n      const response = xhr.response;\n\n      if (!response || response.error) {\n        return reject(response && response.error && response.error.message ? response.error.message : genericErrorText);\n      }\n\n      const urls = response.url ? {\n        default: response.url\n      } : response.urls; // Resolve with the normalized `urls` property and pass the rest of the response\n      // to allow customizing the behavior of features relying on the upload adapters.\n\n      resolve({ ...response,\n        urls\n      });\n    }); // Upload progress when it is supported.\n\n    /* istanbul ignore else */\n\n    if (xhr.upload) {\n      xhr.upload.addEventListener('progress', evt => {\n        if (evt.lengthComputable) {\n          loader.uploadTotal = evt.total;\n          loader.uploaded = evt.loaded;\n        }\n      });\n    }\n  }\n  /**\n   * Prepares the data and sends the request.\n   *\n   * @private\n   * @param {File} file File instance to be uploaded.\n   */\n\n\n  _sendRequest(file) {\n    // Set headers if specified.\n    const headers = this.options.headers || {}; // Use the withCredentials flag if specified.\n\n    const withCredentials = this.options.withCredentials || false;\n\n    for (const headerName of Object.keys(headers)) {\n      this.xhr.setRequestHeader(headerName, headers[headerName]);\n    }\n\n    this.xhr.withCredentials = withCredentials; // Prepare the form data.\n\n    const data = new FormData();\n    data.append('upload', file); // Send the request.\n\n    this.xhr.send(data);\n  }\n\n}\n/**\n * The configuration of the {@link module:upload/adapters/simpleuploadadapter~SimpleUploadAdapter simple upload adapter}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tsimpleUpload: {\n *\t\t\t\t\t// The URL the images are uploaded to.\n *\t\t\t\t\tuploadUrl: 'http://example.com',\n *\n *\t\t\t\t\t// Headers sent along with the XMLHttpRequest to the upload server.\n *\t\t\t\t\theaders: {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} );\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See the {@glink features/images/image-upload/simple-upload-adapter \"Simple upload adapter\"} guide to learn more.\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor configuration options}.\n *\n * @interface SimpleUploadConfig\n */\n\n/**\n * The configuration of the {@link module:upload/adapters/simpleuploadadapter~SimpleUploadAdapter simple upload adapter}.\n *\n * Read more in {@link module:upload/adapters/simpleuploadadapter~SimpleUploadConfig}.\n *\n * @member {module:upload/adapters/simpleuploadadapter~SimpleUploadConfig} module:core/editor/editorconfig~EditorConfig#simpleUpload\n */\n\n/**\n * The path (URL) to the server (application) which handles the file upload. When specified, enables the automatic\n * upload of resources (images) inserted into the editor content.\n *\n * Learn more about the server application requirements in the\n * {@glink features/images/image-upload/simple-upload-adapter#server-side-configuration \"Server-side configuration\"} section\n * of the feature guide.\n *\n * @member {String} module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#uploadUrl\n */\n\n/**\n * An object that defines additional [headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers) sent with\n * the request to the server during the upload. This is the right place to implement security mechanisms like\n * authentication and [CSRF](https://developer.mozilla.org/en-US/docs/Glossary/CSRF) protection.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tsimpleUpload: {\n *\t\t\t\t\theaders: {\n *\t\t\t\t\t\t'X-CSRF-TOKEN': 'CSRF-Token',\n *\t\t\t\t\t\tAuthorization: 'Bearer <JSON Web Token>'\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} );\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * Learn more about the server application requirements in the\n * {@glink features/images/image-upload/simple-upload-adapter#server-side-configuration \"Server-side configuration\"} section\n * of the feature guide.\n *\n * @member {Object.<String, String>} module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#headers\n */\n\n/**\n * This flag enables the\n * [`withCredentials`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials)\n * property of the request sent to the server during the upload. It affects cross-site requests only and, for instance,\n * allows credentials such as cookies to be sent along with the request.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tsimpleUpload: {\n *\t\t\t\t\twithCredentials: true\n *\t\t\t\t}\n *\t\t\t} );\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * Learn more about the server application requirements in the\n * {@glink features/images/image-upload/simple-upload-adapter#server-side-configuration \"Server-side configuration\"} section\n * of the feature guide.\n *\n * @member {Boolean} [module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#withCredentials=false]\n */","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-upload/src/adapters/simpleuploadadapter.js"],"names":["Plugin","FileRepository","logWarning","SimpleUploadAdapter","requires","pluginName","init","options","editor","config","get","uploadUrl","plugins","createUploadAdapter","loader","Adapter","constructor","upload","file","then","Promise","resolve","reject","_initRequest","_initListeners","_sendRequest","abort","xhr","XMLHttpRequest","open","responseType","genericErrorText","name","addEventListener","response","error","message","urls","url","default","evt","lengthComputable","uploadTotal","total","uploaded","loaded","headers","withCredentials","headerName","Object","keys","setRequestHeader","data","FormData","append","send"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/adapters/simpleuploadadapter\n */\n\n/* globals XMLHttpRequest, FormData */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '../filerepository';\nimport { logWarning } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The Simple upload adapter allows uploading images to an application running on your server using\n * the [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) API with a\n * minimal {@link module:upload/adapters/simpleuploadadapter~SimpleUploadConfig editor configuration}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( document.querySelector( '#editor' ), {\n *\t\t\t\tsimpleUpload: {\n *\t\t\t\t\tuploadUrl: 'http://example.com',\n *\t\t\t\t\theaders: {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See the {@glink features/images/image-upload/simple-upload-adapter \"Simple upload adapter\"} guide to learn how to\n * learn more about the feature (configuration, serverâ€“side requirements, etc.).\n *\n * Check out the {@glink features/images/image-upload/image-upload comprehensive \"Image upload overview\"} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class SimpleUploadAdapter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ FileRepository ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'SimpleUploadAdapter';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst options = this.editor.config.get( 'simpleUpload' );\n\n\t\tif ( !options ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !options.uploadUrl ) {\n\t\t\t/**\n\t\t\t * The {@link module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#uploadUrl `config.simpleUpload.uploadUrl`}\n\t\t\t * configuration required by the {@link module:upload/adapters/simpleuploadadapter~SimpleUploadAdapter `SimpleUploadAdapter`}\n\t\t\t * is missing. Make sure the correct URL is specified for the image upload to work properly.\n\t\t\t *\n\t\t\t * @error simple-upload-adapter-missing-uploadurl\n\t\t\t */\n\t\t\tlogWarning( 'simple-upload-adapter-missing-uploadurl' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.editor.plugins.get( FileRepository ).createUploadAdapter = loader => {\n\t\t\treturn new Adapter( loader, options );\n\t\t};\n\t}\n}\n\n/**\n * Upload adapter.\n *\n * @private\n * @implements module:upload/filerepository~UploadAdapter\n */\nclass Adapter {\n\t/**\n\t * Creates a new adapter instance.\n\t *\n\t * @param {module:upload/filerepository~FileLoader} loader\n\t * @param {module:upload/adapters/simpleuploadadapter~SimpleUploadConfig} options\n\t */\n\tconstructor( loader, options ) {\n\t\t/**\n\t\t * FileLoader instance to use during the upload.\n\t\t *\n\t\t * @member {module:upload/filerepository~FileLoader} #loader\n\t\t */\n\t\tthis.loader = loader;\n\n\t\t/**\n\t\t * The configuration of the adapter.\n\t\t *\n\t\t * @member {module:upload/adapters/simpleuploadadapter~SimpleUploadConfig} #options\n\t\t */\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Starts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#upload\n\t * @returns {Promise}\n\t */\n\tupload() {\n\t\treturn this.loader.file\n\t\t\t.then( file => new Promise( ( resolve, reject ) => {\n\t\t\t\tthis._initRequest();\n\t\t\t\tthis._initListeners( resolve, reject, file );\n\t\t\t\tthis._sendRequest( file );\n\t\t\t} ) );\n\t}\n\n\t/**\n\t * Aborts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#abort\n\t * @returns {Promise}\n\t */\n\tabort() {\n\t\tif ( this.xhr ) {\n\t\t\tthis.xhr.abort();\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the `XMLHttpRequest` object using the URL specified as\n\t * {@link module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#uploadUrl `simpleUpload.uploadUrl`} in the editor's\n\t * configuration.\n\t *\n\t * @private\n\t */\n\t_initRequest() {\n\t\tconst xhr = this.xhr = new XMLHttpRequest();\n\n\t\txhr.open( 'POST', this.options.uploadUrl, true );\n\t\txhr.responseType = 'json';\n\t}\n\n\t/**\n\t * Initializes XMLHttpRequest listeners\n\t *\n\t * @private\n\t * @param {Function} resolve Callback function to be called when the request is successful.\n\t * @param {Function} reject Callback function to be called when the request cannot be completed.\n\t * @param {File} file Native File object.\n\t */\n\t_initListeners( resolve, reject, file ) {\n\t\tconst xhr = this.xhr;\n\t\tconst loader = this.loader;\n\t\tconst genericErrorText = `Couldn't upload file: ${ file.name }.`;\n\n\t\txhr.addEventListener( 'error', () => reject( genericErrorText ) );\n\t\txhr.addEventListener( 'abort', () => reject() );\n\t\txhr.addEventListener( 'load', () => {\n\t\t\tconst response = xhr.response;\n\n\t\t\tif ( !response || response.error ) {\n\t\t\t\treturn reject( response && response.error && response.error.message ? response.error.message : genericErrorText );\n\t\t\t}\n\n\t\t\tconst urls = response.url ? { default: response.url } : response.urls;\n\n\t\t\t// Resolve with the normalized `urls` property and pass the rest of the response\n\t\t\t// to allow customizing the behavior of features relying on the upload adapters.\n\t\t\tresolve( {\n\t\t\t\t...response,\n\t\t\t\turls\n\t\t\t} );\n\t\t} );\n\n\t\t// Upload progress when it is supported.\n\t\t/* istanbul ignore else */\n\t\tif ( xhr.upload ) {\n\t\t\txhr.upload.addEventListener( 'progress', evt => {\n\t\t\t\tif ( evt.lengthComputable ) {\n\t\t\t\t\tloader.uploadTotal = evt.total;\n\t\t\t\t\tloader.uploaded = evt.loaded;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Prepares the data and sends the request.\n\t *\n\t * @private\n\t * @param {File} file File instance to be uploaded.\n\t */\n\t_sendRequest( file ) {\n\t\t// Set headers if specified.\n\t\tconst headers = this.options.headers || {};\n\n\t\t// Use the withCredentials flag if specified.\n\t\tconst withCredentials = this.options.withCredentials || false;\n\n\t\tfor ( const headerName of Object.keys( headers ) ) {\n\t\t\tthis.xhr.setRequestHeader( headerName, headers[ headerName ] );\n\t\t}\n\n\t\tthis.xhr.withCredentials = withCredentials;\n\n\t\t// Prepare the form data.\n\t\tconst data = new FormData();\n\n\t\tdata.append( 'upload', file );\n\n\t\t// Send the request.\n\t\tthis.xhr.send( data );\n\t}\n}\n\n/**\n * The configuration of the {@link module:upload/adapters/simpleuploadadapter~SimpleUploadAdapter simple upload adapter}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tsimpleUpload: {\n *\t\t\t\t\t// The URL the images are uploaded to.\n *\t\t\t\t\tuploadUrl: 'http://example.com',\n *\n *\t\t\t\t\t// Headers sent along with the XMLHttpRequest to the upload server.\n *\t\t\t\t\theaders: {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} );\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See the {@glink features/images/image-upload/simple-upload-adapter \"Simple upload adapter\"} guide to learn more.\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor configuration options}.\n *\n * @interface SimpleUploadConfig\n */\n\n/**\n * The configuration of the {@link module:upload/adapters/simpleuploadadapter~SimpleUploadAdapter simple upload adapter}.\n *\n * Read more in {@link module:upload/adapters/simpleuploadadapter~SimpleUploadConfig}.\n *\n * @member {module:upload/adapters/simpleuploadadapter~SimpleUploadConfig} module:core/editor/editorconfig~EditorConfig#simpleUpload\n */\n\n/**\n * The path (URL) to the server (application) which handles the file upload. When specified, enables the automatic\n * upload of resources (images) inserted into the editor content.\n *\n * Learn more about the server application requirements in the\n * {@glink features/images/image-upload/simple-upload-adapter#server-side-configuration \"Server-side configuration\"} section\n * of the feature guide.\n *\n * @member {String} module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#uploadUrl\n */\n\n/**\n * An object that defines additional [headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers) sent with\n * the request to the server during the upload. This is the right place to implement security mechanisms like\n * authentication and [CSRF](https://developer.mozilla.org/en-US/docs/Glossary/CSRF) protection.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tsimpleUpload: {\n *\t\t\t\t\theaders: {\n *\t\t\t\t\t\t'X-CSRF-TOKEN': 'CSRF-Token',\n *\t\t\t\t\t\tAuthorization: 'Bearer <JSON Web Token>'\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} );\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * Learn more about the server application requirements in the\n * {@glink features/images/image-upload/simple-upload-adapter#server-side-configuration \"Server-side configuration\"} section\n * of the feature guide.\n *\n * @member {Object.<String, String>} module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#headers\n */\n\n/**\n * This flag enables the\n * [`withCredentials`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials)\n * property of the request sent to the server during the upload. It affects cross-site requests only and, for instance,\n * allows credentials such as cookies to be sent along with the request.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tsimpleUpload: {\n *\t\t\t\t\twithCredentials: true\n *\t\t\t\t}\n *\t\t\t} );\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * Learn more about the server application requirements in the\n * {@glink features/images/image-upload/simple-upload-adapter#server-side-configuration \"Server-side configuration\"} section\n * of the feature guide.\n *\n * @member {Boolean} [module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#withCredentials=false]\n */\n"]},"metadata":{},"sourceType":"module"}