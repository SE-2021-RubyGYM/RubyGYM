{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/renameoperation\n */\nimport Operation from './operation';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Position from '../position';\n/**\n * Operation to change element's name.\n *\n * Using this class you can change element's name.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class RenameOperation extends Operation {\n  /**\n   * Creates an operation that changes element's name.\n   *\n   * @param {module:engine/model/position~Position} position Position before an element to change.\n   * @param {String} oldName Current name of the element.\n   * @param {String} newName New name for the element.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(position, oldName, newName, baseVersion) {\n    super(baseVersion);\n    /**\n     * Position before an element to change.\n     *\n     * @member {module:engine/model/position~Position} module:engine/model/operation/renameoperation~RenameOperation#position\n     */\n\n    this.position = position; // This position sticks to the next node because it is a position before the node that we want to change.\n\n    this.position.stickiness = 'toNext';\n    /**\n     * Current name of the element.\n     *\n     * @member {String} module:engine/model/operation/renameoperation~RenameOperation#oldName\n     */\n\n    this.oldName = oldName;\n    /**\n     * New name for the element.\n     *\n     * @member {String} module:engine/model/operation/renameoperation~RenameOperation#newName\n     */\n\n    this.newName = newName;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    return 'rename';\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/renameoperation~RenameOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    return new RenameOperation(this.position.clone(), this.oldName, this.newName, this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/renameoperation~RenameOperation}\n   */\n\n\n  getReversed() {\n    return new RenameOperation(this.position.clone(), this.newName, this.oldName, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _validate() {\n    const element = this.position.nodeAfter;\n\n    if (!(element instanceof Element)) {\n      /**\n       * Given position is invalid or node after it is not instance of Element.\n       *\n       * @error rename-operation-wrong-position\n       */\n      throw new CKEditorError('rename-operation-wrong-position', this);\n    } else if (element.name !== this.oldName) {\n      /**\n       * Element to change has different name than operation's old name.\n       *\n       * @error rename-operation-wrong-name\n       */\n      throw new CKEditorError('rename-operation-wrong-name', this);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    const element = this.position.nodeAfter;\n    element.name = this.newName;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.position = this.position.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'RenameOperation';\n  }\n  /**\n   * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n   */\n\n\n  static fromJSON(json, document) {\n    return new RenameOperation(Position.fromJSON(json.position, document), json.oldName, json.newName, json.baseVersion);\n  } // @if CK_DEBUG_ENGINE // toString() {\n  // @if CK_DEBUG_ENGINE // \treturn `RenameOperation( ${ this.baseVersion } ): ` +\n  // @if CK_DEBUG_ENGINE //\t\t`${ this.position }: \"${ this.oldName }\" -> \"${ this.newName }\"`;\n  // @if CK_DEBUG_ENGINE // }\n\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/renameoperation.js"],"names":["Operation","Element","CKEditorError","Position","RenameOperation","constructor","position","oldName","newName","baseVersion","stickiness","type","clone","getReversed","_validate","element","nodeAfter","name","_execute","toJSON","json","className","fromJSON","document"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,eAAN,SAA8BJ,SAA9B,CAAwC;AACtD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCK,EAAAA,WAAW,CAAEC,QAAF,EAAYC,OAAZ,EAAqBC,OAArB,EAA8BC,WAA9B,EAA4C;AACtD,UAAOA,WAAP;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKH,QAAL,GAAgBA,QAAhB,CARsD,CAStD;;AACA,SAAKA,QAAL,CAAcI,UAAd,GAA2B,QAA3B;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKH,OAAL,GAAeA,OAAf;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKC,OAAL,GAAeA,OAAf;AACA;AAED;AACD;AACA;;;AACS,MAAJG,IAAI,GAAG;AACV,WAAO,QAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,GAAG;AACP,WAAO,IAAIR,eAAJ,CAAqB,KAAKE,QAAL,CAAcM,KAAd,EAArB,EAA4C,KAAKL,OAAjD,EAA0D,KAAKC,OAA/D,EAAwE,KAAKC,WAA7E,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCI,EAAAA,WAAW,GAAG;AACb,WAAO,IAAIT,eAAJ,CAAqB,KAAKE,QAAL,CAAcM,KAAd,EAArB,EAA4C,KAAKJ,OAAjD,EAA0D,KAAKD,OAA/D,EAAwE,KAAKE,WAAL,GAAmB,CAA3F,CAAP;AACA;AAED;AACD;AACA;;;AACCK,EAAAA,SAAS,GAAG;AACX,UAAMC,OAAO,GAAG,KAAKT,QAAL,CAAcU,SAA9B;;AAEA,QAAK,EAAGD,OAAO,YAAYd,OAAtB,CAAL,EAAuC;AACtC;AACH;AACA;AACA;AACA;AACG,YAAM,IAAIC,aAAJ,CACL,iCADK,EAEL,IAFK,CAAN;AAIA,KAVD,MAUO,IAAKa,OAAO,CAACE,IAAR,KAAiB,KAAKV,OAA3B,EAAqC;AAC3C;AACH;AACA;AACA;AACA;AACG,YAAM,IAAIL,aAAJ,CACL,6BADK,EAEL,IAFK,CAAN;AAIA;AACD;AAED;AACD;AACA;;;AACCgB,EAAAA,QAAQ,GAAG;AACV,UAAMH,OAAO,GAAG,KAAKT,QAAL,CAAcU,SAA9B;AAEAD,IAAAA,OAAO,CAACE,IAAR,GAAe,KAAKT,OAApB;AACA;AAED;AACD;AACA;;;AACCW,EAAAA,MAAM,GAAG;AACR,UAAMC,IAAI,GAAG,MAAMD,MAAN,EAAb;AAEAC,IAAAA,IAAI,CAACd,QAAL,GAAgB,KAAKA,QAAL,CAAca,MAAd,EAAhB;AAEA,WAAOC,IAAP;AACA;AAED;AACD;AACA;;;AACqB,aAATC,SAAS,GAAG;AACtB,WAAO,iBAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACgB,SAARC,QAAQ,CAAEF,IAAF,EAAQG,QAAR,EAAmB;AACjC,WAAO,IAAInB,eAAJ,CAAqBD,QAAQ,CAACmB,QAAT,CAAmBF,IAAI,CAACd,QAAxB,EAAkCiB,QAAlC,CAArB,EAAmEH,IAAI,CAACb,OAAxE,EAAiFa,IAAI,CAACZ,OAAtF,EAA+FY,IAAI,CAACX,WAApG,CAAP;AACA,GA/HqD,CAiItD;AACA;AACA;AACA;;;AApIsD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/renameoperation\n */\n\nimport Operation from './operation';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Position from '../position';\n\n/**\n * Operation to change element's name.\n *\n * Using this class you can change element's name.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RenameOperation extends Operation {\n\t/**\n\t * Creates an operation that changes element's name.\n\t *\n\t * @param {module:engine/model/position~Position} position Position before an element to change.\n\t * @param {String} oldName Current name of the element.\n\t * @param {String} newName New name for the element.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, oldName, newName, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position before an element to change.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/renameoperation~RenameOperation#position\n\t\t */\n\t\tthis.position = position;\n\t\t// This position sticks to the next node because it is a position before the node that we want to change.\n\t\tthis.position.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Current name of the element.\n\t\t *\n\t\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#oldName\n\t\t */\n\t\tthis.oldName = oldName;\n\n\t\t/**\n\t\t * New name for the element.\n\t\t *\n\t\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#newName\n\t\t */\n\t\tthis.newName = newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'rename';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/renameoperation~RenameOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new RenameOperation( this.position.clone(), this.oldName, this.newName, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/renameoperation~RenameOperation}\n\t */\n\tgetReversed() {\n\t\treturn new RenameOperation( this.position.clone(), this.newName, this.oldName, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst element = this.position.nodeAfter;\n\n\t\tif ( !( element instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Given position is invalid or node after it is not instance of Element.\n\t\t\t *\n\t\t\t * @error rename-operation-wrong-position\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rename-operation-wrong-position',\n\t\t\t\tthis\n\t\t\t);\n\t\t} else if ( element.name !== this.oldName ) {\n\t\t\t/**\n\t\t\t * Element to change has different name than operation's old name.\n\t\t\t *\n\t\t\t * @error rename-operation-wrong-name\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rename-operation-wrong-name',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst element = this.position.nodeAfter;\n\n\t\telement.name = this.newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.position = this.position.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'RenameOperation';\n\t}\n\n\t/**\n\t * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new RenameOperation( Position.fromJSON( json.position, document ), json.oldName, json.newName, json.baseVersion );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `RenameOperation( ${ this.baseVersion } ): ` +\n\t// @if CK_DEBUG_ENGINE //\t\t`${ this.position }: \"${ this.oldName }\" -> \"${ this.newName }\"`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]},"metadata":{},"sourceType":"module"}