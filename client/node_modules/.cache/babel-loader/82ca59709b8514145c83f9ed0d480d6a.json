{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/pasteplaintext\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ClipboardObserver from './clipboardobserver';\nimport ClipboardPipeline from './clipboardpipeline';\n/**\n * The plugin detects the user's intention to paste plain text.\n *\n * For example, it detects the <kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>V</kbd> keystroke.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class PastePlainText extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'PastePlainText';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [ClipboardPipeline];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const model = editor.model;\n    const view = editor.editing.view;\n    const viewDocument = view.document;\n    const selection = model.document.selection;\n    let shiftPressed = false;\n    view.addObserver(ClipboardObserver);\n    this.listenTo(viewDocument, 'keydown', (evt, data) => {\n      shiftPressed = data.shiftKey;\n    });\n    editor.plugins.get(ClipboardPipeline).on('contentInsertion', (evt, data) => {\n      // Plain text can be determined based on the event flag (#7799) or auto-detection (#1006). If detected,\n      // preserve selection attributes on pasted items.\n      if (!shiftPressed && !isPlainTextFragment(data.content, model.schema)) {\n        return;\n      }\n\n      model.change(writer => {\n        // Formatting attributes should be preserved.\n        const textAttributes = Array.from(selection.getAttributes()).filter(_ref => {\n          let [key] = _ref;\n          return model.schema.getAttributeProperties(key).isFormatting;\n        });\n\n        if (!selection.isCollapsed) {\n          model.deleteContent(selection, {\n            doNotAutoparagraph: true\n          });\n        } // Also preserve other attributes if they survived the content deletion (because they were not fully selected).\n        // For example linkHref is not a formatting attribute but it should be preserved if pasted text was in the middle\n        // of a link.\n\n\n        textAttributes.push(...selection.getAttributes());\n        const range = writer.createRangeIn(data.content);\n\n        for (const item of range.getItems()) {\n          if (item.is('$textProxy')) {\n            writer.setAttributes(textAttributes, item);\n          }\n        }\n      });\n    });\n  }\n\n} // Returns true if specified `documentFragment` represents a plain text.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\n\nfunction isPlainTextFragment(documentFragment, schema) {\n  if (documentFragment.childCount > 1) {\n    return false;\n  }\n\n  const child = documentFragment.getChild(0);\n\n  if (schema.isObject(child)) {\n    return false;\n  }\n\n  return [...child.getAttributeKeys()].length == 0;\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-clipboard/src/pasteplaintext.js"],"names":["Plugin","ClipboardObserver","ClipboardPipeline","PastePlainText","pluginName","requires","init","editor","model","view","editing","viewDocument","document","selection","shiftPressed","addObserver","listenTo","evt","data","shiftKey","plugins","get","on","isPlainTextFragment","content","schema","change","writer","textAttributes","Array","from","getAttributes","filter","key","getAttributeProperties","isFormatting","isCollapsed","deleteContent","doNotAutoparagraph","push","range","createRangeIn","item","getItems","is","setAttributes","documentFragment","childCount","child","getChild","isObject","getAttributeKeys","length"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/pasteplaintext\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport ClipboardObserver from './clipboardobserver';\nimport ClipboardPipeline from './clipboardpipeline';\n\n/**\n * The plugin detects the user's intention to paste plain text.\n *\n * For example, it detects the <kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>V</kbd> keystroke.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class PastePlainText extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'PastePlainText';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ClipboardPipeline ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst selection = model.document.selection;\n\n\t\tlet shiftPressed = false;\n\n\t\tview.addObserver( ClipboardObserver );\n\n\t\tthis.listenTo( viewDocument, 'keydown', ( evt, data ) => {\n\t\t\tshiftPressed = data.shiftKey;\n\t\t} );\n\n\t\teditor.plugins.get( ClipboardPipeline ).on( 'contentInsertion', ( evt, data ) => {\n\t\t\t// Plain text can be determined based on the event flag (#7799) or auto-detection (#1006). If detected,\n\t\t\t// preserve selection attributes on pasted items.\n\t\t\tif ( !shiftPressed && !isPlainTextFragment( data.content, model.schema ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmodel.change( writer => {\n\t\t\t\t// Formatting attributes should be preserved.\n\t\t\t\tconst textAttributes = Array.from( selection.getAttributes() )\n\t\t\t\t\t.filter( ( [ key ] ) => model.schema.getAttributeProperties( key ).isFormatting );\n\n\t\t\t\tif ( !selection.isCollapsed ) {\n\t\t\t\t\tmodel.deleteContent( selection, { doNotAutoparagraph: true } );\n\t\t\t\t}\n\n\t\t\t\t// Also preserve other attributes if they survived the content deletion (because they were not fully selected).\n\t\t\t\t// For example linkHref is not a formatting attribute but it should be preserved if pasted text was in the middle\n\t\t\t\t// of a link.\n\t\t\t\ttextAttributes.push( ...selection.getAttributes() );\n\n\t\t\t\tconst range = writer.createRangeIn( data.content );\n\n\t\t\t\tfor ( const item of range.getItems() ) {\n\t\t\t\t\tif ( item.is( '$textProxy' ) ) {\n\t\t\t\t\t\twriter.setAttributes( textAttributes, item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n}\n\n// Returns true if specified `documentFragment` represents a plain text.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction isPlainTextFragment( documentFragment, schema ) {\n\tif ( documentFragment.childCount > 1 ) {\n\t\treturn false;\n\t}\n\n\tconst child = documentFragment.getChild( 0 );\n\n\tif ( schema.isObject( child ) ) {\n\t\treturn false;\n\t}\n\n\treturn [ ...child.getAttributeKeys() ].length == 0;\n}\n"]},"metadata":{},"sourceType":"module"}