{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/attributeelement\n */\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror'; // Default attribute priority.\n\nconst DEFAULT_PRIORITY = 10;\n/**\n * Attribute elements are used to represent formatting elements in the view (think â€“ `<b>`, `<span style=\"font-size: 2em\">`, etc.).\n * Most often they are created when downcasting model text attributes.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * To create a new attribute element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `DowncastWriter#createAttributeElement()`} method.\n *\n * **Note:** Attribute elements by default can wrap {@link module:engine/view/text~Text},\n * {@link module:engine/view/emptyelement~EmptyElement}, {@link module:engine/view/uielement~UIElement},\n * {@link module:engine/view/rawelement~RawElement} and other attribute elements with higher priority. Other elements while placed inside\n * an attribute element will split it (or nest in case of an `AttributeElement`). This behavior can be modified by changing\n * the `isAllowedInsideAttributeElement` option while creating\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement},\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement},\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement} or\n * {@link module:engine/view/downcastwriter~DowncastWriter#createRawElement}.\n *\n * @extends module:engine/view/element~Element\n */\n\nexport default class AttributeElement extends Element {\n  /**\n   * Creates an attribute element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement\n   * @see module:engine/view/element~Element\n   * @protected\n   * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n   * @param {String} name Node name.\n   * @param {Object|Iterable} [attrs] Collection of attributes.\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into created element.\n   */\n  constructor(document, name, attrs, children) {\n    super(document, name, attrs, children);\n    /**\n     * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n     *\n     * @method #getFillerOffset\n     * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n     */\n\n    this.getFillerOffset = getFillerOffset;\n    /**\n     * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n     *\n     * @protected\n     * @member {Number}\n     */\n\n    this._priority = DEFAULT_PRIORITY;\n    /**\n     * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n     * and then two elements are considered similar if, and only if they have the same `_id`.\n     *\n     * @protected\n     * @member {String|Number}\n     */\n\n    this._id = null;\n    /**\n     * Keeps all the attribute elements that have the same {@link module:engine/view/attributeelement~AttributeElement#id ids}\n     * and still exist in the view tree.\n     *\n     * This property is managed by {@link module:engine/view/downcastwriter~DowncastWriter}.\n     *\n     * @protected\n     * @member {Set.<module:engine/view/attributeelement~AttributeElement>|null}\n     */\n\n    this._clonesGroup = null;\n  }\n  /**\n   * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get priority() {\n    return this._priority;\n  }\n  /**\n   * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n   * and then two elements are considered similar if, and only if they have the same `id`.\n   *\n   * @readonly\n   * @type {String|Number}\n   */\n\n\n  get id() {\n    return this._id;\n  }\n  /**\n   * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the\n   * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).\n   *\n   * Note: If this element has been removed from the tree, returned set will not include it.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}\n   * if this element has no `id`.\n   *\n   * @returns {Set.<module:engine/view/attributeelement~AttributeElement>} Set containing all the attribute elements\n   * with the same `id` that were added and not removed from the view tree.\n   */\n\n\n  getElementsWithSameId() {\n    if (this.id === null) {\n      /**\n       * Cannot get elements with the same id for an attribute element without id.\n       *\n       * @error attribute-element-get-elements-with-same-id-no-id\n       */\n      throw new CKEditorError('attribute-element-get-elements-with-same-id-no-id', this);\n    }\n\n    return new Set(this._clonesGroup);\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\tattributeElement.is( 'attributeElement' ); // -> true\n   *\t\tattributeElement.is( 'element' ); // -> true\n   *\t\tattributeElement.is( 'node' ); // -> true\n   *\t\tattributeElement.is( 'view:attributeElement' ); // -> true\n   *\t\tattributeElement.is( 'view:element' ); // -> true\n   *\t\tattributeElement.is( 'view:node' ); // -> true\n   *\n   *\t\tattributeElement.is( 'model:element' ); // -> false\n   *\t\tattributeElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is an attribute element, you can also check its\n   * {@link module:engine/view/attributeelement~AttributeElement#name name}:\n   *\n   *\t\tattributeElement.is( 'element', 'b' ); // -> true if this is a bold element\n   *\t\tattributeElement.is( 'attributeElement', 'b' ); // -> same as above\n   *\t\ttext.is( 'element', 'b' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (!name) {\n      return type === 'attributeElement' || type === 'view:attributeElement' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n      type === 'element' || type === 'view:element' || type === 'node' || type === 'view:node';\n    } else {\n      return name === this.name && (type === 'attributeElement' || type === 'view:attributeElement' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n      type === 'element' || type === 'view:element');\n    }\n  }\n  /**\n   * Checks if this element is similar to other element.\n   *\n   * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements\n   * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain\n   * different set of children nodes.\n   *\n   * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both\n   * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be\n   * considered similar.\n   *\n   * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:\n   *\n   * * two following similar elements can be merged together into one, longer element,\n   * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to\n   * decide whether processed element should be unwrapped,\n   * * etc.\n   *\n   * @param {module:engine/view/element~Element} otherElement\n   * @returns {Boolean}\n   */\n\n\n  isSimilar(otherElement) {\n    // If any element has an `id` set, just compare the ids.\n    if (this.id !== null || otherElement.id !== null) {\n      return this.id === otherElement.id;\n    }\n\n    return super.isSimilar(otherElement) && this.priority == otherElement.priority;\n  }\n  /**\n   * Clones provided element with priority.\n   *\n   * @protected\n   * @param {Boolean} deep If set to `true` clones element and all its children recursively. When set to `false`,\n   * element will be cloned without any children.\n   * @returns {module:engine/view/attributeelement~AttributeElement} Clone of this element.\n   */\n\n\n  _clone(deep) {\n    const cloned = super._clone(deep); // Clone priority too.\n\n\n    cloned._priority = this._priority; // And id too.\n\n    cloned._id = this._id;\n    return cloned;\n  }\n\n}\n/**\n * Default attribute priority.\n *\n * @member {Number} module:engine/view/attributeelement~AttributeElement.DEFAULT_PRIORITY\n */\n\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY; // Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\nfunction getFillerOffset() {\n  // <b>foo</b> does not need filler.\n  if (nonUiChildrenCount(this)) {\n    return null;\n  }\n\n  let element = this.parent; // <p><b></b></p> needs filler -> <p><b><br></b></p>\n\n  while (element && element.is('attributeElement')) {\n    if (nonUiChildrenCount(element) > 1) {\n      return null;\n    }\n\n    element = element.parent;\n  }\n\n  if (!element || nonUiChildrenCount(element) > 1) {\n    return null;\n  } // Render block filler at the end of element (after all ui elements).\n\n\n  return this.childCount;\n} // Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n//\n// @param {module:engine/view/element~Element} element\n// @returns {Number}\n\n\nfunction nonUiChildrenCount(element) {\n  return Array.from(element.getChildren()).filter(element => !element.is('uiElement')).length;\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/view/attributeelement.js"],"names":["Element","CKEditorError","DEFAULT_PRIORITY","AttributeElement","constructor","document","name","attrs","children","getFillerOffset","_priority","_id","_clonesGroup","priority","id","getElementsWithSameId","Set","is","type","isSimilar","otherElement","_clone","deep","cloned","nonUiChildrenCount","element","parent","childCount","Array","from","getChildren","filter","length"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,aAAP,MAA0B,6CAA1B,C,CAEA;;AACA,MAAMC,gBAAgB,GAAG,EAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,gBAAN,SAA+BH,OAA/B,CAAuC;AACrD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCI,EAAAA,WAAW,CAAEC,QAAF,EAAYC,IAAZ,EAAkBC,KAAlB,EAAyBC,QAAzB,EAAoC;AAC9C,UAAOH,QAAP,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,QAA9B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,eAAL,GAAuBA,eAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,SAAL,GAAiBR,gBAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKS,GAAL,GAAW,IAAX;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,YAAL,GAAoB,IAApB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACa,MAARC,QAAQ,GAAG;AACd,WAAO,KAAKH,SAAZ;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAFI,EAAE,GAAG;AACR,WAAO,KAAKH,GAAZ;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCI,EAAAA,qBAAqB,GAAG;AACvB,QAAK,KAAKD,EAAL,KAAY,IAAjB,EAAwB;AACvB;AACH;AACA;AACA;AACA;AACG,YAAM,IAAIb,aAAJ,CACL,mDADK,EAEL,IAFK,CAAN;AAIA;;AAED,WAAO,IAAIe,GAAJ,CAAS,KAAKJ,YAAd,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCK,EAAAA,EAAE,CAAEC,IAAF,EAAsB;AAAA,QAAdZ,IAAc,uEAAP,IAAO;;AACvB,QAAK,CAACA,IAAN,EAAa;AACZ,aAAOY,IAAI,KAAK,kBAAT,IAA+BA,IAAI,KAAK,uBAAxC,IACN;AACAA,MAAAA,IAAI,KAAK,SAFH,IAEgBA,IAAI,KAAK,cAFzB,IAGNA,IAAI,KAAK,MAHH,IAGaA,IAAI,KAAK,WAH7B;AAIA,KALD,MAKO;AACN,aAAOZ,IAAI,KAAK,KAAKA,IAAd,KACNY,IAAI,KAAK,kBAAT,IAA+BA,IAAI,KAAK,uBAAxC,IACA;AACAA,MAAAA,IAAI,KAAK,SAFT,IAEsBA,IAAI,KAAK,cAHzB,CAAP;AAKA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,SAAS,CAAEC,YAAF,EAAiB;AACzB;AACA,QAAK,KAAKN,EAAL,KAAY,IAAZ,IAAoBM,YAAY,CAACN,EAAb,KAAoB,IAA7C,EAAoD;AACnD,aAAO,KAAKA,EAAL,KAAYM,YAAY,CAACN,EAAhC;AACA;;AAED,WAAO,MAAMK,SAAN,CAAiBC,YAAjB,KAAmC,KAAKP,QAAL,IAAiBO,YAAY,CAACP,QAAxE;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCQ,EAAAA,MAAM,CAAEC,IAAF,EAAS;AACd,UAAMC,MAAM,GAAG,MAAMF,MAAN,CAAcC,IAAd,CAAf,CADc,CAGd;;;AACAC,IAAAA,MAAM,CAACb,SAAP,GAAmB,KAAKA,SAAxB,CAJc,CAMd;;AACAa,IAAAA,MAAM,CAACZ,GAAP,GAAa,KAAKA,GAAlB;AAEA,WAAOY,MAAP;AACA;;AA/LoD;AAkMtD;AACA;AACA;AACA;AACA;;AACApB,gBAAgB,CAACD,gBAAjB,GAAoCA,gBAApC,C,CAEA;AACA;AACA;;AACA,SAASO,eAAT,GAA2B;AAC1B;AACA,MAAKe,kBAAkB,CAAE,IAAF,CAAvB,EAAkC;AACjC,WAAO,IAAP;AACA;;AAED,MAAIC,OAAO,GAAG,KAAKC,MAAnB,CAN0B,CAQ1B;;AACA,SAAQD,OAAO,IAAIA,OAAO,CAACR,EAAR,CAAY,kBAAZ,CAAnB,EAAsD;AACrD,QAAKO,kBAAkB,CAAEC,OAAF,CAAlB,GAAgC,CAArC,EAAyC;AACxC,aAAO,IAAP;AACA;;AAEDA,IAAAA,OAAO,GAAGA,OAAO,CAACC,MAAlB;AACA;;AAED,MAAK,CAACD,OAAD,IAAYD,kBAAkB,CAAEC,OAAF,CAAlB,GAAgC,CAAjD,EAAqD;AACpD,WAAO,IAAP;AACA,GAnByB,CAqB1B;;;AACA,SAAO,KAAKE,UAAZ;AACA,C,CAED;AACA;AACA;AACA;;;AACA,SAASH,kBAAT,CAA6BC,OAA7B,EAAuC;AACtC,SAAOG,KAAK,CAACC,IAAN,CAAYJ,OAAO,CAACK,WAAR,EAAZ,EAAoCC,MAApC,CAA4CN,OAAO,IAAI,CAACA,OAAO,CAACR,EAAR,CAAY,WAAZ,CAAxD,EAAoFe,MAA3F;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/attributeelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n// Default attribute priority.\nconst DEFAULT_PRIORITY = 10;\n\n/**\n * Attribute elements are used to represent formatting elements in the view (think â€“ `<b>`, `<span style=\"font-size: 2em\">`, etc.).\n * Most often they are created when downcasting model text attributes.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * To create a new attribute element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `DowncastWriter#createAttributeElement()`} method.\n *\n * **Note:** Attribute elements by default can wrap {@link module:engine/view/text~Text},\n * {@link module:engine/view/emptyelement~EmptyElement}, {@link module:engine/view/uielement~UIElement},\n * {@link module:engine/view/rawelement~RawElement} and other attribute elements with higher priority. Other elements while placed inside\n * an attribute element will split it (or nest in case of an `AttributeElement`). This behavior can be modified by changing\n * the `isAllowedInsideAttributeElement` option while creating\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement},\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement},\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement} or\n * {@link module:engine/view/downcastwriter~DowncastWriter#createRawElement}.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class AttributeElement extends Element {\n\t/**\n\t * Creates an attribute element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement\n\t * @see module:engine/view/element~Element\n\t * @protected\n\t * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into created element.\n\t */\n\tconstructor( document, name, attrs, children ) {\n\t\tsuper( document, name, attrs, children );\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\n\t\t/**\n\t\t * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Number}\n\t\t */\n\t\tthis._priority = DEFAULT_PRIORITY;\n\n\t\t/**\n\t\t * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n\t\t * and then two elements are considered similar if, and only if they have the same `_id`.\n\t\t *\n\t\t * @protected\n\t\t * @member {String|Number}\n\t\t */\n\t\tthis._id = null;\n\n\t\t/**\n\t\t * Keeps all the attribute elements that have the same {@link module:engine/view/attributeelement~AttributeElement#id ids}\n\t\t * and still exist in the view tree.\n\t\t *\n\t\t * This property is managed by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set.<module:engine/view/attributeelement~AttributeElement>|null}\n\t\t */\n\t\tthis._clonesGroup = null;\n\t}\n\n\t/**\n\t * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget priority() {\n\t\treturn this._priority;\n\t}\n\n\t/**\n\t * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n\t * and then two elements are considered similar if, and only if they have the same `id`.\n\t *\n\t * @readonly\n\t * @type {String|Number}\n\t */\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the\n\t * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).\n\t *\n\t * Note: If this element has been removed from the tree, returned set will not include it.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}\n\t * if this element has no `id`.\n\t *\n\t * @returns {Set.<module:engine/view/attributeelement~AttributeElement>} Set containing all the attribute elements\n\t * with the same `id` that were added and not removed from the view tree.\n\t */\n\tgetElementsWithSameId() {\n\t\tif ( this.id === null ) {\n\t\t\t/**\n\t\t\t * Cannot get elements with the same id for an attribute element without id.\n\t\t\t *\n\t\t\t * @error attribute-element-get-elements-with-same-id-no-id\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'attribute-element-get-elements-with-same-id-no-id',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\treturn new Set( this._clonesGroup );\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tattributeElement.is( 'attributeElement' ); // -> true\n\t *\t\tattributeElement.is( 'element' ); // -> true\n\t *\t\tattributeElement.is( 'node' ); // -> true\n\t *\t\tattributeElement.is( 'view:attributeElement' ); // -> true\n\t *\t\tattributeElement.is( 'view:element' ); // -> true\n\t *\t\tattributeElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\tattributeElement.is( 'model:element' ); // -> false\n\t *\t\tattributeElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an attribute element, you can also check its\n\t * {@link module:engine/view/attributeelement~AttributeElement#name name}:\n\t *\n\t *\t\tattributeElement.is( 'element', 'b' ); // -> true if this is a bold element\n\t *\t\tattributeElement.is( 'attributeElement', 'b' ); // -> same as above\n\t *\t\ttext.is( 'element', 'b' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type === 'attributeElement' || type === 'view:attributeElement' ||\n\t\t\t\t// From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n\t\t\t\ttype === 'element' || type === 'view:element' ||\n\t\t\t\ttype === 'node' || type === 'view:node';\n\t\t} else {\n\t\t\treturn name === this.name && (\n\t\t\t\ttype === 'attributeElement' || type === 'view:attributeElement' ||\n\t\t\t\t// From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n\t\t\t\ttype === 'element' || type === 'view:element'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t *\n\t * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements\n\t * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain\n\t * different set of children nodes.\n\t *\n\t * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both\n\t * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be\n\t * considered similar.\n\t *\n\t * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:\n\t *\n\t * * two following similar elements can be merged together into one, longer element,\n\t * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to\n\t * decide whether processed element should be unwrapped,\n\t * * etc.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\t// If any element has an `id` set, just compare the ids.\n\t\tif ( this.id !== null || otherElement.id !== null ) {\n\t\t\treturn this.id === otherElement.id;\n\t\t}\n\n\t\treturn super.isSimilar( otherElement ) && this.priority == otherElement.priority;\n\t}\n\n\t/**\n\t * Clones provided element with priority.\n\t *\n\t * @protected\n\t * @param {Boolean} deep If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Clone of this element.\n\t */\n\t_clone( deep ) {\n\t\tconst cloned = super._clone( deep );\n\n\t\t// Clone priority too.\n\t\tcloned._priority = this._priority;\n\n\t\t// And id too.\n\t\tcloned._id = this._id;\n\n\t\treturn cloned;\n\t}\n}\n\n/**\n * Default attribute priority.\n *\n * @member {Number} module:engine/view/attributeelement~AttributeElement.DEFAULT_PRIORITY\n */\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY;\n\n// Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getFillerOffset() {\n\t// <b>foo</b> does not need filler.\n\tif ( nonUiChildrenCount( this ) ) {\n\t\treturn null;\n\t}\n\n\tlet element = this.parent;\n\n\t// <p><b></b></p> needs filler -> <p><b><br></b></p>\n\twhile ( element && element.is( 'attributeElement' ) ) {\n\t\tif ( nonUiChildrenCount( element ) > 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\telement = element.parent;\n\t}\n\n\tif ( !element || nonUiChildrenCount( element ) > 1 ) {\n\t\treturn null;\n\t}\n\n\t// Render block filler at the end of element (after all ui elements).\n\treturn this.childCount;\n}\n\n// Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n//\n// @param {module:engine/view/element~Element} element\n// @returns {Number}\nfunction nonUiChildrenCount( element ) {\n\treturn Array.from( element.getChildren() ).filter( element => !element.is( 'uiElement' ) ).length;\n}\n"]},"metadata":{},"sourceType":"module"}