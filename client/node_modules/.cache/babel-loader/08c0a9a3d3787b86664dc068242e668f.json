{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Resizer from './widgetresize/resizer';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { throttle } from 'lodash-es';\nimport '../theme/widgetresize.css';\n/**\n * The widget resize feature plugin.\n *\n * Use the {@link module:widget/widgetresize~WidgetResize#attachTo} method to create a resizer for the specified widget.\n *\n * @extends module:core/plugin~Plugin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class WidgetResize extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'WidgetResize';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editing = this.editor.editing;\n    const domDocument = global.window.document;\n    /**\n     * The currently visible resizer.\n     *\n     * @observable\n     * @member {module:widget/widgetresize/resizer~Resizer|null} #visibleResizer\n     */\n\n    this.set('visibleResizer', null);\n    /**\n     * References an active resizer.\n     *\n     * Active resizer means a resizer which handle is actively used by the end user.\n     *\n     * @protected\n     * @observable\n     * @member {module:widget/widgetresize/resizer~Resizer|null} #_activeResizer\n     */\n\n    this.set('_activeResizer', null);\n    /**\n     * A map of resizers created using this plugin instance.\n     *\n     * @protected\n     * @type {Map.<module:engine/view/containerelement~ContainerElement, module:widget/widgetresize/resizer~Resizer>}\n     */\n\n    this._resizers = new Map();\n    editing.view.addObserver(MouseObserver);\n    this._observer = Object.create(DomEmitterMixin);\n    this.listenTo(editing.view.document, 'mousedown', this._mouseDownListener.bind(this), {\n      priority: 'high'\n    });\n\n    this._observer.listenTo(domDocument, 'mousemove', this._mouseMoveListener.bind(this));\n\n    this._observer.listenTo(domDocument, 'mouseup', this._mouseUpListener.bind(this));\n\n    const redrawFocusedResizer = () => {\n      if (this.visibleResizer) {\n        this.visibleResizer.redraw();\n      }\n    };\n\n    this._redrawFocusedResizerThrottled = throttle(redrawFocusedResizer, 200); // Redraws occurring upon a change of visible resizer must not be throttled, as it is crucial for the initial\n    // render. Without it the resizer frame would be misaligned with resizing host for a fraction of second.\n\n    this.on('change:visibleResizer', redrawFocusedResizer); // Redrawing on any change of the UI of the editor (including content changes).\n\n    this.editor.ui.on('update', this._redrawFocusedResizerThrottled); // Remove view widget-resizer mappings for widgets that have been removed from the document.\n    // https://github.com/ckeditor/ckeditor5/issues/10156\n    // https://github.com/ckeditor/ckeditor5/issues/10266\n\n    this.editor.model.document.on('change', () => {\n      for (const [viewElement, resizer] of this._resizers) {\n        if (!viewElement.isAttached()) {\n          this._resizers.delete(viewElement);\n\n          resizer.destroy();\n        }\n      }\n    }, {\n      priority: 'lowest'\n    }); // Resizers need to be redrawn upon window resize, because new window might shrink resize host.\n\n    this._observer.listenTo(global.window, 'resize', this._redrawFocusedResizerThrottled);\n\n    const viewSelection = this.editor.editing.view.document.selection;\n    viewSelection.on('change', () => {\n      const selectedElement = viewSelection.getSelectedElement();\n      this.visibleResizer = this.getResizerByViewElement(selectedElement) || null;\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    this._observer.stopListening();\n\n    for (const resizer of this._resizers.values()) {\n      resizer.destroy();\n    }\n\n    this._redrawFocusedResizerThrottled.cancel();\n  }\n  /**\n   * @param {module:widget/widgetresize~ResizerOptions} [options] Resizer options.\n   * @returns {module:widget/widgetresize/resizer~Resizer}\n   */\n\n\n  attachTo(options) {\n    const resizer = new Resizer(options);\n    const plugins = this.editor.plugins;\n    resizer.attach();\n\n    if (plugins.has('WidgetToolbarRepository')) {\n      // Hiding widget toolbar to improve the performance\n      // (https://github.com/ckeditor/ckeditor5-widget/pull/112#issuecomment-564528765).\n      const widgetToolbarRepository = plugins.get('WidgetToolbarRepository');\n      resizer.on('begin', () => {\n        widgetToolbarRepository.forceDisabled('resize');\n      }, {\n        priority: 'lowest'\n      });\n      resizer.on('cancel', () => {\n        widgetToolbarRepository.clearForceDisabled('resize');\n      }, {\n        priority: 'highest'\n      });\n      resizer.on('commit', () => {\n        widgetToolbarRepository.clearForceDisabled('resize');\n      }, {\n        priority: 'highest'\n      });\n    }\n\n    this._resizers.set(options.viewElement, resizer);\n\n    const viewSelection = this.editor.editing.view.document.selection;\n    const selectedElement = viewSelection.getSelectedElement(); // If the element the resizer is created for is currently focused, it should become visible.\n\n    if (this.getResizerByViewElement(selectedElement) == resizer) {\n      this.visibleResizer = resizer;\n    }\n\n    return resizer;\n  }\n  /**\n   * Returns a resizer created for a given view element (widget element).\n   *\n   * @param {module:engine/view/containerelement~ContainerElement} viewElement View element associated with the resizer.\n   * @returns {module:widget/widgetresize/resizer~Resizer|undefined}\n   */\n\n\n  getResizerByViewElement(viewElement) {\n    return this._resizers.get(viewElement);\n  }\n  /**\n   * Returns a resizer that contains a given resize handle.\n   *\n   * @protected\n   * @param {HTMLElement} domResizeHandle\n   * @returns {module:widget/widgetresize/resizer~Resizer}\n   */\n\n\n  _getResizerByHandle(domResizeHandle) {\n    for (const resizer of this._resizers.values()) {\n      if (resizer.containsHandle(domResizeHandle)) {\n        return resizer;\n      }\n    }\n  }\n  /**\n   * @protected\n   * @param {module:utils/eventinfo~EventInfo} event\n   * @param {Event} domEventData Native DOM event.\n   */\n\n\n  _mouseDownListener(event, domEventData) {\n    const resizeHandle = domEventData.domTarget;\n\n    if (!Resizer.isResizeHandle(resizeHandle)) {\n      return;\n    }\n\n    this._activeResizer = this._getResizerByHandle(resizeHandle);\n\n    if (this._activeResizer) {\n      this._activeResizer.begin(resizeHandle); // Do not call other events when resizing. See: #6755.\n\n\n      event.stop();\n      domEventData.preventDefault();\n    }\n  }\n  /**\n   * @protected\n   * @param {module:utils/eventinfo~EventInfo} event\n   * @param {Event} domEventData Native DOM event.\n   */\n\n\n  _mouseMoveListener(event, domEventData) {\n    if (this._activeResizer) {\n      this._activeResizer.updateSize(domEventData);\n    }\n  }\n  /**\n   * @protected\n   */\n\n\n  _mouseUpListener() {\n    if (this._activeResizer) {\n      this._activeResizer.commit();\n\n      this._activeResizer = null;\n    }\n  }\n\n}\nmix(WidgetResize, ObservableMixin);\n/**\n * Interface describing a resizer. It allows to specify the resizing host, custom logic for calculating aspect ratio, etc.\n *\n * @interface ResizerOptions\n */\n\n/**\n * Editor instance associated with the resizer.\n *\n * @member {module:core/editor/editor~Editor} module:widget/widgetresize~ResizerOptions#editor\n */\n\n/**\n * @member {module:engine/model/element~Element} module:widget/widgetresize~ResizerOptions#modelElement\n */\n\n/**\n * A view of an element to be resized. Typically it's the main widget's view instance.\n *\n * @member {module:engine/view/containerelement~ContainerElement} module:widget/widgetresize~ResizerOptions#viewElement\n */\n\n/**\n * A callback to be executed once the resizing process is done.\n *\n * It receives a `Number` (`newValue`) as a parameter.\n *\n * For example, {@link module:image/imageresize~ImageResize} uses it to execute the resize image command\n * which puts the new value into the model.\n *\n * ```js\n * {\n *\teditor,\n *\tmodelElement: data.item,\n *\tviewElement: widget,\n *\n *\tonCommit( newValue ) {\n *\t\teditor.execute( 'resizeImage', { width: newValue } );\n *\t}\n * };\n * ```\n *\n *\n * @member {Function} module:widget/widgetresize~ResizerOptions#onCommit\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#getResizeHost\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#isCentered\n */","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-widget/src/widgetresize.js"],"names":["Plugin","Resizer","DomEmitterMixin","global","ObservableMixin","MouseObserver","mix","throttle","WidgetResize","pluginName","init","editing","editor","domDocument","window","document","set","_resizers","Map","view","addObserver","_observer","Object","create","listenTo","_mouseDownListener","bind","priority","_mouseMoveListener","_mouseUpListener","redrawFocusedResizer","visibleResizer","redraw","_redrawFocusedResizerThrottled","on","ui","model","viewElement","resizer","isAttached","delete","destroy","viewSelection","selection","selectedElement","getSelectedElement","getResizerByViewElement","stopListening","values","cancel","attachTo","options","plugins","attach","has","widgetToolbarRepository","get","forceDisabled","clearForceDisabled","_getResizerByHandle","domResizeHandle","containsHandle","event","domEventData","resizeHandle","domTarget","isResizeHandle","_activeResizer","begin","stop","preventDefault","updateSize","commit"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Resizer from './widgetresize/resizer';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { throttle } from 'lodash-es';\n\nimport '../theme/widgetresize.css';\n\n/**\n * The widget resize feature plugin.\n *\n * Use the {@link module:widget/widgetresize~WidgetResize#attachTo} method to create a resizer for the specified widget.\n *\n * @extends module:core/plugin~Plugin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class WidgetResize extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'WidgetResize';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editing = this.editor.editing;\n\t\tconst domDocument = global.window.document;\n\n\t\t/**\n\t\t * The currently visible resizer.\n\t\t *\n\t\t * @observable\n\t\t * @member {module:widget/widgetresize/resizer~Resizer|null} #visibleResizer\n\t\t */\n\t\tthis.set( 'visibleResizer', null );\n\n\t\t/**\n\t\t * References an active resizer.\n\t\t *\n\t\t * Active resizer means a resizer which handle is actively used by the end user.\n\t\t *\n\t\t * @protected\n\t\t * @observable\n\t\t * @member {module:widget/widgetresize/resizer~Resizer|null} #_activeResizer\n\t\t */\n\t\tthis.set( '_activeResizer', null );\n\n\t\t/**\n\t\t * A map of resizers created using this plugin instance.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map.<module:engine/view/containerelement~ContainerElement, module:widget/widgetresize/resizer~Resizer>}\n\t\t */\n\t\tthis._resizers = new Map();\n\n\t\tediting.view.addObserver( MouseObserver );\n\n\t\tthis._observer = Object.create( DomEmitterMixin );\n\n\t\tthis.listenTo( editing.view.document, 'mousedown', this._mouseDownListener.bind( this ), { priority: 'high' } );\n\n\t\tthis._observer.listenTo( domDocument, 'mousemove', this._mouseMoveListener.bind( this ) );\n\t\tthis._observer.listenTo( domDocument, 'mouseup', this._mouseUpListener.bind( this ) );\n\n\t\tconst redrawFocusedResizer = () => {\n\t\t\tif ( this.visibleResizer ) {\n\t\t\t\tthis.visibleResizer.redraw();\n\t\t\t}\n\t\t};\n\n\t\tthis._redrawFocusedResizerThrottled = throttle( redrawFocusedResizer, 200 );\n\n\t\t// Redraws occurring upon a change of visible resizer must not be throttled, as it is crucial for the initial\n\t\t// render. Without it the resizer frame would be misaligned with resizing host for a fraction of second.\n\t\tthis.on( 'change:visibleResizer', redrawFocusedResizer );\n\n\t\t// Redrawing on any change of the UI of the editor (including content changes).\n\t\tthis.editor.ui.on( 'update', this._redrawFocusedResizerThrottled );\n\n\t\t// Remove view widget-resizer mappings for widgets that have been removed from the document.\n\t\t// https://github.com/ckeditor/ckeditor5/issues/10156\n\t\t// https://github.com/ckeditor/ckeditor5/issues/10266\n\t\tthis.editor.model.document.on( 'change', () => {\n\t\t\tfor ( const [ viewElement, resizer ] of this._resizers ) {\n\t\t\t\tif ( !viewElement.isAttached() ) {\n\t\t\t\t\tthis._resizers.delete( viewElement );\n\t\t\t\t\tresizer.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Resizers need to be redrawn upon window resize, because new window might shrink resize host.\n\t\tthis._observer.listenTo( global.window, 'resize', this._redrawFocusedResizerThrottled );\n\n\t\tconst viewSelection = this.editor.editing.view.document.selection;\n\n\t\tviewSelection.on( 'change', () => {\n\t\t\tconst selectedElement = viewSelection.getSelectedElement();\n\n\t\t\tthis.visibleResizer = this.getResizerByViewElement( selectedElement ) || null;\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._observer.stopListening();\n\n\t\tfor ( const resizer of this._resizers.values() ) {\n\t\t\tresizer.destroy();\n\t\t}\n\n\t\tthis._redrawFocusedResizerThrottled.cancel();\n\t}\n\n\t/**\n\t * @param {module:widget/widgetresize~ResizerOptions} [options] Resizer options.\n\t * @returns {module:widget/widgetresize/resizer~Resizer}\n\t */\n\tattachTo( options ) {\n\t\tconst resizer = new Resizer( options );\n\t\tconst plugins = this.editor.plugins;\n\n\t\tresizer.attach();\n\n\t\tif ( plugins.has( 'WidgetToolbarRepository' ) ) {\n\t\t\t// Hiding widget toolbar to improve the performance\n\t\t\t// (https://github.com/ckeditor/ckeditor5-widget/pull/112#issuecomment-564528765).\n\t\t\tconst widgetToolbarRepository = plugins.get( 'WidgetToolbarRepository' );\n\n\t\t\tresizer.on( 'begin', () => {\n\t\t\t\twidgetToolbarRepository.forceDisabled( 'resize' );\n\t\t\t}, { priority: 'lowest' } );\n\n\t\t\tresizer.on( 'cancel', () => {\n\t\t\t\twidgetToolbarRepository.clearForceDisabled( 'resize' );\n\t\t\t}, { priority: 'highest' } );\n\n\t\t\tresizer.on( 'commit', () => {\n\t\t\t\twidgetToolbarRepository.clearForceDisabled( 'resize' );\n\t\t\t}, { priority: 'highest' } );\n\t\t}\n\n\t\tthis._resizers.set( options.viewElement, resizer );\n\n\t\tconst viewSelection = this.editor.editing.view.document.selection;\n\t\tconst selectedElement = viewSelection.getSelectedElement();\n\n\t\t// If the element the resizer is created for is currently focused, it should become visible.\n\t\tif ( this.getResizerByViewElement( selectedElement ) == resizer ) {\n\t\t\tthis.visibleResizer = resizer;\n\t\t}\n\n\t\treturn resizer;\n\t}\n\n\t/**\n\t * Returns a resizer created for a given view element (widget element).\n\t *\n\t * @param {module:engine/view/containerelement~ContainerElement} viewElement View element associated with the resizer.\n\t * @returns {module:widget/widgetresize/resizer~Resizer|undefined}\n\t */\n\tgetResizerByViewElement( viewElement ) {\n\t\treturn this._resizers.get( viewElement );\n\t}\n\n\t/**\n\t * Returns a resizer that contains a given resize handle.\n\t *\n\t * @protected\n\t * @param {HTMLElement} domResizeHandle\n\t * @returns {module:widget/widgetresize/resizer~Resizer}\n\t */\n\t_getResizerByHandle( domResizeHandle ) {\n\t\tfor ( const resizer of this._resizers.values() ) {\n\t\t\tif ( resizer.containsHandle( domResizeHandle ) ) {\n\t\t\t\treturn resizer;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @protected\n\t * @param {module:utils/eventinfo~EventInfo} event\n\t * @param {Event} domEventData Native DOM event.\n\t */\n\t_mouseDownListener( event, domEventData ) {\n\t\tconst resizeHandle = domEventData.domTarget;\n\n\t\tif ( !Resizer.isResizeHandle( resizeHandle ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._activeResizer = this._getResizerByHandle( resizeHandle );\n\n\t\tif ( this._activeResizer ) {\n\t\t\tthis._activeResizer.begin( resizeHandle );\n\n\t\t\t// Do not call other events when resizing. See: #6755.\n\t\t\tevent.stop();\n\t\t\tdomEventData.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * @protected\n\t * @param {module:utils/eventinfo~EventInfo} event\n\t * @param {Event} domEventData Native DOM event.\n\t */\n\t_mouseMoveListener( event, domEventData ) {\n\t\tif ( this._activeResizer ) {\n\t\t\tthis._activeResizer.updateSize( domEventData );\n\t\t}\n\t}\n\n\t/**\n\t * @protected\n\t */\n\t_mouseUpListener() {\n\t\tif ( this._activeResizer ) {\n\t\t\tthis._activeResizer.commit();\n\t\t\tthis._activeResizer = null;\n\t\t}\n\t}\n}\n\nmix( WidgetResize, ObservableMixin );\n\n/**\n * Interface describing a resizer. It allows to specify the resizing host, custom logic for calculating aspect ratio, etc.\n *\n * @interface ResizerOptions\n */\n\n/**\n * Editor instance associated with the resizer.\n *\n * @member {module:core/editor/editor~Editor} module:widget/widgetresize~ResizerOptions#editor\n */\n\n/**\n * @member {module:engine/model/element~Element} module:widget/widgetresize~ResizerOptions#modelElement\n */\n\n/**\n * A view of an element to be resized. Typically it's the main widget's view instance.\n *\n * @member {module:engine/view/containerelement~ContainerElement} module:widget/widgetresize~ResizerOptions#viewElement\n */\n\n/**\n * A callback to be executed once the resizing process is done.\n *\n * It receives a `Number` (`newValue`) as a parameter.\n *\n * For example, {@link module:image/imageresize~ImageResize} uses it to execute the resize image command\n * which puts the new value into the model.\n *\n * ```js\n * {\n *\teditor,\n *\tmodelElement: data.item,\n *\tviewElement: widget,\n *\n *\tonCommit( newValue ) {\n *\t\teditor.execute( 'resizeImage', { width: newValue } );\n *\t}\n * };\n * ```\n *\n *\n * @member {Function} module:widget/widgetresize~ResizerOptions#onCommit\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#getResizeHost\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#isCentered\n */\n"]},"metadata":{},"sourceType":"module"}