{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/colorgrid/colorgrid\n */\nimport View from '../view';\nimport ColorTileView from './colortileview';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport '../../theme/components/colorgrid/colorgrid.css';\n/**\n * A grid of {@link module:ui/colorgrid/colortile~ColorTileView color tiles}.\n *\n * @extends module:ui/view~View\n */\n\nexport default class ColorGridView extends View {\n  /**\n   * Creates an instance of a color grid containing {@link module:ui/colorgrid/colortile~ColorTileView tiles}.\n   *\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   * @param {Object} options Component configuration\n   * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} [options.colorDefinitions] Array with definitions\n   * required to create the {@link module:ui/colorgrid/colortile~ColorTileView tiles}.\n   * @param {Number} options.columns A number of columns to display the tiles.\n   */\n  constructor(locale, options) {\n    super(locale);\n    const colorDefinitions = options && options.colorDefinitions || [];\n    const viewStyleAttribute = {};\n\n    if (options && options.columns) {\n      viewStyleAttribute.gridTemplateColumns = `repeat( ${options.columns}, 1fr)`;\n    }\n    /**\n     * The color of the currently selected color tile in {@link #items}.\n     *\n     * @observable\n     * @type {String}\n     */\n\n\n    this.set('selectedColor');\n    /**\n     * Collection of the child tile views.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.items = this.createCollection();\n    /**\n     * Tracks information about DOM focus in the grid.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * Helps cycling over focusable {@link #items} in the grid.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this.items,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate grid items backwards using the arrowup key.\n        focusPrevious: 'arrowleft',\n        // Navigate grid items forwards using the arrowdown key.\n        focusNext: 'arrowright'\n      }\n    });\n    this.items.on('add', (evt, colorTile) => {\n      colorTile.isOn = colorTile.color === this.selectedColor;\n    });\n    colorDefinitions.forEach(color => {\n      const colorTile = new ColorTileView();\n      colorTile.set({\n        color: color.color,\n        label: color.label,\n        tooltip: true,\n        hasBorder: color.options.hasBorder\n      });\n      colorTile.on('execute', () => {\n        this.fire('execute', {\n          value: color.color,\n          hasBorder: color.options.hasBorder,\n          label: color.label\n        });\n      });\n      this.items.add(colorTile);\n    });\n    this.setTemplate({\n      tag: 'div',\n      children: this.items,\n      attributes: {\n        class: ['ck', 'ck-color-grid'],\n        style: viewStyleAttribute\n      }\n    });\n    this.on('change:selectedColor', (evt, name, selectedColor) => {\n      for (const item of this.items) {\n        item.isOn = item.color === selectedColor;\n      }\n    });\n  }\n  /**\n   * Focuses the first focusable in {@link #items}.\n   */\n\n\n  focus() {\n    if (this.items.length) {\n      this.items.first.focus();\n    }\n  }\n  /**\n   * Focuses the last focusable in {@link #items}.\n   */\n\n\n  focusLast() {\n    if (this.items.length) {\n      this.items.last.focus();\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render(); // Items added before rendering should be known to the #focusTracker.\n\n    for (const item of this.items) {\n      this.focusTracker.add(item.element);\n    }\n\n    this.items.on('add', (evt, item) => {\n      this.focusTracker.add(item.element);\n    });\n    this.items.on('remove', (evt, item) => {\n      this.focusTracker.remove(item.element);\n    }); // Start listening for the keystrokes coming from #element.\n\n    this.keystrokes.listenTo(this.element);\n  }\n  /**\n   * Fired when the `ColorTileView` for the picked item is executed.\n   *\n   * @event execute\n   * @param {Object} data Additional information about the event.\n   * @param {String} data.value The value of the selected color\n   * ({@link module:ui/colorgrid/colorgrid~ColorDefinition#color `color.color`}).\n   * @param {Boolean} data.hasBorder The `hasBorder` property of the selected color\n   * ({@link module:ui/colorgrid/colorgrid~ColorDefinition#options `color.options.hasBorder`}).\n   * @param {String} data.Label The label of the selected color\n   * ({@link module:ui/colorgrid/colorgrid~ColorDefinition#label `color.label`})\n   */\n\n\n}\n/**\n * A color definition used to create a {@link module:ui/colorgrid/colortile~ColorTileView}.\n *\n *\t\t{\n *\t\t\tcolor: 'hsl(0, 0%, 75%)',\n *\t\t\tlabel: 'Light Grey',\n *\t\t\toptions: {\n *\t\t\t\thasBorder: true\n *\t\t\t}\n *\t\t}\n *\n * @typedef {Object} module:ui/colorgrid/colorgrid~ColorDefinition\n * @type Object\n *\n * @property {String} color String representing a color.\n * It is used as value of background-color style in {@link module:ui/colorgrid/colortile~ColorTileView}.\n * @property {String} label String used as label for {@link module:ui/colorgrid/colortile~ColorTileView}.\n * @property {Object} options Additional options passed to create a {@link module:ui/colorgrid/colortile~ColorTileView}.\n * @property {Boolean} options.hasBorder A flag that indicates if special a CSS class should be added\n * to {@link module:ui/colorgrid/colortile~ColorTileView}, which renders a border around it.\n */","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-ui/src/colorgrid/colorgridview.js"],"names":["View","ColorTileView","FocusTracker","FocusCycler","KeystrokeHandler","ColorGridView","constructor","locale","options","colorDefinitions","viewStyleAttribute","columns","gridTemplateColumns","set","items","createCollection","focusTracker","keystrokes","_focusCycler","focusables","keystrokeHandler","actions","focusPrevious","focusNext","on","evt","colorTile","isOn","color","selectedColor","forEach","label","tooltip","hasBorder","fire","value","add","setTemplate","tag","children","attributes","class","style","name","item","focus","length","first","focusLast","last","render","element","remove","listenTo"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/colorgrid/colorgrid\n */\n\nimport View from '../view';\nimport ColorTileView from './colortileview';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport '../../theme/components/colorgrid/colorgrid.css';\n\n/**\n * A grid of {@link module:ui/colorgrid/colortile~ColorTileView color tiles}.\n *\n * @extends module:ui/view~View\n */\nexport default class ColorGridView extends View {\n\t/**\n\t * Creates an instance of a color grid containing {@link module:ui/colorgrid/colortile~ColorTileView tiles}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t * @param {Object} options Component configuration\n\t * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} [options.colorDefinitions] Array with definitions\n\t * required to create the {@link module:ui/colorgrid/colortile~ColorTileView tiles}.\n\t * @param {Number} options.columns A number of columns to display the tiles.\n\t */\n\tconstructor( locale, options ) {\n\t\tsuper( locale );\n\n\t\tconst colorDefinitions = options && options.colorDefinitions || [];\n\t\tconst viewStyleAttribute = {};\n\n\t\tif ( options && options.columns ) {\n\t\t\tviewStyleAttribute.gridTemplateColumns = `repeat( ${ options.columns }, 1fr)`;\n\t\t}\n\n\t\t/**\n\t\t * The color of the currently selected color tile in {@link #items}.\n\t\t *\n\t\t * @observable\n\t\t * @type {String}\n\t\t */\n\t\tthis.set( 'selectedColor' );\n\n\t\t/**\n\t\t * Collection of the child tile views.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the grid.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * Helps cycling over focusable {@link #items} in the grid.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.items,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate grid items backwards using the arrowup key.\n\t\t\t\tfocusPrevious: 'arrowleft',\n\n\t\t\t\t// Navigate grid items forwards using the arrowdown key.\n\t\t\t\tfocusNext: 'arrowright'\n\t\t\t}\n\t\t} );\n\n\t\tthis.items.on( 'add', ( evt, colorTile ) => {\n\t\t\tcolorTile.isOn = colorTile.color === this.selectedColor;\n\t\t} );\n\n\t\tcolorDefinitions.forEach( color => {\n\t\t\tconst colorTile = new ColorTileView();\n\n\t\t\tcolorTile.set( {\n\t\t\t\tcolor: color.color,\n\t\t\t\tlabel: color.label,\n\t\t\t\ttooltip: true,\n\t\t\t\thasBorder: color.options.hasBorder\n\t\t\t} );\n\n\t\t\tcolorTile.on( 'execute', () => {\n\t\t\t\tthis.fire( 'execute', {\n\t\t\t\t\tvalue: color.color,\n\t\t\t\t\thasBorder: color.options.hasBorder,\n\t\t\t\t\tlabel: color.label\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tthis.items.add( colorTile );\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tchildren: this.items,\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-color-grid'\n\t\t\t\t],\n\t\t\t\tstyle: viewStyleAttribute\n\t\t\t}\n\t\t} );\n\n\t\tthis.on( 'change:selectedColor', ( evt, name, selectedColor ) => {\n\t\t\tfor ( const item of this.items ) {\n\t\t\t\titem.isOn = item.color === selectedColor;\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #items}.\n\t */\n\tfocus() {\n\t\tif ( this.items.length ) {\n\t\t\tthis.items.first.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #items}.\n\t */\n\tfocusLast() {\n\t\tif ( this.items.length ) {\n\t\t\tthis.items.last.focus();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Items added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\t/**\n\t * Fired when the `ColorTileView` for the picked item is executed.\n\t *\n\t * @event execute\n\t * @param {Object} data Additional information about the event.\n\t * @param {String} data.value The value of the selected color\n\t * ({@link module:ui/colorgrid/colorgrid~ColorDefinition#color `color.color`}).\n\t * @param {Boolean} data.hasBorder The `hasBorder` property of the selected color\n\t * ({@link module:ui/colorgrid/colorgrid~ColorDefinition#options `color.options.hasBorder`}).\n\t * @param {String} data.Label The label of the selected color\n\t * ({@link module:ui/colorgrid/colorgrid~ColorDefinition#label `color.label`})\n\t */\n}\n\n/**\n * A color definition used to create a {@link module:ui/colorgrid/colortile~ColorTileView}.\n *\n *\t\t{\n *\t\t\tcolor: 'hsl(0, 0%, 75%)',\n *\t\t\tlabel: 'Light Grey',\n *\t\t\toptions: {\n *\t\t\t\thasBorder: true\n *\t\t\t}\n *\t\t}\n *\n * @typedef {Object} module:ui/colorgrid/colorgrid~ColorDefinition\n * @type Object\n *\n * @property {String} color String representing a color.\n * It is used as value of background-color style in {@link module:ui/colorgrid/colortile~ColorTileView}.\n * @property {String} label String used as label for {@link module:ui/colorgrid/colortile~ColorTileView}.\n * @property {Object} options Additional options passed to create a {@link module:ui/colorgrid/colortile~ColorTileView}.\n * @property {Boolean} options.hasBorder A flag that indicates if special a CSS class should be added\n * to {@link module:ui/colorgrid/colortile~ColorTileView}, which renders a border around it.\n */\n"]},"metadata":{},"sourceType":"module"}