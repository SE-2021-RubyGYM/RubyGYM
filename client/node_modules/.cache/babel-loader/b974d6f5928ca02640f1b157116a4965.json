{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/insertoperation\n */\nimport Operation from './operation';\nimport Position from '../position';\nimport NodeList from '../nodelist';\nimport MoveOperation from './moveoperation';\nimport { _insert, _normalizeNodes } from './utils';\nimport Text from '../text';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Operation to insert one or more nodes at given position in the model.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class InsertOperation extends Operation {\n  /**\n   * Creates an insert operation.\n   *\n   * @param {module:engine/model/position~Position} position Position of insertion.\n   * @param {module:engine/model/node~NodeSet} nodes The list of nodes to be inserted.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(position, nodes, baseVersion) {\n    super(baseVersion);\n    /**\n     * Position of insertion.\n     *\n     * @readonly\n     * @member {module:engine/model/position~Position} module:engine/model/operation/insertoperation~InsertOperation#position\n     */\n\n    this.position = position.clone();\n    this.position.stickiness = 'toNone';\n    /**\n     * List of nodes to insert.\n     *\n     * @readonly\n     * @member {module:engine/model/nodelist~NodeList} module:engine/model/operation/insertoperation~InsertOperation#nodeList\n     */\n\n    this.nodes = new NodeList(_normalizeNodes(nodes));\n    /**\n     * Flag deciding how the operation should be transformed. If set to `true`, nodes might get additional attributes\n     * during operational transformation. This happens when the operation insertion position is inside of a range\n     * where attributes have changed.\n     *\n     * @member {Boolean} module:engine/model/operation/insertoperation~InsertOperation#shouldReceiveAttributes\n     */\n\n    this.shouldReceiveAttributes = false;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    return 'insert';\n  }\n  /**\n   * Total offset size of inserted nodes.\n   *\n   * @returns {Number}\n   */\n\n\n  get howMany() {\n    return this.nodes.maxOffset;\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/insertoperation~InsertOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    const nodes = new NodeList([...this.nodes].map(node => node._clone(true)));\n    const insert = new InsertOperation(this.position, nodes, this.baseVersion);\n    insert.shouldReceiveAttributes = this.shouldReceiveAttributes;\n    return insert;\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n   */\n\n\n  getReversed() {\n    const graveyard = this.position.root.document.graveyard;\n    const gyPosition = new Position(graveyard, [0]);\n    return new MoveOperation(this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _validate() {\n    const targetElement = this.position.parent;\n\n    if (!targetElement || targetElement.maxOffset < this.position.offset) {\n      /**\n       * Insertion position is invalid.\n       *\n       * @error insert-operation-position-invalid\n       */\n      throw new CKEditorError('insert-operation-position-invalid', this);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    // What happens here is that we want original nodes be passed to writer because we want original nodes\n    // to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\n    // to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\n    // get children. It is important that InsertOperation has the copy of original nodes in intact state.\n    const originalNodes = this.nodes;\n    this.nodes = new NodeList([...originalNodes].map(node => node._clone(true)));\n\n    _insert(this.position, originalNodes);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.position = this.position.toJSON();\n    json.nodes = this.nodes.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'InsertOperation';\n  }\n  /**\n   * Creates `InsertOperation` object from deserilized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/insertoperation~InsertOperation}\n   */\n\n\n  static fromJSON(json, document) {\n    const children = [];\n\n    for (const child of json.nodes) {\n      if (child.name) {\n        // If child has name property, it is an Element.\n        children.push(Element.fromJSON(child));\n      } else {\n        // Otherwise, it is a Text node.\n        children.push(Text.fromJSON(child));\n      }\n    }\n\n    const insert = new InsertOperation(Position.fromJSON(json.position, document), children, json.baseVersion);\n    insert.shouldReceiveAttributes = json.shouldReceiveAttributes;\n    return insert;\n  } // @if CK_DEBUG_ENGINE // toString() {\n  // @if CK_DEBUG_ENGINE // \tconst nodeString = this.nodes.length > 1 ? `[ ${ this.nodes.length } ]` : this.nodes.getNode( 0 );\n  // @if CK_DEBUG_ENGINE //\treturn `InsertOperation( ${ this.baseVersion } ): ${ nodeString } -> ${ this.position }`;\n  // @if CK_DEBUG_ENGINE // }\n\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js"],"names":["Operation","Position","NodeList","MoveOperation","_insert","_normalizeNodes","Text","Element","CKEditorError","InsertOperation","constructor","position","nodes","baseVersion","clone","stickiness","shouldReceiveAttributes","type","howMany","maxOffset","map","node","_clone","insert","getReversed","graveyard","root","document","gyPosition","_validate","targetElement","parent","offset","_execute","originalNodes","toJSON","json","className","fromJSON","children","child","name","push"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/insertoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport NodeList from '../nodelist';\nimport MoveOperation from './moveoperation';\nimport { _insert, _normalizeNodes } from './utils';\nimport Text from '../text';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to insert one or more nodes at given position in the model.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class InsertOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of insertion.\n\t * @param {module:engine/model/node~NodeSet} nodes The list of nodes to be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, nodes, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position of insertion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/insertoperation~InsertOperation#position\n\t\t */\n\t\tthis.position = position.clone();\n\t\tthis.position.stickiness = 'toNone';\n\n\t\t/**\n\t\t * List of nodes to insert.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/operation/insertoperation~InsertOperation#nodeList\n\t\t */\n\t\tthis.nodes = new NodeList( _normalizeNodes( nodes ) );\n\n\t\t/**\n\t\t * Flag deciding how the operation should be transformed. If set to `true`, nodes might get additional attributes\n\t\t * during operational transformation. This happens when the operation insertion position is inside of a range\n\t\t * where attributes have changed.\n\t\t *\n\t\t * @member {Boolean} module:engine/model/operation/insertoperation~InsertOperation#shouldReceiveAttributes\n\t\t */\n\t\tthis.shouldReceiveAttributes = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'insert';\n\t}\n\n\t/**\n\t * Total offset size of inserted nodes.\n\t *\n\t * @returns {Number}\n\t */\n\tget howMany() {\n\t\treturn this.nodes.maxOffset;\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst nodes = new NodeList( [ ...this.nodes ].map( node => node._clone( true ) ) );\n\t\tconst insert = new InsertOperation( this.position, nodes, this.baseVersion );\n\n\t\tinsert.shouldReceiveAttributes = this.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.position.root.document.graveyard;\n\t\tconst gyPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MoveOperation( this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst targetElement = this.position.parent;\n\n\t\tif ( !targetElement || targetElement.maxOffset < this.position.offset ) {\n\t\t\t/**\n\t\t\t * Insertion position is invalid.\n\t\t\t *\n\t\t\t * @error insert-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'insert-operation-position-invalid',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// What happens here is that we want original nodes be passed to writer because we want original nodes\n\t\t// to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\n\t\t// to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\n\t\t// get children. It is important that InsertOperation has the copy of original nodes in intact state.\n\t\tconst originalNodes = this.nodes;\n\t\tthis.nodes = new NodeList( [ ...originalNodes ].map( node => node._clone( true ) ) );\n\n\t\t_insert( this.position, originalNodes );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.position = this.position.toJSON();\n\t\tjson.nodes = this.nodes.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'InsertOperation';\n\t}\n\n\t/**\n\t * Creates `InsertOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json.nodes ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\tconst insert = new InsertOperation( Position.fromJSON( json.position, document ), children, json.baseVersion );\n\t\tinsert.shouldReceiveAttributes = json.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \tconst nodeString = this.nodes.length > 1 ? `[ ${ this.nodes.length } ]` : this.nodes.getNode( 0 );\n\n\t// @if CK_DEBUG_ENGINE //\treturn `InsertOperation( ${ this.baseVersion } ): ${ nodeString } -> ${ this.position }`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]},"metadata":{},"sourceType":"module"}