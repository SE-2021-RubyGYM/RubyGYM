{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editingkeystrokehandler\n */\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n/**\n * A keystroke handler for editor editing. Its instance is available\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\n * can register their keystrokes.\n *\n * E.g. an undo plugin would do this:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+Z', 'undo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Y', 'redo' );\n *\n * @extends module:utils/keystrokehandler~KeystrokeHandler\n */\n\nexport default class EditingKeystrokeHandler extends KeystrokeHandler {\n  /**\n   * Creates an instance of the keystroke handler.\n   *\n   * @param {module:core/editor/editor~Editor} editor\n   */\n  constructor(editor) {\n    super();\n    /**\n     * The editor instance.\n     *\n     * @readonly\n     * @member {module:core/editor/editor~Editor}\n     */\n\n    this.editor = editor;\n  }\n  /**\n   * Registers a handler for the specified keystroke.\n   *\n   * The handler can be specified as a command name or a callback.\n   *\n   * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n   * the {@link module:utils/keyboard~parseKeystroke} function.\n   * @param {Function|String} callback If a string is passed, then the keystroke will\n   * {@link module:core/editor/editor~Editor#execute execute a command}.\n   * If a function, then it will be called with the\n   * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n   * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\n   * @param {Object} [options={}] Additional options.\n   * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n   * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n   * are called in the order they were added.\n   */\n\n\n  set(keystroke, callback) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (typeof callback == 'string') {\n      const commandName = callback;\n\n      callback = (evtData, cancel) => {\n        this.editor.execute(commandName);\n        cancel();\n      };\n    }\n\n    super.set(keystroke, callback, options);\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-core/src/editingkeystrokehandler.js"],"names":["KeystrokeHandler","EditingKeystrokeHandler","constructor","editor","set","keystroke","callback","options","commandName","evtData","cancel","execute"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,gBAAP,MAA6B,gDAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,uBAAN,SAAsCD,gBAAtC,CAAuD;AACrE;AACD;AACA;AACA;AACA;AACCE,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKA,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,GAAG,CAAEC,SAAF,EAAaC,QAAb,EAAsC;AAAA,QAAfC,OAAe,uEAAL,EAAK;;AACxC,QAAK,OAAOD,QAAP,IAAmB,QAAxB,EAAmC;AAClC,YAAME,WAAW,GAAGF,QAApB;;AAEAA,MAAAA,QAAQ,GAAG,CAAEG,OAAF,EAAWC,MAAX,KAAuB;AACjC,aAAKP,MAAL,CAAYQ,OAAZ,CAAqBH,WAArB;AACAE,QAAAA,MAAM;AACN,OAHD;AAIA;;AAED,UAAMN,GAAN,CAAWC,SAAX,EAAsBC,QAAtB,EAAgCC,OAAhC;AACA;;AA9CoE","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editingkeystrokehandler\n */\n\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\n/**\n * A keystroke handler for editor editing. Its instance is available\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\n * can register their keystrokes.\n *\n * E.g. an undo plugin would do this:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+Z', 'undo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Y', 'redo' );\n *\n * @extends module:utils/keystrokehandler~KeystrokeHandler\n */\nexport default class EditingKeystrokeHandler extends KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The editor instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * The handler can be specified as a command name or a callback.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function|String} callback If a string is passed, then the keystroke will\n\t * {@link module:core/editor/editor~Editor#execute execute a command}.\n\t * If a function, then it will be called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tif ( typeof callback == 'string' ) {\n\t\t\tconst commandName = callback;\n\n\t\t\tcallback = ( evtData, cancel ) => {\n\t\t\t\tthis.editor.execute( commandName );\n\t\t\t\tcancel();\n\t\t\t};\n\t\t}\n\n\t\tsuper.set( keystroke, callback, options );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}