{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload/imageuploadprogress\n */\n\n/* globals setTimeout */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { FileRepository } from 'ckeditor5/src/upload';\nimport uploadingPlaceholder from '../../theme/icons/image_placeholder.svg';\nimport '../../theme/imageuploadprogress.css';\nimport '../../theme/imageuploadicon.css';\nimport '../../theme/imageuploadloader.css';\n/**\n * The image upload progress plugin.\n * It shows a placeholder when the image is read from the disk and a progress bar while the image is uploading.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageUploadProgress extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ImageUploadProgress';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    /**\n     * The image placeholder that is displayed before real image data can be accessed.\n     *\n     * @protected\n     * @member {String} #placeholder\n     */\n\n    this.placeholder = 'data:image/svg+xml;utf8,' + encodeURIComponent(uploadingPlaceholder);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    var _this = this;\n\n    const editor = this.editor; // Upload status change - update image's view according to that status.\n\n    if (editor.plugins.has('ImageBlockEditing')) {\n      editor.editing.downcastDispatcher.on('attribute:uploadStatus:imageBlock', function () {\n        return _this.uploadStatusChange(...arguments);\n      });\n    }\n\n    if (editor.plugins.has('ImageInlineEditing')) {\n      editor.editing.downcastDispatcher.on('attribute:uploadStatus:imageInline', function () {\n        return _this.uploadStatusChange(...arguments);\n      });\n    }\n  }\n  /**\n   * This method is called each time the image `uploadStatus` attribute is changed.\n   *\n   * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n   * @param {Object} data Additional information about the change.\n   * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n   */\n\n\n  uploadStatusChange(evt, data, conversionApi) {\n    const editor = this.editor;\n    const modelImage = data.item;\n    const uploadId = modelImage.getAttribute('uploadId');\n\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    const imageUtils = editor.plugins.get('ImageUtils');\n    const fileRepository = editor.plugins.get(FileRepository);\n    const status = uploadId ? data.attributeNewValue : null;\n    const placeholder = this.placeholder;\n    const viewFigure = editor.editing.mapper.toViewElement(modelImage);\n    const viewWriter = conversionApi.writer;\n\n    if (status == 'reading') {\n      // Start \"appearing\" effect and show placeholder with infinite progress bar on the top\n      // while image is read from disk.\n      _startAppearEffect(viewFigure, viewWriter);\n\n      _showPlaceholder(imageUtils, placeholder, viewFigure, viewWriter);\n\n      return;\n    } // Show progress bar on the top of the image when image is uploading.\n\n\n    if (status == 'uploading') {\n      const loader = fileRepository.loaders.get(uploadId); // Start appear effect if needed - see https://github.com/ckeditor/ckeditor5-image/issues/191.\n\n      _startAppearEffect(viewFigure, viewWriter);\n\n      if (!loader) {\n        // There is no loader associated with uploadId - this means that image came from external changes.\n        // In such cases we still want to show the placeholder until image is fully uploaded.\n        // Show placeholder if needed - see https://github.com/ckeditor/ckeditor5-image/issues/191.\n        _showPlaceholder(imageUtils, placeholder, viewFigure, viewWriter);\n      } else {\n        // Hide placeholder and initialize progress bar showing upload progress.\n        _hidePlaceholder(viewFigure, viewWriter);\n\n        _showProgressBar(viewFigure, viewWriter, loader, editor.editing.view);\n\n        _displayLocalImage(imageUtils, viewFigure, viewWriter, loader);\n      }\n\n      return;\n    }\n\n    if (status == 'complete' && fileRepository.loaders.get(uploadId)) {\n      _showCompleteIcon(viewFigure, viewWriter, editor.editing.view);\n    } // Clean up.\n\n\n    _hideProgressBar(viewFigure, viewWriter);\n\n    _hidePlaceholder(viewFigure, viewWriter);\n\n    _stopAppearEffect(viewFigure, viewWriter);\n  }\n\n} // Adds ck-appear class to the image figure if one is not already applied.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\nfunction _startAppearEffect(viewFigure, writer) {\n  if (!viewFigure.hasClass('ck-appear')) {\n    writer.addClass('ck-appear', viewFigure);\n  }\n} // Removes ck-appear class to the image figure if one is not already removed.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\n\nfunction _stopAppearEffect(viewFigure, writer) {\n  writer.removeClass('ck-appear', viewFigure);\n} // Shows placeholder together with infinite progress bar on given image figure.\n//\n// @param {module:image/imageutils~ImageUtils} imageUtils\n// @param {String} Data-uri with a svg placeholder.\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\n\nfunction _showPlaceholder(imageUtils, placeholder, viewFigure, writer) {\n  if (!viewFigure.hasClass('ck-image-upload-placeholder')) {\n    writer.addClass('ck-image-upload-placeholder', viewFigure);\n  }\n\n  const viewImg = imageUtils.findViewImgElement(viewFigure);\n\n  if (viewImg.getAttribute('src') !== placeholder) {\n    writer.setAttribute('src', placeholder, viewImg);\n  }\n\n  if (!_getUIElement(viewFigure, 'placeholder')) {\n    writer.insert(writer.createPositionAfter(viewImg), _createPlaceholder(writer));\n  }\n} // Removes placeholder together with infinite progress bar on given image figure.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\n\nfunction _hidePlaceholder(viewFigure, writer) {\n  if (viewFigure.hasClass('ck-image-upload-placeholder')) {\n    writer.removeClass('ck-image-upload-placeholder', viewFigure);\n  }\n\n  _removeUIElement(viewFigure, writer, 'placeholder');\n} // Shows progress bar displaying upload progress.\n// Attaches it to the file loader to update when upload percentace is changed.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:upload/filerepository~FileLoader} loader\n// @param {module:engine/view/view~View} view\n\n\nfunction _showProgressBar(viewFigure, writer, loader, view) {\n  const progressBar = _createProgressBar(writer);\n\n  writer.insert(writer.createPositionAt(viewFigure, 'end'), progressBar); // Update progress bar width when uploadedPercent is changed.\n\n  loader.on('change:uploadedPercent', (evt, name, value) => {\n    view.change(writer => {\n      writer.setStyle('width', value + '%', progressBar);\n    });\n  });\n} // Hides upload progress bar.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\n\nfunction _hideProgressBar(viewFigure, writer) {\n  _removeUIElement(viewFigure, writer, 'progressBar');\n} // Shows complete icon and hides after a certain amount of time.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/view~View} view\n\n\nfunction _showCompleteIcon(viewFigure, writer, view) {\n  const completeIcon = writer.createUIElement('div', {\n    class: 'ck-image-upload-complete-icon'\n  });\n  writer.insert(writer.createPositionAt(viewFigure, 'end'), completeIcon);\n  setTimeout(() => {\n    view.change(writer => writer.remove(writer.createRangeOn(completeIcon)));\n  }, 3000);\n} // Create progress bar element using {@link module:engine/view/uielement~UIElement}.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/uielement~UIElement}\n\n\nfunction _createProgressBar(writer) {\n  const progressBar = writer.createUIElement('div', {\n    class: 'ck-progress-bar'\n  });\n  writer.setCustomProperty('progressBar', true, progressBar);\n  return progressBar;\n} // Create placeholder element using {@link module:engine/view/uielement~UIElement}.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/uielement~UIElement}\n\n\nfunction _createPlaceholder(writer) {\n  const placeholder = writer.createUIElement('div', {\n    class: 'ck-upload-placeholder-loader'\n  });\n  writer.setCustomProperty('placeholder', true, placeholder);\n  return placeholder;\n} // Returns {@link module:engine/view/uielement~UIElement} of given unique property from image figure element.\n// Returns `undefined` if element is not found.\n//\n// @private\n// @param {module:engine/view/element~Element} imageFigure\n// @param {String} uniqueProperty\n// @returns {module:engine/view/uielement~UIElement|undefined}\n\n\nfunction _getUIElement(imageFigure, uniqueProperty) {\n  for (const child of imageFigure.getChildren()) {\n    if (child.getCustomProperty(uniqueProperty)) {\n      return child;\n    }\n  }\n} // Removes {@link module:engine/view/uielement~UIElement} of given unique property from image figure element.\n//\n// @private\n// @param {module:engine/view/element~Element} imageFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {String} uniqueProperty\n\n\nfunction _removeUIElement(viewFigure, writer, uniqueProperty) {\n  const element = _getUIElement(viewFigure, uniqueProperty);\n\n  if (element) {\n    writer.remove(writer.createRangeOn(element));\n  }\n} // Displays local data from file loader.\n//\n// @param {module:image/imageutils~ImageUtils} imageUtils\n// @param {module:engine/view/element~Element} imageFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:upload/filerepository~FileLoader} loader\n\n\nfunction _displayLocalImage(imageUtils, viewFigure, writer, loader) {\n  if (loader.data) {\n    const viewImg = imageUtils.findViewImgElement(viewFigure);\n    writer.setAttribute('src', loader.data, viewImg);\n  }\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-image/src/imageupload/imageuploadprogress.js"],"names":["Plugin","FileRepository","uploadingPlaceholder","ImageUploadProgress","pluginName","constructor","editor","placeholder","encodeURIComponent","init","plugins","has","editing","downcastDispatcher","on","uploadStatusChange","evt","data","conversionApi","modelImage","item","uploadId","getAttribute","consumable","consume","name","imageUtils","get","fileRepository","status","attributeNewValue","viewFigure","mapper","toViewElement","viewWriter","writer","_startAppearEffect","_showPlaceholder","loader","loaders","_hidePlaceholder","_showProgressBar","view","_displayLocalImage","_showCompleteIcon","_hideProgressBar","_stopAppearEffect","hasClass","addClass","removeClass","viewImg","findViewImgElement","setAttribute","_getUIElement","insert","createPositionAfter","_createPlaceholder","_removeUIElement","progressBar","_createProgressBar","createPositionAt","value","change","setStyle","completeIcon","createUIElement","class","setTimeout","remove","createRangeOn","setCustomProperty","imageFigure","uniqueProperty","child","getChildren","getCustomProperty","element"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,cAAT,QAA+B,sBAA/B;AAEA,OAAOC,oBAAP,MAAiC,yCAAjC;AAEA,OAAO,qCAAP;AACA,OAAO,iCAAP;AACA,OAAO,mCAAP;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,mBAAN,SAAkCH,MAAlC,CAAyC;AACvD;AACD;AACA;AACsB,aAAVI,UAAU,GAAG;AACvB,WAAO,qBAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,WAAL,GAAmB,6BAA6BC,kBAAkB,CAAEN,oBAAF,CAAlE;AACA;AAED;AACD;AACA;;;AACCO,EAAAA,IAAI,GAAG;AAAA;;AACN,UAAMH,MAAM,GAAG,KAAKA,MAApB,CADM,CAGN;;AACA,QAAKA,MAAM,CAACI,OAAP,CAAeC,GAAf,CAAoB,mBAApB,CAAL,EAAiD;AAChDL,MAAAA,MAAM,CAACM,OAAP,CAAeC,kBAAf,CAAkCC,EAAlC,CAAsC,mCAAtC,EAA2E;AAAA,eAAe,KAAI,CAACC,kBAAL,CAAyB,YAAzB,CAAf;AAAA,OAA3E;AACA;;AAED,QAAKT,MAAM,CAACI,OAAP,CAAeC,GAAf,CAAoB,oBAApB,CAAL,EAAkD;AACjDL,MAAAA,MAAM,CAACM,OAAP,CAAeC,kBAAf,CAAkCC,EAAlC,CAAsC,oCAAtC,EAA4E;AAAA,eAAe,KAAI,CAACC,kBAAL,CAAyB,YAAzB,CAAf;AAAA,OAA5E;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCA,EAAAA,kBAAkB,CAAEC,GAAF,EAAOC,IAAP,EAAaC,aAAb,EAA6B;AAC9C,UAAMZ,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMa,UAAU,GAAGF,IAAI,CAACG,IAAxB;AACA,UAAMC,QAAQ,GAAGF,UAAU,CAACG,YAAX,CAAyB,UAAzB,CAAjB;;AAEA,QAAK,CAACJ,aAAa,CAACK,UAAd,CAAyBC,OAAzB,CAAkCP,IAAI,CAACG,IAAvC,EAA6CJ,GAAG,CAACS,IAAjD,CAAN,EAAgE;AAC/D;AACA;;AAED,UAAMC,UAAU,GAAGpB,MAAM,CAACI,OAAP,CAAeiB,GAAf,CAAoB,YAApB,CAAnB;AACA,UAAMC,cAAc,GAAGtB,MAAM,CAACI,OAAP,CAAeiB,GAAf,CAAoB1B,cAApB,CAAvB;AACA,UAAM4B,MAAM,GAAGR,QAAQ,GAAGJ,IAAI,CAACa,iBAAR,GAA4B,IAAnD;AACA,UAAMvB,WAAW,GAAG,KAAKA,WAAzB;AACA,UAAMwB,UAAU,GAAGzB,MAAM,CAACM,OAAP,CAAeoB,MAAf,CAAsBC,aAAtB,CAAqCd,UAArC,CAAnB;AACA,UAAMe,UAAU,GAAGhB,aAAa,CAACiB,MAAjC;;AAEA,QAAKN,MAAM,IAAI,SAAf,EAA2B;AAC1B;AACA;AACAO,MAAAA,kBAAkB,CAAEL,UAAF,EAAcG,UAAd,CAAlB;;AACAG,MAAAA,gBAAgB,CAAEX,UAAF,EAAcnB,WAAd,EAA2BwB,UAA3B,EAAuCG,UAAvC,CAAhB;;AAEA;AACA,KAvB6C,CAyB9C;;;AACA,QAAKL,MAAM,IAAI,WAAf,EAA6B;AAC5B,YAAMS,MAAM,GAAGV,cAAc,CAACW,OAAf,CAAuBZ,GAAvB,CAA4BN,QAA5B,CAAf,CAD4B,CAG5B;;AACAe,MAAAA,kBAAkB,CAAEL,UAAF,EAAcG,UAAd,CAAlB;;AAEA,UAAK,CAACI,MAAN,EAAe;AACd;AACA;AACA;AACAD,QAAAA,gBAAgB,CAAEX,UAAF,EAAcnB,WAAd,EAA2BwB,UAA3B,EAAuCG,UAAvC,CAAhB;AACA,OALD,MAKO;AACN;AACAM,QAAAA,gBAAgB,CAAET,UAAF,EAAcG,UAAd,CAAhB;;AACAO,QAAAA,gBAAgB,CAAEV,UAAF,EAAcG,UAAd,EAA0BI,MAA1B,EAAkChC,MAAM,CAACM,OAAP,CAAe8B,IAAjD,CAAhB;;AACAC,QAAAA,kBAAkB,CAAEjB,UAAF,EAAcK,UAAd,EAA0BG,UAA1B,EAAsCI,MAAtC,CAAlB;AACA;;AAED;AACA;;AAED,QAAKT,MAAM,IAAI,UAAV,IAAwBD,cAAc,CAACW,OAAf,CAAuBZ,GAAvB,CAA4BN,QAA5B,CAA7B,EAAsE;AACrEuB,MAAAA,iBAAiB,CAAEb,UAAF,EAAcG,UAAd,EAA0B5B,MAAM,CAACM,OAAP,CAAe8B,IAAzC,CAAjB;AACA,KAjD6C,CAmD9C;;;AACAG,IAAAA,gBAAgB,CAAEd,UAAF,EAAcG,UAAd,CAAhB;;AACAM,IAAAA,gBAAgB,CAAET,UAAF,EAAcG,UAAd,CAAhB;;AACAY,IAAAA,iBAAiB,CAAEf,UAAF,EAAcG,UAAd,CAAjB;AACA;;AArGsD,C,CAwGxD;AACA;AACA;AACA;;AACA,SAASE,kBAAT,CAA6BL,UAA7B,EAAyCI,MAAzC,EAAkD;AACjD,MAAK,CAACJ,UAAU,CAACgB,QAAX,CAAqB,WAArB,CAAN,EAA2C;AAC1CZ,IAAAA,MAAM,CAACa,QAAP,CAAiB,WAAjB,EAA8BjB,UAA9B;AACA;AACD,C,CAED;AACA;AACA;AACA;;;AACA,SAASe,iBAAT,CAA4Bf,UAA5B,EAAwCI,MAAxC,EAAiD;AAChDA,EAAAA,MAAM,CAACc,WAAP,CAAoB,WAApB,EAAiClB,UAAjC;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,gBAAT,CAA2BX,UAA3B,EAAuCnB,WAAvC,EAAoDwB,UAApD,EAAgEI,MAAhE,EAAyE;AACxE,MAAK,CAACJ,UAAU,CAACgB,QAAX,CAAqB,6BAArB,CAAN,EAA6D;AAC5DZ,IAAAA,MAAM,CAACa,QAAP,CAAiB,6BAAjB,EAAgDjB,UAAhD;AACA;;AAED,QAAMmB,OAAO,GAAGxB,UAAU,CAACyB,kBAAX,CAA+BpB,UAA/B,CAAhB;;AAEA,MAAKmB,OAAO,CAAC5B,YAAR,CAAsB,KAAtB,MAAkCf,WAAvC,EAAqD;AACpD4B,IAAAA,MAAM,CAACiB,YAAP,CAAqB,KAArB,EAA4B7C,WAA5B,EAAyC2C,OAAzC;AACA;;AAED,MAAK,CAACG,aAAa,CAAEtB,UAAF,EAAc,aAAd,CAAnB,EAAmD;AAClDI,IAAAA,MAAM,CAACmB,MAAP,CAAenB,MAAM,CAACoB,mBAAP,CAA4BL,OAA5B,CAAf,EAAsDM,kBAAkB,CAAErB,MAAF,CAAxE;AACA;AACD,C,CAED;AACA;AACA;AACA;;;AACA,SAASK,gBAAT,CAA2BT,UAA3B,EAAuCI,MAAvC,EAAgD;AAC/C,MAAKJ,UAAU,CAACgB,QAAX,CAAqB,6BAArB,CAAL,EAA4D;AAC3DZ,IAAAA,MAAM,CAACc,WAAP,CAAoB,6BAApB,EAAmDlB,UAAnD;AACA;;AAED0B,EAAAA,gBAAgB,CAAE1B,UAAF,EAAcI,MAAd,EAAsB,aAAtB,CAAhB;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,gBAAT,CAA2BV,UAA3B,EAAuCI,MAAvC,EAA+CG,MAA/C,EAAuDI,IAAvD,EAA8D;AAC7D,QAAMgB,WAAW,GAAGC,kBAAkB,CAAExB,MAAF,CAAtC;;AACAA,EAAAA,MAAM,CAACmB,MAAP,CAAenB,MAAM,CAACyB,gBAAP,CAAyB7B,UAAzB,EAAqC,KAArC,CAAf,EAA6D2B,WAA7D,EAF6D,CAI7D;;AACApB,EAAAA,MAAM,CAACxB,EAAP,CAAW,wBAAX,EAAqC,CAAEE,GAAF,EAAOS,IAAP,EAAaoC,KAAb,KAAwB;AAC5DnB,IAAAA,IAAI,CAACoB,MAAL,CAAa3B,MAAM,IAAI;AACtBA,MAAAA,MAAM,CAAC4B,QAAP,CAAiB,OAAjB,EAA0BF,KAAK,GAAG,GAAlC,EAAuCH,WAAvC;AACA,KAFD;AAGA,GAJD;AAKA,C,CAED;AACA;AACA;AACA;;;AACA,SAASb,gBAAT,CAA2Bd,UAA3B,EAAuCI,MAAvC,EAAgD;AAC/CsB,EAAAA,gBAAgB,CAAE1B,UAAF,EAAcI,MAAd,EAAsB,aAAtB,CAAhB;AACA,C,CAED;AACA;AACA;AACA;AACA;;;AACA,SAASS,iBAAT,CAA4Bb,UAA5B,EAAwCI,MAAxC,EAAgDO,IAAhD,EAAuD;AACtD,QAAMsB,YAAY,GAAG7B,MAAM,CAAC8B,eAAP,CAAwB,KAAxB,EAA+B;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAA/B,CAArB;AAEA/B,EAAAA,MAAM,CAACmB,MAAP,CAAenB,MAAM,CAACyB,gBAAP,CAAyB7B,UAAzB,EAAqC,KAArC,CAAf,EAA6DiC,YAA7D;AAEAG,EAAAA,UAAU,CAAE,MAAM;AACjBzB,IAAAA,IAAI,CAACoB,MAAL,CAAa3B,MAAM,IAAIA,MAAM,CAACiC,MAAP,CAAejC,MAAM,CAACkC,aAAP,CAAsBL,YAAtB,CAAf,CAAvB;AACA,GAFS,EAEP,IAFO,CAAV;AAGA,C,CAED;AACA;AACA;AACA;AACA;;;AACA,SAASL,kBAAT,CAA6BxB,MAA7B,EAAsC;AACrC,QAAMuB,WAAW,GAAGvB,MAAM,CAAC8B,eAAP,CAAwB,KAAxB,EAA+B;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAA/B,CAApB;AAEA/B,EAAAA,MAAM,CAACmC,iBAAP,CAA0B,aAA1B,EAAyC,IAAzC,EAA+CZ,WAA/C;AAEA,SAAOA,WAAP;AACA,C,CAED;AACA;AACA;AACA;AACA;;;AACA,SAASF,kBAAT,CAA6BrB,MAA7B,EAAsC;AACrC,QAAM5B,WAAW,GAAG4B,MAAM,CAAC8B,eAAP,CAAwB,KAAxB,EAA+B;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAA/B,CAApB;AAEA/B,EAAAA,MAAM,CAACmC,iBAAP,CAA0B,aAA1B,EAAyC,IAAzC,EAA+C/D,WAA/C;AAEA,SAAOA,WAAP;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8C,aAAT,CAAwBkB,WAAxB,EAAqCC,cAArC,EAAsD;AACrD,OAAM,MAAMC,KAAZ,IAAqBF,WAAW,CAACG,WAAZ,EAArB,EAAiD;AAChD,QAAKD,KAAK,CAACE,iBAAN,CAAyBH,cAAzB,CAAL,EAAiD;AAChD,aAAOC,KAAP;AACA;AACD;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAShB,gBAAT,CAA2B1B,UAA3B,EAAuCI,MAAvC,EAA+CqC,cAA/C,EAAgE;AAC/D,QAAMI,OAAO,GAAGvB,aAAa,CAAEtB,UAAF,EAAcyC,cAAd,CAA7B;;AAEA,MAAKI,OAAL,EAAe;AACdzC,IAAAA,MAAM,CAACiC,MAAP,CAAejC,MAAM,CAACkC,aAAP,CAAsBO,OAAtB,CAAf;AACA;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASjC,kBAAT,CAA6BjB,UAA7B,EAAyCK,UAAzC,EAAqDI,MAArD,EAA6DG,MAA7D,EAAsE;AACrE,MAAKA,MAAM,CAACrB,IAAZ,EAAmB;AAClB,UAAMiC,OAAO,GAAGxB,UAAU,CAACyB,kBAAX,CAA+BpB,UAA/B,CAAhB;AAEAI,IAAAA,MAAM,CAACiB,YAAP,CAAqB,KAArB,EAA4Bd,MAAM,CAACrB,IAAnC,EAAyCiC,OAAzC;AACA;AACD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload/imageuploadprogress\n */\n\n/* globals setTimeout */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { FileRepository } from 'ckeditor5/src/upload';\n\nimport uploadingPlaceholder from '../../theme/icons/image_placeholder.svg';\n\nimport '../../theme/imageuploadprogress.css';\nimport '../../theme/imageuploadicon.css';\nimport '../../theme/imageuploadloader.css';\n\n/**\n * The image upload progress plugin.\n * It shows a placeholder when the image is read from the disk and a progress bar while the image is uploading.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUploadProgress extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageUploadProgress';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The image placeholder that is displayed before real image data can be accessed.\n\t\t *\n\t\t * @protected\n\t\t * @member {String} #placeholder\n\t\t */\n\t\tthis.placeholder = 'data:image/svg+xml;utf8,' + encodeURIComponent( uploadingPlaceholder );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Upload status change - update image's view according to that status.\n\t\tif ( editor.plugins.has( 'ImageBlockEditing' ) ) {\n\t\t\teditor.editing.downcastDispatcher.on( 'attribute:uploadStatus:imageBlock', ( ...args ) => this.uploadStatusChange( ...args ) );\n\t\t}\n\n\t\tif ( editor.plugins.has( 'ImageInlineEditing' ) ) {\n\t\t\teditor.editing.downcastDispatcher.on( 'attribute:uploadStatus:imageInline', ( ...args ) => this.uploadStatusChange( ...args ) );\n\t\t}\n\t}\n\n\t/**\n\t * This method is called each time the image `uploadStatus` attribute is changed.\n\t *\n\t * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n\t */\n\tuploadStatusChange( evt, data, conversionApi ) {\n\t\tconst editor = this.editor;\n\t\tconst modelImage = data.item;\n\t\tconst uploadId = modelImage.getAttribute( 'uploadId' );\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\t\tconst fileRepository = editor.plugins.get( FileRepository );\n\t\tconst status = uploadId ? data.attributeNewValue : null;\n\t\tconst placeholder = this.placeholder;\n\t\tconst viewFigure = editor.editing.mapper.toViewElement( modelImage );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\tif ( status == 'reading' ) {\n\t\t\t// Start \"appearing\" effect and show placeholder with infinite progress bar on the top\n\t\t\t// while image is read from disk.\n\t\t\t_startAppearEffect( viewFigure, viewWriter );\n\t\t\t_showPlaceholder( imageUtils, placeholder, viewFigure, viewWriter );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Show progress bar on the top of the image when image is uploading.\n\t\tif ( status == 'uploading' ) {\n\t\t\tconst loader = fileRepository.loaders.get( uploadId );\n\n\t\t\t// Start appear effect if needed - see https://github.com/ckeditor/ckeditor5-image/issues/191.\n\t\t\t_startAppearEffect( viewFigure, viewWriter );\n\n\t\t\tif ( !loader ) {\n\t\t\t\t// There is no loader associated with uploadId - this means that image came from external changes.\n\t\t\t\t// In such cases we still want to show the placeholder until image is fully uploaded.\n\t\t\t\t// Show placeholder if needed - see https://github.com/ckeditor/ckeditor5-image/issues/191.\n\t\t\t\t_showPlaceholder( imageUtils, placeholder, viewFigure, viewWriter );\n\t\t\t} else {\n\t\t\t\t// Hide placeholder and initialize progress bar showing upload progress.\n\t\t\t\t_hidePlaceholder( viewFigure, viewWriter );\n\t\t\t\t_showProgressBar( viewFigure, viewWriter, loader, editor.editing.view );\n\t\t\t\t_displayLocalImage( imageUtils, viewFigure, viewWriter, loader );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( status == 'complete' && fileRepository.loaders.get( uploadId ) ) {\n\t\t\t_showCompleteIcon( viewFigure, viewWriter, editor.editing.view );\n\t\t}\n\n\t\t// Clean up.\n\t\t_hideProgressBar( viewFigure, viewWriter );\n\t\t_hidePlaceholder( viewFigure, viewWriter );\n\t\t_stopAppearEffect( viewFigure, viewWriter );\n\t}\n}\n\n// Adds ck-appear class to the image figure if one is not already applied.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _startAppearEffect( viewFigure, writer ) {\n\tif ( !viewFigure.hasClass( 'ck-appear' ) ) {\n\t\twriter.addClass( 'ck-appear', viewFigure );\n\t}\n}\n\n// Removes ck-appear class to the image figure if one is not already removed.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _stopAppearEffect( viewFigure, writer ) {\n\twriter.removeClass( 'ck-appear', viewFigure );\n}\n\n// Shows placeholder together with infinite progress bar on given image figure.\n//\n// @param {module:image/imageutils~ImageUtils} imageUtils\n// @param {String} Data-uri with a svg placeholder.\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _showPlaceholder( imageUtils, placeholder, viewFigure, writer ) {\n\tif ( !viewFigure.hasClass( 'ck-image-upload-placeholder' ) ) {\n\t\twriter.addClass( 'ck-image-upload-placeholder', viewFigure );\n\t}\n\n\tconst viewImg = imageUtils.findViewImgElement( viewFigure );\n\n\tif ( viewImg.getAttribute( 'src' ) !== placeholder ) {\n\t\twriter.setAttribute( 'src', placeholder, viewImg );\n\t}\n\n\tif ( !_getUIElement( viewFigure, 'placeholder' ) ) {\n\t\twriter.insert( writer.createPositionAfter( viewImg ), _createPlaceholder( writer ) );\n\t}\n}\n\n// Removes placeholder together with infinite progress bar on given image figure.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _hidePlaceholder( viewFigure, writer ) {\n\tif ( viewFigure.hasClass( 'ck-image-upload-placeholder' ) ) {\n\t\twriter.removeClass( 'ck-image-upload-placeholder', viewFigure );\n\t}\n\n\t_removeUIElement( viewFigure, writer, 'placeholder' );\n}\n\n// Shows progress bar displaying upload progress.\n// Attaches it to the file loader to update when upload percentace is changed.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:upload/filerepository~FileLoader} loader\n// @param {module:engine/view/view~View} view\nfunction _showProgressBar( viewFigure, writer, loader, view ) {\n\tconst progressBar = _createProgressBar( writer );\n\twriter.insert( writer.createPositionAt( viewFigure, 'end' ), progressBar );\n\n\t// Update progress bar width when uploadedPercent is changed.\n\tloader.on( 'change:uploadedPercent', ( evt, name, value ) => {\n\t\tview.change( writer => {\n\t\t\twriter.setStyle( 'width', value + '%', progressBar );\n\t\t} );\n\t} );\n}\n\n// Hides upload progress bar.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction _hideProgressBar( viewFigure, writer ) {\n\t_removeUIElement( viewFigure, writer, 'progressBar' );\n}\n\n// Shows complete icon and hides after a certain amount of time.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/view~View} view\nfunction _showCompleteIcon( viewFigure, writer, view ) {\n\tconst completeIcon = writer.createUIElement( 'div', { class: 'ck-image-upload-complete-icon' } );\n\n\twriter.insert( writer.createPositionAt( viewFigure, 'end' ), completeIcon );\n\n\tsetTimeout( () => {\n\t\tview.change( writer => writer.remove( writer.createRangeOn( completeIcon ) ) );\n\t}, 3000 );\n}\n\n// Create progress bar element using {@link module:engine/view/uielement~UIElement}.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/uielement~UIElement}\nfunction _createProgressBar( writer ) {\n\tconst progressBar = writer.createUIElement( 'div', { class: 'ck-progress-bar' } );\n\n\twriter.setCustomProperty( 'progressBar', true, progressBar );\n\n\treturn progressBar;\n}\n\n// Create placeholder element using {@link module:engine/view/uielement~UIElement}.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/uielement~UIElement}\nfunction _createPlaceholder( writer ) {\n\tconst placeholder = writer.createUIElement( 'div', { class: 'ck-upload-placeholder-loader' } );\n\n\twriter.setCustomProperty( 'placeholder', true, placeholder );\n\n\treturn placeholder;\n}\n\n// Returns {@link module:engine/view/uielement~UIElement} of given unique property from image figure element.\n// Returns `undefined` if element is not found.\n//\n// @private\n// @param {module:engine/view/element~Element} imageFigure\n// @param {String} uniqueProperty\n// @returns {module:engine/view/uielement~UIElement|undefined}\nfunction _getUIElement( imageFigure, uniqueProperty ) {\n\tfor ( const child of imageFigure.getChildren() ) {\n\t\tif ( child.getCustomProperty( uniqueProperty ) ) {\n\t\t\treturn child;\n\t\t}\n\t}\n}\n\n// Removes {@link module:engine/view/uielement~UIElement} of given unique property from image figure element.\n//\n// @private\n// @param {module:engine/view/element~Element} imageFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {String} uniqueProperty\nfunction _removeUIElement( viewFigure, writer, uniqueProperty ) {\n\tconst element = _getUIElement( viewFigure, uniqueProperty );\n\n\tif ( element ) {\n\t\twriter.remove( writer.createRangeOn( element ) );\n\t}\n}\n\n// Displays local data from file loader.\n//\n// @param {module:image/imageutils~ImageUtils} imageUtils\n// @param {module:engine/view/element~Element} imageFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:upload/filerepository~FileLoader} loader\nfunction _displayLocalImage( imageUtils, viewFigure, writer, loader ) {\n\tif ( loader.data ) {\n\t\tconst viewImg = imageUtils.findViewImgElement( viewFigure );\n\n\t\twriter.setAttribute( 'src', loader.data, viewImg );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}