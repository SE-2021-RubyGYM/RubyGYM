{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertDataToEntities = convertDataToEntities;\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\nexports.convertTreeToData = convertTreeToData;\nexports.fillFieldNames = fillFieldNames;\nexports.flattenTreeData = flattenTreeData;\nexports.getKey = getKey;\nexports.getTreeNodeProps = getTreeNodeProps;\nexports.traverseDataNodes = traverseDataNodes;\nexports.warningWithoutKey = warningWithoutKey;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _omit = _interopRequireDefault(require(\"rc-util/lib/omit\"));\n\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\n\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\n\nvar _util = require(\"../util\");\n\nvar _excluded = [\"children\"];\n\nfunction getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n\nfunction fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      title = _ref.title,\n      key = _ref.key,\n      children = _ref.children;\n\n  return {\n    title: title || 'title',\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\r\n * Warning if TreeNode do not provides key\r\n */\n\n\nfunction warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      (0, _warning.default)(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\r\n * Convert `children` of Tree into `treeData` structure.\r\n */\n\n\nfunction convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = (0, _toArray.default)(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!(0, _util.isTreeNode)(treeNode)) {\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = (0, _objectWithoutProperties2.default)(_treeNode$props, _excluded);\n      var dataNode = (0, _objectSpread2.default)({\n        key: key\n      }, rest);\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\r\n * Flat nest tree data into flatten list. This is used for virtual list render.\r\n * @param treeNodeList Origin data node list\r\n * @param expandedKeys\r\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\r\n */\n\n\nfunction flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n      fieldTitle = _fillFieldNames.title,\n      fieldKey = _fillFieldNames.key,\n      fieldChildren = _fillFieldNames.children;\n\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = (0, _util.getPosition)(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos); // Add FlattenDataNode into list\n\n      var flattenNode = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, (0, _omit.default)(treeNode, [fieldTitle, fieldKey, fieldChildren])), {}, {\n        title: treeNode[fieldTitle],\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat((0, _toConsumableArray2.default)(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat((0, _toConsumableArray2.default)(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\r\n * Traverse all the data by `treeData`.\r\n * Please not use it out of the `rc-tree` since we may refactor this code.\r\n */\n\n\nfunction traverseDataNodes(dataNodes, callback, // To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n\n  if ((0, _typeof2.default)(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n\n  mergedConfig = mergedConfig || {}; // Init config\n\n  var _mergedConfig = mergedConfig,\n      childrenPropName = _mergedConfig.childrenPropName,\n      externalGetKey = _mergedConfig.externalGetKey,\n      fieldNames = _mergedConfig.fieldNames;\n\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n      fieldKey = _fillFieldNames2.key,\n      fieldChildren = _fillFieldNames2.children;\n\n  var mergeChildrenPropName = childrenPropName || fieldChildren; // Get keys\n\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  } // Process\n\n\n  function processNode(node, index, parent) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? (0, _util.getPosition)(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\r\n * Convert `treeData` into entity records.\r\n */\n\n\nfunction convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref2.initWrapper,\n      processEntity = _ref2.processEntity,\n      onProcessFinished = _ref2.onProcessFinished,\n      externalGetKey = _ref2.externalGetKey,\n      childrenPropName = _ref2.childrenPropName,\n      fieldNames = _ref2.fieldNames;\n\n  var\n  /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined; // Init config\n\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\r\n * Get TreeNode props with Tree props.\r\n */\n\n\nfunction getTreeNodeProps(key, _ref3) {\n  var expandedKeys = _ref3.expandedKeys,\n      selectedKeys = _ref3.selectedKeys,\n      loadedKeys = _ref3.loadedKeys,\n      loadingKeys = _ref3.loadingKeys,\n      checkedKeys = _ref3.checkedKeys,\n      halfCheckedKeys = _ref3.halfCheckedKeys,\n      dragOverNodeKey = _ref3.dragOverNodeKey,\n      dropPosition = _ref3.dropPosition,\n      keyEntities = _ref3.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\n\nfunction convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active,\n      eventKey = props.eventKey;\n  var eventData = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    key: eventKey\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}","map":{"version":3,"sources":["C:/Users/nvtung/Các project thực hiện/RubyGYM/client/node_modules/rc-tree/lib/utils/treeUtil.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","convertDataToEntities","convertNodePropsToEventData","convertTreeToData","fillFieldNames","flattenTreeData","getKey","getTreeNodeProps","traverseDataNodes","warningWithoutKey","_typeof2","_toConsumableArray2","_objectSpread2","_objectWithoutProperties2","_omit","_toArray","_warning","_util","_excluded","key","pos","undefined","fieldNames","_ref","title","children","treeData","keys","Map","dig","list","path","arguments","length","forEach","treeNode","default","concat","recordKey","String","has","set","rootNodes","node","treeNodes","map","isTreeNode","_treeNode$props","props","rest","dataNode","parsedChildren","filter","treeNodeList","expandedKeys","_fillFieldNames","fieldTitle","fieldKey","fieldChildren","expandedKeySet","Set","flattenList","parent","index","getPosition","mergedKey","flattenNode","data","isStart","isEnd","push","dataNodes","callback","config","mergedConfig","externalGetKey","_mergedConfig","childrenPropName","_fillFieldNames2","mergeChildrenPropName","syntheticGetKey","processNode","parentPos","level","subNode","subIndex","_ref2","initWrapper","processEntity","onProcessFinished","legacyExternalGetKey","mergedExternalGetKey","posEntities","keyEntities","wrapper","item","entity","_ref3","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","indexOf","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","active","eventData","get"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.convertDataToEntities = convertDataToEntities;\r\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\r\nexports.convertTreeToData = convertTreeToData;\r\nexports.fillFieldNames = fillFieldNames;\r\nexports.flattenTreeData = flattenTreeData;\r\nexports.getKey = getKey;\r\nexports.getTreeNodeProps = getTreeNodeProps;\r\nexports.traverseDataNodes = traverseDataNodes;\r\nexports.warningWithoutKey = warningWithoutKey;\r\n\r\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\r\n\r\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\r\n\r\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\r\n\r\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\r\n\r\nvar _omit = _interopRequireDefault(require(\"rc-util/lib/omit\"));\r\n\r\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\r\n\r\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\r\n\r\nvar _util = require(\"../util\");\r\n\r\nvar _excluded = [\"children\"];\r\n\r\nfunction getKey(key, pos) {\r\n  if (key !== null && key !== undefined) {\r\n    return key;\r\n  }\r\n\r\n  return pos;\r\n}\r\n\r\nfunction fillFieldNames(fieldNames) {\r\n  var _ref = fieldNames || {},\r\n      title = _ref.title,\r\n      key = _ref.key,\r\n      children = _ref.children;\r\n\r\n  return {\r\n    title: title || 'title',\r\n    key: key || 'key',\r\n    children: children || 'children'\r\n  };\r\n}\r\n/**\r\n * Warning if TreeNode do not provides key\r\n */\r\n\r\n\r\nfunction warningWithoutKey(treeData, fieldNames) {\r\n  var keys = new Map();\r\n\r\n  function dig(list) {\r\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\r\n    (list || []).forEach(function (treeNode) {\r\n      var key = treeNode[fieldNames.key];\r\n      var children = treeNode[fieldNames.children];\r\n      (0, _warning.default)(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\r\n      var recordKey = String(key);\r\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\r\n      keys.set(recordKey, true);\r\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\r\n    });\r\n  }\r\n\r\n  dig(treeData);\r\n}\r\n/**\r\n * Convert `children` of Tree into `treeData` structure.\r\n */\r\n\r\n\r\nfunction convertTreeToData(rootNodes) {\r\n  function dig(node) {\r\n    var treeNodes = (0, _toArray.default)(node);\r\n    return treeNodes.map(function (treeNode) {\r\n      // Filter invalidate node\r\n      if (!(0, _util.isTreeNode)(treeNode)) {\r\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\r\n        return null;\r\n      }\r\n\r\n      var key = treeNode.key;\r\n      var _treeNode$props = treeNode.props,\r\n          children = _treeNode$props.children,\r\n          rest = (0, _objectWithoutProperties2.default)(_treeNode$props, _excluded);\r\n      var dataNode = (0, _objectSpread2.default)({\r\n        key: key\r\n      }, rest);\r\n      var parsedChildren = dig(children);\r\n\r\n      if (parsedChildren.length) {\r\n        dataNode.children = parsedChildren;\r\n      }\r\n\r\n      return dataNode;\r\n    }).filter(function (dataNode) {\r\n      return dataNode;\r\n    });\r\n  }\r\n\r\n  return dig(rootNodes);\r\n}\r\n/**\r\n * Flat nest tree data into flatten list. This is used for virtual list render.\r\n * @param treeNodeList Origin data node list\r\n * @param expandedKeys\r\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\r\n */\r\n\r\n\r\nfunction flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\r\n  var _fillFieldNames = fillFieldNames(fieldNames),\r\n      fieldTitle = _fillFieldNames.title,\r\n      fieldKey = _fillFieldNames.key,\r\n      fieldChildren = _fillFieldNames.children;\r\n\r\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\r\n  var flattenList = [];\r\n\r\n  function dig(list) {\r\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\r\n    return list.map(function (treeNode, index) {\r\n      var pos = (0, _util.getPosition)(parent ? parent.pos : '0', index);\r\n      var mergedKey = getKey(treeNode[fieldKey], pos); // Add FlattenDataNode into list\r\n\r\n      var flattenNode = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, (0, _omit.default)(treeNode, [fieldTitle, fieldKey, fieldChildren])), {}, {\r\n        title: treeNode[fieldTitle],\r\n        key: mergedKey,\r\n        parent: parent,\r\n        pos: pos,\r\n        children: null,\r\n        data: treeNode,\r\n        isStart: [].concat((0, _toConsumableArray2.default)(parent ? parent.isStart : []), [index === 0]),\r\n        isEnd: [].concat((0, _toConsumableArray2.default)(parent ? parent.isEnd : []), [index === list.length - 1])\r\n      });\r\n      flattenList.push(flattenNode); // Loop treeNode children\r\n\r\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\r\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\r\n      } else {\r\n        flattenNode.children = [];\r\n      }\r\n\r\n      return flattenNode;\r\n    });\r\n  }\r\n\r\n  dig(treeNodeList);\r\n  return flattenList;\r\n}\r\n/**\r\n * Traverse all the data by `treeData`.\r\n * Please not use it out of the `rc-tree` since we may refactor this code.\r\n */\r\n\r\n\r\nfunction traverseDataNodes(dataNodes, callback, // To avoid too many params, let use config instead of origin param\r\nconfig) {\r\n  var mergedConfig = {};\r\n\r\n  if ((0, _typeof2.default)(config) === 'object') {\r\n    mergedConfig = config;\r\n  } else {\r\n    mergedConfig = {\r\n      externalGetKey: config\r\n    };\r\n  }\r\n\r\n  mergedConfig = mergedConfig || {}; // Init config\r\n\r\n  var _mergedConfig = mergedConfig,\r\n      childrenPropName = _mergedConfig.childrenPropName,\r\n      externalGetKey = _mergedConfig.externalGetKey,\r\n      fieldNames = _mergedConfig.fieldNames;\r\n\r\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\r\n      fieldKey = _fillFieldNames2.key,\r\n      fieldChildren = _fillFieldNames2.children;\r\n\r\n  var mergeChildrenPropName = childrenPropName || fieldChildren; // Get keys\r\n\r\n  var syntheticGetKey;\r\n\r\n  if (externalGetKey) {\r\n    if (typeof externalGetKey === 'string') {\r\n      syntheticGetKey = function syntheticGetKey(node) {\r\n        return node[externalGetKey];\r\n      };\r\n    } else if (typeof externalGetKey === 'function') {\r\n      syntheticGetKey = function syntheticGetKey(node) {\r\n        return externalGetKey(node);\r\n      };\r\n    }\r\n  } else {\r\n    syntheticGetKey = function syntheticGetKey(node, pos) {\r\n      return getKey(node[fieldKey], pos);\r\n    };\r\n  } // Process\r\n\r\n\r\n  function processNode(node, index, parent) {\r\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\r\n    var pos = node ? (0, _util.getPosition)(parent.pos, index) : '0'; // Process node if is not root\r\n\r\n    if (node) {\r\n      var key = syntheticGetKey(node, pos);\r\n      var data = {\r\n        node: node,\r\n        index: index,\r\n        pos: pos,\r\n        key: key,\r\n        parentPos: parent.node ? parent.pos : null,\r\n        level: parent.level + 1\r\n      };\r\n      callback(data);\r\n    } // Process children node\r\n\r\n\r\n    if (children) {\r\n      children.forEach(function (subNode, subIndex) {\r\n        processNode(subNode, subIndex, {\r\n          node: node,\r\n          pos: pos,\r\n          level: parent ? parent.level + 1 : -1\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  processNode(null);\r\n}\r\n/**\r\n * Convert `treeData` into entity records.\r\n */\r\n\r\n\r\nfunction convertDataToEntities(dataNodes) {\r\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n      initWrapper = _ref2.initWrapper,\r\n      processEntity = _ref2.processEntity,\r\n      onProcessFinished = _ref2.onProcessFinished,\r\n      externalGetKey = _ref2.externalGetKey,\r\n      childrenPropName = _ref2.childrenPropName,\r\n      fieldNames = _ref2.fieldNames;\r\n\r\n  var\r\n  /** @deprecated Use `config.externalGetKey` instead */\r\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\r\n  // Init config\r\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\r\n  var posEntities = {};\r\n  var keyEntities = {};\r\n  var wrapper = {\r\n    posEntities: posEntities,\r\n    keyEntities: keyEntities\r\n  };\r\n\r\n  if (initWrapper) {\r\n    wrapper = initWrapper(wrapper) || wrapper;\r\n  }\r\n\r\n  traverseDataNodes(dataNodes, function (item) {\r\n    var node = item.node,\r\n        index = item.index,\r\n        pos = item.pos,\r\n        key = item.key,\r\n        parentPos = item.parentPos,\r\n        level = item.level;\r\n    var entity = {\r\n      node: node,\r\n      index: index,\r\n      key: key,\r\n      pos: pos,\r\n      level: level\r\n    };\r\n    var mergedKey = getKey(key, pos);\r\n    posEntities[pos] = entity;\r\n    keyEntities[mergedKey] = entity; // Fill children\r\n\r\n    entity.parent = posEntities[parentPos];\r\n\r\n    if (entity.parent) {\r\n      entity.parent.children = entity.parent.children || [];\r\n      entity.parent.children.push(entity);\r\n    }\r\n\r\n    if (processEntity) {\r\n      processEntity(entity, wrapper);\r\n    }\r\n  }, {\r\n    externalGetKey: mergedExternalGetKey,\r\n    childrenPropName: childrenPropName,\r\n    fieldNames: fieldNames\r\n  });\r\n\r\n  if (onProcessFinished) {\r\n    onProcessFinished(wrapper);\r\n  }\r\n\r\n  return wrapper;\r\n}\r\n/**\r\n * Get TreeNode props with Tree props.\r\n */\r\n\r\n\r\nfunction getTreeNodeProps(key, _ref3) {\r\n  var expandedKeys = _ref3.expandedKeys,\r\n      selectedKeys = _ref3.selectedKeys,\r\n      loadedKeys = _ref3.loadedKeys,\r\n      loadingKeys = _ref3.loadingKeys,\r\n      checkedKeys = _ref3.checkedKeys,\r\n      halfCheckedKeys = _ref3.halfCheckedKeys,\r\n      dragOverNodeKey = _ref3.dragOverNodeKey,\r\n      dropPosition = _ref3.dropPosition,\r\n      keyEntities = _ref3.keyEntities;\r\n  var entity = keyEntities[key];\r\n  var treeNodeProps = {\r\n    eventKey: key,\r\n    expanded: expandedKeys.indexOf(key) !== -1,\r\n    selected: selectedKeys.indexOf(key) !== -1,\r\n    loaded: loadedKeys.indexOf(key) !== -1,\r\n    loading: loadingKeys.indexOf(key) !== -1,\r\n    checked: checkedKeys.indexOf(key) !== -1,\r\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\r\n    pos: String(entity ? entity.pos : ''),\r\n    // [Legacy] Drag props\r\n    // Since the interaction of drag is changed, the semantic of the props are\r\n    // not accuracy, I think it should be finally removed\r\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\r\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\r\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\r\n  };\r\n  return treeNodeProps;\r\n}\r\n\r\nfunction convertNodePropsToEventData(props) {\r\n  var data = props.data,\r\n      expanded = props.expanded,\r\n      selected = props.selected,\r\n      checked = props.checked,\r\n      loaded = props.loaded,\r\n      loading = props.loading,\r\n      halfChecked = props.halfChecked,\r\n      dragOver = props.dragOver,\r\n      dragOverGapTop = props.dragOverGapTop,\r\n      dragOverGapBottom = props.dragOverGapBottom,\r\n      pos = props.pos,\r\n      active = props.active,\r\n      eventKey = props.eventKey;\r\n  var eventData = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, data), {}, {\r\n    expanded: expanded,\r\n    selected: selected,\r\n    checked: checked,\r\n    loaded: loaded,\r\n    loading: loading,\r\n    halfChecked: halfChecked,\r\n    dragOver: dragOver,\r\n    dragOverGapTop: dragOverGapTop,\r\n    dragOverGapBottom: dragOverGapBottom,\r\n    pos: pos,\r\n    active: active,\r\n    key: eventKey\r\n  });\r\n\r\n  if (!('props' in eventData)) {\r\n    Object.defineProperty(eventData, 'props', {\r\n      get: function get() {\r\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\r\n        return props;\r\n      }\r\n    });\r\n  }\r\n\r\n  return eventData;\r\n}"]},"metadata":{},"sourceType":"script"}