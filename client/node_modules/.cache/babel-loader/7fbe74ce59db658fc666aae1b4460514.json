{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/adapters/base64uploadadapter\n */\n\n/* globals window */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '../filerepository';\n/**\n * A plugin that converts images inserted into the editor into [Base64 strings](https://en.wikipedia.org/wiki/Base64)\n * in the {@glink builds/guides/integration/saving-data editor output}.\n *\n * This kind of image upload does not require server processing – images are stored with the rest of the text and\n * displayed by the web browser without additional requests.\n *\n * Check out the {@glink features/images/image-upload/image-upload comprehensive \"Image upload overview\"} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Base64UploadAdapter extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [FileRepository];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Base64UploadAdapter';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    this.editor.plugins.get(FileRepository).createUploadAdapter = loader => new Adapter(loader);\n  }\n\n}\n/**\n * The upload adapter that converts images inserted into the editor into Base64 strings.\n *\n * @private\n * @implements module:upload/filerepository~UploadAdapter\n */\n\nclass Adapter {\n  /**\n   * Creates a new adapter instance.\n   *\n   * @param {module:upload/filerepository~FileLoader} loader\n   */\n  constructor(loader) {\n    /**\n     * `FileLoader` instance to use during the upload.\n     *\n     * @member {module:upload/filerepository~FileLoader} #loader\n     */\n    this.loader = loader;\n  }\n  /**\n   * Starts the upload process.\n   *\n   * @see module:upload/filerepository~UploadAdapter#upload\n   * @returns {Promise}\n   */\n\n\n  upload() {\n    return new Promise((resolve, reject) => {\n      const reader = this.reader = new window.FileReader();\n      reader.addEventListener('load', () => {\n        resolve({\n          default: reader.result\n        });\n      });\n      reader.addEventListener('error', err => {\n        reject(err);\n      });\n      reader.addEventListener('abort', () => {\n        reject();\n      });\n      this.loader.file.then(file => {\n        reader.readAsDataURL(file);\n      });\n    });\n  }\n  /**\n   * Aborts the upload process.\n   *\n   * @see module:upload/filerepository~UploadAdapter#abort\n   * @returns {Promise}\n   */\n\n\n  abort() {\n    this.reader.abort();\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-upload/src/adapters/base64uploadadapter.js"],"names":["Plugin","FileRepository","Base64UploadAdapter","requires","pluginName","init","editor","plugins","get","createUploadAdapter","loader","Adapter","constructor","upload","Promise","resolve","reject","reader","window","FileReader","addEventListener","default","result","err","file","then","readAsDataURL","abort"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA,OAAOA,MAAP,MAAmB,qCAAnB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,mBAAN,SAAkCF,MAAlC,CAAyC;AACvD;AACD;AACA;AACoB,aAARG,QAAQ,GAAG;AACrB,WAAO,CAAEF,cAAF,CAAP;AACA;AAED;AACD;AACA;;;AACsB,aAAVG,UAAU,GAAG;AACvB,WAAO,qBAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,SAAKC,MAAL,CAAYC,OAAZ,CAAoBC,GAApB,CAAyBP,cAAzB,EAA0CQ,mBAA1C,GAAgEC,MAAM,IAAI,IAAIC,OAAJ,CAAaD,MAAb,CAA1E;AACA;;AApBsD;AAuBxD;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,CAAc;AACb;AACD;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAAEF,MAAF,EAAW;AACrB;AACF;AACA;AACA;AACA;AACE,SAAKA,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCG,EAAAA,MAAM,GAAG;AACR,WAAO,IAAIC,OAAJ,CAAa,CAAEC,OAAF,EAAWC,MAAX,KAAuB;AAC1C,YAAMC,MAAM,GAAG,KAAKA,MAAL,GAAc,IAAIC,MAAM,CAACC,UAAX,EAA7B;AAEAF,MAAAA,MAAM,CAACG,gBAAP,CAAyB,MAAzB,EAAiC,MAAM;AACtCL,QAAAA,OAAO,CAAE;AAAEM,UAAAA,OAAO,EAAEJ,MAAM,CAACK;AAAlB,SAAF,CAAP;AACA,OAFD;AAIAL,MAAAA,MAAM,CAACG,gBAAP,CAAyB,OAAzB,EAAkCG,GAAG,IAAI;AACxCP,QAAAA,MAAM,CAAEO,GAAF,CAAN;AACA,OAFD;AAIAN,MAAAA,MAAM,CAACG,gBAAP,CAAyB,OAAzB,EAAkC,MAAM;AACvCJ,QAAAA,MAAM;AACN,OAFD;AAIA,WAAKN,MAAL,CAAYc,IAAZ,CAAiBC,IAAjB,CAAuBD,IAAI,IAAI;AAC9BP,QAAAA,MAAM,CAACS,aAAP,CAAsBF,IAAtB;AACA,OAFD;AAGA,KAlBM,CAAP;AAmBA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCG,EAAAA,KAAK,GAAG;AACP,SAAKV,MAAL,CAAYU,KAAZ;AACA;;AAnDY","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/adapters/base64uploadadapter\n */\n\n/* globals window */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '../filerepository';\n\n/**\n * A plugin that converts images inserted into the editor into [Base64 strings](https://en.wikipedia.org/wiki/Base64)\n * in the {@glink builds/guides/integration/saving-data editor output}.\n *\n * This kind of image upload does not require server processing – images are stored with the rest of the text and\n * displayed by the web browser without additional requests.\n *\n * Check out the {@glink features/images/image-upload/image-upload comprehensive \"Image upload overview\"} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Base64UploadAdapter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ FileRepository ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Base64UploadAdapter';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tthis.editor.plugins.get( FileRepository ).createUploadAdapter = loader => new Adapter( loader );\n\t}\n}\n\n/**\n * The upload adapter that converts images inserted into the editor into Base64 strings.\n *\n * @private\n * @implements module:upload/filerepository~UploadAdapter\n */\nclass Adapter {\n\t/**\n\t * Creates a new adapter instance.\n\t *\n\t * @param {module:upload/filerepository~FileLoader} loader\n\t */\n\tconstructor( loader ) {\n\t\t/**\n\t\t * `FileLoader` instance to use during the upload.\n\t\t *\n\t\t * @member {module:upload/filerepository~FileLoader} #loader\n\t\t */\n\t\tthis.loader = loader;\n\t}\n\n\t/**\n\t * Starts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#upload\n\t * @returns {Promise}\n\t */\n\tupload() {\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\tconst reader = this.reader = new window.FileReader();\n\n\t\t\treader.addEventListener( 'load', () => {\n\t\t\t\tresolve( { default: reader.result } );\n\t\t\t} );\n\n\t\t\treader.addEventListener( 'error', err => {\n\t\t\t\treject( err );\n\t\t\t} );\n\n\t\t\treader.addEventListener( 'abort', () => {\n\t\t\t\treject();\n\t\t\t} );\n\n\t\t\tthis.loader.file.then( file => {\n\t\t\t\treader.readAsDataURL( file );\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Aborts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#abort\n\t * @returns {Promise}\n\t */\n\tabort() {\n\t\tthis.reader.abort();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}