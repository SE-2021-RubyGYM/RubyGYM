{"ast":null,"code":"/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactReconcileTransaction\r\n * @typechecks static-only\r\n */\n'use strict';\n\nvar CallbackQueue = require('./CallbackQueue');\n\nvar PooledClass = require('./PooledClass');\n\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\n\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');\n\nvar ReactInputSelection = require('./ReactInputSelection');\n\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\n/**\r\n * Ensures that, when possible, the selection range (currently selected text\r\n * input) is not disturbed by performing the transaction.\r\n */\n\n\nvar SELECTION_RESTORATION = {\n  /**\r\n   * @return {Selection} Selection information.\r\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n\n  /**\r\n   * @param {Selection} sel Selection information returned from `initialize`.\r\n   */\n  close: ReactInputSelection.restoreSelection\n};\n/**\r\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\r\n * high level DOM manipulations (like temporarily removing a text input from the\r\n * DOM).\r\n */\n\nvar EVENT_SUPPRESSION = {\n  /**\r\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\r\n   * the reconciliation.\r\n   */\n  initialize: function () {\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\r\n   * @param {boolean} previouslyEnabled Enabled status of\r\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`\r\n   *   restores the previous value.\r\n   */\n  close: function (previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n/**\r\n * Provides a queue for collecting `componentDidMount` and\r\n * `componentDidUpdate` callbacks during the the transaction.\r\n */\n\nvar ON_DOM_READY_QUEUEING = {\n  /**\r\n   * Initializes the internal `onDOMReady` queue.\r\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  /**\r\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\r\n   */\n  close: function () {\n    this.reactMountReady.notifyAll();\n  }\n};\n/**\r\n * Executed within the scope of the `Transaction` instance. Consider these as\r\n * being member methods, but with an implied ordering while being isolated from\r\n * each other.\r\n */\n\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\n/**\r\n * Currently:\r\n * - The order that these are listed in the transaction is critical:\r\n * - Suppresses events.\r\n * - Restores selection range.\r\n *\r\n * Future:\r\n * - Restore document/overflow scroll positions that were unintentionally\r\n *   modified via DOM insertions above the top viewport boundary.\r\n * - Implement/integrate with customized constraint based layout system and keep\r\n *   track of which dimensions must be remeasured.\r\n *\r\n * @class ReactReconcileTransaction\r\n */\n\nfunction ReactReconcileTransaction(forceHTML) {\n  this.reinitializeTransaction(); // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactTextComponent` checks it in `mountComponent`.`\n\n  this.renderToStaticMarkup = false;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;\n}\n\nvar Mixin = {\n  /**\r\n   * @see Transaction\r\n   * @abstract\r\n   * @final\r\n   * @return {array<object>} List of operation wrap procedures.\r\n   *   TODO: convert to array<TransactionWrapper>\r\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\r\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\r\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n\n  /**\r\n   * `PooledClass` looks for this, and will invoke this before allowing this\r\n   * instance to be reused.\r\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\nassign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);\nPooledClass.addPoolingTo(ReactReconcileTransaction);\nmodule.exports = ReactReconcileTransaction;","map":{"version":3,"sources":["F:/Administrator/Documents/Code for fun/Web/Project Introduction to SE/RubyGYM/client/node_modules/jsx-to-string/node_modules/react/lib/ReactReconcileTransaction.js"],"names":["CallbackQueue","require","PooledClass","ReactBrowserEventEmitter","ReactDOMFeatureFlags","ReactInputSelection","Transaction","assign","SELECTION_RESTORATION","initialize","getSelectionInformation","close","restoreSelection","EVENT_SUPPRESSION","currentlyEnabled","isEnabled","setEnabled","previouslyEnabled","ON_DOM_READY_QUEUEING","reactMountReady","reset","notifyAll","TRANSACTION_WRAPPERS","ReactReconcileTransaction","forceHTML","reinitializeTransaction","renderToStaticMarkup","getPooled","useCreateElement","Mixin","getTransactionWrappers","getReactMountReady","destructor","release","prototype","addPoolingTo","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactReconcileTransaction\r\n * @typechecks static-only\r\n */\r\n\r\n'use strict';\r\n\r\nvar CallbackQueue = require('./CallbackQueue');\r\nvar PooledClass = require('./PooledClass');\r\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\r\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');\r\nvar ReactInputSelection = require('./ReactInputSelection');\r\nvar Transaction = require('./Transaction');\r\n\r\nvar assign = require('./Object.assign');\r\n\r\n/**\r\n * Ensures that, when possible, the selection range (currently selected text\r\n * input) is not disturbed by performing the transaction.\r\n */\r\nvar SELECTION_RESTORATION = {\r\n  /**\r\n   * @return {Selection} Selection information.\r\n   */\r\n  initialize: ReactInputSelection.getSelectionInformation,\r\n  /**\r\n   * @param {Selection} sel Selection information returned from `initialize`.\r\n   */\r\n  close: ReactInputSelection.restoreSelection\r\n};\r\n\r\n/**\r\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\r\n * high level DOM manipulations (like temporarily removing a text input from the\r\n * DOM).\r\n */\r\nvar EVENT_SUPPRESSION = {\r\n  /**\r\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\r\n   * the reconciliation.\r\n   */\r\n  initialize: function () {\r\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\r\n    ReactBrowserEventEmitter.setEnabled(false);\r\n    return currentlyEnabled;\r\n  },\r\n\r\n  /**\r\n   * @param {boolean} previouslyEnabled Enabled status of\r\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`\r\n   *   restores the previous value.\r\n   */\r\n  close: function (previouslyEnabled) {\r\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\r\n  }\r\n};\r\n\r\n/**\r\n * Provides a queue for collecting `componentDidMount` and\r\n * `componentDidUpdate` callbacks during the the transaction.\r\n */\r\nvar ON_DOM_READY_QUEUEING = {\r\n  /**\r\n   * Initializes the internal `onDOMReady` queue.\r\n   */\r\n  initialize: function () {\r\n    this.reactMountReady.reset();\r\n  },\r\n\r\n  /**\r\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\r\n   */\r\n  close: function () {\r\n    this.reactMountReady.notifyAll();\r\n  }\r\n};\r\n\r\n/**\r\n * Executed within the scope of the `Transaction` instance. Consider these as\r\n * being member methods, but with an implied ordering while being isolated from\r\n * each other.\r\n */\r\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\r\n\r\n/**\r\n * Currently:\r\n * - The order that these are listed in the transaction is critical:\r\n * - Suppresses events.\r\n * - Restores selection range.\r\n *\r\n * Future:\r\n * - Restore document/overflow scroll positions that were unintentionally\r\n *   modified via DOM insertions above the top viewport boundary.\r\n * - Implement/integrate with customized constraint based layout system and keep\r\n *   track of which dimensions must be remeasured.\r\n *\r\n * @class ReactReconcileTransaction\r\n */\r\nfunction ReactReconcileTransaction(forceHTML) {\r\n  this.reinitializeTransaction();\r\n  // Only server-side rendering really needs this option (see\r\n  // `ReactServerRendering`), but server-side uses\r\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\r\n  // accessible and defaults to false when `ReactDOMComponent` and\r\n  // `ReactTextComponent` checks it in `mountComponent`.`\r\n  this.renderToStaticMarkup = false;\r\n  this.reactMountReady = CallbackQueue.getPooled(null);\r\n  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;\r\n}\r\n\r\nvar Mixin = {\r\n  /**\r\n   * @see Transaction\r\n   * @abstract\r\n   * @final\r\n   * @return {array<object>} List of operation wrap procedures.\r\n   *   TODO: convert to array<TransactionWrapper>\r\n   */\r\n  getTransactionWrappers: function () {\r\n    return TRANSACTION_WRAPPERS;\r\n  },\r\n\r\n  /**\r\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\r\n   */\r\n  getReactMountReady: function () {\r\n    return this.reactMountReady;\r\n  },\r\n\r\n  /**\r\n   * `PooledClass` looks for this, and will invoke this before allowing this\r\n   * instance to be reused.\r\n   */\r\n  destructor: function () {\r\n    CallbackQueue.release(this.reactMountReady);\r\n    this.reactMountReady = null;\r\n  }\r\n};\r\n\r\nassign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);\r\n\r\nPooledClass.addPoolingTo(ReactReconcileTransaction);\r\n\r\nmodule.exports = ReactReconcileTransaction;"]},"metadata":{},"sourceType":"script"}