{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Query, DataManager } from '@syncfusion/ej2-data';\n/**\r\n * data module is used to generate query and data source.\r\n *\r\n * @private\r\n */\n\nvar Data =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor for data module\r\n   *\r\n   * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\r\n   * @param {Query} query Accepts the query to process the data\r\n   * @private\r\n   */\n  function Data(dataSource, query) {\n    this.initDataManager(dataSource, query);\n  }\n  /**\r\n   * The function used to initialize dataManager and query\r\n   *\r\n   * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\r\n   * @param {Query} query Accepts the query to process the data\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  Data.prototype.initDataManager = function (dataSource, query) {\n    this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n    this.query = query instanceof Query ? query : new Query();\n  };\n  /**\r\n   * The function used to generate updated Query from schedule model\r\n   *\r\n   * @param {Date} startDate Accepts the start date\r\n   * @param {Date} endDate Accepts the end date\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  Data.prototype.generateQuery = function (startDate, endDate) {\n    var query = this.query.clone();\n\n    if (startDate) {\n      query.addParams('StartDate', startDate.toISOString());\n    }\n\n    if (endDate) {\n      query.addParams('EndDate', endDate.toISOString());\n    }\n\n    return query;\n  };\n  /**\r\n   * The function used to get dataSource by executing given Query\r\n   *\r\n   * @param  {Query} query - A Query that specifies to generate dataSource\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  Data.prototype.getData = function (query) {\n    return this.dataManager.executeQuery(query);\n  };\n  /**\r\n   * To destroy the crud module.\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  Data.prototype.destroy = function () {\n    this.dataManager = null;\n    this.query = null;\n  };\n\n  return Data;\n}();\n\nexport { Data };","map":{"version":3,"sources":["D:/HUST/20211/Introduction to Software Engineering/Project/Sprint 2/RubyGYM/client/node_modules/@syncfusion/ej2-schedule/src/schedule/actions/data.js"],"names":["Query","DataManager","Data","dataSource","query","initDataManager","prototype","dataManager","generateQuery","startDate","endDate","clone","addParams","toISOString","getData","executeQuery","destroy"],"mappings":"AAAA;AACA,SAASA,KAAT,EAAgBC,WAAhB,QAAmC,sBAAnC;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,IAAI;AAAG;AAAe,YAAY;AAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,WAASA,IAAT,CAAcC,UAAd,EAA0BC,KAA1B,EAAiC;AAC7B,SAAKC,eAAL,CAAqBF,UAArB,EAAiCC,KAAjC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,IAAI,CAACI,SAAL,CAAeD,eAAf,GAAiC,UAAUF,UAAV,EAAsBC,KAAtB,EAA6B;AAC1D,SAAKG,WAAL,GAAmBJ,UAAU,YAAYF,WAAtB,GAAoCE,UAApC,GAAiD,IAAIF,WAAJ,CAAgBE,UAAhB,CAApE;AACA,SAAKC,KAAL,GAAaA,KAAK,YAAYJ,KAAjB,GAAyBI,KAAzB,GAAiC,IAAIJ,KAAJ,EAA9C;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,IAAI,CAACI,SAAL,CAAeE,aAAf,GAA+B,UAAUC,SAAV,EAAqBC,OAArB,EAA8B;AACzD,QAAIN,KAAK,GAAG,KAAKA,KAAL,CAAWO,KAAX,EAAZ;;AACA,QAAIF,SAAJ,EAAe;AACXL,MAAAA,KAAK,CAACQ,SAAN,CAAgB,WAAhB,EAA6BH,SAAS,CAACI,WAAV,EAA7B;AACH;;AACD,QAAIH,OAAJ,EAAa;AACTN,MAAAA,KAAK,CAACQ,SAAN,CAAgB,SAAhB,EAA2BF,OAAO,CAACG,WAAR,EAA3B;AACH;;AACD,WAAOT,KAAP;AACH,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,IAAI,CAACI,SAAL,CAAeQ,OAAf,GAAyB,UAAUV,KAAV,EAAiB;AACtC,WAAO,KAAKG,WAAL,CAAiBQ,YAAjB,CAA8BX,KAA9B,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,IAAI,CAACI,SAAL,CAAeU,OAAf,GAAyB,YAAY;AACjC,SAAKT,WAAL,GAAmB,IAAnB;AACA,SAAKH,KAAL,GAAa,IAAb;AACH,GAHD;;AAIA,SAAOF,IAAP;AACH,CA9DyB,EAA1B;;AA+DA,SAASA,IAAT","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Query, DataManager } from '@syncfusion/ej2-data';\r\n/**\r\n * data module is used to generate query and data source.\r\n *\r\n * @private\r\n */\r\nvar Data = /** @class */ (function () {\r\n    /**\r\n     * Constructor for data module\r\n     *\r\n     * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\r\n     * @param {Query} query Accepts the query to process the data\r\n     * @private\r\n     */\r\n    function Data(dataSource, query) {\r\n        this.initDataManager(dataSource, query);\r\n    }\r\n    /**\r\n     * The function used to initialize dataManager and query\r\n     *\r\n     * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\r\n     * @param {Query} query Accepts the query to process the data\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Data.prototype.initDataManager = function (dataSource, query) {\r\n        this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\r\n        this.query = query instanceof Query ? query : new Query();\r\n    };\r\n    /**\r\n     * The function used to generate updated Query from schedule model\r\n     *\r\n     * @param {Date} startDate Accepts the start date\r\n     * @param {Date} endDate Accepts the end date\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Data.prototype.generateQuery = function (startDate, endDate) {\r\n        var query = this.query.clone();\r\n        if (startDate) {\r\n            query.addParams('StartDate', startDate.toISOString());\r\n        }\r\n        if (endDate) {\r\n            query.addParams('EndDate', endDate.toISOString());\r\n        }\r\n        return query;\r\n    };\r\n    /**\r\n     * The function used to get dataSource by executing given Query\r\n     *\r\n     * @param  {Query} query - A Query that specifies to generate dataSource\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Data.prototype.getData = function (query) {\r\n        return this.dataManager.executeQuery(query);\r\n    };\r\n    /**\r\n     * To destroy the crud module.\r\n     *\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Data.prototype.destroy = function () {\r\n        this.dataManager = null;\r\n        this.query = null;\r\n    };\r\n    return Data;\r\n}());\r\nexport { Data };\r\n"]},"metadata":{},"sourceType":"module"}