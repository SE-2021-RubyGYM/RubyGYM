{"ast":null,"code":"/**\r\n * Copyright 2014-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactNativeComponent\r\n */\n'use strict';\n\nvar assign = require('./Object.assign');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar autoGenerateWrapperClass = null;\nvar genericComponentClass = null; // This registry keeps track of wrapper classes around native tags.\n\nvar tagToComponentClass = {};\nvar textComponentClass = null;\nvar ReactNativeComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function (componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function (componentClass) {\n    textComponentClass = componentClass;\n  },\n  // This accepts a keyed object with classes as values. Each key represents a\n  // tag. That particular tag will use this class instead of the generic one.\n  injectComponentClasses: function (componentClasses) {\n    assign(tagToComponentClass, componentClasses);\n  }\n};\n/**\r\n * Get a composite component wrapper class for a specific tag.\r\n *\r\n * @param {ReactElement} element The tag for which to get the class.\r\n * @return {function} The React class constructor function.\r\n */\n\nfunction getComponentClassForElement(element) {\n  if (typeof element.type === 'function') {\n    return element.type;\n  }\n\n  var tag = element.type;\n  var componentClass = tagToComponentClass[tag];\n\n  if (componentClass == null) {\n    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);\n  }\n\n  return componentClass;\n}\n/**\r\n * Get a native internal component class for a specific tag.\r\n *\r\n * @param {ReactElement} element The element to create.\r\n * @return {function} The internal class constructor function.\r\n */\n\n\nfunction createInternalComponent(element) {\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;\n  return new genericComponentClass(element.type, element.props);\n}\n/**\r\n * @param {ReactText} text\r\n * @return {ReactComponent}\r\n */\n\n\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n/**\r\n * @param {ReactComponent} component\r\n * @return {boolean}\r\n */\n\n\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactNativeComponent = {\n  getComponentClassForElement: getComponentClassForElement,\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactNativeComponentInjection\n};\nmodule.exports = ReactNativeComponent;","map":{"version":3,"sources":["F:/Administrator/Documents/Code for fun/Web/Project Introduction to SE/RubyGYM/client/node_modules/jsx-to-string/node_modules/react/lib/ReactNativeComponent.js"],"names":["assign","require","invariant","autoGenerateWrapperClass","genericComponentClass","tagToComponentClass","textComponentClass","ReactNativeComponentInjection","injectGenericComponentClass","componentClass","injectTextComponentClass","injectComponentClasses","componentClasses","getComponentClassForElement","element","type","tag","createInternalComponent","process","env","NODE_ENV","undefined","props","createInstanceForText","text","isTextComponent","component","ReactNativeComponent","injection","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIE,wBAAwB,GAAG,IAA/B;AACA,IAAIC,qBAAqB,GAAG,IAA5B,C,CACA;;AACA,IAAIC,mBAAmB,GAAG,EAA1B;AACA,IAAIC,kBAAkB,GAAG,IAAzB;AAEA,IAAIC,6BAA6B,GAAG;AAClC;AACA;AACAC,EAAAA,2BAA2B,EAAE,UAAUC,cAAV,EAA0B;AACrDL,IAAAA,qBAAqB,GAAGK,cAAxB;AACD,GALiC;AAMlC;AACA;AACAC,EAAAA,wBAAwB,EAAE,UAAUD,cAAV,EAA0B;AAClDH,IAAAA,kBAAkB,GAAGG,cAArB;AACD,GAViC;AAWlC;AACA;AACAE,EAAAA,sBAAsB,EAAE,UAAUC,gBAAV,EAA4B;AAClDZ,IAAAA,MAAM,CAACK,mBAAD,EAAsBO,gBAAtB,CAAN;AACD;AAfiC,CAApC;AAkBA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,2BAAT,CAAqCC,OAArC,EAA8C;AAC5C,MAAI,OAAOA,OAAO,CAACC,IAAf,KAAwB,UAA5B,EAAwC;AACtC,WAAOD,OAAO,CAACC,IAAf;AACD;;AACD,MAAIC,GAAG,GAAGF,OAAO,CAACC,IAAlB;AACA,MAAIN,cAAc,GAAGJ,mBAAmB,CAACW,GAAD,CAAxC;;AACA,MAAIP,cAAc,IAAI,IAAtB,EAA4B;AAC1BJ,IAAAA,mBAAmB,CAACW,GAAD,CAAnB,GAA2BP,cAAc,GAAGN,wBAAwB,CAACa,GAAD,CAApE;AACD;;AACD,SAAOP,cAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,uBAAT,CAAiCH,OAAjC,EAA0C;AACxC,GAACV,qBAAD,GAAyBc,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwClB,SAAS,CAAC,KAAD,EAAQ,iDAAR,EAA2DY,OAAO,CAACC,IAAnE,CAAjD,GAA4Hb,SAAS,CAAC,KAAD,CAA9J,GAAwKmB,SAAxK;AACA,SAAO,IAAIjB,qBAAJ,CAA0BU,OAAO,CAACC,IAAlC,EAAwCD,OAAO,CAACQ,KAAhD,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AACnC,SAAO,IAAIlB,kBAAJ,CAAuBkB,IAAvB,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;AAClC,SAAOA,SAAS,YAAYpB,kBAA5B;AACD;;AAED,IAAIqB,oBAAoB,GAAG;AACzBd,EAAAA,2BAA2B,EAAEA,2BADJ;AAEzBI,EAAAA,uBAAuB,EAAEA,uBAFA;AAGzBM,EAAAA,qBAAqB,EAAEA,qBAHE;AAIzBE,EAAAA,eAAe,EAAEA,eAJQ;AAKzBG,EAAAA,SAAS,EAAErB;AALc,CAA3B;AAQAsB,MAAM,CAACC,OAAP,GAAiBH,oBAAjB","sourcesContent":["/**\r\n * Copyright 2014-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactNativeComponent\r\n */\r\n\r\n'use strict';\r\n\r\nvar assign = require('./Object.assign');\r\nvar invariant = require('fbjs/lib/invariant');\r\n\r\nvar autoGenerateWrapperClass = null;\r\nvar genericComponentClass = null;\r\n// This registry keeps track of wrapper classes around native tags.\r\nvar tagToComponentClass = {};\r\nvar textComponentClass = null;\r\n\r\nvar ReactNativeComponentInjection = {\r\n  // This accepts a class that receives the tag string. This is a catch all\r\n  // that can render any kind of tag.\r\n  injectGenericComponentClass: function (componentClass) {\r\n    genericComponentClass = componentClass;\r\n  },\r\n  // This accepts a text component class that takes the text string to be\r\n  // rendered as props.\r\n  injectTextComponentClass: function (componentClass) {\r\n    textComponentClass = componentClass;\r\n  },\r\n  // This accepts a keyed object with classes as values. Each key represents a\r\n  // tag. That particular tag will use this class instead of the generic one.\r\n  injectComponentClasses: function (componentClasses) {\r\n    assign(tagToComponentClass, componentClasses);\r\n  }\r\n};\r\n\r\n/**\r\n * Get a composite component wrapper class for a specific tag.\r\n *\r\n * @param {ReactElement} element The tag for which to get the class.\r\n * @return {function} The React class constructor function.\r\n */\r\nfunction getComponentClassForElement(element) {\r\n  if (typeof element.type === 'function') {\r\n    return element.type;\r\n  }\r\n  var tag = element.type;\r\n  var componentClass = tagToComponentClass[tag];\r\n  if (componentClass == null) {\r\n    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);\r\n  }\r\n  return componentClass;\r\n}\r\n\r\n/**\r\n * Get a native internal component class for a specific tag.\r\n *\r\n * @param {ReactElement} element The element to create.\r\n * @return {function} The internal class constructor function.\r\n */\r\nfunction createInternalComponent(element) {\r\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;\r\n  return new genericComponentClass(element.type, element.props);\r\n}\r\n\r\n/**\r\n * @param {ReactText} text\r\n * @return {ReactComponent}\r\n */\r\nfunction createInstanceForText(text) {\r\n  return new textComponentClass(text);\r\n}\r\n\r\n/**\r\n * @param {ReactComponent} component\r\n * @return {boolean}\r\n */\r\nfunction isTextComponent(component) {\r\n  return component instanceof textComponentClass;\r\n}\r\n\r\nvar ReactNativeComponent = {\r\n  getComponentClassForElement: getComponentClassForElement,\r\n  createInternalComponent: createInternalComponent,\r\n  createInstanceForText: createInstanceForText,\r\n  isTextComponent: isTextComponent,\r\n  injection: ReactNativeComponentInjection\r\n};\r\n\r\nmodule.exports = ReactNativeComponent;"]},"metadata":{},"sourceType":"script"}