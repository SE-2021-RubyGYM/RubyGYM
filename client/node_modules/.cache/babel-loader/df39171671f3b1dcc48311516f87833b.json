{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/viewtoplaintext\n */\n// Elements which should not have empty-line padding.\n// Most `view.ContainerElement` want to be separate by new-line, but some are creating one structure\n// together (like `<li>`) so it is better to separate them by only one \"\\n\".\nconst smallPaddingElements = ['figcaption', 'li'];\n/**\n * Converts {@link module:engine/view/item~Item view item} and all of its children to plain text.\n *\n * @param {module:engine/view/item~Item} viewItem View item to convert.\n * @returns {String} Plain text representation of `viewItem`.\n */\n\nexport default function viewToPlainText(viewItem) {\n  let text = '';\n\n  if (viewItem.is('$text') || viewItem.is('$textProxy')) {\n    // If item is `Text` or `TextProxy` simple take its text data.\n    text = viewItem.data;\n  } else if (viewItem.is('element', 'img') && viewItem.hasAttribute('alt')) {\n    // Special case for images - use alt attribute if it is provided.\n    text = viewItem.getAttribute('alt');\n  } else if (viewItem.is('element', 'br')) {\n    // A soft break should be converted into a single line break (#8045).\n    text = '\\n';\n  } else {\n    // Other elements are document fragments, attribute elements or container elements.\n    // They don't have their own text value, so convert their children.\n    let prev = null;\n\n    for (const child of viewItem.getChildren()) {\n      const childText = viewToPlainText(child); // Separate container element children with one or more new-line characters.\n\n      if (prev && (prev.is('containerElement') || child.is('containerElement'))) {\n        if (smallPaddingElements.includes(prev.name) || smallPaddingElements.includes(child.name)) {\n          text += '\\n';\n        } else {\n          text += '\\n\\n';\n        }\n      }\n\n      text += childText;\n      prev = child;\n    }\n  }\n\n  return text;\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-clipboard/src/utils/viewtoplaintext.js"],"names":["smallPaddingElements","viewToPlainText","viewItem","text","is","data","hasAttribute","getAttribute","prev","child","getChildren","childText","includes","name"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA,MAAMA,oBAAoB,GAAG,CAAE,YAAF,EAAgB,IAAhB,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAA0BC,QAA1B,EAAqC;AACnD,MAAIC,IAAI,GAAG,EAAX;;AAEA,MAAKD,QAAQ,CAACE,EAAT,CAAa,OAAb,KAA0BF,QAAQ,CAACE,EAAT,CAAa,YAAb,CAA/B,EAA6D;AAC5D;AACAD,IAAAA,IAAI,GAAGD,QAAQ,CAACG,IAAhB;AACA,GAHD,MAGO,IAAKH,QAAQ,CAACE,EAAT,CAAa,SAAb,EAAwB,KAAxB,KAAmCF,QAAQ,CAACI,YAAT,CAAuB,KAAvB,CAAxC,EAAyE;AAC/E;AACAH,IAAAA,IAAI,GAAGD,QAAQ,CAACK,YAAT,CAAuB,KAAvB,CAAP;AACA,GAHM,MAGA,IAAKL,QAAQ,CAACE,EAAT,CAAa,SAAb,EAAwB,IAAxB,CAAL,EAAsC;AAC5C;AACAD,IAAAA,IAAI,GAAG,IAAP;AACA,GAHM,MAGA;AACN;AACA;AACA,QAAIK,IAAI,GAAG,IAAX;;AAEA,SAAM,MAAMC,KAAZ,IAAqBP,QAAQ,CAACQ,WAAT,EAArB,EAA8C;AAC7C,YAAMC,SAAS,GAAGV,eAAe,CAAEQ,KAAF,CAAjC,CAD6C,CAG7C;;AACA,UAAKD,IAAI,KAAMA,IAAI,CAACJ,EAAL,CAAS,kBAAT,KAAiCK,KAAK,CAACL,EAAN,CAAU,kBAAV,CAAvC,CAAT,EAAmF;AAClF,YAAKJ,oBAAoB,CAACY,QAArB,CAA+BJ,IAAI,CAACK,IAApC,KAA8Cb,oBAAoB,CAACY,QAArB,CAA+BH,KAAK,CAACI,IAArC,CAAnD,EAAiG;AAChGV,UAAAA,IAAI,IAAI,IAAR;AACA,SAFD,MAEO;AACNA,UAAAA,IAAI,IAAI,MAAR;AACA;AACD;;AAEDA,MAAAA,IAAI,IAAIQ,SAAR;AACAH,MAAAA,IAAI,GAAGC,KAAP;AACA;AACD;;AAED,SAAON,IAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/viewtoplaintext\n */\n\n// Elements which should not have empty-line padding.\n// Most `view.ContainerElement` want to be separate by new-line, but some are creating one structure\n// together (like `<li>`) so it is better to separate them by only one \"\\n\".\nconst smallPaddingElements = [ 'figcaption', 'li' ];\n\n/**\n * Converts {@link module:engine/view/item~Item view item} and all of its children to plain text.\n *\n * @param {module:engine/view/item~Item} viewItem View item to convert.\n * @returns {String} Plain text representation of `viewItem`.\n */\nexport default function viewToPlainText( viewItem ) {\n\tlet text = '';\n\n\tif ( viewItem.is( '$text' ) || viewItem.is( '$textProxy' ) ) {\n\t\t// If item is `Text` or `TextProxy` simple take its text data.\n\t\ttext = viewItem.data;\n\t} else if ( viewItem.is( 'element', 'img' ) && viewItem.hasAttribute( 'alt' ) ) {\n\t\t// Special case for images - use alt attribute if it is provided.\n\t\ttext = viewItem.getAttribute( 'alt' );\n\t} else if ( viewItem.is( 'element', 'br' ) ) {\n\t\t// A soft break should be converted into a single line break (#8045).\n\t\ttext = '\\n';\n\t} else {\n\t\t// Other elements are document fragments, attribute elements or container elements.\n\t\t// They don't have their own text value, so convert their children.\n\t\tlet prev = null;\n\n\t\tfor ( const child of viewItem.getChildren() ) {\n\t\t\tconst childText = viewToPlainText( child );\n\n\t\t\t// Separate container element children with one or more new-line characters.\n\t\t\tif ( prev && ( prev.is( 'containerElement' ) || child.is( 'containerElement' ) ) ) {\n\t\t\t\tif ( smallPaddingElements.includes( prev.name ) || smallPaddingElements.includes( child.name ) ) {\n\t\t\t\t\ttext += '\\n';\n\t\t\t\t} else {\n\t\t\t\t\ttext += '\\n\\n';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttext += childText;\n\t\t\tprev = child;\n\t\t}\n\t}\n\n\treturn text;\n}\n"]},"metadata":{},"sourceType":"module"}