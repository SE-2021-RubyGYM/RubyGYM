{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/styles/utils\n */\nconst HEX_COLOR_REGEXP = /^#([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})$/i;\nconst RGB_COLOR_REGEXP = /^rgb\\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}[0-9]{1,3}[ %]?\\)$/i;\nconst RGBA_COLOR_REGEXP = /^rgba\\([ ]?([0-9]{1,3}[ %]?,[ ]?){3}(1|[0-9]+%|[0]?\\.?[0-9]+)\\)$/i;\nconst HSL_COLOR_REGEXP = /^hsl\\([ ]?([0-9]{1,3}[ %]?[,]?[ ]*){3}(1|[0-9]+%|[0]?\\.?[0-9]+)?\\)$/i;\nconst HSLA_COLOR_REGEXP = /^hsla\\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}(1|[0-9]+%|[0]?\\.?[0-9]+)\\)$/i;\nconst COLOR_NAMES = new Set([// CSS Level 1\n'black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', // CSS Level 2 (Revision 1)\n'orange', // CSS Color Module Level 3\n'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', // CSS Color Module Level 3 (System Colors)\n'activeborder', 'activecaption', 'appworkspace', 'background', 'buttonface', 'buttonhighlight', 'buttonshadow', 'buttontext', 'captiontext', 'graytext', 'highlight', 'highlighttext', 'inactiveborder', 'inactivecaption', 'inactivecaptiontext', 'infobackground', 'infotext', 'menu', 'menutext', 'scrollbar', 'threeddarkshadow', 'threedface', 'threedhighlight', 'threedlightshadow', 'threedshadow', 'window', 'windowframe', 'windowtext', // CSS Color Module Level 4\n'rebeccapurple', // Keywords\n'currentcolor', 'transparent']);\n/**\n * Checks if string contains [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color) CSS value.\n *\n *\t\tisColor( '#f00' );\t\t\t\t\t\t// true\n *\t\tisColor( '#AA00BB33' );\t\t\t\t\t// true\n *\t\tisColor( 'rgb(0, 0, 250)' );\t\t\t// true\n *\t\tisColor( 'hsla(240, 100%, 50%, .7)' );\t// true\n *\t\tisColor( 'deepskyblue' );\t\t\t\t// true\n *\n * **Note**: It does not support CSS Level 4 whitespace syntax, system colors and radius values for HSL colors.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isColor(string) {\n  // As far as I was able to test checking some pre-conditions is faster than joining each test with ||.\n  if (string.startsWith('#')) {\n    return HEX_COLOR_REGEXP.test(string);\n  }\n\n  if (string.startsWith('rgb')) {\n    return RGB_COLOR_REGEXP.test(string) || RGBA_COLOR_REGEXP.test(string);\n  }\n\n  if (string.startsWith('hsl')) {\n    return HSL_COLOR_REGEXP.test(string) || HSLA_COLOR_REGEXP.test(string);\n  } // Array check > RegExp test.\n\n\n  return COLOR_NAMES.has(string.toLowerCase());\n}\nconst lineStyleValues = ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'];\n/**\n * Checks if string contains [line style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isLineStyle(string) {\n  return lineStyleValues.includes(string);\n}\nconst lengthRegExp = /^([+-]?[0-9]*([.][0-9]+)?(px|cm|mm|in|pc|pt|ch|em|ex|rem|vh|vw|vmin|vmax)|0)$/;\n/**\n * Checks if string contains [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isLength(string) {\n  return lengthRegExp.test(string);\n}\nconst PERCENTAGE_VALUE_REGEXP = /^[+-]?[0-9]*([.][0-9]+)?%$/;\n/**\n * Checks if string contains [percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/percentage) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isPercentage(string) {\n  return PERCENTAGE_VALUE_REGEXP.test(string);\n}\nconst repeatValues = ['repeat-x', 'repeat-y', 'repeat', 'space', 'round', 'no-repeat'];\n/**\n * Checks if string contains [background repeat](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isRepeat(string) {\n  return repeatValues.includes(string);\n}\nconst positionValues = ['center', 'top', 'bottom', 'left', 'right'];\n/**\n * Checks if string contains [background position](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isPosition(string) {\n  return positionValues.includes(string);\n}\nconst attachmentValues = ['fixed', 'scroll', 'local'];\n/**\n * Checks if string contains [background attachment](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isAttachment(string) {\n  return attachmentValues.includes(string);\n}\nconst urlRegExp = /^url\\(/;\n/**\n * Checks if string contains [URL](https://developer.mozilla.org/en-US/docs/Web/CSS/url) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isURL(string) {\n  return urlRegExp.test(string);\n}\nexport function getBoxSidesValues() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  if (value === '') {\n    return {\n      top: undefined,\n      right: undefined,\n      bottom: undefined,\n      left: undefined\n    };\n  }\n\n  const values = getShorthandValues(value);\n  const top = values[0];\n  const bottom = values[2] || top;\n  const right = values[1] || top;\n  const left = values[3] || right;\n  return {\n    top,\n    bottom,\n    right,\n    left\n  };\n}\n/**\n * Default reducer for CSS properties that concerns edges of a box\n * [shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) notations:\n *\n *\t\tstylesProcessor.setReducer( 'padding', getBoxSidesValueReducer( 'padding' ) );\n *\n * @param {String} styleShorthand\n * @returns {Function}\n */\n\nexport function getBoxSidesValueReducer(styleShorthand) {\n  return value => {\n    const {\n      top,\n      right,\n      bottom,\n      left\n    } = value;\n    const reduced = [];\n\n    if (![top, right, left, bottom].every(value => !!value)) {\n      if (top) {\n        reduced.push([styleShorthand + '-top', top]);\n      }\n\n      if (right) {\n        reduced.push([styleShorthand + '-right', right]);\n      }\n\n      if (bottom) {\n        reduced.push([styleShorthand + '-bottom', bottom]);\n      }\n\n      if (left) {\n        reduced.push([styleShorthand + '-left', left]);\n      }\n    } else {\n      reduced.push([styleShorthand, getBoxSidesShorthandValue(value)]);\n    }\n\n    return reduced;\n  };\n}\n/**\n * Returns a [shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) notation\n * of a CSS property value.\n *\n *\t\tgetBoxSidesShorthandValue( { top: '1px', right: '1px', bottom: '2px', left: '1px' } );\n *\t\t// will return '1px 1px 2px'\n *\n * @param {module:engine/view/stylesmap~BoxSides} styleShorthand\n * @returns {String}\n */\n\nexport function getBoxSidesShorthandValue(_ref) {\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = _ref;\n  const out = [];\n\n  if (left !== right) {\n    out.push(top, right, bottom, left);\n  } else if (bottom !== top) {\n    out.push(top, right, bottom);\n  } else if (right !== top) {\n    out.push(top, right);\n  } else {\n    out.push(top);\n  }\n\n  return out.join(' ');\n}\n/**\n * Creates a normalizer for a [shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) 1-to-4 value.\n *\n *\t\tstylesProcessor.setNormalizer( 'margin', getPositionShorthandNormalizer( 'margin' ) );\n *\n * @param {String} shorthand\n * @returns {Function}\n */\n\nexport function getPositionShorthandNormalizer(shorthand) {\n  return value => {\n    return {\n      path: shorthand,\n      value: getBoxSidesValues(value)\n    };\n  };\n}\n/**\n * Parses parts of a 1-to-4 value notation - handles some CSS values with spaces (like RGB()).\n *\n *\t\tgetShorthandValues( 'red blue RGB(0, 0, 0)');\n *\t\t// will return [ 'red', 'blue', 'RGB(0, 0, 0)' ]\n *\n * @param {String} string\n * @returns {Array.<String>}\n */\n\nexport function getShorthandValues(string) {\n  return string.replace(/, /g, ',') // Exclude comma from spaces evaluation as values are separated by spaces.\n  .split(' ').map(string => string.replace(/,/g, ', ')); // Restore original notation.\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/view/styles/utils.js"],"names":["HEX_COLOR_REGEXP","RGB_COLOR_REGEXP","RGBA_COLOR_REGEXP","HSL_COLOR_REGEXP","HSLA_COLOR_REGEXP","COLOR_NAMES","Set","isColor","string","startsWith","test","has","toLowerCase","lineStyleValues","isLineStyle","includes","lengthRegExp","isLength","PERCENTAGE_VALUE_REGEXP","isPercentage","repeatValues","isRepeat","positionValues","isPosition","attachmentValues","isAttachment","urlRegExp","isURL","getBoxSidesValues","value","top","undefined","right","bottom","left","values","getShorthandValues","getBoxSidesValueReducer","styleShorthand","reduced","every","push","getBoxSidesShorthandValue","out","join","getPositionShorthandNormalizer","shorthand","path","replace","split","map"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/styles/utils\n */\n\nconst HEX_COLOR_REGEXP = /^#([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})$/i;\nconst RGB_COLOR_REGEXP = /^rgb\\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}[0-9]{1,3}[ %]?\\)$/i;\nconst RGBA_COLOR_REGEXP = /^rgba\\([ ]?([0-9]{1,3}[ %]?,[ ]?){3}(1|[0-9]+%|[0]?\\.?[0-9]+)\\)$/i;\nconst HSL_COLOR_REGEXP = /^hsl\\([ ]?([0-9]{1,3}[ %]?[,]?[ ]*){3}(1|[0-9]+%|[0]?\\.?[0-9]+)?\\)$/i;\nconst HSLA_COLOR_REGEXP = /^hsla\\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}(1|[0-9]+%|[0]?\\.?[0-9]+)\\)$/i;\n\nconst COLOR_NAMES = new Set( [\n\t// CSS Level 1\n\t'black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia',\n\t'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua',\n\t// CSS Level 2 (Revision 1)\n\t'orange',\n\t// CSS Color Module Level 3\n\t'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown',\n\t'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan',\n\t'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta',\n\t'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue',\n\t'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey',\n\t'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod',\n\t'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush',\n\t'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray',\n\t'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray',\n\t'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine',\n\t'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen',\n\t'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite',\n\t'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred',\n\t'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon',\n\t'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow',\n\t'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen',\n\t// CSS Color Module Level 3 (System Colors)\n\t'activeborder', 'activecaption', 'appworkspace', 'background', 'buttonface', 'buttonhighlight', 'buttonshadow',\n\t'buttontext', 'captiontext', 'graytext', 'highlight', 'highlighttext', 'inactiveborder', 'inactivecaption',\n\t'inactivecaptiontext', 'infobackground', 'infotext', 'menu', 'menutext', 'scrollbar', 'threeddarkshadow',\n\t'threedface', 'threedhighlight', 'threedlightshadow', 'threedshadow', 'window', 'windowframe', 'windowtext',\n\t// CSS Color Module Level 4\n\t'rebeccapurple',\n\t// Keywords\n\t'currentcolor', 'transparent'\n] );\n\n/**\n * Checks if string contains [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color) CSS value.\n *\n *\t\tisColor( '#f00' );\t\t\t\t\t\t// true\n *\t\tisColor( '#AA00BB33' );\t\t\t\t\t// true\n *\t\tisColor( 'rgb(0, 0, 250)' );\t\t\t// true\n *\t\tisColor( 'hsla(240, 100%, 50%, .7)' );\t// true\n *\t\tisColor( 'deepskyblue' );\t\t\t\t// true\n *\n * **Note**: It does not support CSS Level 4 whitespace syntax, system colors and radius values for HSL colors.\n *\n * @param {String} string\n * @returns {Boolean}\n */\nexport function isColor( string ) {\n\t// As far as I was able to test checking some pre-conditions is faster than joining each test with ||.\n\tif ( string.startsWith( '#' ) ) {\n\t\treturn HEX_COLOR_REGEXP.test( string );\n\t}\n\n\tif ( string.startsWith( 'rgb' ) ) {\n\t\treturn RGB_COLOR_REGEXP.test( string ) || RGBA_COLOR_REGEXP.test( string );\n\t}\n\n\tif ( string.startsWith( 'hsl' ) ) {\n\t\treturn HSL_COLOR_REGEXP.test( string ) || HSLA_COLOR_REGEXP.test( string );\n\t}\n\n\t// Array check > RegExp test.\n\treturn COLOR_NAMES.has( string.toLowerCase() );\n}\n\nconst lineStyleValues = [ 'none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset' ];\n\n/**\n * Checks if string contains [line style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\nexport function isLineStyle( string ) {\n\treturn lineStyleValues.includes( string );\n}\n\nconst lengthRegExp = /^([+-]?[0-9]*([.][0-9]+)?(px|cm|mm|in|pc|pt|ch|em|ex|rem|vh|vw|vmin|vmax)|0)$/;\n\n/**\n * Checks if string contains [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\nexport function isLength( string ) {\n\treturn lengthRegExp.test( string );\n}\n\nconst PERCENTAGE_VALUE_REGEXP = /^[+-]?[0-9]*([.][0-9]+)?%$/;\n\n/**\n * Checks if string contains [percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/percentage) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\nexport function isPercentage( string ) {\n\treturn PERCENTAGE_VALUE_REGEXP.test( string );\n}\n\nconst repeatValues = [ 'repeat-x', 'repeat-y', 'repeat', 'space', 'round', 'no-repeat' ];\n\n/**\n * Checks if string contains [background repeat](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\nexport function isRepeat( string ) {\n\treturn repeatValues.includes( string );\n}\n\nconst positionValues = [ 'center', 'top', 'bottom', 'left', 'right' ];\n\n/**\n * Checks if string contains [background position](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\nexport function isPosition( string ) {\n\treturn positionValues.includes( string );\n}\n\nconst attachmentValues = [ 'fixed', 'scroll', 'local' ];\n\n/**\n * Checks if string contains [background attachment](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\nexport function isAttachment( string ) {\n\treturn attachmentValues.includes( string );\n}\n\nconst urlRegExp = /^url\\(/;\n\n/**\n * Checks if string contains [URL](https://developer.mozilla.org/en-US/docs/Web/CSS/url) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\nexport function isURL( string ) {\n\treturn urlRegExp.test( string );\n}\n\nexport function getBoxSidesValues( value = '' ) {\n\tif ( value === '' ) {\n\t\treturn { top: undefined, right: undefined, bottom: undefined, left: undefined };\n\t}\n\n\tconst values = getShorthandValues( value );\n\n\tconst top = values[ 0 ];\n\tconst bottom = values[ 2 ] || top;\n\tconst right = values[ 1 ] || top;\n\tconst left = values[ 3 ] || right;\n\n\treturn { top, bottom, right, left };\n}\n\n/**\n * Default reducer for CSS properties that concerns edges of a box\n * [shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) notations:\n *\n *\t\tstylesProcessor.setReducer( 'padding', getBoxSidesValueReducer( 'padding' ) );\n *\n * @param {String} styleShorthand\n * @returns {Function}\n */\nexport function getBoxSidesValueReducer( styleShorthand ) {\n\treturn value => {\n\t\tconst { top, right, bottom, left } = value;\n\n\t\tconst reduced = [];\n\n\t\tif ( ![ top, right, left, bottom ].every( value => !!value ) ) {\n\t\t\tif ( top ) {\n\t\t\t\treduced.push( [ styleShorthand + '-top', top ] );\n\t\t\t}\n\n\t\t\tif ( right ) {\n\t\t\t\treduced.push( [ styleShorthand + '-right', right ] );\n\t\t\t}\n\n\t\t\tif ( bottom ) {\n\t\t\t\treduced.push( [ styleShorthand + '-bottom', bottom ] );\n\t\t\t}\n\n\t\t\tif ( left ) {\n\t\t\t\treduced.push( [ styleShorthand + '-left', left ] );\n\t\t\t}\n\t\t} else {\n\t\t\treduced.push( [ styleShorthand, getBoxSidesShorthandValue( value ) ] );\n\t\t}\n\n\t\treturn reduced;\n\t};\n}\n\n/**\n * Returns a [shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) notation\n * of a CSS property value.\n *\n *\t\tgetBoxSidesShorthandValue( { top: '1px', right: '1px', bottom: '2px', left: '1px' } );\n *\t\t// will return '1px 1px 2px'\n *\n * @param {module:engine/view/stylesmap~BoxSides} styleShorthand\n * @returns {String}\n */\nexport function getBoxSidesShorthandValue( { top, right, bottom, left } ) {\n\tconst out = [];\n\n\tif ( left !== right ) {\n\t\tout.push( top, right, bottom, left );\n\t} else if ( bottom !== top ) {\n\t\tout.push( top, right, bottom );\n\t} else if ( right !== top ) {\n\t\tout.push( top, right );\n\t} else {\n\t\tout.push( top );\n\t}\n\n\treturn out.join( ' ' );\n}\n\n/**\n * Creates a normalizer for a [shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) 1-to-4 value.\n *\n *\t\tstylesProcessor.setNormalizer( 'margin', getPositionShorthandNormalizer( 'margin' ) );\n *\n * @param {String} shorthand\n * @returns {Function}\n */\nexport function getPositionShorthandNormalizer( shorthand ) {\n\treturn value => {\n\t\treturn {\n\t\t\tpath: shorthand,\n\t\t\tvalue: getBoxSidesValues( value )\n\t\t};\n\t};\n}\n\n/**\n * Parses parts of a 1-to-4 value notation - handles some CSS values with spaces (like RGB()).\n *\n *\t\tgetShorthandValues( 'red blue RGB(0, 0, 0)');\n *\t\t// will return [ 'red', 'blue', 'RGB(0, 0, 0)' ]\n *\n * @param {String} string\n * @returns {Array.<String>}\n */\nexport function getShorthandValues( string ) {\n\treturn string\n\t\t.replace( /, /g, ',' ) // Exclude comma from spaces evaluation as values are separated by spaces.\n\t\t.split( ' ' )\n\t\t.map( string => string.replace( /,/g, ', ' ) ); // Restore original notation.\n}\n"]},"metadata":{},"sourceType":"module"}