{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/resizerstate\n */\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Stores the internal state of a single resizable object.\n *\n */\n\nexport default class ResizeState {\n  /**\n   * @param {module:widget/widgetresize~ResizerOptions} options Resizer options.\n   */\n  constructor(options) {\n    /**\n     * The original width (pixels) of the resized object when the resize process was started.\n     *\n     * @readonly\n     * @member {Number} #originalWidth\n     */\n\n    /**\n     * The original height (pixels) of the resized object when the resize process was started.\n     *\n     * @readonly\n     * @member {Number} #originalHeight\n     */\n\n    /**\n     * The original width (percents) of the resized object when the resize process was started.\n     *\n     * @readonly\n     * @member {Number} #originalWidthPercents\n     */\n\n    /**\n     * The position of the handle that initiated the resizing. E.g. `\"top-left\"`, `\"bottom-right\"` etc. or `null`\n     * if unknown.\n     *\n     * @readonly\n     * @observable\n     * @member {String|null} #activeHandlePosition\n     */\n    this.set('activeHandlePosition', null);\n    /**\n     * The width (percents) proposed, but not committed yet, in the current resize process.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #proposedWidthPercents\n     */\n\n    this.set('proposedWidthPercents', null);\n    /**\n     * The width (pixels) proposed, but not committed yet, in the current resize process.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #proposedWidthPixels\n     */\n\n    this.set('proposedWidth', null);\n    /**\n     * The height (pixels) proposed, but not committed yet, in the current resize process.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #proposedHeightPixels\n     */\n\n    this.set('proposedHeight', null);\n    this.set('proposedHandleHostWidth', null);\n    this.set('proposedHandleHostHeight', null);\n    /**\n     * A width to height ratio of the resized image.\n     *\n     * @readonly\n     * @member {Number} #aspectRatio\n     */\n\n    /**\n     * @private\n     * @type {module:widget/widgetresize~ResizerOptions}\n     */\n\n    this._options = options;\n    /**\n     * The reference point of the resizer where the dragging started. It is used to measure the distance the user cursor\n     * traveled, so how much the image should be enlarged.\n     * This information is only known after the DOM was rendered, so it will be updated later.\n     *\n     * @private\n     * @type {Object}\n     */\n\n    this._referenceCoordinates = null;\n  }\n  /**\n   *\n   * @param {HTMLElement} domResizeHandle The handle used to calculate the reference point.\n   * @param {HTMLElement} domHandleHost\n   * @param {HTMLElement} domResizeHost\n   */\n\n\n  begin(domResizeHandle, domHandleHost, domResizeHost) {\n    const clientRect = new Rect(domHandleHost);\n    this.activeHandlePosition = getHandlePosition(domResizeHandle);\n    this._referenceCoordinates = getAbsoluteBoundaryPoint(domHandleHost, getOppositePosition(this.activeHandlePosition));\n    this.originalWidth = clientRect.width;\n    this.originalHeight = clientRect.height;\n    this.aspectRatio = clientRect.width / clientRect.height;\n    const widthStyle = domResizeHost.style.width;\n\n    if (widthStyle && widthStyle.match(/^\\d+(\\.\\d*)?%$/)) {\n      this.originalWidthPercents = parseFloat(widthStyle);\n    } else {\n      this.originalWidthPercents = calculateHostPercentageWidth(domResizeHost, clientRect);\n    }\n  }\n\n  update(newSize) {\n    this.proposedWidth = newSize.width;\n    this.proposedHeight = newSize.height;\n    this.proposedWidthPercents = newSize.widthPercents;\n    this.proposedHandleHostWidth = newSize.handleHostWidth;\n    this.proposedHandleHostHeight = newSize.handleHostHeight;\n  }\n\n}\nmix(ResizeState, ObservableMixin); // Calculates a relative width of a `domResizeHost` compared to it's parent in percents.\n//\n// @private\n// @param {HTMLElement} domResizeHost\n// @param {module:utils/dom/rect~Rect} resizeHostRect\n// @returns {Number}\n\nfunction calculateHostPercentageWidth(domResizeHost, resizeHostRect) {\n  const domResizeHostParent = domResizeHost.parentElement; // Need to use computed style as it properly excludes parent's paddings from the returned value.\n\n  const parentWidth = parseFloat(domResizeHostParent.ownerDocument.defaultView.getComputedStyle(domResizeHostParent).width);\n  return resizeHostRect.width / parentWidth * 100;\n} // Returns coordinates of the top-left corner of an element, relative to the document's top-left corner.\n//\n// @private\n// @param {HTMLElement} element\n// @param {String} resizerPosition The position of the resize handle, e.g. `\"top-left\"`, `\"bottom-right\"`.\n// @returns {Object} return\n// @returns {Number} return.x\n// @returns {Number} return.y\n\n\nfunction getAbsoluteBoundaryPoint(element, resizerPosition) {\n  const elementRect = new Rect(element);\n  const positionParts = resizerPosition.split('-');\n  const ret = {\n    x: positionParts[1] == 'right' ? elementRect.right : elementRect.left,\n    y: positionParts[0] == 'bottom' ? elementRect.bottom : elementRect.top\n  };\n  ret.x += element.ownerDocument.defaultView.scrollX;\n  ret.y += element.ownerDocument.defaultView.scrollY;\n  return ret;\n} // @private\n// @param {String} resizerPosition The expected resizer position, like `\"top-left\"`, `\"bottom-right\"`.\n// @returns {String} A prefixed HTML class name for the resizer element.\n\n\nfunction getResizerHandleClass(resizerPosition) {\n  return `ck-widget__resizer__handle-${resizerPosition}`;\n} // Determines the position of a given resize handle.\n//\n// @private\n// @param {HTMLElement} domHandle Handle used to calculate the reference point.\n// @returns {String|undefined} Returns a string like `\"top-left\"` or `undefined` if not matched.\n\n\nfunction getHandlePosition(domHandle) {\n  const resizerPositions = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];\n\n  for (const position of resizerPositions) {\n    if (domHandle.classList.contains(getResizerHandleClass(position))) {\n      return position;\n    }\n  }\n} // @private\n// @param {String} position Like `\"top-left\"`.\n// @returns {String} Inverted `position`, e.g. it returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\n\n\nfunction getOppositePosition(position) {\n  const parts = position.split('-');\n  const replacements = {\n    top: 'bottom',\n    bottom: 'top',\n    left: 'right',\n    right: 'left'\n  };\n  return `${replacements[parts[0]]}-${replacements[parts[1]]}`;\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-widget/src/widgetresize/resizerstate.js"],"names":["Rect","ObservableMixin","mix","ResizeState","constructor","options","set","_options","_referenceCoordinates","begin","domResizeHandle","domHandleHost","domResizeHost","clientRect","activeHandlePosition","getHandlePosition","getAbsoluteBoundaryPoint","getOppositePosition","originalWidth","width","originalHeight","height","aspectRatio","widthStyle","style","match","originalWidthPercents","parseFloat","calculateHostPercentageWidth","update","newSize","proposedWidth","proposedHeight","proposedWidthPercents","widthPercents","proposedHandleHostWidth","handleHostWidth","proposedHandleHostHeight","handleHostHeight","resizeHostRect","domResizeHostParent","parentElement","parentWidth","ownerDocument","defaultView","getComputedStyle","element","resizerPosition","elementRect","positionParts","split","ret","x","right","left","y","bottom","top","scrollX","scrollY","getResizerHandleClass","domHandle","resizerPositions","position","classList","contains","parts","replacements"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/resizerstate\n */\n\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Stores the internal state of a single resizable object.\n *\n */\nexport default class ResizeState {\n\t/**\n\t * @param {module:widget/widgetresize~ResizerOptions} options Resizer options.\n\t */\n\tconstructor( options ) {\n\t\t/**\n\t\t * The original width (pixels) of the resized object when the resize process was started.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #originalWidth\n\t\t */\n\n\t\t/**\n\t\t * The original height (pixels) of the resized object when the resize process was started.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #originalHeight\n\t\t */\n\n\t\t/**\n\t\t * The original width (percents) of the resized object when the resize process was started.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #originalWidthPercents\n\t\t */\n\n\t\t/**\n\t\t * The position of the handle that initiated the resizing. E.g. `\"top-left\"`, `\"bottom-right\"` etc. or `null`\n\t\t * if unknown.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String|null} #activeHandlePosition\n\t\t */\n\t\tthis.set( 'activeHandlePosition', null );\n\n\t\t/**\n\t\t * The width (percents) proposed, but not committed yet, in the current resize process.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #proposedWidthPercents\n\t\t */\n\t\tthis.set( 'proposedWidthPercents', null );\n\n\t\t/**\n\t\t * The width (pixels) proposed, but not committed yet, in the current resize process.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #proposedWidthPixels\n\t\t */\n\t\tthis.set( 'proposedWidth', null );\n\n\t\t/**\n\t\t * The height (pixels) proposed, but not committed yet, in the current resize process.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #proposedHeightPixels\n\t\t */\n\t\tthis.set( 'proposedHeight', null );\n\n\t\tthis.set( 'proposedHandleHostWidth', null );\n\t\tthis.set( 'proposedHandleHostHeight', null );\n\n\t\t/**\n\t\t * A width to height ratio of the resized image.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #aspectRatio\n\t\t */\n\n\t\t/**\n\t\t * @private\n\t\t * @type {module:widget/widgetresize~ResizerOptions}\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * The reference point of the resizer where the dragging started. It is used to measure the distance the user cursor\n\t\t * traveled, so how much the image should be enlarged.\n\t\t * This information is only known after the DOM was rendered, so it will be updated later.\n\t\t *\n\t\t * @private\n\t\t * @type {Object}\n\t\t */\n\t\tthis._referenceCoordinates = null;\n\t}\n\n\t/**\n\t *\n\t * @param {HTMLElement} domResizeHandle The handle used to calculate the reference point.\n\t * @param {HTMLElement} domHandleHost\n\t * @param {HTMLElement} domResizeHost\n\t */\n\tbegin( domResizeHandle, domHandleHost, domResizeHost ) {\n\t\tconst clientRect = new Rect( domHandleHost );\n\n\t\tthis.activeHandlePosition = getHandlePosition( domResizeHandle );\n\n\t\tthis._referenceCoordinates = getAbsoluteBoundaryPoint( domHandleHost, getOppositePosition( this.activeHandlePosition ) );\n\n\t\tthis.originalWidth = clientRect.width;\n\t\tthis.originalHeight = clientRect.height;\n\n\t\tthis.aspectRatio = clientRect.width / clientRect.height;\n\n\t\tconst widthStyle = domResizeHost.style.width;\n\n\t\tif ( widthStyle && widthStyle.match( /^\\d+(\\.\\d*)?%$/ ) ) {\n\t\t\tthis.originalWidthPercents = parseFloat( widthStyle );\n\t\t} else {\n\t\t\tthis.originalWidthPercents = calculateHostPercentageWidth( domResizeHost, clientRect );\n\t\t}\n\t}\n\n\tupdate( newSize ) {\n\t\tthis.proposedWidth = newSize.width;\n\t\tthis.proposedHeight = newSize.height;\n\t\tthis.proposedWidthPercents = newSize.widthPercents;\n\n\t\tthis.proposedHandleHostWidth = newSize.handleHostWidth;\n\t\tthis.proposedHandleHostHeight = newSize.handleHostHeight;\n\t}\n}\n\nmix( ResizeState, ObservableMixin );\n\n// Calculates a relative width of a `domResizeHost` compared to it's parent in percents.\n//\n// @private\n// @param {HTMLElement} domResizeHost\n// @param {module:utils/dom/rect~Rect} resizeHostRect\n// @returns {Number}\nfunction calculateHostPercentageWidth( domResizeHost, resizeHostRect ) {\n\tconst domResizeHostParent = domResizeHost.parentElement;\n\t// Need to use computed style as it properly excludes parent's paddings from the returned value.\n\tconst parentWidth = parseFloat( domResizeHostParent.ownerDocument.defaultView.getComputedStyle( domResizeHostParent ).width );\n\n\treturn resizeHostRect.width / parentWidth * 100;\n}\n\n// Returns coordinates of the top-left corner of an element, relative to the document's top-left corner.\n//\n// @private\n// @param {HTMLElement} element\n// @param {String} resizerPosition The position of the resize handle, e.g. `\"top-left\"`, `\"bottom-right\"`.\n// @returns {Object} return\n// @returns {Number} return.x\n// @returns {Number} return.y\nfunction getAbsoluteBoundaryPoint( element, resizerPosition ) {\n\tconst elementRect = new Rect( element );\n\tconst positionParts = resizerPosition.split( '-' );\n\tconst ret = {\n\t\tx: positionParts[ 1 ] == 'right' ? elementRect.right : elementRect.left,\n\t\ty: positionParts[ 0 ] == 'bottom' ? elementRect.bottom : elementRect.top\n\t};\n\n\tret.x += element.ownerDocument.defaultView.scrollX;\n\tret.y += element.ownerDocument.defaultView.scrollY;\n\n\treturn ret;\n}\n\n// @private\n// @param {String} resizerPosition The expected resizer position, like `\"top-left\"`, `\"bottom-right\"`.\n// @returns {String} A prefixed HTML class name for the resizer element.\nfunction getResizerHandleClass( resizerPosition ) {\n\treturn `ck-widget__resizer__handle-${ resizerPosition }`;\n}\n\n// Determines the position of a given resize handle.\n//\n// @private\n// @param {HTMLElement} domHandle Handle used to calculate the reference point.\n// @returns {String|undefined} Returns a string like `\"top-left\"` or `undefined` if not matched.\nfunction getHandlePosition( domHandle ) {\n\tconst resizerPositions = [ 'top-left', 'top-right', 'bottom-right', 'bottom-left' ];\n\n\tfor ( const position of resizerPositions ) {\n\t\tif ( domHandle.classList.contains( getResizerHandleClass( position ) ) ) {\n\t\t\treturn position;\n\t\t}\n\t}\n}\n\n// @private\n// @param {String} position Like `\"top-left\"`.\n// @returns {String} Inverted `position`, e.g. it returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\nfunction getOppositePosition( position ) {\n\tconst parts = position.split( '-' );\n\tconst replacements = {\n\t\ttop: 'bottom',\n\t\tbottom: 'top',\n\t\tleft: 'right',\n\t\tright: 'left'\n\t};\n\n\treturn `${ replacements[ parts[ 0 ] ] }-${ replacements[ parts[ 1 ] ] }`;\n}\n"]},"metadata":{},"sourceType":"module"}