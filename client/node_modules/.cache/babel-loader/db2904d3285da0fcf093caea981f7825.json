{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/commandcollection\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Collection of commands. Its instance is available in {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n */\n\nexport default class CommandCollection {\n  /**\n   * Creates collection instance.\n   */\n  constructor() {\n    /**\n     * Command map.\n     *\n     * @private\n     * @member {Map}\n     */\n    this._commands = new Map();\n  }\n  /**\n   * Registers a new command.\n   *\n   * @param {String} commandName The name of the command.\n   * @param {module:core/command~Command} command\n   */\n\n\n  add(commandName, command) {\n    this._commands.set(commandName, command);\n  }\n  /**\n   * Retrieves a command from the collection.\n   *\n   * @param {String} commandName The name of the command.\n   * @returns {module:core/command~Command}\n   */\n\n\n  get(commandName) {\n    return this._commands.get(commandName);\n  }\n  /**\n   * Executes a command.\n   *\n   * @param {String} commandName The name of the command.\n   * @param {*} [...commandParams] Command parameters.\n   * @returns {*} The value returned by the {@link module:core/command~Command#execute `command.execute()`}.\n   */\n\n\n  execute(commandName) {\n    const command = this.get(commandName);\n\n    if (!command) {\n      /**\n       * Command does not exist.\n       *\n       * @error commandcollection-command-not-found\n       * @param {String} commandName Name of the command.\n       */\n      throw new CKEditorError('commandcollection-command-not-found', this, {\n        commandName\n      });\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return command.execute(...args);\n  }\n  /**\n   * Returns iterator of command names.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  *names() {\n    yield* this._commands.keys();\n  }\n  /**\n   * Returns iterator of command instances.\n   *\n   * @returns {Iterable.<module:core/command~Command>}\n   */\n\n\n  *commands() {\n    yield* this._commands.values();\n  }\n  /**\n   * Iterable interface.\n   *\n   * Returns `[ commandName, commandInstance ]` pairs.\n   *\n   * @returns {Iterable.<Array>}\n   */\n\n\n  [Symbol.iterator]() {\n    return this._commands[Symbol.iterator]();\n  }\n  /**\n   * Destroys all collection commands.\n   */\n\n\n  destroy() {\n    for (const command of this.commands()) {\n      command.destroy();\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-core/src/commandcollection.js"],"names":["CKEditorError","CommandCollection","constructor","_commands","Map","add","commandName","command","set","get","execute","args","names","keys","commands","values","Symbol","iterator","destroy"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,aAAP,MAA0B,6CAA1B;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,iBAAN,CAAwB;AACtC;AACD;AACA;AACCC,EAAAA,WAAW,GAAG;AACb;AACF;AACA;AACA;AACA;AACA;AACE,SAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,GAAG,CAAEC,WAAF,EAAeC,OAAf,EAAyB;AAC3B,SAAKJ,SAAL,CAAeK,GAAf,CAAoBF,WAApB,EAAiCC,OAAjC;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCE,EAAAA,GAAG,CAAEH,WAAF,EAAgB;AAClB,WAAO,KAAKH,SAAL,CAAeM,GAAf,CAAoBH,WAApB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCI,EAAAA,OAAO,CAAEJ,WAAF,EAAyB;AAC/B,UAAMC,OAAO,GAAG,KAAKE,GAAL,CAAUH,WAAV,CAAhB;;AAEA,QAAK,CAACC,OAAN,EAAgB;AACf;AACH;AACA;AACA;AACA;AACA;AACG,YAAM,IAAIP,aAAJ,CAAmB,qCAAnB,EAA0D,IAA1D,EAAgE;AAAEM,QAAAA;AAAF,OAAhE,CAAN;AACA;;AAX8B,sCAAPK,IAAO;AAAPA,MAAAA,IAAO;AAAA;;AAa/B,WAAOJ,OAAO,CAACG,OAAR,CAAiB,GAAGC,IAApB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACQ,GAALC,KAAK,GAAG;AACT,WAAO,KAAKT,SAAL,CAAeU,IAAf,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACW,GAARC,QAAQ,GAAG;AACZ,WAAO,KAAKX,SAAL,CAAeY,MAAf,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACkB,GAAfC,MAAM,CAACC,QAAQ,IAAK;AACrB,WAAO,KAAKd,SAAL,CAAgBa,MAAM,CAACC,QAAvB,GAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,SAAM,MAAMX,OAAZ,IAAuB,KAAKO,QAAL,EAAvB,EAAyC;AACxCP,MAAAA,OAAO,CAACW,OAAR;AACA;AACD;;AA7FqC","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/commandcollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Collection of commands. Its instance is available in {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n */\nexport default class CommandCollection {\n\t/**\n\t * Creates collection instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Command map.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._commands = new Map();\n\t}\n\n\t/**\n\t * Registers a new command.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @param {module:core/command~Command} command\n\t */\n\tadd( commandName, command ) {\n\t\tthis._commands.set( commandName, command );\n\t}\n\n\t/**\n\t * Retrieves a command from the collection.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @returns {module:core/command~Command}\n\t */\n\tget( commandName ) {\n\t\treturn this._commands.get( commandName );\n\t}\n\n\t/**\n\t * Executes a command.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @param {*} [...commandParams] Command parameters.\n\t * @returns {*} The value returned by the {@link module:core/command~Command#execute `command.execute()`}.\n\t */\n\texecute( commandName, ...args ) {\n\t\tconst command = this.get( commandName );\n\n\t\tif ( !command ) {\n\t\t\t/**\n\t\t\t * Command does not exist.\n\t\t\t *\n\t\t\t * @error commandcollection-command-not-found\n\t\t\t * @param {String} commandName Name of the command.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'commandcollection-command-not-found', this, { commandName } );\n\t\t}\n\n\t\treturn command.execute( ...args );\n\t}\n\n\t/**\n\t * Returns iterator of command names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* names() {\n\t\tyield* this._commands.keys();\n\t}\n\n\t/**\n\t * Returns iterator of command instances.\n\t *\n\t * @returns {Iterable.<module:core/command~Command>}\n\t */\n\t* commands() {\n\t\tyield* this._commands.values();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Returns `[ commandName, commandInstance ]` pairs.\n\t *\n\t * @returns {Iterable.<Array>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._commands[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Destroys all collection commands.\n\t */\n\tdestroy() {\n\t\tfor ( const command of this.commands() ) {\n\t\t\tcommand.destroy();\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}