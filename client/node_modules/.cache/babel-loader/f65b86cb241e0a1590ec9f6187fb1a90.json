{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/rawelement\n */\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\n/**\n * The raw element class.\n *\n * The raw elements work as data containers (\"wrappers\", \"sandboxes\") but their children are not managed or\n * even recognized by the editor. This encapsulation allows integrations to maintain custom DOM structures\n * in the editor content without, for instance, worrying about compatibility with other editor features.\n * Raw elements are a perfect tool for integration with external frameworks and data sources.\n *\n * Unlike {@link module:engine/view/uielement~UIElement UI elements}, raw elements act like real editor\n * content (similar to {@link module:engine/view/containerelement~ContainerElement} or\n * {@link module:engine/view/emptyelement~EmptyElement}), they are considered by the editor selection and\n * {@link module:widget/utils~toWidget they can work as widgets}.\n *\n * To create a new raw element, use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createRawElement `downcastWriter#createRawElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\n\nexport default class RawElement extends Element {\n  /**\n   * Creates a new instance of a raw element.\n   *\n   * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} when the `children`\n   * parameter is passed to inform that the usage of `RawElement` is incorrect (adding child nodes to `RawElement` is forbidden).\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createRawElement\n   * @protected\n   * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n   * @param {String} name A node name.\n   * @param {Object|Iterable} [attrs] The collection of attributes.\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into the created element.\n   */\n  constructor(document, name, attrs, children) {\n    super(document, name, attrs, children); // Override the default of the base class.\n\n    this._isAllowedInsideAttributeElement = true;\n    /**\n     * Returns `null` because filler is not needed for raw elements.\n     *\n     * @method #getFillerOffset\n     * @returns {null} Always returns null.\n     */\n\n    this.getFillerOffset = getFillerOffset;\n  }\n  /**\n   * Checks whether this object is of the given type or name.\n   *\n   *\t\trawElement.is( 'rawElement' ); // -> true\n   *\t\trawElement.is( 'element' ); // -> true\n   *\t\trawElement.is( 'node' ); // -> true\n   *\t\trawElement.is( 'view:rawElement' ); // -> true\n   *\t\trawElement.is( 'view:element' ); // -> true\n   *\t\trawElement.is( 'view:node' ); // -> true\n   *\n   *\t\trawElement.is( 'model:element' ); // -> false\n   *\t\trawElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is a raw element, you can also check its\n   * {@link module:engine/view/rawelement~RawElement#name name}:\n   *\n   *\t\trawElement.is( 'img' ); // -> true if this is an img element\n   *\t\trawElement.is( 'rawElement', 'img' ); // -> same as above\n   *\t\ttext.is( 'img' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type The type to check when the `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] The element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (!name) {\n      return type === 'rawElement' || type === 'view:rawElement' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n      type === this.name || type === 'view:' + this.name || type === 'element' || type === 'view:element' || type === 'node' || type === 'view:node';\n    } else {\n      return name === this.name && (type === 'rawElement' || type === 'view:rawElement' || type === 'element' || type === 'view:element');\n    }\n  }\n  /**\n   * Overrides the {@link module:engine/view/element~Element#_insertChild} method.\n   * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} to prevent\n   * adding any child nodes to a raw element.\n   *\n   * @protected\n   */\n\n\n  _insertChild(index, nodes) {\n    if (nodes && (nodes instanceof Node || Array.from(nodes).length > 0)) {\n      /**\n       * Cannot add children to a {@link module:engine/view/rawelement~RawElement} instance.\n       *\n       * @error view-rawelement-cannot-add\n       */\n      throw new CKEditorError('view-rawelement-cannot-add', [this, nodes]);\n    }\n  }\n  /**\n   * This allows rendering the children of a {@link module:engine/view/rawelement~RawElement} on the DOM level.\n   * This method is called by the {@link module:engine/view/domconverter~DomConverter} with the raw DOM element\n   * passed as an argument, leaving the number and shape of the children up to the integrator.\n   *\n   * This method **must be defined** for the raw element to work:\n   *\n   *\t\tconst myRawElement = downcastWriter.createRawElement( 'div' );\n   *\n   *\t\tmyRawElement.render = function( domElement, domConverter ) {\n   *\t\t\tdomConverter.setContentOf( domElement, '<b>This is the raw content of myRawElement.</b>' );\n   *\t\t};\n   *\n   * @method #render\n   * @param {HTMLElement} domElement The native DOM element representing the raw view element.\n   * @param {module:engine/view/domconverter~DomConverter} domConverter Instance of the DomConverter used to optimize the output.\n   */\n\n\n} // Returns `null` because block filler is not needed for raw elements.\n//\n// @returns {null}\n\nfunction getFillerOffset() {\n  return null;\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/view/rawelement.js"],"names":["Element","CKEditorError","Node","RawElement","constructor","document","name","attrs","children","_isAllowedInsideAttributeElement","getFillerOffset","is","type","_insertChild","index","nodes","Array","from","length"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,UAAN,SAAyBH,OAAzB,CAAiC;AAC/C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCI,EAAAA,WAAW,CAAEC,QAAF,EAAYC,IAAZ,EAAkBC,KAAlB,EAAyBC,QAAzB,EAAoC;AAC9C,UAAOH,QAAP,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,QAA9B,EAD8C,CAG9C;;AACA,SAAKC,gCAAL,GAAwC,IAAxC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,eAAL,GAAuBA,eAAvB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,EAAE,CAAEC,IAAF,EAAsB;AAAA,QAAdN,IAAc,uEAAP,IAAO;;AACvB,QAAK,CAACA,IAAN,EAAa;AACZ,aAAOM,IAAI,KAAK,YAAT,IAAyBA,IAAI,KAAK,iBAAlC,IACN;AACAA,MAAAA,IAAI,KAAK,KAAKN,IAFR,IAEgBM,IAAI,KAAK,UAAU,KAAKN,IAFxC,IAGNM,IAAI,KAAK,SAHH,IAGgBA,IAAI,KAAK,cAHzB,IAINA,IAAI,KAAK,MAJH,IAIaA,IAAI,KAAK,WAJ7B;AAKA,KAND,MAMO;AACN,aAAON,IAAI,KAAK,KAAKA,IAAd,KACNM,IAAI,KAAK,YAAT,IAAyBA,IAAI,KAAK,iBAAlC,IACAA,IAAI,KAAK,SADT,IACsBA,IAAI,KAAK,cAFzB,CAAP;AAIA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,YAAY,CAAEC,KAAF,EAASC,KAAT,EAAiB;AAC5B,QAAKA,KAAK,KAAMA,KAAK,YAAYb,IAAjB,IAAyBc,KAAK,CAACC,IAAN,CAAYF,KAAZ,EAAoBG,MAApB,GAA6B,CAA5D,CAAV,EAA4E;AAC3E;AACH;AACA;AACA;AACA;AACG,YAAM,IAAIjB,aAAJ,CACL,4BADK,EAEL,CAAE,IAAF,EAAQc,KAAR,CAFK,CAAN;AAIA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA7GgD,C,CAgHhD;AACA;AACA;;AACA,SAASL,eAAT,GAA2B;AAC1B,SAAO,IAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/rawelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\n\n/**\n * The raw element class.\n *\n * The raw elements work as data containers (\"wrappers\", \"sandboxes\") but their children are not managed or\n * even recognized by the editor. This encapsulation allows integrations to maintain custom DOM structures\n * in the editor content without, for instance, worrying about compatibility with other editor features.\n * Raw elements are a perfect tool for integration with external frameworks and data sources.\n *\n * Unlike {@link module:engine/view/uielement~UIElement UI elements}, raw elements act like real editor\n * content (similar to {@link module:engine/view/containerelement~ContainerElement} or\n * {@link module:engine/view/emptyelement~EmptyElement}), they are considered by the editor selection and\n * {@link module:widget/utils~toWidget they can work as widgets}.\n *\n * To create a new raw element, use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createRawElement `downcastWriter#createRawElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class RawElement extends Element {\n\t/**\n\t * Creates a new instance of a raw element.\n\t *\n\t * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} when the `children`\n\t * parameter is passed to inform that the usage of `RawElement` is incorrect (adding child nodes to `RawElement` is forbidden).\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createRawElement\n\t * @protected\n\t * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n\t * @param {String} name A node name.\n\t * @param {Object|Iterable} [attrs] The collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into the created element.\n\t */\n\tconstructor( document, name, attrs, children ) {\n\t\tsuper( document, name, attrs, children );\n\n\t\t// Override the default of the base class.\n\t\tthis._isAllowedInsideAttributeElement = true;\n\n\t\t/**\n\t\t * Returns `null` because filler is not needed for raw elements.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {null} Always returns null.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type or name.\n\t *\n\t *\t\trawElement.is( 'rawElement' ); // -> true\n\t *\t\trawElement.is( 'element' ); // -> true\n\t *\t\trawElement.is( 'node' ); // -> true\n\t *\t\trawElement.is( 'view:rawElement' ); // -> true\n\t *\t\trawElement.is( 'view:element' ); // -> true\n\t *\t\trawElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\trawElement.is( 'model:element' ); // -> false\n\t *\t\trawElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is a raw element, you can also check its\n\t * {@link module:engine/view/rawelement~RawElement#name name}:\n\t *\n\t *\t\trawElement.is( 'img' ); // -> true if this is an img element\n\t *\t\trawElement.is( 'rawElement', 'img' ); // -> same as above\n\t *\t\ttext.is( 'img' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type The type to check when the `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] The element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type === 'rawElement' || type === 'view:rawElement' ||\n\t\t\t\t// From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n\t\t\t\ttype === this.name || type === 'view:' + this.name ||\n\t\t\t\ttype === 'element' || type === 'view:element' ||\n\t\t\t\ttype === 'node' || type === 'view:node';\n\t\t} else {\n\t\t\treturn name === this.name && (\n\t\t\t\ttype === 'rawElement' || type === 'view:rawElement' ||\n\t\t\t\ttype === 'element' || type === 'view:element'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Overrides the {@link module:engine/view/element~Element#_insertChild} method.\n\t * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} to prevent\n\t * adding any child nodes to a raw element.\n\t *\n\t * @protected\n\t */\n\t_insertChild( index, nodes ) {\n\t\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\n\t\t\t/**\n\t\t\t * Cannot add children to a {@link module:engine/view/rawelement~RawElement} instance.\n\t\t\t *\n\t\t\t * @error view-rawelement-cannot-add\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-rawelement-cannot-add',\n\t\t\t\t[ this, nodes ]\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * This allows rendering the children of a {@link module:engine/view/rawelement~RawElement} on the DOM level.\n\t * This method is called by the {@link module:engine/view/domconverter~DomConverter} with the raw DOM element\n\t * passed as an argument, leaving the number and shape of the children up to the integrator.\n\t *\n\t * This method **must be defined** for the raw element to work:\n\t *\n\t *\t\tconst myRawElement = downcastWriter.createRawElement( 'div' );\n\t *\n\t *\t\tmyRawElement.render = function( domElement, domConverter ) {\n\t *\t\t\tdomConverter.setContentOf( domElement, '<b>This is the raw content of myRawElement.</b>' );\n\t *\t\t};\n\t *\n\t * @method #render\n\t * @param {HTMLElement} domElement The native DOM element representing the raw view element.\n\t * @param {module:engine/view/domconverter~DomConverter} domConverter Instance of the DomConverter used to optimize the output.\n\t */\n}\n\n// Returns `null` because block filler is not needed for raw elements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n"]},"metadata":{},"sourceType":"module"}