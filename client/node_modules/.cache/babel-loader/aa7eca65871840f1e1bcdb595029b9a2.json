{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/conversion\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport UpcastHelpers from './upcasthelpers';\nimport DowncastHelpers from './downcasthelpers';\nimport toArray from '@ckeditor/ckeditor5-utils/src/toarray';\n/**\n * A utility class that helps add converters to upcast and downcast dispatchers.\n *\n * We recommend reading the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide first to\n * understand the core concepts of the conversion mechanisms.\n *\n * An instance of the conversion manager is available in the\n * {@link module:core/editor/editor~Editor#conversion `editor.conversion`} property\n * and by default has the following groups of dispatchers (i.e. directions of conversion):\n *\n * * `downcast` (editing and data downcasts)\n * * `editingDowncast`\n * * `dataDowncast`\n * * `upcast`\n *\n * # One-way converters\n *\n * To add a converter to a specific group, use the {@link module:engine/conversion/conversion~Conversion#for `for()`}\n * method:\n *\n *\t\t// Add a converter to editing downcast and data downcast.\n *\t\teditor.conversion.for( 'downcast' ).elementToElement( config ) );\n *\n *\t\t// Add a converter to the data pipepline only:\n *\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( dataConversionConfig ) );\n *\n *\t\t// And a slightly different one for the editing pipeline:\n *\t\teditor.conversion.for( 'editingDowncast' ).elementToElement( editingConversionConfig ) );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for `for()`} method documentation to learn more about\n * available conversion helpers and how to use your custom ones.\n *\n * # Two-way converters\n *\n * Besides using one-way converters via the `for()` method, you can also use other methods available in this\n * class to add two-way converters (upcast and downcast):\n *\n * * {@link module:engine/conversion/conversion~Conversion#elementToElement `elementToElement()`} &ndash;\n * Model element to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement()`} &ndash;\n * Model attribute to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `attributeToAttribute()`} &ndash;\n * Model attribute to view element and vice versa.\n */\n\nexport default class Conversion {\n  /**\n   * Creates a new conversion instance.\n   *\n   * @param {module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n   * Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher>} downcastDispatchers\n   * @param {module:engine/conversion/upcastdispatcher~UpcastDispatcher|\n   * Array.<module:engine/conversion/upcastdispatcher~UpcastDispatcher>} upcastDispatchers\n   */\n  constructor(downcastDispatchers, upcastDispatchers) {\n    /**\n     * Maps dispatchers group name to ConversionHelpers instances.\n     *\n     * @private\n     * @member {Map.<String,module:engine/conversion/conversionhelpers~ConversionHelpers>}\n     */\n    this._helpers = new Map(); // Define default 'downcast' & 'upcast' dispatchers groups. Those groups are always available as two-way converters needs them.\n\n    this._downcast = toArray(downcastDispatchers);\n\n    this._createConversionHelpers({\n      name: 'downcast',\n      dispatchers: this._downcast,\n      isDowncast: true\n    });\n\n    this._upcast = toArray(upcastDispatchers);\n\n    this._createConversionHelpers({\n      name: 'upcast',\n      dispatchers: this._upcast,\n      isDowncast: false\n    });\n  }\n  /**\n   * Define an alias for registered dispatcher.\n   *\n   *\t\tconst conversion = new Conversion(\n   *\t\t\t[ dataDowncastDispatcher, editingDowncastDispatcher ],\n   *\t\t\tupcastDispatcher\n   *\t\t);\n   *\n   *\t\tconversion.addAlias( 'dataDowncast', dataDowncastDispatcher );\n   *\n   * @param {String} alias An alias of a dispatcher.\n   * @param {module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n   * module:engine/conversion/upcastdispatcher~UpcastDispatcher} dispatcher Dispatcher which should have an alias.\n   */\n\n\n  addAlias(alias, dispatcher) {\n    const isDowncast = this._downcast.includes(dispatcher);\n\n    const isUpcast = this._upcast.includes(dispatcher);\n\n    if (!isUpcast && !isDowncast) {\n      /**\n       * Trying to register and alias for a dispatcher that nas not been registered.\n       *\n       * @error conversion-add-alias-dispatcher-not-registered\n       */\n      throw new CKEditorError('conversion-add-alias-dispatcher-not-registered', this);\n    }\n\n    this._createConversionHelpers({\n      name: alias,\n      dispatchers: [dispatcher],\n      isDowncast\n    });\n  }\n  /**\n   * Provides a chainable API to assign converters to conversion dispatchers group.\n   *\n   * If the given group name has not been registered, the\n   * {@link module:utils/ckeditorerror~CKEditorError `conversion-for-unknown-group` error} is thrown.\n   *\n   * You can use conversion helpers available directly in the `for()` chain or your custom ones via\n   * the {@link module:engine/conversion/conversionhelpers~ConversionHelpers#add `add()`} method.\n   *\n   * # Using bulit-in conversion helpers\n   *\n   * The `for()` chain comes with a set of conversion helpers which you can use like this:\n   *\n   *\t\teditor.conversion.for( 'downcast' )\n   *\t\t\t.elementToElement( config1 )        // Adds an element-to-element downcast converter.\n   *\t\t\t.attributeToElement( config2 );     // Adds an attribute-to-element downcast converter.\n   *\n   *\t\teditor.conversion.for( 'upcast' )\n   *\t\t\t.elementToAttribute( config3 );     // Adds an element-to-attribute upcast converter.\n   *\n   * Refer to the documentation of built-in conversion helpers to learn about their configuration options.\n   *\n   * * downcast (model-to-view) conversion helpers:\n   *\n   *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`},\n   *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement `attributeToElement()`},\n   *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToAttribute `attributeToAttribute()`}.\n   *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToElement `markerToElement()`}.\n   *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToHighlight `markerToHighlight()`}.\n   *\n   * * upcast (view-to-model) conversion helpers:\n   *\n   *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToElement `elementToElement()`},\n   *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute `elementToAttribute()`},\n   *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute `attributeToAttribute()`}.\n   *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToMarker `elementToMarker()`}.\n   *\n   * # Using custom conversion helpers\n   *\n   * If you need to implement a nontypical converter, you can do so by calling:\n   *\n   *\t\teditor.conversion.for( direction ).add( customHelper );\n   *\n   * The `.add()` method takes exactly one parameter, which is a function. This function should accept one parameter that\n   * is a dispatcher instance. The function should add an actual converter to the passed dispatcher instance.\n   *\n   * Example:\n   *\n   *\t\teditor.conversion.for( 'upcast' ).add( dispatcher => {\n   *\t\t\tdispatcher.on( 'element:a',  ( evt, data, conversionApi ) => {\n   *\t\t\t\t// Do something with a view <a> element.\n   *\t\t\t} );\n   *\t\t} );\n   *\n   * Refer to the documentation of {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n   * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} to learn how to write\n   * custom converters.\n   *\n   * @param {String} groupName The name of dispatchers group to add the converters to.\n   * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers|module:engine/conversion/upcasthelpers~UpcastHelpers}\n   */\n\n\n  for(groupName) {\n    if (!this._helpers.has(groupName)) {\n      /**\n       * Trying to add a converter to an unknown dispatchers group.\n       *\n       * @error conversion-for-unknown-group\n       */\n      throw new CKEditorError('conversion-for-unknown-group', this);\n    }\n\n    return this._helpers.get(groupName);\n  }\n  /**\n   * Sets up converters between the model and the view that convert a model element to a view element (and vice versa).\n   * For example, the model `<paragraph>Foo</paragraph>` is `<p>Foo</p>` in the view.\n   *\n   *\t\t// A simple conversion from the `paragraph` model element to the `<p>` view element (and vice versa).\n   *\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n   *\n   *\t\t// Override other converters by specifying a converter definition with a higher priority.\n   *\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'div', converterPriority: 'high' } );\n   *\n   *\t\t// View specified as an object instead of a string.\n   *\t\teditor.conversion.elementToElement( {\n   *\t\t\tmodel: 'fancyParagraph',\n   *\t\t\tview: {\n   *\t\t\t\tname: 'p',\n   *\t\t\t\tclasses: 'fancy'\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\t// Use `upcastAlso` to define other view elements that should also be converted to a `paragraph` element.\n   *\t\teditor.conversion.elementToElement( {\n   *\t\t\tmodel: 'paragraph',\n   *\t\t\tview: 'p',\n   *\t\t\tupcastAlso: [\n   *\t\t\t\t'div',\n   *\t\t\t\t{\n   *\t\t\t\t\t// Any element with the `display: block` style.\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\tdisplay: 'block'\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t]\n   *\t\t} );\n   *\n   *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n   *\t\teditor.conversion.elementToElement( {\n   *\t\t\tmodel: 'heading',\n   *\t\t\tview: 'h2',\n   *\t\t\t// Convert \"heading-like\" paragraphs to headings.\n   *\t\t\tupcastAlso: viewElement => {\n   *\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n   *\n   *\t\t\t\tif ( !fontSize ) {\n   *\t\t\t\t\treturn null;\n   *\t\t\t\t}\n   *\n   *\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n   *\n   *\t\t\t\tif ( !match ) {\n   *\t\t\t\t\treturn null;\n   *\t\t\t\t}\n   *\n   *\t\t\t\tconst size = Number( match[ 1 ] );\n   *\n   *\t\t\t\tif ( size > 26 ) {\n   *\t\t\t\t\t// Returned value can be an object with the matched properties.\n   *\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n   *\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n   *\n   *\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n   *\t\t\t\t}\n   *\n   *\t\t\t\treturn null;\n   *\t\t\t}\n   *\t\t} );\n   *\n   * `definition.model` is a `String` with a model element name to convert from or to.\n   * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n   *\n   * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n   */\n\n\n  elementToElement(definition) {\n    // Set up downcast converter.\n    this.for('downcast').elementToElement(definition); // Set up upcast converter.\n\n    for (const {\n      model,\n      view\n    } of _getAllUpcastDefinitions(definition)) {\n      this.for('upcast').elementToElement({\n        model,\n        view,\n        converterPriority: definition.converterPriority\n      });\n    }\n  }\n  /**\n   * Sets up converters between the model and the view that convert a model attribute to a view element (and vice versa).\n   * For example, a model text node with `\"Foo\"` as data and the `bold` attribute is `<strong>Foo</strong>` in the view.\n   *\n   *\t\t// A simple conversion from the `bold=true` attribute to the `<strong>` view element (and vice versa).\n   *\t\teditor.conversion.attributeToElement( { model: 'bold', view: 'strong' } );\n   *\n   *\t\t// Override other converters by specifying a converter definition with a higher priority.\n   *\t\teditor.conversion.attributeToElement( { model: 'bold', view: 'b', converterPriority: 'high' } );\n   *\n   *\t\t// View specified as an object instead of a string.\n   *\t\teditor.conversion.attributeToElement( {\n   *\t\t\tmodel: 'bold',\n   *\t\t\tview: {\n   *\t\t\t\tname: 'span',\n   *\t\t\t\tclasses: 'bold'\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\t// Use `config.model.name` to define the conversion only from a given node type, `$text` in this case.\n   *\t\t// The same attribute on different elements may then be handled by a different converter.\n   *\t\teditor.conversion.attributeToElement( {\n   *\t\t\tmodel: {\n   *\t\t\t\tkey: 'textDecoration',\n   *\t\t\t\tvalues: [ 'underline', 'lineThrough' ],\n   *\t\t\t\tname: '$text'\n   *\t\t\t},\n   *\t\t\tview: {\n   *\t\t\t\tunderline: {\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'text-decoration': 'underline'\n   *\t\t\t\t\t}\n   *\t\t\t\t},\n   *\t\t\t\tlineThrough: {\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'text-decoration': 'line-through'\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `bold` attribute.\n   *\t\teditor.conversion.attributeToElement( {\n   *\t\t\tmodel: 'bold',\n   *\t\t\tview: 'strong',\n   *\t\t\tupcastAlso: [\n   *\t\t\t\t'b',\n   *\t\t\t\t{\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tclasses: 'bold'\n   *\t\t\t\t},\n   *\t\t\t\t{\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'font-weight': 'bold'\n   *\t\t\t\t\t}\n   *\t\t\t\t},\n   *\t\t\t\tviewElement => {\n   *\t\t\t\t\tconst fontWeight = viewElement.getStyle( 'font-weight' );\n   *\n   *\t\t\t\t\tif ( viewElement.is( 'element', 'span' ) && fontWeight && /\\d+/.test() && Number( fontWeight ) > 500 ) {\n   *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n   *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n   *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n   *\n   *\t\t\t\t\t\treturn {\n   *\t\t\t\t\t\t\tname: true,\n   *\t\t\t\t\t\t\tstyles: [ 'font-weight' ]\n   *\t\t\t\t\t\t};\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t]\n   *\t\t} );\n   *\n   *\t\t// Conversion from and to a model attribute key whose value is an enum (`fontSize=big|small`).\n   *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n   *\t\teditor.conversion.attributeToElement( {\n   *\t\t\tmodel: {\n   *\t\t\t\tkey: 'fontSize',\n   *\t\t\t\tvalues: [ 'big', 'small' ]\n   *\t\t\t},\n   *\t\t\tview: {\n   *\t\t\t\tbig: {\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'font-size': '1.2em'\n   *\t\t\t\t\t}\n   *\t\t\t\t},\n   *\t\t\t\tsmall: {\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'font-size': '0.8em'\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t},\n   *\t\t\tupcastAlso: {\n   *\t\t\t\tbig: viewElement => {\n   *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n   *\n   *\t\t\t\t\tif ( !fontSize ) {\n   *\t\t\t\t\t\treturn null;\n   *\t\t\t\t\t}\n   *\n   *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n   *\n   *\t\t\t\t\tif ( !match ) {\n   *\t\t\t\t\t\treturn null;\n   *\t\t\t\t\t}\n   *\n   *\t\t\t\t\tconst size = Number( match[ 1 ] );\n   *\n   *\t\t\t\t\tif ( viewElement.is( 'element', 'span' ) && size > 10 ) {\n   *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n   *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n   *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n   *\n   *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n   *\t\t\t\t\t}\n   *\n   *\t\t\t\t\treturn null;\n   *\t\t\t\t},\n   *\t\t\t\tsmall: viewElement => {\n   *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n   *\n   *\t\t\t\t\tif ( !fontSize ) {\n   *\t\t\t\t\t\treturn null;\n   *\t\t\t\t\t}\n   *\n   *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n   *\n   *\t\t\t\t\tif ( !match ) {\n   *\t\t\t\t\t\treturn null;\n   *\t\t\t\t\t}\n   *\n   *\t\t\t\t\tconst size = Number( match[ 1 ] );\n   *\n   *\t\t\t\t\tif ( viewElement.is( 'element', 'span' ) && size < 10 ) {\n   *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n   *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n   *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n   *\n   *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n   *\t\t\t\t\t}\n   *\n   *\t\t\t\t\treturn null;\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   * The `definition.model` parameter specifies which model attribute should be converted from or to. It can be a `{ key, value }` object\n   * describing the attribute key and value to convert or a `String` specifying just the attribute key (then `value` is set to `true`).\n   * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n   *\n   * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n   */\n\n\n  attributeToElement(definition) {\n    // Set up downcast converter.\n    this.for('downcast').attributeToElement(definition); // Set up upcast converter.\n\n    for (const {\n      model,\n      view\n    } of _getAllUpcastDefinitions(definition)) {\n      this.for('upcast').elementToAttribute({\n        view,\n        model,\n        converterPriority: definition.converterPriority\n      });\n    }\n  }\n  /**\n   * Sets up converters between the model and the view that convert a model attribute to a view attribute (and vice versa). For example,\n   * `<imageBlock src='foo.jpg'></imageBlock>` is converted to `<img src='foo.jpg'></img>` (the same attribute key and value).\n   * This type of converters is intended to be used with {@link module:engine/model/element~Element model element} nodes.\n   * To convert text attributes {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement converter`}\n   * should be set up.\n   *\n   *\t\t// A simple conversion from the `source` model attribute to the `src` view attribute (and vice versa).\n   *\t\teditor.conversion.attributeToAttribute( { model: 'source', view: 'src' } );\n   *\n   *\t\t// Attribute values are strictly specified.\n   *\t\teditor.conversion.attributeToAttribute( {\n   *\t\t\tmodel: {\n   *\t\t\t\tname: 'imageInline',\n   *\t\t\t\tkey: 'aside',\n   *\t\t\t\tvalues: [ 'aside' ]\n   *\t\t\t},\n   *\t\t\tview: {\n   *\t\t\t\taside: {\n   *\t\t\t\t\tname: 'img',\n   *\t\t\t\t\tkey: 'class',\n   *\t\t\t\t\tvalue: [ 'aside', 'half-size' ]\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\t// Set the style attribute.\n   *\t\teditor.conversion.attributeToAttribute( {\n   *\t\t\tmodel: {\n   *\t\t\t\tname: 'imageInline',\n   *\t\t\t\tkey: 'aside',\n   *\t\t\t\tvalues: [ 'aside' ]\n   *\t\t\t},\n   *\t\t\tview: {\n   *\t\t\t\taside: {\n   *\t\t\t\t\tname: 'img',\n   *\t\t\t\t\tkey: 'style',\n   *\t\t\t\t\tvalue: {\n   *\t\t\t\t\t\tfloat: 'right',\n   *\t\t\t\t\t\twidth: '50%',\n   *\t\t\t\t\t\tmargin: '5px'\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\t// Conversion from and to a model attribute key whose value is an enum (`align=right|center`).\n   *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `align=right` attribute.\n   *\t\teditor.conversion.attributeToAttribute( {\n   *\t\t\tmodel: {\n   *\t\t\t\tkey: 'align',\n   *\t\t\t\tvalues: [ 'right', 'center' ]\n   *\t\t\t},\n   *\t\t\tview: {\n   *\t\t\t\tright: {\n   *\t\t\t\t\tkey: 'class',\n   *\t\t\t\t\tvalue: 'align-right'\n   *\t\t\t\t},\n   *\t\t\t\tcenter: {\n   *\t\t\t\t\tkey: 'class',\n   *\t\t\t\t\tvalue: 'align-center'\n   *\t\t\t\t}\n   *\t\t\t},\n   *\t\t\tupcastAlso: {\n   *\t\t\t\tright: {\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'text-align': 'right'\n   *\t\t\t\t\t}\n   *\t\t\t\t},\n   *\t\t\t\tcenter: {\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'text-align': 'center'\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   * The `definition.model` parameter specifies which model attribute should be converted from and to.\n   * It can be a `{ key, [ values ], [ name ] }` object or a `String`, which will be treated like `{ key: definition.model }`.\n   * The `key` property is the model attribute key to convert from and to.\n   * The `values` are the possible model attribute values. If `values` is not set, the model attribute value will be the same as the\n   * view attribute value.\n   * If `name` is set, the conversion will be set up only for model elements with the given name.\n   *\n   * The `definition.view` parameter specifies which view attribute should be converted from and to.\n   * It can be a `{ key, value, [ name ] }` object or a `String`, which will be treated like `{ key: definition.view }`.\n   * The `key` property is the view attribute key to convert from and to.\n   * The `value` is the view attribute value to convert from and to. If `definition.value` is not set, the view attribute value will be\n   * the same as the model attribute value.\n   * If `key` is `'class'`, `value` can be a `String` or an array of `String`s.\n   * If `key` is `'style'`, `value` is an object with key-value pairs.\n   * In other cases, `value` is a `String`.\n   * If `name` is set, the conversion will be set up only for model elements with the given name.\n   * If `definition.model.values` is set, `definition.view` is an object that assigns values from `definition.model.values`\n   * to `{ key, value, [ name ] }` objects.\n   *\n   * `definition.upcastAlso` specifies which other matching view elements should also be upcast to the given model configuration.\n   * If `definition.model.values` is set, `definition.upcastAlso` should be an object assigning values from `definition.model.values`\n   * to {@link module:engine/view/matcher~MatcherPattern}s or arrays of {@link module:engine/view/matcher~MatcherPattern}s.\n   *\n   * **Note:** `definition.model` and `definition.view` form should be mirrored, so the same types of parameters should\n   * be given in both parameters.\n   *\n   * @param {Object} definition The converter definition.\n   * @param {String|Object} definition.model The model attribute to convert from and to.\n   * @param {String|Object} definition.view The view attribute to convert from and to.\n   * @param {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [definition.upcastAlso]\n   * Any view element matching `definition.upcastAlso` will also be converted to the given model attribute. `definition.upcastAlso`\n   * is used only if `config.model.values` is specified.\n   */\n\n\n  attributeToAttribute(definition) {\n    // Set up downcast converter.\n    this.for('downcast').attributeToAttribute(definition); // Set up upcast converter.\n\n    for (const {\n      model,\n      view\n    } of _getAllUpcastDefinitions(definition)) {\n      this.for('upcast').attributeToAttribute({\n        view,\n        model\n      });\n    }\n  }\n  /**\n   * Creates and caches conversion helpers for given dispatchers group.\n   *\n   * @private\n   * @param {Object} options\n   * @param {String} options.name Group name.\n   * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n   * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} options.dispatchers\n   * @param {Boolean} options.isDowncast\n   */\n\n\n  _createConversionHelpers(_ref) {\n    let {\n      name,\n      dispatchers,\n      isDowncast\n    } = _ref;\n\n    if (this._helpers.has(name)) {\n      /**\n       * Trying to register a group name that has already been registered.\n       *\n       * @error conversion-group-exists\n       */\n      throw new CKEditorError('conversion-group-exists', this);\n    }\n\n    const helpers = isDowncast ? new DowncastHelpers(dispatchers) : new UpcastHelpers(dispatchers);\n\n    this._helpers.set(name, helpers);\n  }\n\n}\n/**\n * Defines how the model should be converted from and to the view.\n *\n * @typedef {Object} module:engine/conversion/conversion~ConverterDefinition\n *\n * @property {*} [model] The model conversion definition. Describes the model element or model attribute to convert. This parameter differs\n * for different functions that accept `ConverterDefinition`. See the description of the function to learn how to set it.\n * @property {module:engine/view/elementdefinition~ElementDefinition|Object} view The definition of the view element to convert from and\n * to. If `model` describes multiple values, `view` is an object that assigns these values (`view` object keys) to view element definitions\n * (`view` object values).\n * @property {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [upcastAlso]\n * Any view element matching `upcastAlso` will also be converted to the model. If `model` describes multiple values, `upcastAlso`\n * is an object that assigns these values (`upcastAlso` object keys) to {@link module:engine/view/matcher~MatcherPattern}s\n * (`upcastAlso` object values).\n * @property {module:utils/priorities~PriorityString} [converterPriority] The converter priority.\n */\n// Helper function that creates a joint array out of an item passed in `definition.view` and items passed in\n// `definition.upcastAlso`.\n//\n// @param {module:engine/conversion/conversion~ConverterDefinition} definition\n// @returns {Array} Array containing view definitions.\n\nfunction* _getAllUpcastDefinitions(definition) {\n  if (definition.model.values) {\n    for (const value of definition.model.values) {\n      const model = {\n        key: definition.model.key,\n        value\n      };\n      const view = definition.view[value];\n      const upcastAlso = definition.upcastAlso ? definition.upcastAlso[value] : undefined;\n      yield* _getUpcastDefinition(model, view, upcastAlso);\n    }\n  } else {\n    yield* _getUpcastDefinition(definition.model, definition.view, definition.upcastAlso);\n  }\n}\n\nfunction* _getUpcastDefinition(model, view, upcastAlso) {\n  yield {\n    model,\n    view\n  };\n\n  if (upcastAlso) {\n    for (const upcastAlsoItem of toArray(upcastAlso)) {\n      yield {\n        model,\n        view: upcastAlsoItem\n      };\n    }\n  }\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversion.js"],"names":["CKEditorError","UpcastHelpers","DowncastHelpers","toArray","Conversion","constructor","downcastDispatchers","upcastDispatchers","_helpers","Map","_downcast","_createConversionHelpers","name","dispatchers","isDowncast","_upcast","addAlias","alias","dispatcher","includes","isUpcast","for","groupName","has","get","elementToElement","definition","model","view","_getAllUpcastDefinitions","converterPriority","attributeToElement","elementToAttribute","attributeToAttribute","helpers","set","values","value","key","upcastAlso","undefined","_getUpcastDefinition","upcastAlsoItem"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,aAAP,MAA0B,6CAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,OAAP,MAAoB,uCAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,UAAN,CAAiB;AAC/B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAAEC,mBAAF,EAAuBC,iBAAvB,EAA2C;AACrD;AACF;AACA;AACA;AACA;AACA;AACE,SAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB,CAPqD,CASrD;;AACA,SAAKC,SAAL,GAAiBP,OAAO,CAAEG,mBAAF,CAAxB;;AACA,SAAKK,wBAAL,CAA+B;AAAEC,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,WAAW,EAAE,KAAKH,SAAtC;AAAiDI,MAAAA,UAAU,EAAE;AAA7D,KAA/B;;AAEA,SAAKC,OAAL,GAAeZ,OAAO,CAAEI,iBAAF,CAAtB;;AACA,SAAKI,wBAAL,CAA+B;AAAEC,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,WAAW,EAAE,KAAKE,OAApC;AAA6CD,MAAAA,UAAU,EAAE;AAAzD,KAA/B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCE,EAAAA,QAAQ,CAAEC,KAAF,EAASC,UAAT,EAAsB;AAC7B,UAAMJ,UAAU,GAAG,KAAKJ,SAAL,CAAeS,QAAf,CAAyBD,UAAzB,CAAnB;;AACA,UAAME,QAAQ,GAAG,KAAKL,OAAL,CAAaI,QAAb,CAAuBD,UAAvB,CAAjB;;AAEA,QAAK,CAACE,QAAD,IAAa,CAACN,UAAnB,EAAgC;AAC/B;AACH;AACA;AACA;AACA;AACG,YAAM,IAAId,aAAJ,CACL,gDADK,EAEL,IAFK,CAAN;AAIA;;AAED,SAAKW,wBAAL,CAA+B;AAAEC,MAAAA,IAAI,EAAEK,KAAR;AAAeJ,MAAAA,WAAW,EAAE,CAAEK,UAAF,CAA5B;AAA4CJ,MAAAA;AAA5C,KAA/B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCO,EAAAA,GAAG,CAAEC,SAAF,EAAc;AAChB,QAAK,CAAC,KAAKd,QAAL,CAAce,GAAd,CAAmBD,SAAnB,CAAN,EAAuC;AACtC;AACH;AACA;AACA;AACA;AACG,YAAM,IAAItB,aAAJ,CAAmB,8BAAnB,EAAmD,IAAnD,CAAN;AACA;;AAED,WAAO,KAAKQ,QAAL,CAAcgB,GAAd,CAAmBF,SAAnB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCG,EAAAA,gBAAgB,CAAEC,UAAF,EAAe;AAC9B;AACA,SAAKL,GAAL,CAAU,UAAV,EAAuBI,gBAAvB,CAAyCC,UAAzC,EAF8B,CAI9B;;AACA,SAAM,MAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAZ,IAA+BC,wBAAwB,CAAEH,UAAF,CAAvD,EAAwE;AACvE,WAAKL,GAAL,CAAU,QAAV,EACEI,gBADF,CACoB;AAClBE,QAAAA,KADkB;AAElBC,QAAAA,IAFkB;AAGlBE,QAAAA,iBAAiB,EAAEJ,UAAU,CAACI;AAHZ,OADpkBAAkB,CAAEL,UAAF,EAAe;AAChC;AACA,SAAKL,GAAL,CAAU,UAAV,EAAuBU,kBAAvB,CAA2CL,UAA3C,EAFgC,CAIhC;;AACA,SAAM,MAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAZ,IAA+BC,wBAAwB,CAAEH,UAAF,CAAvD,EAAwE;AACvE,WAAKL,GAAL,CAAU,QAAV,EACEW,kBADF,CACsB;AACpBJ,QAAAA,IADoB;AAEpBD,QAAAA,KAFoB;AAGpBG,QAAAA,iBAAiB,EAAEJ,UAAU,CAACI;AAHV,OADtB;AAMA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCG,EAAAA,oBAAoB,CAAEP,UAAF,EAAe;AAClC;AACA,SAAKL,GAAL,CAAU,UAAV,EAAuBY,oBAAvB,CAA6CP,UAA7C,EAFkC,CAIlC;;AACA,SAAM,MAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAZ,IAA+BC,wBAAwB,CAAEH,UAAF,CAAvD,EAAwE;AACvE,WAAKL,GAAL,CAAU,QAAV,EACEY,oBADF,CACwB;AACtBL,QAAAA,IADsB;AAEtBD,QAAAA;AAFsB,OADxB;AAKA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACChB,EAAAA,wBAAwB,OAAsC;AAAA,QAApC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,WAAR;AAAqBC,MAAAA;AAArB,KAAoC;;AAC7D,QAAK,KAAKN,QAAL,CAAce,GAAd,CAAmBX,IAAnB,CAAL,EAAiC;AAChC;AACH;AACA;AACA;AACA;AACG,YAAM,IAAIZ,aAAJ,CAAmB,yBAAnB,EAA8C,IAA9C,CAAN;AACA;;AAED,UAAMkC,OAAO,GAAGpB,UAAU,GAAG,IAAIZ,eAAJ,CAAqBW,WAArB,CAAH,GAAwC,IAAIZ,aAAJ,CAAmBY,WAAnB,CAAlE;;AAEA,SAAKL,QAAL,CAAc2B,GAAd,CAAmBvB,IAAnB,EAAyBsB,OAAzB;AACA;;AA1hB8B;AA6hBhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,UAAUL,wBAAV,CAAoCH,UAApC,EAAiD;AAChD,MAAKA,UAAU,CAACC,KAAX,CAAiBS,MAAtB,EAA+B;AAC9B,SAAM,MAAMC,KAAZ,IAAqBX,UAAU,CAACC,KAAX,CAAiBS,MAAtC,EAA+C;AAC9C,YAAMT,KAAK,GAAG;AAAEW,QAAAA,GAAG,EAAEZ,UAAU,CAACC,KAAX,CAAiBW,GAAxB;AAA6BD,QAAAA;AAA7B,OAAd;AACA,YAAMT,IAAI,GAAGF,UAAU,CAACE,IAAX,CAAiBS,KAAjB,CAAb;AACA,YAAME,UAAU,GAAGb,UAAU,CAACa,UAAX,GAAwBb,UAAU,CAACa,UAAX,CAAuBF,KAAvB,CAAxB,GAAyDG,SAA5E;AAEA,aAAOC,oBAAoB,CAAEd,KAAF,EAASC,IAAT,EAAeW,UAAf,CAA3B;AACA;AACD,GARD,MAQO;AACN,WAAOE,oBAAoB,CAAEf,UAAU,CAACC,KAAb,EAAoBD,UAAU,CAACE,IAA/B,EAAqCF,UAAU,CAACa,UAAhD,CAA3B;AACA;AACD;;AAED,UAAUE,oBAAV,CAAgCd,KAAhC,EAAuCC,IAAvC,EAA6CW,UAA7C,EAA0D;AACzD,QAAM;AAAEZ,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAN;;AAEA,MAAKW,UAAL,EAAkB;AACjB,SAAM,MAAMG,cAAZ,IAA8BvC,OAAO,CAAEoC,UAAF,CAArC,EAAsD;AACrD,YAAM;AAAEZ,QAAAA,KAAF;AAASC,QAAAA,IAAI,EAAEc;AAAf,OAAN;AACA;AACD;AACD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/conversion\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport UpcastHelpers from './upcasthelpers';\nimport DowncastHelpers from './downcasthelpers';\nimport toArray from '@ckeditor/ckeditor5-utils/src/toarray';\n\n/**\n * A utility class that helps add converters to upcast and downcast dispatchers.\n *\n * We recommend reading the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide first to\n * understand the core concepts of the conversion mechanisms.\n *\n * An instance of the conversion manager is available in the\n * {@link module:core/editor/editor~Editor#conversion `editor.conversion`} property\n * and by default has the following groups of dispatchers (i.e. directions of conversion):\n *\n * * `downcast` (editing and data downcasts)\n * * `editingDowncast`\n * * `dataDowncast`\n * * `upcast`\n *\n * # One-way converters\n *\n * To add a converter to a specific group, use the {@link module:engine/conversion/conversion~Conversion#for `for()`}\n * method:\n *\n *\t\t// Add a converter to editing downcast and data downcast.\n *\t\teditor.conversion.for( 'downcast' ).elementToElement( config ) );\n *\n *\t\t// Add a converter to the data pipepline only:\n *\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( dataConversionConfig ) );\n *\n *\t\t// And a slightly different one for the editing pipeline:\n *\t\teditor.conversion.for( 'editingDowncast' ).elementToElement( editingConversionConfig ) );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for `for()`} method documentation to learn more about\n * available conversion helpers and how to use your custom ones.\n *\n * # Two-way converters\n *\n * Besides using one-way converters via the `for()` method, you can also use other methods available in this\n * class to add two-way converters (upcast and downcast):\n *\n * * {@link module:engine/conversion/conversion~Conversion#elementToElement `elementToElement()`} &ndash;\n * Model element to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement()`} &ndash;\n * Model attribute to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `attributeToAttribute()`} &ndash;\n * Model attribute to view element and vice versa.\n */\nexport default class Conversion {\n\t/**\n\t * Creates a new conversion instance.\n\t *\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher>} downcastDispatchers\n\t * @param {module:engine/conversion/upcastdispatcher~UpcastDispatcher|\n\t * Array.<module:engine/conversion/upcastdispatcher~UpcastDispatcher>} upcastDispatchers\n\t */\n\tconstructor( downcastDispatchers, upcastDispatchers ) {\n\t\t/**\n\t\t * Maps dispatchers group name to ConversionHelpers instances.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<String,module:engine/conversion/conversionhelpers~ConversionHelpers>}\n\t\t */\n\t\tthis._helpers = new Map();\n\n\t\t// Define default 'downcast' & 'upcast' dispatchers groups. Those groups are always available as two-way converters needs them.\n\t\tthis._downcast = toArray( downcastDispatchers );\n\t\tthis._createConversionHelpers( { name: 'downcast', dispatchers: this._downcast, isDowncast: true } );\n\n\t\tthis._upcast = toArray( upcastDispatchers );\n\t\tthis._createConversionHelpers( { name: 'upcast', dispatchers: this._upcast, isDowncast: false } );\n\t}\n\n\t/**\n\t * Define an alias for registered dispatcher.\n\t *\n\t *\t\tconst conversion = new Conversion(\n\t *\t\t\t[ dataDowncastDispatcher, editingDowncastDispatcher ],\n\t *\t\t\tupcastDispatcher\n\t *\t\t);\n\t *\n\t *\t\tconversion.addAlias( 'dataDowncast', dataDowncastDispatcher );\n\t *\n\t * @param {String} alias An alias of a dispatcher.\n\t * @param {module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher} dispatcher Dispatcher which should have an alias.\n\t */\n\taddAlias( alias, dispatcher ) {\n\t\tconst isDowncast = this._downcast.includes( dispatcher );\n\t\tconst isUpcast = this._upcast.includes( dispatcher );\n\n\t\tif ( !isUpcast && !isDowncast ) {\n\t\t\t/**\n\t\t\t * Trying to register and alias for a dispatcher that nas not been registered.\n\t\t\t *\n\t\t\t * @error conversion-add-alias-dispatcher-not-registered\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'conversion-add-alias-dispatcher-not-registered',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tthis._createConversionHelpers( { name: alias, dispatchers: [ dispatcher ], isDowncast } );\n\t}\n\n\t/**\n\t * Provides a chainable API to assign converters to conversion dispatchers group.\n\t *\n\t * If the given group name has not been registered, the\n\t * {@link module:utils/ckeditorerror~CKEditorError `conversion-for-unknown-group` error} is thrown.\n\t *\n\t * You can use conversion helpers available directly in the `for()` chain or your custom ones via\n\t * the {@link module:engine/conversion/conversionhelpers~ConversionHelpers#add `add()`} method.\n\t *\n\t * # Using bulit-in conversion helpers\n\t *\n\t * The `for()` chain comes with a set of conversion helpers which you can use like this:\n\t *\n\t *\t\teditor.conversion.for( 'downcast' )\n\t *\t\t\t.elementToElement( config1 )        // Adds an element-to-element downcast converter.\n\t *\t\t\t.attributeToElement( config2 );     // Adds an attribute-to-element downcast converter.\n\t *\n\t *\t\teditor.conversion.for( 'upcast' )\n\t *\t\t\t.elementToAttribute( config3 );     // Adds an element-to-attribute upcast converter.\n\t *\n\t * Refer to the documentation of built-in conversion helpers to learn about their configuration options.\n\t *\n\t * * downcast (model-to-view) conversion helpers:\n\t *\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`},\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement `attributeToElement()`},\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToAttribute `attributeToAttribute()`}.\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToElement `markerToElement()`}.\n\t *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToHighlight `markerToHighlight()`}.\n\t *\n\t * * upcast (view-to-model) conversion helpers:\n\t *\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToElement `elementToElement()`},\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute `elementToAttribute()`},\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute `attributeToAttribute()`}.\n\t *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToMarker `elementToMarker()`}.\n\t *\n\t * # Using custom conversion helpers\n\t *\n\t * If you need to implement a nontypical converter, you can do so by calling:\n\t *\n\t *\t\teditor.conversion.for( direction ).add( customHelper );\n\t *\n\t * The `.add()` method takes exactly one parameter, which is a function. This function should accept one parameter that\n\t * is a dispatcher instance. The function should add an actual converter to the passed dispatcher instance.\n\t *\n\t * Example:\n\t *\n\t *\t\teditor.conversion.for( 'upcast' ).add( dispatcher => {\n\t *\t\t\tdispatcher.on( 'element:a',  ( evt, data, conversionApi ) => {\n\t *\t\t\t\t// Do something with a view <a> element.\n\t *\t\t\t} );\n\t *\t\t} );\n\t *\n\t * Refer to the documentation of {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n\t * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} to learn how to write\n\t * custom converters.\n\t *\n\t * @param {String} groupName The name of dispatchers group to add the converters to.\n\t * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers|module:engine/conversion/upcasthelpers~UpcastHelpers}\n\t */\n\tfor( groupName ) {\n\t\tif ( !this._helpers.has( groupName ) ) {\n\t\t\t/**\n\t\t\t * Trying to add a converter to an unknown dispatchers group.\n\t\t\t *\n\t\t\t * @error conversion-for-unknown-group\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'conversion-for-unknown-group', this );\n\t\t}\n\n\t\treturn this._helpers.get( groupName );\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model element to a view element (and vice versa).\n\t * For example, the model `<paragraph>Foo</paragraph>` is `<p>Foo</p>` in the view.\n\t *\n\t *\t\t// A simple conversion from the `paragraph` model element to the `<p>` view element (and vice versa).\n\t *\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\t *\n\t *\t\t// Override other converters by specifying a converter definition with a higher priority.\n\t *\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'div', converterPriority: 'high' } );\n\t *\n\t *\t\t// View specified as an object instead of a string.\n\t *\t\teditor.conversion.elementToElement( {\n\t *\t\t\tmodel: 'fancyParagraph',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'fancy'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to a `paragraph` element.\n\t *\t\teditor.conversion.elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'p',\n\t *\t\t\tupcastAlso: [\n\t *\t\t\t\t'div',\n\t *\t\t\t\t{\n\t *\t\t\t\t\t// Any element with the `display: block` style.\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\tdisplay: 'block'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n\t *\t\teditor.conversion.elementToElement( {\n\t *\t\t\tmodel: 'heading',\n\t *\t\t\tview: 'h2',\n\t *\t\t\t// Convert \"heading-like\" paragraphs to headings.\n\t *\t\t\tupcastAlso: viewElement => {\n\t *\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\tif ( size > 26 ) {\n\t *\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\treturn null;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * `definition.model` is a `String` with a model element name to convert from or to.\n\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n\t *\n\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n\t */\n\telementToElement( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).elementToElement( definition );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' )\n\t\t\t\t.elementToElement( {\n\t\t\t\t\tmodel,\n\t\t\t\t\tview,\n\t\t\t\t\tconverterPriority: definition.converterPriority\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model attribute to a view element (and vice versa).\n\t * For example, a model text node with `\"Foo\"` as data and the `bold` attribute is `<strong>Foo</strong>` in the view.\n\t *\n\t *\t\t// A simple conversion from the `bold=true` attribute to the `<strong>` view element (and vice versa).\n\t *\t\teditor.conversion.attributeToElement( { model: 'bold', view: 'strong' } );\n\t *\n\t *\t\t// Override other converters by specifying a converter definition with a higher priority.\n\t *\t\teditor.conversion.attributeToElement( { model: 'bold', view: 'b', converterPriority: 'high' } );\n\t *\n\t *\t\t// View specified as an object instead of a string.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: 'bold'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `config.model.name` to define the conversion only from a given node type, `$text` in this case.\n\t *\t\t// The same attribute on different elements may then be handled by a different converter.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'textDecoration',\n\t *\t\t\t\tvalues: [ 'underline', 'lineThrough' ],\n\t *\t\t\t\tname: '$text'\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tunderline: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-decoration': 'underline'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tlineThrough: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-decoration': 'line-through'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `bold` attribute.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'strong',\n\t *\t\t\tupcastAlso: [\n\t *\t\t\t\t'b',\n\t *\t\t\t\t{\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tclasses: 'bold'\n\t *\t\t\t\t},\n\t *\t\t\t\t{\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-weight': 'bold'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tviewElement => {\n\t *\t\t\t\t\tconst fontWeight = viewElement.getStyle( 'font-weight' );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'element', 'span' ) && fontWeight && /\\d+/.test() && Number( fontWeight ) > 500 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn {\n\t *\t\t\t\t\t\t\tname: true,\n\t *\t\t\t\t\t\t\tstyles: [ 'font-weight' ]\n\t *\t\t\t\t\t\t};\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Conversion from and to a model attribute key whose value is an enum (`fontSize=big|small`).\n\t *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n\t *\t\teditor.conversion.attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'fontSize',\n\t *\t\t\t\tvalues: [ 'big', 'small' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tbig: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '1.2em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '0.8em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tupcastAlso: {\n\t *\t\t\t\tbig: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'element', 'span' ) && size > 10 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'element', 'span' ) && size < 10 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * The `definition.model` parameter specifies which model attribute should be converted from or to. It can be a `{ key, value }` object\n\t * describing the attribute key and value to convert or a `String` specifying just the attribute key (then `value` is set to `true`).\n\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n\t *\n\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n\t */\n\tattributeToElement( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).attributeToElement( definition );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' )\n\t\t\t\t.elementToAttribute( {\n\t\t\t\t\tview,\n\t\t\t\t\tmodel,\n\t\t\t\t\tconverterPriority: definition.converterPriority\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model attribute to a view attribute (and vice versa). For example,\n\t * `<imageBlock src='foo.jpg'></imageBlock>` is converted to `<img src='foo.jpg'></img>` (the same attribute key and value).\n\t * This type of converters is intended to be used with {@link module:engine/model/element~Element model element} nodes.\n\t * To convert text attributes {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement converter`}\n\t * should be set up.\n\t *\n\t *\t\t// A simple conversion from the `source` model attribute to the `src` view attribute (and vice versa).\n\t *\t\teditor.conversion.attributeToAttribute( { model: 'source', view: 'src' } );\n\t *\n\t *\t\t// Attribute values are strictly specified.\n\t *\t\teditor.conversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'imageInline',\n\t *\t\t\t\tkey: 'aside',\n\t *\t\t\t\tvalues: [ 'aside' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\taside: {\n\t *\t\t\t\t\tname: 'img',\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'aside', 'half-size' ]\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Set the style attribute.\n\t *\t\teditor.conversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'imageInline',\n\t *\t\t\t\tkey: 'aside',\n\t *\t\t\t\tvalues: [ 'aside' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\taside: {\n\t *\t\t\t\t\tname: 'img',\n\t *\t\t\t\t\tkey: 'style',\n\t *\t\t\t\t\tvalue: {\n\t *\t\t\t\t\t\tfloat: 'right',\n\t *\t\t\t\t\t\twidth: '50%',\n\t *\t\t\t\t\t\tmargin: '5px'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Conversion from and to a model attribute key whose value is an enum (`align=right|center`).\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `align=right` attribute.\n\t *\t\teditor.conversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'align',\n\t *\t\t\t\tvalues: [ 'right', 'center' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tright: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: 'align-right'\n\t *\t\t\t\t},\n\t *\t\t\t\tcenter: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: 'align-center'\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tupcastAlso: {\n\t *\t\t\t\tright: {\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-align': 'right'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tcenter: {\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-align': 'center'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * The `definition.model` parameter specifies which model attribute should be converted from and to.\n\t * It can be a `{ key, [ values ], [ name ] }` object or a `String`, which will be treated like `{ key: definition.model }`.\n\t * The `key` property is the model attribute key to convert from and to.\n\t * The `values` are the possible model attribute values. If `values` is not set, the model attribute value will be the same as the\n\t * view attribute value.\n\t * If `name` is set, the conversion will be set up only for model elements with the given name.\n\t *\n\t * The `definition.view` parameter specifies which view attribute should be converted from and to.\n\t * It can be a `{ key, value, [ name ] }` object or a `String`, which will be treated like `{ key: definition.view }`.\n\t * The `key` property is the view attribute key to convert from and to.\n\t * The `value` is the view attribute value to convert from and to. If `definition.value` is not set, the view attribute value will be\n\t * the same as the model attribute value.\n\t * If `key` is `'class'`, `value` can be a `String` or an array of `String`s.\n\t * If `key` is `'style'`, `value` is an object with key-value pairs.\n\t * In other cases, `value` is a `String`.\n\t * If `name` is set, the conversion will be set up only for model elements with the given name.\n\t * If `definition.model.values` is set, `definition.view` is an object that assigns values from `definition.model.values`\n\t * to `{ key, value, [ name ] }` objects.\n\t *\n\t * `definition.upcastAlso` specifies which other matching view elements should also be upcast to the given model configuration.\n\t * If `definition.model.values` is set, `definition.upcastAlso` should be an object assigning values from `definition.model.values`\n\t * to {@link module:engine/view/matcher~MatcherPattern}s or arrays of {@link module:engine/view/matcher~MatcherPattern}s.\n\t *\n\t * **Note:** `definition.model` and `definition.view` form should be mirrored, so the same types of parameters should\n\t * be given in both parameters.\n\t *\n\t * @param {Object} definition The converter definition.\n\t * @param {String|Object} definition.model The model attribute to convert from and to.\n\t * @param {String|Object} definition.view The view attribute to convert from and to.\n\t * @param {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [definition.upcastAlso]\n\t * Any view element matching `definition.upcastAlso` will also be converted to the given model attribute. `definition.upcastAlso`\n\t * is used only if `config.model.values` is specified.\n\t */\n\tattributeToAttribute( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).attributeToAttribute( definition );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' )\n\t\t\t\t.attributeToAttribute( {\n\t\t\t\t\tview,\n\t\t\t\t\tmodel\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Creates and caches conversion helpers for given dispatchers group.\n\t *\n\t * @private\n\t * @param {Object} options\n\t * @param {String} options.name Group name.\n\t * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} options.dispatchers\n\t * @param {Boolean} options.isDowncast\n\t */\n\t_createConversionHelpers( { name, dispatchers, isDowncast } ) {\n\t\tif ( this._helpers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Trying to register a group name that has already been registered.\n\t\t\t *\n\t\t\t * @error conversion-group-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'conversion-group-exists', this );\n\t\t}\n\n\t\tconst helpers = isDowncast ? new DowncastHelpers( dispatchers ) : new UpcastHelpers( dispatchers );\n\n\t\tthis._helpers.set( name, helpers );\n\t}\n}\n\n/**\n * Defines how the model should be converted from and to the view.\n *\n * @typedef {Object} module:engine/conversion/conversion~ConverterDefinition\n *\n * @property {*} [model] The model conversion definition. Describes the model element or model attribute to convert. This parameter differs\n * for different functions that accept `ConverterDefinition`. See the description of the function to learn how to set it.\n * @property {module:engine/view/elementdefinition~ElementDefinition|Object} view The definition of the view element to convert from and\n * to. If `model` describes multiple values, `view` is an object that assigns these values (`view` object keys) to view element definitions\n * (`view` object values).\n * @property {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [upcastAlso]\n * Any view element matching `upcastAlso` will also be converted to the model. If `model` describes multiple values, `upcastAlso`\n * is an object that assigns these values (`upcastAlso` object keys) to {@link module:engine/view/matcher~MatcherPattern}s\n * (`upcastAlso` object values).\n * @property {module:utils/priorities~PriorityString} [converterPriority] The converter priority.\n */\n\n// Helper function that creates a joint array out of an item passed in `definition.view` and items passed in\n// `definition.upcastAlso`.\n//\n// @param {module:engine/conversion/conversion~ConverterDefinition} definition\n// @returns {Array} Array containing view definitions.\nfunction* _getAllUpcastDefinitions( definition ) {\n\tif ( definition.model.values ) {\n\t\tfor ( const value of definition.model.values ) {\n\t\t\tconst model = { key: definition.model.key, value };\n\t\t\tconst view = definition.view[ value ];\n\t\t\tconst upcastAlso = definition.upcastAlso ? definition.upcastAlso[ value ] : undefined;\n\n\t\t\tyield* _getUpcastDefinition( model, view, upcastAlso );\n\t\t}\n\t} else {\n\t\tyield* _getUpcastDefinition( definition.model, definition.view, definition.upcastAlso );\n\t}\n}\n\nfunction* _getUpcastDefinition( model, view, upcastAlso ) {\n\tyield { model, view };\n\n\tif ( upcastAlso ) {\n\t\tfor ( const upcastAlsoItem of toArray( upcastAlso ) ) {\n\t\t\tyield { model, view: upcastAlsoItem };\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}