{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser, Node */\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\n\nexport default class HtmlDataProcessor {\n  /**\n   * Creates a new instance of the HTML data processor class.\n   *\n   * @param {module:engine/view/document~Document} document The view document instance.\n   */\n  constructor(document) {\n    /**\n     * A DOM parser instance used to parse an HTML string to an HTML document.\n     *\n     * @member {DOMParser}\n     */\n    this.domParser = new DOMParser();\n    /**\n     * A DOM converter used to convert DOM elements to view elements.\n     *\n     * @member {module:engine/view/domconverter~DomConverter}\n     */\n\n    this.domConverter = new DomConverter(document, {\n      renderingMode: 'data'\n    });\n    /**\n     * A basic HTML writer instance used to convert DOM elements to an HTML string.\n     *\n     * @member {module:engine/dataprocessor/htmlwriter~HtmlWriter}\n     */\n\n    this.htmlWriter = new BasicHtmlWriter();\n  }\n  /**\n   * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n   * to data format &mdash; in this case to an HTML string.\n   *\n   * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n   * @returns {String} HTML string.\n   */\n\n\n  toData(viewFragment) {\n    // Convert view DocumentFragment to DOM DocumentFragment.\n    const domFragment = this.domConverter.viewToDom(viewFragment, document); // Convert DOM DocumentFragment to HTML output.\n\n    return this.htmlWriter.getHtml(domFragment);\n  }\n  /**\n   * Converts the provided HTML string to a view tree.\n   *\n   * @param {String} data An HTML string.\n   * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n   */\n\n\n  toView(data) {\n    // Convert input HTML data to DOM DocumentFragment.\n    const domFragment = this._toDom(data); // Convert DOM DocumentFragment to view DocumentFragment.\n\n\n    return this.domConverter.domToView(domFragment);\n  }\n  /**\n   * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n   * and not processed during the conversion from the DOM to the view elements.\n   *\n   * The raw data can be later accessed by a\n   * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n   *\n   * @param {module:engine/view/matcher~MatcherPattern} pattern Pattern matching all view elements whose content should\n   * be treated as raw data.\n   */\n\n\n  registerRawContentMatcher(pattern) {\n    this.domConverter.registerRawContentMatcher(pattern);\n  }\n  /**\n   * If the processor is set to use marked fillers, it will insert `&nbsp;` fillers wrapped in `<span>` elements\n   * (`<span data-cke-filler=\"true\">&nbsp;</span>`) instead of regular `&nbsp;` characters.\n   *\n   * This mode allows for a more precise handling of the block fillers (so they do not leak into the editor content) but\n   * bloats the editor data with additional markup.\n   *\n   * This mode may be required by some features and will be turned on by them automatically.\n   *\n   * @param {'default'|'marked'} type Whether to use the default or the marked `&nbsp;` block fillers.\n   */\n\n\n  useFillerType(type) {\n    this.domConverter.blockFillerMode = type == 'marked' ? 'markedNbsp' : 'nbsp';\n  }\n  /**\n   * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n   * the provided data.\n   *\n   * @private\n   * @param {String} data\n   * @returns {DocumentFragment}\n   */\n\n\n  _toDom(data) {\n    const document = this.domParser.parseFromString(data, 'text/html');\n    const fragment = document.createDocumentFragment(); // The rules for parsing an HTML string can be read on https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inhtml.\n    //\n    // In short, parsing tokens in an HTML string starts with the so-called \"initial\" insertion mode. When a DOM parser is in this\n    // state and encounters a comment node, it inserts this comment node as the last child of the newly-created `HTMLDocument` object.\n    // The parser then proceeds to successive insertion modes during parsing subsequent tokens and appends in the `HTMLDocument` object\n    // other nodes (like <html>, <head>, <body>). This causes that the first leading comments from HTML string become the first nodes\n    // in the `HTMLDocument` object, but not in the <body> collection, because they are ultimately located before the <html> element.\n    //\n    // Therefore, so that such leading comments do not disappear, they all are moved from the `HTMLDocument` object to the document\n    // fragment, until the <html> element is encountered.\n    //\n    // See: https://github.com/ckeditor/ckeditor5/issues/9861.\n\n    let documentChildNode = document.firstChild;\n\n    while (!documentChildNode.isSameNode(document.documentElement)) {\n      const node = documentChildNode;\n      documentChildNode = documentChildNode.nextSibling; // It seems that `DOMParser#parseFromString()` adds only comment nodes directly to the `HTMLDocument` object, before the <html>\n      // node. The condition below is just to be sure we are moving only comment nodes.\n\n      /* istanbul ignore else */\n\n      if (node.nodeType == Node.COMMENT_NODE) {\n        fragment.appendChild(node);\n      }\n    }\n\n    const bodyChildNodes = document.body.childNodes;\n\n    while (bodyChildNodes.length > 0) {\n      fragment.appendChild(bodyChildNodes[0]);\n    }\n\n    return fragment;\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js"],"names":["BasicHtmlWriter","DomConverter","HtmlDataProcessor","constructor","document","domParser","DOMParser","domConverter","renderingMode","htmlWriter","toData","viewFragment","domFragment","viewToDom","getHtml","toView","data","_toDom","domToView","registerRawContentMatcher","pattern","useFillerType","type","blockFillerMode","parseFromString","fragment","createDocumentFragment","documentChildNode","firstChild","isSameNode","documentElement","node","nextSibling","nodeType","Node","COMMENT_NODE","appendChild","bodyChildNodes","body","childNodes","length"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,iBAAN,CAAwB;AACtC;AACD;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAAEC,QAAF,EAAa;AACvB;AACF;AACA;AACA;AACA;AACE,SAAKC,SAAL,GAAiB,IAAIC,SAAJ,EAAjB;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKC,YAAL,GAAoB,IAAIN,YAAJ,CAAkBG,QAAlB,EAA4B;AAAEI,MAAAA,aAAa,EAAE;AAAjB,KAA5B,CAApB;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKC,UAAL,GAAkB,IAAIT,eAAJ,EAAlB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCU,EAAAA,MAAM,CAAEC,YAAF,EAAiB;AACtB;AACA,UAAMC,WAAW,GAAG,KAAKL,YAAL,CAAkBM,SAAlB,CAA6BF,YAA7B,EAA2CP,QAA3C,CAApB,CAFsB,CAItB;;AACA,WAAO,KAAKK,UAAL,CAAgBK,OAAhB,CAAyBF,WAAzB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCG,EAAAA,MAAM,CAAEC,IAAF,EAAS;AACd;AACA,UAAMJ,WAAW,GAAG,KAAKK,MAAL,CAAaD,IAAb,CAApB,CAFc,CAId;;;AACA,WAAO,KAAKT,YAAL,CAAkBW,SAAlB,CAA6BN,WAA7B,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCO,EAAAA,yBAAyB,CAAEC,OAAF,EAAY;AACpC,SAAKb,YAAL,CAAkBY,yBAAlB,CAA6CC,OAA7C;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,aAAa,CAAEC,IAAF,EAAS;AACrB,SAAKf,YAAL,CAAkBgB,eAAlB,GAAoCD,IAAI,IAAI,QAAR,GAAmB,YAAnB,GAAkC,MAAtE;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCL,EAAAA,MAAM,CAAED,IAAF,EAAS;AACd,UAAMZ,QAAQ,GAAG,KAAKC,SAAL,CAAemB,eAAf,CAAgCR,IAAhC,EAAsC,WAAtC,CAAjB;AACA,UAAMS,QAAQ,GAAGrB,QAAQ,CAACsB,sBAAT,EAAjB,CAFc,CAId;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIC,iBAAiB,GAAGvB,QAAQ,CAACwB,UAAjC;;AAEA,WAAQ,CAACD,iBAAiB,CAACE,UAAlB,CAA8BzB,QAAQ,CAAC0B,eAAvC,CAAT,EAAoE;AACnE,YAAMC,IAAI,GAAGJ,iBAAb;AAEAA,MAAAA,iBAAiB,GAAGA,iBAAiB,CAACK,WAAtC,CAHmE,CAKnE;AACA;;AAEA;;AACA,UAAKD,IAAI,CAACE,QAAL,IAAiBC,IAAI,CAACC,YAA3B,EAA0C;AACzCV,QAAAA,QAAQ,CAACW,WAAT,CAAsBL,IAAtB;AACA;AACD;;AAED,UAAMM,cAAc,GAAGjC,QAAQ,CAACkC,IAAT,CAAcC,UAArC;;AAEA,WAAQF,cAAc,CAACG,MAAf,GAAwB,CAAhC,EAAoC;AACnCf,MAAAA,QAAQ,CAACW,WAAT,CAAsBC,cAAc,CAAE,CAAF,CAApC;AACA;;AAED,WAAOZ,QAAP;AACA;;AAtIqC","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser, Node */\n\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class HtmlDataProcessor {\n\t/**\n\t * Creates a new instance of the HTML data processor class.\n\t *\n\t * @param {module:engine/view/document~Document} document The view document instance.\n\t */\n\tconstructor( document ) {\n\t\t/**\n\t\t * A DOM parser instance used to parse an HTML string to an HTML document.\n\t\t *\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis.domParser = new DOMParser();\n\n\t\t/**\n\t\t * A DOM converter used to convert DOM elements to view elements.\n\t\t *\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = new DomConverter( document, { renderingMode: 'data' } );\n\n\t\t/**\n\t\t * A basic HTML writer instance used to convert DOM elements to an HTML string.\n\t\t *\n\t\t * @member {module:engine/dataprocessor/htmlwriter~HtmlWriter}\n\t\t */\n\t\tthis.htmlWriter = new BasicHtmlWriter();\n\t}\n\n\t/**\n\t * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n\t * to data format &mdash; in this case to an HTML string.\n\t *\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n\t * @returns {String} HTML string.\n\t */\n\ttoData( viewFragment ) {\n\t\t// Convert view DocumentFragment to DOM DocumentFragment.\n\t\tconst domFragment = this.domConverter.viewToDom( viewFragment, document );\n\n\t\t// Convert DOM DocumentFragment to HTML output.\n\t\treturn this.htmlWriter.getHtml( domFragment );\n\t}\n\n\t/**\n\t * Converts the provided HTML string to a view tree.\n\t *\n\t * @param {String} data An HTML string.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n\t */\n\ttoView( data ) {\n\t\t// Convert input HTML data to DOM DocumentFragment.\n\t\tconst domFragment = this._toDom( data );\n\n\t\t// Convert DOM DocumentFragment to view DocumentFragment.\n\t\treturn this.domConverter.domToView( domFragment );\n\t}\n\n\t/**\n\t * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n\t * and not processed during the conversion from the DOM to the view elements.\n\t *\n\t * The raw data can be later accessed by a\n\t * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n\t *\n\t * @param {module:engine/view/matcher~MatcherPattern} pattern Pattern matching all view elements whose content should\n\t * be treated as raw data.\n\t */\n\tregisterRawContentMatcher( pattern ) {\n\t\tthis.domConverter.registerRawContentMatcher( pattern );\n\t}\n\n\t/**\n\t * If the processor is set to use marked fillers, it will insert `&nbsp;` fillers wrapped in `<span>` elements\n\t * (`<span data-cke-filler=\"true\">&nbsp;</span>`) instead of regular `&nbsp;` characters.\n\t *\n\t * This mode allows for a more precise handling of the block fillers (so they do not leak into the editor content) but\n\t * bloats the editor data with additional markup.\n\t *\n\t * This mode may be required by some features and will be turned on by them automatically.\n\t *\n\t * @param {'default'|'marked'} type Whether to use the default or the marked `&nbsp;` block fillers.\n\t */\n\tuseFillerType( type ) {\n\t\tthis.domConverter.blockFillerMode = type == 'marked' ? 'markedNbsp' : 'nbsp';\n\t}\n\n\t/**\n\t * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n\t * the provided data.\n\t *\n\t * @private\n\t * @param {String} data\n\t * @returns {DocumentFragment}\n\t */\n\t_toDom( data ) {\n\t\tconst document = this.domParser.parseFromString( data, 'text/html' );\n\t\tconst fragment = document.createDocumentFragment();\n\n\t\t// The rules for parsing an HTML string can be read on https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inhtml.\n\t\t//\n\t\t// In short, parsing tokens in an HTML string starts with the so-called \"initial\" insertion mode. When a DOM parser is in this\n\t\t// state and encounters a comment node, it inserts this comment node as the last child of the newly-created `HTMLDocument` object.\n\t\t// The parser then proceeds to successive insertion modes during parsing subsequent tokens and appends in the `HTMLDocument` object\n\t\t// other nodes (like <html>, <head>, <body>). This causes that the first leading comments from HTML string become the first nodes\n\t\t// in the `HTMLDocument` object, but not in the <body> collection, because they are ultimately located before the <html> element.\n\t\t//\n\t\t// Therefore, so that such leading comments do not disappear, they all are moved from the `HTMLDocument` object to the document\n\t\t// fragment, until the <html> element is encountered.\n\t\t//\n\t\t// See: https://github.com/ckeditor/ckeditor5/issues/9861.\n\t\tlet documentChildNode = document.firstChild;\n\n\t\twhile ( !documentChildNode.isSameNode( document.documentElement ) ) {\n\t\t\tconst node = documentChildNode;\n\n\t\t\tdocumentChildNode = documentChildNode.nextSibling;\n\n\t\t\t// It seems that `DOMParser#parseFromString()` adds only comment nodes directly to the `HTMLDocument` object, before the <html>\n\t\t\t// node. The condition below is just to be sure we are moving only comment nodes.\n\n\t\t\t/* istanbul ignore else */\n\t\t\tif ( node.nodeType == Node.COMMENT_NODE ) {\n\t\t\t\tfragment.appendChild( node );\n\t\t\t}\n\t\t}\n\n\t\tconst bodyChildNodes = document.body.childNodes;\n\n\t\twhile ( bodyChildNodes.length > 0 ) {\n\t\t\tfragment.appendChild( bodyChildNodes[ 0 ] );\n\t\t}\n\n\t\treturn fragment;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}