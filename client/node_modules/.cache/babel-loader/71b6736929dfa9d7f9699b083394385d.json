{"ast":null,"code":"/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactClass\r\n */\n'use strict';\n\nvar ReactComponent = require('./ReactComponent');\n\nvar ReactElement = require('./ReactElement');\n\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\n\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\n\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar assign = require('./Object.assign');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar warning = require('fbjs/lib/warning');\n\nvar MIXINS_KEY = keyOf({\n  mixins: null\n});\n/**\r\n * Policies that describe methods in `ReactClassInterface`.\r\n */\n\nvar SpecPolicy = keyMirror({\n  /**\r\n   * These methods may be defined only once by the class specification or mixin.\r\n   */\n  DEFINE_ONCE: null,\n\n  /**\r\n   * These methods may be defined by both the class specification and mixins.\r\n   * Subsequent definitions will be chained. These methods must return void.\r\n   */\n  DEFINE_MANY: null,\n\n  /**\r\n   * These methods are overriding the base class.\r\n   */\n  OVERRIDE_BASE: null,\n\n  /**\r\n   * These methods are similar to DEFINE_MANY, except we assume they return\r\n   * objects. We try to merge the keys of the return values of all the mixed in\r\n   * functions. If there is a key conflict we throw.\r\n   */\n  DEFINE_MANY_MERGED: null\n});\nvar injectedMixins = [];\nvar warnedSetProps = false;\n\nfunction warnSetProps() {\n  if (!warnedSetProps) {\n    warnedSetProps = true;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;\n  }\n}\n/**\r\n * Composite components are higher-level components that compose other composite\r\n * or native components.\r\n *\r\n * To create a new type of `ReactClass`, pass a specification of\r\n * your new class to `React.createClass`. The only requirement of your class\r\n * specification is that you implement a `render` method.\r\n *\r\n *   var MyComponent = React.createClass({\r\n *     render: function() {\r\n *       return <div>Hello World</div>;\r\n *     }\r\n *   });\r\n *\r\n * The class specification supports a specific protocol of methods that have\r\n * special meaning (e.g. `render`). See `ReactClassInterface` for\r\n * more the comprehensive protocol. Any other properties and methods in the\r\n * class specification will be available on the prototype.\r\n *\r\n * @interface ReactClassInterface\r\n * @internal\r\n */\n\n\nvar ReactClassInterface = {\n  /**\r\n   * An array of Mixin objects to include when defining your component.\r\n   *\r\n   * @type {array}\r\n   * @optional\r\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\r\n   * An object containing properties and methods that should be defined on\r\n   * the component's constructor instead of its prototype (static methods).\r\n   *\r\n   * @type {object}\r\n   * @optional\r\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\r\n   * Definition of prop types for this component.\r\n   *\r\n   * @type {object}\r\n   * @optional\r\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\r\n   * Definition of context types for this component.\r\n   *\r\n   * @type {object}\r\n   * @optional\r\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\r\n   * Definition of context types this component sets for its children.\r\n   *\r\n   * @type {object}\r\n   * @optional\r\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n  // ==== Definition methods ====\n\n  /**\r\n   * Invoked when the component is mounted. Values in the mapping will be set on\r\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\r\n   *\r\n   * This method is invoked before `getInitialState` and therefore cannot rely\r\n   * on `this.state` or use `this.setState`.\r\n   *\r\n   * @return {object}\r\n   * @optional\r\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\r\n   * Invoked once before the component is mounted. The return value will be used\r\n   * as the initial value of `this.state`.\r\n   *\r\n   *   getInitialState: function() {\r\n   *     return {\r\n   *       isOn: false,\r\n   *       fooBaz: new BazFoo()\r\n   *     }\r\n   *   }\r\n   *\r\n   * @return {object}\r\n   * @optional\r\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\r\n   * @return {object}\r\n   * @optional\r\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\r\n   * Uses props from `this.props` and state from `this.state` to render the\r\n   * structure of the component.\r\n   *\r\n   * No guarantees are made about when or how often this method is invoked, so\r\n   * it must not have side effects.\r\n   *\r\n   *   render: function() {\r\n   *     var name = this.props.name;\r\n   *     return <div>Hello, {name}!</div>;\r\n   *   }\r\n   *\r\n   * @return {ReactComponent}\r\n   * @nosideeffects\r\n   * @required\r\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n  // ==== Delegate methods ====\n\n  /**\r\n   * Invoked when the component is initially created and about to be mounted.\r\n   * This may have side effects, but any external subscriptions or data created\r\n   * by this method must be cleaned up in `componentWillUnmount`.\r\n   *\r\n   * @optional\r\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\r\n   * Invoked when the component has been mounted and has a DOM representation.\r\n   * However, there is no guarantee that the DOM node is in the document.\r\n   *\r\n   * Use this as an opportunity to operate on the DOM when the component has\r\n   * been mounted (initialized and rendered) for the first time.\r\n   *\r\n   * @param {DOMElement} rootNode DOM element representing the component.\r\n   * @optional\r\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\r\n   * Invoked before the component receives new props.\r\n   *\r\n   * Use this as an opportunity to react to a prop transition by updating the\r\n   * state using `this.setState`. Current props are accessed via `this.props`.\r\n   *\r\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\r\n   *     this.setState({\r\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\r\n   *     });\r\n   *   }\r\n   *\r\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\r\n   * transition may cause a state change, but the opposite is not true. If you\r\n   * need it, you are probably looking for `componentWillUpdate`.\r\n   *\r\n   * @param {object} nextProps\r\n   * @optional\r\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\r\n   * Invoked while deciding if the component should be updated as a result of\r\n   * receiving new props, state and/or context.\r\n   *\r\n   * Use this as an opportunity to `return false` when you're certain that the\r\n   * transition to the new props/state/context will not require a component\r\n   * update.\r\n   *\r\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\r\n   *     return !equal(nextProps, this.props) ||\r\n   *       !equal(nextState, this.state) ||\r\n   *       !equal(nextContext, this.context);\r\n   *   }\r\n   *\r\n   * @param {object} nextProps\r\n   * @param {?object} nextState\r\n   * @param {?object} nextContext\r\n   * @return {boolean} True if the component should update.\r\n   * @optional\r\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\r\n   * Invoked when the component is about to update due to a transition from\r\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\r\n   * and `nextContext`.\r\n   *\r\n   * Use this as an opportunity to perform preparation before an update occurs.\r\n   *\r\n   * NOTE: You **cannot** use `this.setState()` in this method.\r\n   *\r\n   * @param {object} nextProps\r\n   * @param {?object} nextState\r\n   * @param {?object} nextContext\r\n   * @param {ReactReconcileTransaction} transaction\r\n   * @optional\r\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\r\n   * Invoked when the component's DOM representation has been updated.\r\n   *\r\n   * Use this as an opportunity to operate on the DOM when the component has\r\n   * been updated.\r\n   *\r\n   * @param {object} prevProps\r\n   * @param {?object} prevState\r\n   * @param {?object} prevContext\r\n   * @param {DOMElement} rootNode DOM element representing the component.\r\n   * @optional\r\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\r\n   * Invoked when the component is about to be removed from its parent and have\r\n   * its DOM representation destroyed.\r\n   *\r\n   * Use this as an opportunity to deallocate any external resources.\r\n   *\r\n   * NOTE: There is no `componentDidUnmount` since your component will have been\r\n   * destroyed by that point.\r\n   *\r\n   * @optional\r\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n  // ==== Advanced methods ====\n\n  /**\r\n   * Updates the component's currently mounted DOM representation.\r\n   *\r\n   * By default, this implements React's rendering and reconciliation algorithm.\r\n   * Sophisticated clients may wish to override this.\r\n   *\r\n   * @param {ReactReconcileTransaction} transaction\r\n   * @internal\r\n   * @overridable\r\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n};\n/**\r\n * Mapping from class specification keys to special processing functions.\r\n *\r\n * Although these are declared like instance properties in the specification\r\n * when defining classes using `React.createClass`, they are actually static\r\n * and are accessible on the constructor instead of the prototype. Despite\r\n * being static, they must be defined outside of the \"statics\" key under\r\n * which all other static methods are defined.\r\n */\n\nvar RESERVED_SPEC_KEYS = {\n  displayName: function (Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function (Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function (Constructor, childContextTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);\n    }\n\n    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);\n  },\n  contextTypes: function (Constructor, contextTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);\n    }\n\n    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);\n  },\n\n  /**\r\n   * Special case getDefaultProps which should move into statics but requires\r\n   * automatic merging.\r\n   */\n  getDefaultProps: function (Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\n    } else {\n      Constructor.getDefaultProps = getDefaultProps;\n    }\n  },\n  propTypes: function (Constructor, propTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);\n    }\n\n    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);\n  },\n  statics: function (Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  },\n  autobind: function () {}\n}; // noop\n\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      // use a warning instead of an invariant so components\n      // don't show up in prod but not in __DEV__\n      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;\n    }\n  }\n}\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null; // Disallow overriding of base class methods unless explicitly allowed.\n\n  if (ReactClassMixin.hasOwnProperty(name)) {\n    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;\n  } // Disallow defining methods more than once unless explicitly allowed.\n\n\n  if (proto.hasOwnProperty(name)) {\n    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;\n  }\n}\n/**\r\n * Mixin helper which handles policy validation and reserved\r\n * specification keys when building React classses.\r\n */\n\n\nfunction mixSpecIntoComponent(Constructor, spec) {\n  if (!spec) {\n    return;\n  }\n\n  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;\n  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;\n  var proto = Constructor.prototype; // By handling mixins before any other properties, we ensure the same\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\n  // mixins are listed before or after these methods in the spec.\n\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n  }\n\n  for (var name in spec) {\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    if (name === MIXINS_KEY) {\n      // We have already handled mixins in a special case above.\n      continue;\n    }\n\n    var property = spec[name];\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactClass methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy = ReactClassInterface[name]; // These cases should already be caught by validateMethodOverride.\n\n          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined; // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n\n          if (process.env.NODE_ENV !== 'production') {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property === 'function' && spec.displayName) {\n              proto[name].displayName = spec.displayName + '_' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n\n  for (var name in statics) {\n    var property = statics[name];\n\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var isReserved = (name in RESERVED_SPEC_KEYS);\n    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;\n    var isInherited = (name in Constructor);\n    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;\n    Constructor[name] = property;\n  }\n}\n/**\r\n * Merge two objects, but throw if both contain the same key.\r\n *\r\n * @param {object} one The first object, which is mutated.\r\n * @param {object} two The second object\r\n * @return {object} one after it has been mutated to contain everything in two.\r\n */\n\n\nfunction mergeIntoWithNoDuplicateKeys(one, two) {\n  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;\n\n  for (var key in two) {\n    if (two.hasOwnProperty(key)) {\n      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;\n      one[key] = two[key];\n    }\n  }\n\n  return one;\n}\n/**\r\n * Creates a function that invokes two functions and merges their return values.\r\n *\r\n * @param {function} one Function to invoke first.\r\n * @param {function} two Function to invoke second.\r\n * @return {function} Function that invokes the two argument functions.\r\n * @private\r\n */\n\n\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n\n    var c = {};\n    mergeIntoWithNoDuplicateKeys(c, a);\n    mergeIntoWithNoDuplicateKeys(c, b);\n    return c;\n  };\n}\n/**\r\n * Creates a function that invokes two functions and ignores their return vales.\r\n *\r\n * @param {function} one Function to invoke first.\r\n * @param {function} two Function to invoke second.\r\n * @return {function} Function that invokes the two argument functions.\r\n * @private\r\n */\n\n\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n/**\r\n * Binds a method to the component.\r\n *\r\n * @param {object} component Component whose method is going to be bound.\r\n * @param {function} method Method to be bound.\r\n * @return {function} The bound method.\r\n */\n\n\nfunction bindAutoBindMethod(component, method) {\n  var boundMethod = method.bind(component);\n\n  if (process.env.NODE_ENV !== 'production') {\n    boundMethod.__reactBoundContext = component;\n    boundMethod.__reactBoundMethod = method;\n    boundMethod.__reactBoundArguments = null;\n    var componentName = component.constructor.displayName;\n    var _bind = boundMethod.bind;\n    /* eslint-disable block-scoped-var, no-undef */\n\n    boundMethod.bind = function (newThis) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      } // User is trying to bind() an autobound method; we effectively will\n      // ignore the value of \"this\" that the user is trying to use, so\n      // let's warn.\n\n\n      if (newThis !== component && newThis !== null) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;\n      } else if (!args.length) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;\n        return boundMethod;\n      }\n\n      var reboundMethod = _bind.apply(boundMethod, arguments);\n\n      reboundMethod.__reactBoundContext = component;\n      reboundMethod.__reactBoundMethod = method;\n      reboundMethod.__reactBoundArguments = args;\n      return reboundMethod;\n      /* eslint-enable */\n    };\n  }\n\n  return boundMethod;\n}\n/**\r\n * Binds all auto-bound methods in a component.\r\n *\r\n * @param {object} component Component whose method is going to be bound.\r\n */\n\n\nfunction bindAutoBindMethods(component) {\n  for (var autoBindKey in component.__reactAutoBindMap) {\n    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n      var method = component.__reactAutoBindMap[autoBindKey];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n}\n/**\r\n * Add more to the ReactClass base class. These are all legacy features and\r\n * therefore not already part of the modern ReactComponent.\r\n */\n\n\nvar ReactClassMixin = {\n  /**\r\n   * TODO: This will be deprecated because state should always keep a consistent\r\n   * type signature and the only use case for this, is to avoid that.\r\n   */\n  replaceState: function (newState, callback) {\n    this.updater.enqueueReplaceState(this, newState);\n\n    if (callback) {\n      this.updater.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\r\n   * Checks whether or not this composite component is mounted.\r\n   * @return {boolean} True if mounted, false otherwise.\r\n   * @protected\r\n   * @final\r\n   */\n  isMounted: function () {\n    return this.updater.isMounted(this);\n  },\n\n  /**\r\n   * Sets a subset of the props.\r\n   *\r\n   * @param {object} partialProps Subset of the next props.\r\n   * @param {?function} callback Called after props are updated.\r\n   * @final\r\n   * @public\r\n   * @deprecated\r\n   */\n  setProps: function (partialProps, callback) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnSetProps();\n    }\n\n    this.updater.enqueueSetProps(this, partialProps);\n\n    if (callback) {\n      this.updater.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\r\n   * Replace all the props.\r\n   *\r\n   * @param {object} newProps Subset of the next props.\r\n   * @param {?function} callback Called after props are updated.\r\n   * @final\r\n   * @public\r\n   * @deprecated\r\n   */\n  replaceProps: function (newProps, callback) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnSetProps();\n    }\n\n    this.updater.enqueueReplaceProps(this, newProps);\n\n    if (callback) {\n      this.updater.enqueueCallback(this, callback);\n    }\n  }\n};\n\nvar ReactClassComponent = function () {};\n\nassign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n/**\r\n * Module for creating composite components.\r\n *\r\n * @class ReactClass\r\n */\n\nvar ReactClass = {\n  /**\r\n   * Creates a composite component class given a class specification.\r\n   *\r\n   * @param {object} spec Class specification (which must define `render`).\r\n   * @return {function} Component constructor function.\r\n   * @public\r\n   */\n  createClass: function (spec) {\n    var Constructor = function (props, context, updater) {\n      // This constructor is overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;\n      } // Wire up auto-binding\n\n\n      if (this.__reactAutoBindMap) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n      this.state = null; // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n\n      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;\n      this.state = initialState;\n    };\n\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n    mixSpecIntoComponent(Constructor, spec); // Initialize the defaultProps property after all mixins have been merged.\n\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;\n    } // Reduce time spent doing lookups by setting these on the prototype.\n\n\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  },\n  injection: {\n    injectMixin: function (mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n};\nmodule.exports = ReactClass;","map":{"version":3,"sources":["C:/Users/nvtung/Các project thực hiện/RubyGYM-master_test_2/client/node_modules/jsx-to-string/node_modules/react/lib/ReactClass.js"],"names":["ReactComponent","require","ReactElement","ReactPropTypeLocations","ReactPropTypeLocationNames","ReactNoopUpdateQueue","assign","emptyObject","invariant","keyMirror","keyOf","warning","MIXINS_KEY","mixins","SpecPolicy","DEFINE_ONCE","DEFINE_MANY","OVERRIDE_BASE","DEFINE_MANY_MERGED","injectedMixins","warnedSetProps","warnSetProps","process","env","NODE_ENV","undefined","ReactClassInterface","statics","propTypes","contextTypes","childContextTypes","getDefaultProps","getInitialState","getChildContext","render","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","updateComponent","RESERVED_SPEC_KEYS","displayName","Constructor","i","length","mixSpecIntoComponent","validateTypeDef","childContext","context","createMergedResultFunction","prop","mixStaticSpecIntoComponent","autobind","typeDef","location","propName","hasOwnProperty","validateMethodOverride","proto","name","specPolicy","ReactClassMixin","spec","isValidElement","prototype","property","isReactClassMethod","isAlreadyDefined","isFunction","shouldAutoBind","__reactAutoBindMap","createChainedFunction","isReserved","isInherited","mergeIntoWithNoDuplicateKeys","one","two","key","mergedResult","a","apply","arguments","b","c","chainedFunction","bindAutoBindMethod","component","method","boundMethod","bind","__reactBoundContext","__reactBoundMethod","__reactBoundArguments","componentName","constructor","_bind","newThis","_len","args","Array","_key","reboundMethod","bindAutoBindMethods","autoBindKey","replaceState","newState","callback","updater","enqueueReplaceState","enqueueCallback","isMounted","setProps","partialProps","enqueueSetProps","replaceProps","newProps","enqueueReplaceProps","ReactClassComponent","ReactClass","createClass","props","refs","state","initialState","_isMockFunction","isArray","forEach","defaultProps","isReactClassApproved","componentShouldUpdate","componentWillRecieveProps","methodName","injection","injectMixin","mixin","push","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIE,sBAAsB,GAAGF,OAAO,CAAC,0BAAD,CAApC;;AACA,IAAIG,0BAA0B,GAAGH,OAAO,CAAC,8BAAD,CAAxC;;AACA,IAAII,oBAAoB,GAAGJ,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIK,MAAM,GAAGL,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIM,WAAW,GAAGN,OAAO,CAAC,sBAAD,CAAzB;;AACA,IAAIO,SAAS,GAAGP,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAIQ,SAAS,GAAGR,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAIS,KAAK,GAAGT,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIU,OAAO,GAAGV,OAAO,CAAC,kBAAD,CAArB;;AAEA,IAAIW,UAAU,GAAGF,KAAK,CAAC;AAAEG,EAAAA,MAAM,EAAE;AAAV,CAAD,CAAtB;AAEA;AACA;AACA;;AACA,IAAIC,UAAU,GAAGL,SAAS,CAAC;AACzB;AACF;AACA;AACEM,EAAAA,WAAW,EAAE,IAJY;;AAKzB;AACF;AACA;AACA;AACEC,EAAAA,WAAW,EAAE,IATY;;AAUzB;AACF;AACA;AACEC,EAAAA,aAAa,EAAE,IAbU;;AAczB;AACF;AACA;AACA;AACA;AACEC,EAAAA,kBAAkB,EAAE;AAnBK,CAAD,CAA1B;AAsBA,IAAIC,cAAc,GAAG,EAArB;AAEA,IAAIC,cAAc,GAAG,KAArB;;AACA,SAASC,YAAT,GAAwB;AACtB,MAAI,CAACD,cAAL,EAAqB;AACnBA,IAAAA,cAAc,GAAG,IAAjB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCb,OAAO,CAAC,KAAD,EAAQ,yDAAyD,8CAAjE,CAA/C,GAAkKc,SAAlK;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,mBAAmB,GAAG;AAExB;AACF;AACA;AACA;AACA;AACA;AACEb,EAAAA,MAAM,EAAEC,UAAU,CAACE,WARK;;AAUxB;AACF;AACA;AACA;AACA;AACA;AACA;AACEW,EAAAA,OAAO,EAAEb,UAAU,CAACE,WAjBI;;AAmBxB;AACF;AACA;AACA;AACA;AACA;AACEY,EAAAA,SAAS,EAAEd,UAAU,CAACE,WAzBE;;AA2BxB;AACF;AACA;AACA;AACA;AACA;AACEa,EAAAA,YAAY,EAAEf,UAAU,CAACE,WAjCD;;AAmCxB;AACF;AACA;AACA;AACA;AACA;AACEc,EAAAA,iBAAiB,EAAEhB,UAAU,CAACE,WAzCN;AA2CxB;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEe,EAAAA,eAAe,EAAEjB,UAAU,CAACI,kBAvDJ;;AAyDxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEc,EAAAA,eAAe,EAAElB,UAAU,CAACI,kBAvEJ;;AAyExB;AACF;AACA;AACA;AACEe,EAAAA,eAAe,EAAEnB,UAAU,CAACI,kBA7EJ;;AA+ExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEgB,EAAAA,MAAM,EAAEpB,UAAU,CAACC,WA/FK;AAiGxB;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACEoB,EAAAA,kBAAkB,EAAErB,UAAU,CAACE,WA1GP;;AA4GxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEoB,EAAAA,iBAAiB,EAAEtB,UAAU,CAACE,WAtHN;;AAwHxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEqB,EAAAA,yBAAyB,EAAEvB,UAAU,CAACE,WA3Id;;AA6IxB;AACF;AACA;AACA;AACA;AA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","sourcesContent":["/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactClass\r\n */\r\n\r\n'use strict';\r\n\r\nvar ReactComponent = require('./ReactComponent');\r\nvar ReactElement = require('./ReactElement');\r\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\r\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\r\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\r\n\r\nvar assign = require('./Object.assign');\r\nvar emptyObject = require('fbjs/lib/emptyObject');\r\nvar invariant = require('fbjs/lib/invariant');\r\nvar keyMirror = require('fbjs/lib/keyMirror');\r\nvar keyOf = require('fbjs/lib/keyOf');\r\nvar warning = require('fbjs/lib/warning');\r\n\r\nvar MIXINS_KEY = keyOf({ mixins: null });\r\n\r\n/**\r\n * Policies that describe methods in `ReactClassInterface`.\r\n */\r\nvar SpecPolicy = keyMirror({\r\n  /**\r\n   * These methods may be defined only once by the class specification or mixin.\r\n   */\r\n  DEFINE_ONCE: null,\r\n  /**\r\n   * These methods may be defined by both the class specification and mixins.\r\n   * Subsequent definitions will be chained. These methods must return void.\r\n   */\r\n  DEFINE_MANY: null,\r\n  /**\r\n   * These methods are overriding the base class.\r\n   */\r\n  OVERRIDE_BASE: null,\r\n  /**\r\n   * These methods are similar to DEFINE_MANY, except we assume they return\r\n   * objects. We try to merge the keys of the return values of all the mixed in\r\n   * functions. If there is a key conflict we throw.\r\n   */\r\n  DEFINE_MANY_MERGED: null\r\n});\r\n\r\nvar injectedMixins = [];\r\n\r\nvar warnedSetProps = false;\r\nfunction warnSetProps() {\r\n  if (!warnedSetProps) {\r\n    warnedSetProps = true;\r\n    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Composite components are higher-level components that compose other composite\r\n * or native components.\r\n *\r\n * To create a new type of `ReactClass`, pass a specification of\r\n * your new class to `React.createClass`. The only requirement of your class\r\n * specification is that you implement a `render` method.\r\n *\r\n *   var MyComponent = React.createClass({\r\n *     render: function() {\r\n *       return <div>Hello World</div>;\r\n *     }\r\n *   });\r\n *\r\n * The class specification supports a specific protocol of methods that have\r\n * special meaning (e.g. `render`). See `ReactClassInterface` for\r\n * more the comprehensive protocol. Any other properties and methods in the\r\n * class specification will be available on the prototype.\r\n *\r\n * @interface ReactClassInterface\r\n * @internal\r\n */\r\nvar ReactClassInterface = {\r\n\r\n  /**\r\n   * An array of Mixin objects to include when defining your component.\r\n   *\r\n   * @type {array}\r\n   * @optional\r\n   */\r\n  mixins: SpecPolicy.DEFINE_MANY,\r\n\r\n  /**\r\n   * An object containing properties and methods that should be defined on\r\n   * the component's constructor instead of its prototype (static methods).\r\n   *\r\n   * @type {object}\r\n   * @optional\r\n   */\r\n  statics: SpecPolicy.DEFINE_MANY,\r\n\r\n  /**\r\n   * Definition of prop types for this component.\r\n   *\r\n   * @type {object}\r\n   * @optional\r\n   */\r\n  propTypes: SpecPolicy.DEFINE_MANY,\r\n\r\n  /**\r\n   * Definition of context types for this component.\r\n   *\r\n   * @type {object}\r\n   * @optional\r\n   */\r\n  contextTypes: SpecPolicy.DEFINE_MANY,\r\n\r\n  /**\r\n   * Definition of context types this component sets for its children.\r\n   *\r\n   * @type {object}\r\n   * @optional\r\n   */\r\n  childContextTypes: SpecPolicy.DEFINE_MANY,\r\n\r\n  // ==== Definition methods ====\r\n\r\n  /**\r\n   * Invoked when the component is mounted. Values in the mapping will be set on\r\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\r\n   *\r\n   * This method is invoked before `getInitialState` and therefore cannot rely\r\n   * on `this.state` or use `this.setState`.\r\n   *\r\n   * @return {object}\r\n   * @optional\r\n   */\r\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\r\n\r\n  /**\r\n   * Invoked once before the component is mounted. The return value will be used\r\n   * as the initial value of `this.state`.\r\n   *\r\n   *   getInitialState: function() {\r\n   *     return {\r\n   *       isOn: false,\r\n   *       fooBaz: new BazFoo()\r\n   *     }\r\n   *   }\r\n   *\r\n   * @return {object}\r\n   * @optional\r\n   */\r\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\r\n\r\n  /**\r\n   * @return {object}\r\n   * @optional\r\n   */\r\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\r\n\r\n  /**\r\n   * Uses props from `this.props` and state from `this.state` to render the\r\n   * structure of the component.\r\n   *\r\n   * No guarantees are made about when or how often this method is invoked, so\r\n   * it must not have side effects.\r\n   *\r\n   *   render: function() {\r\n   *     var name = this.props.name;\r\n   *     return <div>Hello, {name}!</div>;\r\n   *   }\r\n   *\r\n   * @return {ReactComponent}\r\n   * @nosideeffects\r\n   * @required\r\n   */\r\n  render: SpecPolicy.DEFINE_ONCE,\r\n\r\n  // ==== Delegate methods ====\r\n\r\n  /**\r\n   * Invoked when the component is initially created and about to be mounted.\r\n   * This may have side effects, but any external subscriptions or data created\r\n   * by this method must be cleaned up in `componentWillUnmount`.\r\n   *\r\n   * @optional\r\n   */\r\n  componentWillMount: SpecPolicy.DEFINE_MANY,\r\n\r\n  /**\r\n   * Invoked when the component has been mounted and has a DOM representation.\r\n   * However, there is no guarantee that the DOM node is in the document.\r\n   *\r\n   * Use this as an opportunity to operate on the DOM when the component has\r\n   * been mounted (initialized and rendered) for the first time.\r\n   *\r\n   * @param {DOMElement} rootNode DOM element representing the component.\r\n   * @optional\r\n   */\r\n  componentDidMount: SpecPolicy.DEFINE_MANY,\r\n\r\n  /**\r\n   * Invoked before the component receives new props.\r\n   *\r\n   * Use this as an opportunity to react to a prop transition by updating the\r\n   * state using `this.setState`. Current props are accessed via `this.props`.\r\n   *\r\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\r\n   *     this.setState({\r\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\r\n   *     });\r\n   *   }\r\n   *\r\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\r\n   * transition may cause a state change, but the opposite is not true. If you\r\n   * need it, you are probably looking for `componentWillUpdate`.\r\n   *\r\n   * @param {object} nextProps\r\n   * @optional\r\n   */\r\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\r\n\r\n  /**\r\n   * Invoked while deciding if the component should be updated as a result of\r\n   * receiving new props, state and/or context.\r\n   *\r\n   * Use this as an opportunity to `return false` when you're certain that the\r\n   * transition to the new props/state/context will not require a component\r\n   * update.\r\n   *\r\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\r\n   *     return !equal(nextProps, this.props) ||\r\n   *       !equal(nextState, this.state) ||\r\n   *       !equal(nextContext, this.context);\r\n   *   }\r\n   *\r\n   * @param {object} nextProps\r\n   * @param {?object} nextState\r\n   * @param {?object} nextContext\r\n   * @return {boolean} True if the component should update.\r\n   * @optional\r\n   */\r\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\r\n\r\n  /**\r\n   * Invoked when the component is about to update due to a transition from\r\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\r\n   * and `nextContext`.\r\n   *\r\n   * Use this as an opportunity to perform preparation before an update occurs.\r\n   *\r\n   * NOTE: You **cannot** use `this.setState()` in this method.\r\n   *\r\n   * @param {object} nextProps\r\n   * @param {?object} nextState\r\n   * @param {?object} nextContext\r\n   * @param {ReactReconcileTransaction} transaction\r\n   * @optional\r\n   */\r\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\r\n\r\n  /**\r\n   * Invoked when the component's DOM representation has been updated.\r\n   *\r\n   * Use this as an opportunity to operate on the DOM when the component has\r\n   * been updated.\r\n   *\r\n   * @param {object} prevProps\r\n   * @param {?object} prevState\r\n   * @param {?object} prevContext\r\n   * @param {DOMElement} rootNode DOM element representing the component.\r\n   * @optional\r\n   */\r\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\r\n\r\n  /**\r\n   * Invoked when the component is about to be removed from its parent and have\r\n   * its DOM representation destroyed.\r\n   *\r\n   * Use this as an opportunity to deallocate any external resources.\r\n   *\r\n   * NOTE: There is no `componentDidUnmount` since your component will have been\r\n   * destroyed by that point.\r\n   *\r\n   * @optional\r\n   */\r\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\r\n\r\n  // ==== Advanced methods ====\r\n\r\n  /**\r\n   * Updates the component's currently mounted DOM representation.\r\n   *\r\n   * By default, this implements React's rendering and reconciliation algorithm.\r\n   * Sophisticated clients may wish to override this.\r\n   *\r\n   * @param {ReactReconcileTransaction} transaction\r\n   * @internal\r\n   * @overridable\r\n   */\r\n  updateComponent: SpecPolicy.OVERRIDE_BASE\r\n\r\n};\r\n\r\n/**\r\n * Mapping from class specification keys to special processing functions.\r\n *\r\n * Although these are declared like instance properties in the specification\r\n * when defining classes using `React.createClass`, they are actually static\r\n * and are accessible on the constructor instead of the prototype. Despite\r\n * being static, they must be defined outside of the \"statics\" key under\r\n * which all other static methods are defined.\r\n */\r\nvar RESERVED_SPEC_KEYS = {\r\n  displayName: function (Constructor, displayName) {\r\n    Constructor.displayName = displayName;\r\n  },\r\n  mixins: function (Constructor, mixins) {\r\n    if (mixins) {\r\n      for (var i = 0; i < mixins.length; i++) {\r\n        mixSpecIntoComponent(Constructor, mixins[i]);\r\n      }\r\n    }\r\n  },\r\n  childContextTypes: function (Constructor, childContextTypes) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);\r\n    }\r\n    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);\r\n  },\r\n  contextTypes: function (Constructor, contextTypes) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);\r\n    }\r\n    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);\r\n  },\r\n  /**\r\n   * Special case getDefaultProps which should move into statics but requires\r\n   * automatic merging.\r\n   */\r\n  getDefaultProps: function (Constructor, getDefaultProps) {\r\n    if (Constructor.getDefaultProps) {\r\n      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\r\n    } else {\r\n      Constructor.getDefaultProps = getDefaultProps;\r\n    }\r\n  },\r\n  propTypes: function (Constructor, propTypes) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);\r\n    }\r\n    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);\r\n  },\r\n  statics: function (Constructor, statics) {\r\n    mixStaticSpecIntoComponent(Constructor, statics);\r\n  },\r\n  autobind: function () {} };\r\n\r\n// noop\r\nfunction validateTypeDef(Constructor, typeDef, location) {\r\n  for (var propName in typeDef) {\r\n    if (typeDef.hasOwnProperty(propName)) {\r\n      // use a warning instead of an invariant so components\r\n      // don't show up in prod but not in __DEV__\r\n      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;\r\n    }\r\n  }\r\n}\r\n\r\nfunction validateMethodOverride(proto, name) {\r\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;\r\n\r\n  // Disallow overriding of base class methods unless explicitly allowed.\r\n  if (ReactClassMixin.hasOwnProperty(name)) {\r\n    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;\r\n  }\r\n\r\n  // Disallow defining methods more than once unless explicitly allowed.\r\n  if (proto.hasOwnProperty(name)) {\r\n    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Mixin helper which handles policy validation and reserved\r\n * specification keys when building React classses.\r\n */\r\nfunction mixSpecIntoComponent(Constructor, spec) {\r\n  if (!spec) {\r\n    return;\r\n  }\r\n\r\n  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;\r\n  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;\r\n\r\n  var proto = Constructor.prototype;\r\n\r\n  // By handling mixins before any other properties, we ensure the same\r\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\r\n  // mixins are listed before or after these methods in the spec.\r\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\r\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\r\n  }\r\n\r\n  for (var name in spec) {\r\n    if (!spec.hasOwnProperty(name)) {\r\n      continue;\r\n    }\r\n\r\n    if (name === MIXINS_KEY) {\r\n      // We have already handled mixins in a special case above.\r\n      continue;\r\n    }\r\n\r\n    var property = spec[name];\r\n    validateMethodOverride(proto, name);\r\n\r\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\r\n      RESERVED_SPEC_KEYS[name](Constructor, property);\r\n    } else {\r\n      // Setup methods on prototype:\r\n      // The following member methods should not be automatically bound:\r\n      // 1. Expected ReactClass methods (in the \"interface\").\r\n      // 2. Overridden methods (that were mixed in).\r\n      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\r\n      var isAlreadyDefined = proto.hasOwnProperty(name);\r\n      var isFunction = typeof property === 'function';\r\n      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\r\n\r\n      if (shouldAutoBind) {\r\n        if (!proto.__reactAutoBindMap) {\r\n          proto.__reactAutoBindMap = {};\r\n        }\r\n        proto.__reactAutoBindMap[name] = property;\r\n        proto[name] = property;\r\n      } else {\r\n        if (isAlreadyDefined) {\r\n          var specPolicy = ReactClassInterface[name];\r\n\r\n          // These cases should already be caught by validateMethodOverride.\r\n          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;\r\n\r\n          // For methods which are defined more than once, call the existing\r\n          // methods before calling the new property, merging if appropriate.\r\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\r\n            proto[name] = createMergedResultFunction(proto[name], property);\r\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\r\n            proto[name] = createChainedFunction(proto[name], property);\r\n          }\r\n        } else {\r\n          proto[name] = property;\r\n          if (process.env.NODE_ENV !== 'production') {\r\n            // Add verbose displayName to the function, which helps when looking\r\n            // at profiling tools.\r\n            if (typeof property === 'function' && spec.displayName) {\r\n              proto[name].displayName = spec.displayName + '_' + name;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\r\n  if (!statics) {\r\n    return;\r\n  }\r\n  for (var name in statics) {\r\n    var property = statics[name];\r\n    if (!statics.hasOwnProperty(name)) {\r\n      continue;\r\n    }\r\n\r\n    var isReserved = (name in RESERVED_SPEC_KEYS);\r\n    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;\r\n\r\n    var isInherited = (name in Constructor);\r\n    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;\r\n    Constructor[name] = property;\r\n  }\r\n}\r\n\r\n/**\r\n * Merge two objects, but throw if both contain the same key.\r\n *\r\n * @param {object} one The first object, which is mutated.\r\n * @param {object} two The second object\r\n * @return {object} one after it has been mutated to contain everything in two.\r\n */\r\nfunction mergeIntoWithNoDuplicateKeys(one, two) {\r\n  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;\r\n\r\n  for (var key in two) {\r\n    if (two.hasOwnProperty(key)) {\r\n      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;\r\n      one[key] = two[key];\r\n    }\r\n  }\r\n  return one;\r\n}\r\n\r\n/**\r\n * Creates a function that invokes two functions and merges their return values.\r\n *\r\n * @param {function} one Function to invoke first.\r\n * @param {function} two Function to invoke second.\r\n * @return {function} Function that invokes the two argument functions.\r\n * @private\r\n */\r\nfunction createMergedResultFunction(one, two) {\r\n  return function mergedResult() {\r\n    var a = one.apply(this, arguments);\r\n    var b = two.apply(this, arguments);\r\n    if (a == null) {\r\n      return b;\r\n    } else if (b == null) {\r\n      return a;\r\n    }\r\n    var c = {};\r\n    mergeIntoWithNoDuplicateKeys(c, a);\r\n    mergeIntoWithNoDuplicateKeys(c, b);\r\n    return c;\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a function that invokes two functions and ignores their return vales.\r\n *\r\n * @param {function} one Function to invoke first.\r\n * @param {function} two Function to invoke second.\r\n * @return {function} Function that invokes the two argument functions.\r\n * @private\r\n */\r\nfunction createChainedFunction(one, two) {\r\n  return function chainedFunction() {\r\n    one.apply(this, arguments);\r\n    two.apply(this, arguments);\r\n  };\r\n}\r\n\r\n/**\r\n * Binds a method to the component.\r\n *\r\n * @param {object} component Component whose method is going to be bound.\r\n * @param {function} method Method to be bound.\r\n * @return {function} The bound method.\r\n */\r\nfunction bindAutoBindMethod(component, method) {\r\n  var boundMethod = method.bind(component);\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    boundMethod.__reactBoundContext = component;\r\n    boundMethod.__reactBoundMethod = method;\r\n    boundMethod.__reactBoundArguments = null;\r\n    var componentName = component.constructor.displayName;\r\n    var _bind = boundMethod.bind;\r\n    /* eslint-disable block-scoped-var, no-undef */\r\n    boundMethod.bind = function (newThis) {\r\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n        args[_key - 1] = arguments[_key];\r\n      }\r\n\r\n      // User is trying to bind() an autobound method; we effectively will\r\n      // ignore the value of \"this\" that the user is trying to use, so\r\n      // let's warn.\r\n      if (newThis !== component && newThis !== null) {\r\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;\r\n      } else if (!args.length) {\r\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;\r\n        return boundMethod;\r\n      }\r\n      var reboundMethod = _bind.apply(boundMethod, arguments);\r\n      reboundMethod.__reactBoundContext = component;\r\n      reboundMethod.__reactBoundMethod = method;\r\n      reboundMethod.__reactBoundArguments = args;\r\n      return reboundMethod;\r\n      /* eslint-enable */\r\n    };\r\n  }\r\n  return boundMethod;\r\n}\r\n\r\n/**\r\n * Binds all auto-bound methods in a component.\r\n *\r\n * @param {object} component Component whose method is going to be bound.\r\n */\r\nfunction bindAutoBindMethods(component) {\r\n  for (var autoBindKey in component.__reactAutoBindMap) {\r\n    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\r\n      var method = component.__reactAutoBindMap[autoBindKey];\r\n      component[autoBindKey] = bindAutoBindMethod(component, method);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Add more to the ReactClass base class. These are all legacy features and\r\n * therefore not already part of the modern ReactComponent.\r\n */\r\nvar ReactClassMixin = {\r\n\r\n  /**\r\n   * TODO: This will be deprecated because state should always keep a consistent\r\n   * type signature and the only use case for this, is to avoid that.\r\n   */\r\n  replaceState: function (newState, callback) {\r\n    this.updater.enqueueReplaceState(this, newState);\r\n    if (callback) {\r\n      this.updater.enqueueCallback(this, callback);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Checks whether or not this composite component is mounted.\r\n   * @return {boolean} True if mounted, false otherwise.\r\n   * @protected\r\n   * @final\r\n   */\r\n  isMounted: function () {\r\n    return this.updater.isMounted(this);\r\n  },\r\n\r\n  /**\r\n   * Sets a subset of the props.\r\n   *\r\n   * @param {object} partialProps Subset of the next props.\r\n   * @param {?function} callback Called after props are updated.\r\n   * @final\r\n   * @public\r\n   * @deprecated\r\n   */\r\n  setProps: function (partialProps, callback) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      warnSetProps();\r\n    }\r\n    this.updater.enqueueSetProps(this, partialProps);\r\n    if (callback) {\r\n      this.updater.enqueueCallback(this, callback);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Replace all the props.\r\n   *\r\n   * @param {object} newProps Subset of the next props.\r\n   * @param {?function} callback Called after props are updated.\r\n   * @final\r\n   * @public\r\n   * @deprecated\r\n   */\r\n  replaceProps: function (newProps, callback) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      warnSetProps();\r\n    }\r\n    this.updater.enqueueReplaceProps(this, newProps);\r\n    if (callback) {\r\n      this.updater.enqueueCallback(this, callback);\r\n    }\r\n  }\r\n};\r\n\r\nvar ReactClassComponent = function () {};\r\nassign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\r\n\r\n/**\r\n * Module for creating composite components.\r\n *\r\n * @class ReactClass\r\n */\r\nvar ReactClass = {\r\n\r\n  /**\r\n   * Creates a composite component class given a class specification.\r\n   *\r\n   * @param {object} spec Class specification (which must define `render`).\r\n   * @return {function} Component constructor function.\r\n   * @public\r\n   */\r\n  createClass: function (spec) {\r\n    var Constructor = function (props, context, updater) {\r\n      // This constructor is overridden by mocks. The argument is used\r\n      // by mocks to assert on what gets mounted.\r\n\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;\r\n      }\r\n\r\n      // Wire up auto-binding\r\n      if (this.__reactAutoBindMap) {\r\n        bindAutoBindMethods(this);\r\n      }\r\n\r\n      this.props = props;\r\n      this.context = context;\r\n      this.refs = emptyObject;\r\n      this.updater = updater || ReactNoopUpdateQueue;\r\n\r\n      this.state = null;\r\n\r\n      // ReactClasses doesn't have constructors. Instead, they use the\r\n      // getInitialState and componentWillMount methods for initialization.\r\n\r\n      var initialState = this.getInitialState ? this.getInitialState() : null;\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        // We allow auto-mocks to proceed as if they're returning null.\r\n        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {\r\n          // This is probably bad practice. Consider warning here and\r\n          // deprecating this convenience.\r\n          initialState = null;\r\n        }\r\n      }\r\n      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;\r\n\r\n      this.state = initialState;\r\n    };\r\n    Constructor.prototype = new ReactClassComponent();\r\n    Constructor.prototype.constructor = Constructor;\r\n\r\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\r\n\r\n    mixSpecIntoComponent(Constructor, spec);\r\n\r\n    // Initialize the defaultProps property after all mixins have been merged.\r\n    if (Constructor.getDefaultProps) {\r\n      Constructor.defaultProps = Constructor.getDefaultProps();\r\n    }\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      // This is a tag to indicate that the use of these method names is ok,\r\n      // since it's used with createClass. If it's not, then it's likely a\r\n      // mistake so we'll warn you to use the static property, property\r\n      // initializer or constructor respectively.\r\n      if (Constructor.getDefaultProps) {\r\n        Constructor.getDefaultProps.isReactClassApproved = {};\r\n      }\r\n      if (Constructor.prototype.getInitialState) {\r\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\r\n      }\r\n    }\r\n\r\n    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;\r\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;\r\n    }\r\n\r\n    // Reduce time spent doing lookups by setting these on the prototype.\r\n    for (var methodName in ReactClassInterface) {\r\n      if (!Constructor.prototype[methodName]) {\r\n        Constructor.prototype[methodName] = null;\r\n      }\r\n    }\r\n\r\n    return Constructor;\r\n  },\r\n\r\n  injection: {\r\n    injectMixin: function (mixin) {\r\n      injectedMixins.push(mixin);\r\n    }\r\n  }\r\n\r\n};\r\n\r\nmodule.exports = ReactClass;"]},"metadata":{},"sourceType":"script"}