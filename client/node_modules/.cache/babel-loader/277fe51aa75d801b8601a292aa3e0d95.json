{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/observer\n */\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Abstract base observer class. Observers are classes which listen to DOM events, do the preliminary\n * processing and fire events on the {@link module:engine/view/document~Document} objects.\n * Observers can also add features to the view, for instance by updating its status or marking elements\n * which need a refresh on DOM events.\n *\n * @abstract\n */\n\nexport default class Observer {\n  /**\n   * Creates an instance of the observer.\n   *\n   * @param {module:engine/view/view~View} view\n   */\n  constructor(view) {\n    /**\n     * An instance of the view controller.\n     *\n     * @readonly\n     * @member {module:engine/view/view~View}\n     */\n    this.view = view;\n    /**\n     * A reference to the {@link module:engine/view/document~Document} object.\n     *\n     * @readonly\n     * @member {module:engine/view/document~Document}\n     */\n\n    this.document = view.document;\n    /**\n     * The state of the observer. If it is disabled, no events will be fired.\n     *\n     * @readonly\n     * @member {Boolean}\n     */\n\n    this.isEnabled = false;\n  }\n  /**\n   * Enables the observer. This method is called when the observer is registered to the\n   * {@link module:engine/view/view~View} and after {@link module:engine/view/view~View#forceRender rendering}\n   * (all observers are {@link #disable disabled} before rendering).\n   *\n   * A typical use case for disabling observers is that mutation observers need to be disabled for the rendering.\n   * However, a child class may not need to be disabled, so it can implement an empty method.\n   *\n   * @see module:engine/view/observer/observer~Observer#disable\n   */\n\n\n  enable() {\n    this.isEnabled = true;\n  }\n  /**\n   * Disables the observer. This method is called before\n   * {@link module:engine/view/view~View#forceRender rendering} to prevent firing events during rendering.\n   *\n   * @see module:engine/view/observer/observer~Observer#enable\n   */\n\n\n  disable() {\n    this.isEnabled = false;\n  }\n  /**\n   * Disables and destroys the observer, among others removes event listeners created by the observer.\n   */\n\n\n  destroy() {\n    this.disable();\n    this.stopListening();\n  }\n  /**\n   * Checks whether a given DOM event should be ignored (should not be turned into a synthetic view document event).\n   *\n   * Currently, an event will be ignored only if its target or any of its ancestors has the `data-cke-ignore-events` attribute.\n   * This attribute can be used inside the structures generated by\n   * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `DowncastWriter#createUIElement()`} to ignore events\n   * fired within a UI that should be excluded from CKEditor 5's realms.\n   *\n   * @param {Node} domTarget The DOM event target to check (usually an element, sometimes a text node and\n   * potentially sometimes a document, too).\n   * @returns {Boolean} Whether this event should be ignored by the observer.\n   */\n\n\n  checkShouldIgnoreEventFromTarget(domTarget) {\n    if (domTarget && domTarget.nodeType === 3) {\n      domTarget = domTarget.parentNode;\n    }\n\n    if (!domTarget || domTarget.nodeType !== 1) {\n      return false;\n    }\n\n    return domTarget.matches('[data-cke-ignore-events], [data-cke-ignore-events] *');\n  }\n  /**\n   * Starts observing the given root element.\n   *\n   * @method #observe\n   * @param {HTMLElement} domElement\n   * @param {String} name The name of the root element.\n   */\n\n\n}\nmix(Observer, DomEmitterMixin);","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/observer.js"],"names":["DomEmitterMixin","mix","Observer","constructor","view","document","isEnabled","enable","disable","destroy","stopListening","checkShouldIgnoreEventFromTarget","domTarget","nodeType","parentNode","matches"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,eAAP,MAA4B,gDAA5B;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,QAAN,CAAe;AAC7B;AACD;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAAEC,IAAF,EAAS;AACnB;AACF;AACA;AACA;AACA;AACA;AACE,SAAKA,IAAL,GAAYA,IAAZ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,QAAL,GAAgBD,IAAI,CAACC,QAArB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,SAAL,GAAiB,KAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,MAAM,GAAG;AACR,SAAKD,SAAL,GAAiB,IAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCE,EAAAA,OAAO,GAAG;AACT,SAAKF,SAAL,GAAiB,KAAjB;AACA;AAED;AACD;AACA;;;AACCG,EAAAA,OAAO,GAAG;AACT,SAAKD,OAAL;AACA,SAAKE,aAAL;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,gCAAgC,CAAEC,SAAF,EAAc;AAC7C,QAAKA,SAAS,IAAIA,SAAS,CAACC,QAAV,KAAuB,CAAzC,EAA6C;AAC5CD,MAAAA,SAAS,GAAGA,SAAS,CAACE,UAAtB;AACA;;AAED,QAAK,CAACF,SAAD,IAAcA,SAAS,CAACC,QAAV,KAAuB,CAA1C,EAA8C;AAC7C,aAAO,KAAP;AACA;;AAED,WAAOD,SAAS,CAACG,OAAV,CAAmB,sDAAnB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AA9F8B;AAiG9Bd,GAAG,CAAEC,QAAF,EAAYF,eAAZ,CAAH","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/observer\n */\n\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Abstract base observer class. Observers are classes which listen to DOM events, do the preliminary\n * processing and fire events on the {@link module:engine/view/document~Document} objects.\n * Observers can also add features to the view, for instance by updating its status or marking elements\n * which need a refresh on DOM events.\n *\n * @abstract\n */\nexport default class Observer {\n\t/**\n\t * Creates an instance of the observer.\n\t *\n\t * @param {module:engine/view/view~View} view\n\t */\n\tconstructor( view ) {\n\t\t/**\n\t\t * An instance of the view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View}\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * A reference to the {@link module:engine/view/document~Document} object.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = view.document;\n\n\t\t/**\n\t\t * The state of the observer. If it is disabled, no events will be fired.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.isEnabled = false;\n\t}\n\n\t/**\n\t * Enables the observer. This method is called when the observer is registered to the\n\t * {@link module:engine/view/view~View} and after {@link module:engine/view/view~View#forceRender rendering}\n\t * (all observers are {@link #disable disabled} before rendering).\n\t *\n\t * A typical use case for disabling observers is that mutation observers need to be disabled for the rendering.\n\t * However, a child class may not need to be disabled, so it can implement an empty method.\n\t *\n\t * @see module:engine/view/observer/observer~Observer#disable\n\t */\n\tenable() {\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Disables the observer. This method is called before\n\t * {@link module:engine/view/view~View#forceRender rendering} to prevent firing events during rendering.\n\t *\n\t * @see module:engine/view/observer/observer~Observer#enable\n\t */\n\tdisable() {\n\t\tthis.isEnabled = false;\n\t}\n\n\t/**\n\t * Disables and destroys the observer, among others removes event listeners created by the observer.\n\t */\n\tdestroy() {\n\t\tthis.disable();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Checks whether a given DOM event should be ignored (should not be turned into a synthetic view document event).\n\t *\n\t * Currently, an event will be ignored only if its target or any of its ancestors has the `data-cke-ignore-events` attribute.\n\t * This attribute can be used inside the structures generated by\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `DowncastWriter#createUIElement()`} to ignore events\n\t * fired within a UI that should be excluded from CKEditor 5's realms.\n\t *\n\t * @param {Node} domTarget The DOM event target to check (usually an element, sometimes a text node and\n\t * potentially sometimes a document, too).\n\t * @returns {Boolean} Whether this event should be ignored by the observer.\n\t */\n\tcheckShouldIgnoreEventFromTarget( domTarget ) {\n\t\tif ( domTarget && domTarget.nodeType === 3 ) {\n\t\t\tdomTarget = domTarget.parentNode;\n\t\t}\n\n\t\tif ( !domTarget || domTarget.nodeType !== 1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn domTarget.matches( '[data-cke-ignore-events], [data-cke-ignore-events] *' );\n\t}\n\n\t/**\n\t * Starts observing the given root element.\n\t *\n\t * @method #observe\n\t * @param {HTMLElement} domElement\n\t * @param {String} name The name of the root element.\n\t */\n}\n\nmix( Observer, DomEmitterMixin );\n"]},"metadata":{},"sourceType":"module"}