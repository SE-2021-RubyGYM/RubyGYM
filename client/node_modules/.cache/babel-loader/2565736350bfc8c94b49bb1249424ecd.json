{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/labeledfield/utils\n */\nimport InputTextView from '../inputtext/inputtextview';\nimport { createDropdown } from '../dropdown/utils';\n/**\n * A helper for creating labeled inputs.\n *\n * It creates an instance of a {@link module:ui/inputtext/inputtextview~InputTextView input text} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets input's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isReadOnly` to the labeled view.\n * * It binds input's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the input..\n *\n * Usage:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, createLabeledDropdown );\n *\t\tconsole.log( labeledInputView.view ); // An input instance.\n *\n * @param {module:ui/labeledfield/labeledfieldview~LabeledFieldView} labeledFieldView The instance of the labeled field view.\n * @param {String} viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the input.\n * @param {String} statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the input.\n * @returns {module:ui/inputtext/inputtextview~InputTextView} The input text view instance.\n */\n\nexport function createLabeledInputText(labeledFieldView, viewUid, statusUid) {\n  const inputView = new InputTextView(labeledFieldView.locale);\n  inputView.set({\n    id: viewUid,\n    ariaDescribedById: statusUid\n  });\n  inputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', value => !value);\n  inputView.bind('hasError').to(labeledFieldView, 'errorText', value => !!value);\n  inputView.on('input', () => {\n    // UX: Make the error text disappear and disable the error indicator as the user\n    // starts fixing the errors.\n    labeledFieldView.errorText = null;\n  });\n  labeledFieldView.bind('isEmpty', 'isFocused', 'placeholder').to(inputView);\n  return inputView;\n}\n/**\n * A helper for creating labeled dropdowns.\n *\n * It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled field view}.\n *\n * The helper does the following:\n *\n * * It sets dropdown's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isEnabled` to the labeled view.\n *\n * Usage:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, createLabeledDropdown );\n *\t\tconsole.log( labeledInputView.view ); // A dropdown instance.\n *\n * @param {module:ui/labeledfield/labeledfieldview~LabeledFieldView} labeledFieldView The instance of the labeled field view.\n * @param {String} viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view label} and the dropdown.\n * @param {String} statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view status} and the dropdown.\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\n */\n\nexport function createLabeledDropdown(labeledFieldView, viewUid, statusUid) {\n  const dropdownView = createDropdown(labeledFieldView.locale);\n  dropdownView.set({\n    id: viewUid,\n    ariaDescribedById: statusUid\n  });\n  dropdownView.bind('isEnabled').to(labeledFieldView);\n  return dropdownView;\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-ui/src/labeledfield/utils.js"],"names":["InputTextView","createDropdown","createLabeledInputText","labeledFieldView","viewUid","statusUid","inputView","locale","set","id","ariaDescribedById","bind","to","value","on","errorText","createLabeledDropdown","dropdownView"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,aAAP,MAA0B,4BAA1B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,CAAiCC,gBAAjC,EAAmDC,OAAnD,EAA4DC,SAA5D,EAAwE;AAC9E,QAAMC,SAAS,GAAG,IAAIN,aAAJ,CAAmBG,gBAAgB,CAACI,MAApC,CAAlB;AAEAD,EAAAA,SAAS,CAACE,GAAV,CAAe;AACdC,IAAAA,EAAE,EAAEL,OADU;AAEdM,IAAAA,iBAAiB,EAAEL;AAFL,GAAf;AAKAC,EAAAA,SAAS,CAACK,IAAV,CAAgB,YAAhB,EAA+BC,EAA/B,CAAmCT,gBAAnC,EAAqD,WAArD,EAAkEU,KAAK,IAAI,CAACA,KAA5E;AACAP,EAAAA,SAAS,CAACK,IAAV,CAAgB,UAAhB,EAA6BC,EAA7B,CAAiCT,gBAAjC,EAAmD,WAAnD,EAAgEU,KAAK,IAAI,CAAC,CAACA,KAA3E;AAEAP,EAAAA,SAAS,CAACQ,EAAV,CAAc,OAAd,EAAuB,MAAM;AAC5B;AACA;AACAX,IAAAA,gBAAgB,CAACY,SAAjB,GAA6B,IAA7B;AACA,GAJD;AAMAZ,EAAAA,gBAAgB,CAACQ,IAAjB,CAAuB,SAAvB,EAAkC,WAAlC,EAA+C,aAA/C,EAA+DC,EAA/D,CAAmEN,SAAnE;AAEA,SAAOA,SAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASU,qBAAT,CAAgCb,gBAAhC,EAAkDC,OAAlD,EAA2DC,SAA3D,EAAuE;AAC7E,QAAMY,YAAY,GAAGhB,cAAc,CAAEE,gBAAgB,CAACI,MAAnB,CAAnC;AAEAU,EAAAA,YAAY,CAACT,GAAb,CAAkB;AACjBC,IAAAA,EAAE,EAAEL,OADa;AAEjBM,IAAAA,iBAAiB,EAAEL;AAFF,GAAlB;AAKAY,EAAAA,YAAY,CAACN,IAAb,CAAmB,WAAnB,EAAiCC,EAAjC,CAAqCT,gBAArC;AAEA,SAAOc,YAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/labeledfield/utils\n */\n\nimport InputTextView from '../inputtext/inputtextview';\nimport { createDropdown } from '../dropdown/utils';\n\n/**\n * A helper for creating labeled inputs.\n *\n * It creates an instance of a {@link module:ui/inputtext/inputtextview~InputTextView input text} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets input's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isReadOnly` to the labeled view.\n * * It binds input's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the input..\n *\n * Usage:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, createLabeledDropdown );\n *\t\tconsole.log( labeledInputView.view ); // An input instance.\n *\n * @param {module:ui/labeledfield/labeledfieldview~LabeledFieldView} labeledFieldView The instance of the labeled field view.\n * @param {String} viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the input.\n * @param {String} statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the input.\n * @returns {module:ui/inputtext/inputtextview~InputTextView} The input text view instance.\n */\nexport function createLabeledInputText( labeledFieldView, viewUid, statusUid ) {\n\tconst inputView = new InputTextView( labeledFieldView.locale );\n\n\tinputView.set( {\n\t\tid: viewUid,\n\t\tariaDescribedById: statusUid\n\t} );\n\n\tinputView.bind( 'isReadOnly' ).to( labeledFieldView, 'isEnabled', value => !value );\n\tinputView.bind( 'hasError' ).to( labeledFieldView, 'errorText', value => !!value );\n\n\tinputView.on( 'input', () => {\n\t\t// UX: Make the error text disappear and disable the error indicator as the user\n\t\t// starts fixing the errors.\n\t\tlabeledFieldView.errorText = null;\n\t} );\n\n\tlabeledFieldView.bind( 'isEmpty', 'isFocused', 'placeholder' ).to( inputView );\n\n\treturn inputView;\n}\n\n/**\n * A helper for creating labeled dropdowns.\n *\n * It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled field view}.\n *\n * The helper does the following:\n *\n * * It sets dropdown's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isEnabled` to the labeled view.\n *\n * Usage:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, createLabeledDropdown );\n *\t\tconsole.log( labeledInputView.view ); // A dropdown instance.\n *\n * @param {module:ui/labeledfield/labeledfieldview~LabeledFieldView} labeledFieldView The instance of the labeled field view.\n * @param {String} viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view label} and the dropdown.\n * @param {String} statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view status} and the dropdown.\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\n */\nexport function createLabeledDropdown( labeledFieldView, viewUid, statusUid ) {\n\tconst dropdownView = createDropdown( labeledFieldView.locale );\n\n\tdropdownView.set( {\n\t\tid: viewUid,\n\t\tariaDescribedById: statusUid\n\t} );\n\n\tdropdownView.bind( 'isEnabled' ).to( labeledFieldView );\n\n\treturn dropdownView;\n}\n"]},"metadata":{},"sourceType":"module"}