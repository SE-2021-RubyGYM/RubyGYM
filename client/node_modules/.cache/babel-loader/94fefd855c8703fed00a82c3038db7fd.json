{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/pendingactions\n */\nimport ContextPlugin from './contextplugin';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The list of pending editor actions.\n *\n * This plugin should be used to synchronise plugins that execute long-lasting actions\n * (e.g. file upload) with the editor integration. It gives the developer who integrates the editor\n * an easy way to check if there are any actions pending whenever such information is needed.\n * All plugins that register a pending action also provide a message about the action that is ongoing\n * which can be displayed to the user. This lets them decide if they want to interrupt the action or wait.\n *\n * Adding and updating a pending action:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n * \t\tconst action = pendingActions.add( 'Upload in progress: 0%.' );\n *\n *\t\t// You can update the message:\n * \t\taction.message = 'Upload in progress: 10%.';\n *\n * Removing a pending action:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n * \t\tconst action = pendingActions.add( 'Unsaved changes.' );\n *\n * \t\tpendingActions.remove( action );\n *\n * Getting pending actions:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n *\n * \t\tconst action1 = pendingActions.add( 'Action 1' );\n * \t\tconst action2 = pendingActions.add( 'Action 2' );\n *\n * \t\tpendingActions.first; // Returns action1\n * \t\tArray.from( pendingActions ); // Returns [ action1, action2 ]\n *\n * This plugin is used by features like {@link module:upload/filerepository~FileRepository} to register their ongoing actions\n * and by features like {@link module:autosave/autosave~Autosave} to detect whether there are any ongoing actions.\n * Read more about saving the data in the {@glink builds/guides/integration/saving-data Saving and getting data} guide.\n *\n * @extends module:core/contextplugin~ContextPlugin\n */\n\nexport default class PendingActions extends ContextPlugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'PendingActions';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    /**\n     * Defines whether there is any registered pending action.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #hasAny\n     */\n    this.set('hasAny', false);\n    /**\n     * A list of pending actions.\n     *\n     * @private\n     * @type {module:utils/collection~Collection}\n     */\n\n    this._actions = new Collection({\n      idProperty: '_id'\n    });\n\n    this._actions.delegate('add', 'remove').to(this);\n  }\n  /**\n   * Adds an action to the list of pending actions.\n   *\n   * This method returns an action object with an observable message property.\n   * The action object can be later used in the {@link #remove} method. It also allows you to change the message.\n   *\n   * @param {String} message The action message.\n   * @returns {Object} An observable object that represents a pending action.\n   */\n\n\n  add(message) {\n    if (typeof message !== 'string') {\n      /**\n       * The message must be a string.\n       *\n       * @error pendingactions-add-invalid-message\n       */\n      throw new CKEditorError('pendingactions-add-invalid-message', this);\n    }\n\n    const action = Object.create(ObservableMixin);\n    action.set('message', message);\n\n    this._actions.add(action);\n\n    this.hasAny = true;\n    return action;\n  }\n  /**\n   * Removes an action from the list of pending actions.\n   *\n   * @param {Object} action An action object.\n   */\n\n\n  remove(action) {\n    this._actions.remove(action);\n\n    this.hasAny = !!this._actions.length;\n  }\n  /**\n   * Returns the first action from the list or null when list is empty\n   *\n   * returns {Object|null} The pending action object.\n   */\n\n\n  get first() {\n    return this._actions.get(0);\n  }\n  /**\n   * Iterable interface.\n   *\n   * @returns {Iterable.<*>}\n   */\n\n\n  [Symbol.iterator]() {\n    return this._actions[Symbol.iterator]();\n  }\n  /**\n   * Fired when an action is added to the list.\n   *\n   * @event add\n   * @param {Object} action The added action.\n   */\n\n  /**\n   * Fired when an action is removed from the list.\n   *\n   * @event remove\n   * @param {Object} action The removed action.\n   */\n\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-core/src/pendingactions.js"],"names":["ContextPlugin","ObservableMixin","Collection","CKEditorError","PendingActions","pluginName","init","set","_actions","idProperty","delegate","to","add","message","action","Object","create","hasAny","remove","length","first","get","Symbol","iterator"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,eAAP,MAA4B,+CAA5B;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,cAAN,SAA6BJ,aAA7B,CAA2C;AACzD;AACD;AACA;AACsB,aAAVK,UAAU,GAAG;AACvB,WAAO,gBAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN;AACF;AACA;AACA;AACA;AACA;AACA;AACE,SAAKC,GAAL,CAAU,QAAV,EAAoB,KAApB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,QAAL,GAAgB,IAAIN,UAAJ,CAAgB;AAAEO,MAAAA,UAAU,EAAE;AAAd,KAAhB,CAAhB;;AACA,SAAKD,QAAL,CAAcE,QAAd,CAAwB,KAAxB,EAA+B,QAA/B,EAA0CC,EAA1C,CAA8C,IAA9C;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,GAAG,CAAEC,OAAF,EAAY;AACd,QAAK,OAAOA,OAAP,KAAmB,QAAxB,EAAmC;AAClC;AACH;AACA;AACA;AACA;AACG,YAAM,IAAIV,aAAJ,CAAmB,oCAAnB,EAAyD,IAAzD,CAAN;AACA;;AAED,UAAMW,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAef,eAAf,CAAf;AAEAa,IAAAA,MAAM,CAACP,GAAP,CAAY,SAAZ,EAAuBM,OAAvB;;AACA,SAAKL,QAAL,CAAcI,GAAd,CAAmBE,MAAnB;;AACA,SAAKG,MAAL,GAAc,IAAd;AAEA,WAAOH,MAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCI,EAAAA,MAAM,CAAEJ,MAAF,EAAW;AAChB,SAAKN,QAAL,CAAcU,MAAd,CAAsBJ,MAAtB;;AACA,SAAKG,MAAL,GAAc,CAAC,CAAC,KAAKT,QAAL,CAAcW,MAA9B;AACA;AAED;AACD;AACA;AACA;AACA;;;AACU,MAALC,KAAK,GAAG;AACX,WAAO,KAAKZ,QAAL,CAAca,GAAd,CAAmB,CAAnB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACkB,GAAfC,MAAM,CAACC,QAAQ,IAAK;AACrB,WAAO,KAAKf,QAAL,CAAec,MAAM,CAACC,QAAtB,GAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;;;AAnG0D","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/pendingactions\n */\n\nimport ContextPlugin from './contextplugin';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The list of pending editor actions.\n *\n * This plugin should be used to synchronise plugins that execute long-lasting actions\n * (e.g. file upload) with the editor integration. It gives the developer who integrates the editor\n * an easy way to check if there are any actions pending whenever such information is needed.\n * All plugins that register a pending action also provide a message about the action that is ongoing\n * which can be displayed to the user. This lets them decide if they want to interrupt the action or wait.\n *\n * Adding and updating a pending action:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n * \t\tconst action = pendingActions.add( 'Upload in progress: 0%.' );\n *\n *\t\t// You can update the message:\n * \t\taction.message = 'Upload in progress: 10%.';\n *\n * Removing a pending action:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n * \t\tconst action = pendingActions.add( 'Unsaved changes.' );\n *\n * \t\tpendingActions.remove( action );\n *\n * Getting pending actions:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n *\n * \t\tconst action1 = pendingActions.add( 'Action 1' );\n * \t\tconst action2 = pendingActions.add( 'Action 2' );\n *\n * \t\tpendingActions.first; // Returns action1\n * \t\tArray.from( pendingActions ); // Returns [ action1, action2 ]\n *\n * This plugin is used by features like {@link module:upload/filerepository~FileRepository} to register their ongoing actions\n * and by features like {@link module:autosave/autosave~Autosave} to detect whether there are any ongoing actions.\n * Read more about saving the data in the {@glink builds/guides/integration/saving-data Saving and getting data} guide.\n *\n * @extends module:core/contextplugin~ContextPlugin\n */\nexport default class PendingActions extends ContextPlugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'PendingActions';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t/**\n\t\t * Defines whether there is any registered pending action.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #hasAny\n\t\t */\n\t\tthis.set( 'hasAny', false );\n\n\t\t/**\n\t\t * A list of pending actions.\n\t\t *\n\t\t * @private\n\t\t * @type {module:utils/collection~Collection}\n\t\t */\n\t\tthis._actions = new Collection( { idProperty: '_id' } );\n\t\tthis._actions.delegate( 'add', 'remove' ).to( this );\n\t}\n\n\t/**\n\t * Adds an action to the list of pending actions.\n\t *\n\t * This method returns an action object with an observable message property.\n\t * The action object can be later used in the {@link #remove} method. It also allows you to change the message.\n\t *\n\t * @param {String} message The action message.\n\t * @returns {Object} An observable object that represents a pending action.\n\t */\n\tadd( message ) {\n\t\tif ( typeof message !== 'string' ) {\n\t\t\t/**\n\t\t\t * The message must be a string.\n\t\t\t *\n\t\t\t * @error pendingactions-add-invalid-message\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'pendingactions-add-invalid-message', this );\n\t\t}\n\n\t\tconst action = Object.create( ObservableMixin );\n\n\t\taction.set( 'message', message );\n\t\tthis._actions.add( action );\n\t\tthis.hasAny = true;\n\n\t\treturn action;\n\t}\n\n\t/**\n\t * Removes an action from the list of pending actions.\n\t *\n\t * @param {Object} action An action object.\n\t */\n\tremove( action ) {\n\t\tthis._actions.remove( action );\n\t\tthis.hasAny = !!this._actions.length;\n\t}\n\n\t/**\n\t * Returns the first action from the list or null when list is empty\n\t *\n\t * returns {Object|null} The pending action object.\n\t */\n\tget first() {\n\t\treturn this._actions.get( 0 );\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._actions[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Fired when an action is added to the list.\n\t *\n\t * @event add\n\t * @param {Object} action The added action.\n\t */\n\n\t/**\n\t * Fired when an action is removed from the list.\n\t *\n\t * @event remove\n\t * @param {Object} action The removed action.\n\t */\n}\n"]},"metadata":{},"sourceType":"module"}