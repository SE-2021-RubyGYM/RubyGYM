{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/notification/notification\n */\n\n/* globals window */\nimport ContextPlugin from '@ckeditor/ckeditor5-core/src/contextplugin';\n/**\n * The Notification plugin.\n *\n * This plugin sends a few types of notifications: `success`, `info` and `warning`. The notifications need to be\n * handled and displayed by a plugin responsible for showing the UI of the notifications. Using this plugin for dispatching\n * notifications makes it possible to switch the notifications UI.\n *\n * Note that every unhandled and not stopped `warning` notification will be displayed as a system alert.\n * See {@link module:ui/notification/notification~Notification#showWarning}.\n *\n * @extends module:core/contextplugin~ContextPlugin\n */\n\nexport default class Notification extends ContextPlugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Notification';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    // Each unhandled and not stopped `show:warning` event is displayed as a system alert.\n    this.on('show:warning', (evt, data) => {\n      window.alert(data.message); // eslint-disable-line no-alert\n    }, {\n      priority: 'lowest'\n    });\n  }\n  /**\n   * Shows a success notification.\n   *\n   * By default, it fires the {@link #event:show:success `show:success` event} with the given `data`. The event namespace can be extended\n   * using the `data.namespace` option. For example:\n   *\n   * \t\tshowSuccess( 'Image is uploaded.', {\n   * \t\t\tnamespace: 'upload:image'\n   * \t\t} );\n   *\n   * will fire the `show:success:upload:image` event.\n   *\n   * You can provide the title of the notification:\n   *\n   *\t\tshowSuccess( 'Image is uploaded.', {\n   *\t\t\ttitle: 'Image upload success'\n   *\t\t} );\n   *\n   * @param {String} message The content of the notification.\n   * @param {Object} [data={}] Additional data.\n   * @param {String} [data.namespace] Additional event namespace.\n   * @param {String} [data.title] The title of the notification.\n   */\n\n\n  showSuccess(message) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    this._showNotification({\n      message,\n      type: 'success',\n      namespace: data.namespace,\n      title: data.title\n    });\n  }\n  /**\n   * Shows an information notification.\n   *\n   * By default, it fires the {@link #event:show:info `show:info` event} with the given `data`. The event namespace can be extended\n   * using the `data.namespace` option. For example:\n   *\n   * \t\tshowInfo( 'Editor is offline.', {\n   * \t\t\tnamespace: 'editor:status'\n   * \t\t} );\n   *\n   * will fire the `show:info:editor:status` event.\n   *\n   * You can provide the title of the notification:\n   *\n   *\t\tshowInfo( 'Editor is offline.', {\n   *\t\t\ttitle: 'Network information'\n   *\t\t} );\n   *\n   * @param {String} message The content of the notification.\n   * @param {Object} [data={}] Additional data.\n   * @param {String} [data.namespace] Additional event namespace.\n   * @param {String} [data.title] The title of the notification.\n   */\n\n\n  showInfo(message) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    this._showNotification({\n      message,\n      type: 'info',\n      namespace: data.namespace,\n      title: data.title\n    });\n  }\n  /**\n   * Shows a warning notification.\n   *\n   * By default, it fires the {@link #event:show:warning `show:warning` event}\n   * with the given `data`. The event namespace can be extended using the `data.namespace` option. For example:\n   *\n   * \t\tshowWarning( 'Image upload error.', {\n   * \t\t\tnamespace: 'upload:image'\n   * \t\t} );\n   *\n   * will fire the `show:warning:upload:image` event.\n   *\n   * You can provide the title of the notification:\n   *\n   *\t\tshowWarning( 'Image upload error.', {\n   *\t\t\ttitle: 'Upload failed'\n   *\t\t} );\n   *\n   * Note that each unhandled and not stopped `warning` notification will be displayed as a system alert.\n   * The plugin responsible for displaying warnings should `stop()` the event to prevent displaying it as an alert:\n   *\n   * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n   * \t\t\t// Do something with the data.\n   *\n   * \t\t\t// Stop this event to prevent displaying it as an alert.\n   * \t\t\tevt.stop();\n   * \t\t} );\n   *\n   * You can attach many listeners to the same event and `stop()` this event in a listener with a low priority:\n   *\n   * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n   * \t\t\t// Show the warning in the UI, but do not stop it.\n   * \t\t} );\n   *\n   * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n   * \t\t\t// Log the warning to some error tracker.\n   *\n   * \t\t\t// Stop this event to prevent displaying it as an alert.\n   * \t\t\tevt.stop();\n   * \t\t}, { priority: 'low' } );\n   *\n   * @param {String} message The content of the notification.\n   * @param {Object} [data={}] Additional data.\n   * @param {String} [data.namespace] Additional event namespace.\n   * @param {String} [data.title] The title of the notification.\n   */\n\n\n  showWarning(message) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    this._showNotification({\n      message,\n      type: 'warning',\n      namespace: data.namespace,\n      title: data.title\n    });\n  }\n  /**\n   * Fires the `show` event with the specified type, namespace and message.\n   *\n   * @private\n   * @param {Object} data The message data.\n   * @param {String} data.message The content of the notification.\n   * @param {'success'|'info'|'warning'} data.type The type of the message.\n   * @param {String} [data.namespace] Additional event namespace.\n   * @param {String} [data.title=''] The title of the notification.\n   */\n\n\n  _showNotification(data) {\n    const event = `show:${data.type}` + (data.namespace ? `:${data.namespace}` : '');\n    this.fire(event, {\n      message: data.message,\n      type: data.type,\n      title: data.title || ''\n    });\n  }\n  /**\n   * Fired when one of the `showSuccess()`, `showInfo()`, `showWarning()` methods is called.\n   *\n   * @event show\n   * @param {Object} data The notification data.\n   * @param {String} data.message The content of the notification.\n   * @param {String} data.title The title of the notification.\n   * @param {'success'|'info'|'warning'} data.type The type of the notification.\n   */\n\n  /**\n   * Fired when the `showSuccess()` method is called.\n   *\n   * @event show:success\n   * @param {Object} data The notification data.\n   * @param {String} data.message The content of the notification.\n   * @param {String} data.title The title of the notification.\n   * @param {'success'} data.type The type of the notification.\n   */\n\n  /**\n   * Fired when the `showInfo()` method is called.\n   *\n   * @event show:info\n   * @param {Object} data The notification data.\n   * @param {String} data.message The content of the notification.\n   * @param {String} data.title The title of the notification.\n   * @param {'info'} data.type The type of the notification.\n   */\n\n  /**\n   * Fired when the `showWarning()` method is called.\n   *\n   * When this event is not handled or stopped by `event.stop()`, the `data.message` of this event will\n   * be automatically displayed as a system alert.\n   *\n   * @event show:warning\n   * @param {Object} data The notification data.\n   * @param {String} data.message The content of the notification.\n   * @param {String} data.title The title of the notification.\n   * @param {'warning'} data.type The type of the notification.\n   */\n\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-ui/src/notification/notification.js"],"names":["ContextPlugin","Notification","pluginName","init","on","evt","data","window","alert","message","priority","showSuccess","_showNotification","type","namespace","title","showInfo","showWarning","event","fire"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA,OAAOA,aAAP,MAA0B,4CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,YAAN,SAA2BD,aAA3B,CAAyC;AACvD;AACD;AACA;AACsB,aAAVE,UAAU,GAAG;AACvB,WAAO,cAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN;AACA,SAAKC,EAAL,CAAS,cAAT,EAAyB,CAAEC,GAAF,EAAOC,IAAP,KAAiB;AACzCC,MAAAA,MAAM,CAACC,KAAP,CAAcF,IAAI,CAACG,OAAnB,EADyC,CACX;AAC9B,KAFD,EAEG;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAFH;AAGA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,WAAW,CAAEF,OAAF,EAAuB;AAAA,QAAZH,IAAY,uEAAL,EAAK;;AACjC,SAAKM,iBAAL,CAAwB;AACvBH,MAAAA,OADuB;AAEvBI,MAAAA,IAAI,EAAE,SAFiB;AAGvBC,MAAAA,SAAS,EAAER,IAAI,CAACQ,SAHO;AAIvBC,MAAAA,KAAK,EAAET,IAAI,CAACS;AAJW,KAAxB;AAMA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,QAAQ,CAAEP,OAAF,EAAuB;AAAA,QAAZH,IAAY,uEAAL,EAAK;;AAC9B,SAAKM,iBAAL,CAAwB;AACvBH,MAAAA,OADuB;AAEvBI,MAAAA,IAAI,EAAE,MAFiB;AAGvBC,MAAAA,SAAS,EAAER,IAAI,CAACQ,SAHO;AAIvBC,MAAAA,KAAK,EAAET,IAAI,CAACS;AAJW,KAAxB;AAMA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCE,EAAAA,WAAW,CAAER,OAAF,EAAuB;AAAA,QAAZH,IAAY,uEAAL,EAAK;;AACjC,SAAKM,iBAAL,CAAwB;AACvBH,MAAAA,OADuB;AAEvBI,MAAAA,IAAI,EAAE,SAFiB;AAGvBC,MAAAA,SAAS,EAAER,IAAI,CAACQ,SAHO;AAIvBC,MAAAA,KAAK,EAAET,IAAI,CAACS;AAJW,KAAxB;AAMA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCH,EAAAA,iBAAiB,CAAEN,IAAF,EAAS;AACzB,UAAMY,KAAK,GAAI,QAAQZ,IAAI,CAACO,IAAM,EAApB,IAA0BP,IAAI,CAACQ,SAAL,GAAkB,IAAIR,IAAI,CAACQ,SAAW,EAAtC,GAA0C,EAApE,CAAd;AAEA,SAAKK,IAAL,CAAWD,KAAX,EAAkB;AACjBT,MAAAA,OAAO,EAAEH,IAAI,CAACG,OADG;AAEjBI,MAAAA,IAAI,EAAEP,IAAI,CAACO,IAFM;AAGjBE,MAAAA,KAAK,EAAET,IAAI,CAACS,KAAL,IAAc;AAHJ,KAAlB;AAKA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAtMwD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/notification/notification\n */\n\n/* globals window */\n\nimport ContextPlugin from '@ckeditor/ckeditor5-core/src/contextplugin';\n\n/**\n * The Notification plugin.\n *\n * This plugin sends a few types of notifications: `success`, `info` and `warning`. The notifications need to be\n * handled and displayed by a plugin responsible for showing the UI of the notifications. Using this plugin for dispatching\n * notifications makes it possible to switch the notifications UI.\n *\n * Note that every unhandled and not stopped `warning` notification will be displayed as a system alert.\n * See {@link module:ui/notification/notification~Notification#showWarning}.\n *\n * @extends module:core/contextplugin~ContextPlugin\n */\nexport default class Notification extends ContextPlugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Notification';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t// Each unhandled and not stopped `show:warning` event is displayed as a system alert.\n\t\tthis.on( 'show:warning', ( evt, data ) => {\n\t\t\twindow.alert( data.message ); // eslint-disable-line no-alert\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Shows a success notification.\n\t *\n\t * By default, it fires the {@link #event:show:success `show:success` event} with the given `data`. The event namespace can be extended\n\t * using the `data.namespace` option. For example:\n\t *\n\t * \t\tshowSuccess( 'Image is uploaded.', {\n\t * \t\t\tnamespace: 'upload:image'\n\t * \t\t} );\n\t *\n\t * will fire the `show:success:upload:image` event.\n\t *\n\t * You can provide the title of the notification:\n\t *\n\t *\t\tshowSuccess( 'Image is uploaded.', {\n\t *\t\t\ttitle: 'Image upload success'\n\t *\t\t} );\n\t *\n\t * @param {String} message The content of the notification.\n\t * @param {Object} [data={}] Additional data.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title] The title of the notification.\n\t */\n\tshowSuccess( message, data = {} ) {\n\t\tthis._showNotification( {\n\t\t\tmessage,\n\t\t\ttype: 'success',\n\t\t\tnamespace: data.namespace,\n\t\t\ttitle: data.title\n\t\t} );\n\t}\n\n\t/**\n\t * Shows an information notification.\n\t *\n\t * By default, it fires the {@link #event:show:info `show:info` event} with the given `data`. The event namespace can be extended\n\t * using the `data.namespace` option. For example:\n\t *\n\t * \t\tshowInfo( 'Editor is offline.', {\n\t * \t\t\tnamespace: 'editor:status'\n\t * \t\t} );\n\t *\n\t * will fire the `show:info:editor:status` event.\n\t *\n\t * You can provide the title of the notification:\n\t *\n\t *\t\tshowInfo( 'Editor is offline.', {\n\t *\t\t\ttitle: 'Network information'\n\t *\t\t} );\n\t *\n\t * @param {String} message The content of the notification.\n\t * @param {Object} [data={}] Additional data.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title] The title of the notification.\n\t */\n\tshowInfo( message, data = {} ) {\n\t\tthis._showNotification( {\n\t\t\tmessage,\n\t\t\ttype: 'info',\n\t\t\tnamespace: data.namespace,\n\t\t\ttitle: data.title\n\t\t} );\n\t}\n\n\t/**\n\t * Shows a warning notification.\n\t *\n\t * By default, it fires the {@link #event:show:warning `show:warning` event}\n\t * with the given `data`. The event namespace can be extended using the `data.namespace` option. For example:\n\t *\n\t * \t\tshowWarning( 'Image upload error.', {\n\t * \t\t\tnamespace: 'upload:image'\n\t * \t\t} );\n\t *\n\t * will fire the `show:warning:upload:image` event.\n\t *\n\t * You can provide the title of the notification:\n\t *\n\t *\t\tshowWarning( 'Image upload error.', {\n\t *\t\t\ttitle: 'Upload failed'\n\t *\t\t} );\n\t *\n\t * Note that each unhandled and not stopped `warning` notification will be displayed as a system alert.\n\t * The plugin responsible for displaying warnings should `stop()` the event to prevent displaying it as an alert:\n\t *\n\t * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n\t * \t\t\t// Do something with the data.\n\t *\n\t * \t\t\t// Stop this event to prevent displaying it as an alert.\n\t * \t\t\tevt.stop();\n\t * \t\t} );\n\t *\n\t * You can attach many listeners to the same event and `stop()` this event in a listener with a low priority:\n\t *\n\t * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n\t * \t\t\t// Show the warning in the UI, but do not stop it.\n\t * \t\t} );\n\t *\n\t * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n\t * \t\t\t// Log the warning to some error tracker.\n\t *\n\t * \t\t\t// Stop this event to prevent displaying it as an alert.\n\t * \t\t\tevt.stop();\n\t * \t\t}, { priority: 'low' } );\n\t *\n\t * @param {String} message The content of the notification.\n\t * @param {Object} [data={}] Additional data.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title] The title of the notification.\n\t */\n\tshowWarning( message, data = {} ) {\n\t\tthis._showNotification( {\n\t\t\tmessage,\n\t\t\ttype: 'warning',\n\t\t\tnamespace: data.namespace,\n\t\t\ttitle: data.title\n\t\t} );\n\t}\n\n\t/**\n\t * Fires the `show` event with the specified type, namespace and message.\n\t *\n\t * @private\n\t * @param {Object} data The message data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {'success'|'info'|'warning'} data.type The type of the message.\n\t * @param {String} [data.namespace] Additional event namespace.\n\t * @param {String} [data.title=''] The title of the notification.\n\t */\n\t_showNotification( data ) {\n\t\tconst event = `show:${ data.type }` + ( data.namespace ? `:${ data.namespace }` : '' );\n\n\t\tthis.fire( event, {\n\t\t\tmessage: data.message,\n\t\t\ttype: data.type,\n\t\t\ttitle: data.title || ''\n\t\t} );\n\t}\n\n\t/**\n\t * Fired when one of the `showSuccess()`, `showInfo()`, `showWarning()` methods is called.\n\t *\n\t * @event show\n\t * @param {Object} data The notification data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {String} data.title The title of the notification.\n\t * @param {'success'|'info'|'warning'} data.type The type of the notification.\n\t */\n\n\t/**\n\t * Fired when the `showSuccess()` method is called.\n\t *\n\t * @event show:success\n\t * @param {Object} data The notification data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {String} data.title The title of the notification.\n\t * @param {'success'} data.type The type of the notification.\n\t */\n\n\t/**\n\t * Fired when the `showInfo()` method is called.\n\t *\n\t * @event show:info\n\t * @param {Object} data The notification data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {String} data.title The title of the notification.\n\t * @param {'info'} data.type The type of the notification.\n\t */\n\n\t/**\n\t * Fired when the `showWarning()` method is called.\n\t *\n\t * When this event is not handled or stopped by `event.stop()`, the `data.message` of this event will\n\t * be automatically displayed as a system alert.\n\t *\n\t * @event show:warning\n\t * @param {Object} data The notification data.\n\t * @param {String} data.message The content of the notification.\n\t * @param {String} data.title The title of the notification.\n\t * @param {'warning'} data.type The type of the notification.\n\t */\n}\n"]},"metadata":{},"sourceType":"module"}