{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/rootelement\n */\nimport Element from './element';\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n * @extends module:engine/model/element~Element\n */\n\nexport default class RootElement extends Element {\n  /**\n   * Creates root element.\n   *\n   * @param {module:engine/model/document~Document} document Document that is an owner of this root.\n   * @param {String} name Node name.\n   * @param {String} [rootName='main'] Unique root name used to identify this root\n   * element by {@link module:engine/model/document~Document}.\n   */\n  constructor(document, name) {\n    let rootName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'main';\n    super(name);\n    /**\n     * Document that is an owner of this root.\n     *\n     * @private\n     * @member {module:engine/model/document~Document}\n     */\n\n    this._document = document;\n    /**\n     * Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.rootName = rootName;\n  }\n  /**\n   * {@link module:engine/model/document~Document Document} that owns this root element.\n   *\n   * @readonly\n   * @type {module:engine/model/document~Document|null}\n   */\n\n\n  get document() {\n    return this._document;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\trootElement.is( 'rootElement' ); // -> true\n   *\t\trootElement.is( 'element' ); // -> true\n   *\t\trootElement.is( 'node' ); // -> true\n   *\t\trootElement.is( 'model:rootElement' ); // -> true\n   *\t\trootElement.is( 'model:element' ); // -> true\n   *\t\trootElement.is( 'model:node' ); // -> true\n   *\n   *\t\trootElement.is( 'view:element' ); // -> false\n   *\t\trootElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is an element, you can also check its\n   * {@link module:engine/model/element~Element#name name}:\n   *\n   *\t\trootElement.is( 'rootElement', '$root' ); // -> same as above\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type, name) {\n    if (!name) {\n      return type === 'rootElement' || type === 'model:rootElement' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n      type === 'element' || type === 'model:element' || type === 'node' || type === 'model:node';\n    }\n\n    return name === this.name && (type === 'rootElement' || type === 'model:rootElement' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n    type === 'element' || type === 'model:element');\n  }\n  /**\n   * Converts `RootElement` instance to `String` containing it's name.\n   *\n   * @returns {String} `RootElement` instance converted to `String`.\n   */\n\n\n  toJSON() {\n    return this.rootName;\n  } // @if CK_DEBUG_ENGINE // toString() {\n  // @if CK_DEBUG_ENGINE // \treturn this.rootName;\n  // @if CK_DEBUG_ENGINE // }\n  // @if CK_DEBUG_ENGINE // log() {\n  // @if CK_DEBUG_ENGINE // \tconsole.log( 'ModelRootElement: ' + this );\n  // @if CK_DEBUG_ENGINE // }\n\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/model/rootelement.js"],"names":["Element","RootElement","constructor","document","name","rootName","_document","is","type","toJSON"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,WAApB;AAEA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,WAAN,SAA0BD,OAA1B,CAAkC;AAChD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACCE,EAAAA,WAAW,CAAEC,QAAF,EAAYC,IAAZ,EAAsC;AAAA,QAApBC,QAAoB,uEAAT,MAAS;AAChD,UAAOD,IAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKE,SAAL,GAAiBH,QAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKE,QAAL,GAAgBA,QAAhB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACa,MAARF,QAAQ,GAAG;AACd,WAAO,KAAKG,SAAZ;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,EAAE,CAAEC,IAAF,EAAQJ,IAAR,EAAe;AAChB,QAAK,CAACA,IAAN,EAAa;AACZ,aAAOI,IAAI,KAAK,aAAT,IAA0BA,IAAI,KAAK,mBAAnC,IACN;AACAA,MAAAA,IAAI,KAAK,SAFH,IAEgBA,IAAI,KAAK,eAFzB,IAGNA,IAAI,KAAK,MAHH,IAGaA,IAAI,KAAK,YAH7B;AAIA;;AAED,WAAOJ,IAAI,KAAK,KAAKA,IAAd,KACNI,IAAI,KAAK,aAAT,IAA0BA,IAAI,KAAK,mBAAnC,IACA;AACAA,IAAAA,IAAI,KAAK,SAFT,IAEsBA,IAAI,KAAK,eAHzB,CAAP;AAKA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,MAAM,GAAG;AACR,WAAO,KAAKJ,QAAZ;AACA,GArF+C,CAuFhD;AACA;AACA;AAEA;AACA;AACA;;;AA7FgD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/rootelement\n */\n\nimport Element from './element';\n\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n * @extends module:engine/model/element~Element\n */\nexport default class RootElement extends Element {\n\t/**\n\t * Creates root element.\n\t *\n\t * @param {module:engine/model/document~Document} document Document that is an owner of this root.\n\t * @param {String} name Node name.\n\t * @param {String} [rootName='main'] Unique root name used to identify this root\n\t * element by {@link module:engine/model/document~Document}.\n\t */\n\tconstructor( document, name, rootName = 'main' ) {\n\t\tsuper( name );\n\n\t\t/**\n\t\t * Document that is an owner of this root.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/document~Document}\n\t\t */\n\t\tthis._document = document;\n\n\t\t/**\n\t\t * Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.rootName = rootName;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns this root element.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this._document;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\trootElement.is( 'rootElement' ); // -> true\n\t *\t\trootElement.is( 'element' ); // -> true\n\t *\t\trootElement.is( 'node' ); // -> true\n\t *\t\trootElement.is( 'model:rootElement' ); // -> true\n\t *\t\trootElement.is( 'model:element' ); // -> true\n\t *\t\trootElement.is( 'model:node' ); // -> true\n\t *\n\t *\t\trootElement.is( 'view:element' ); // -> false\n\t *\t\trootElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/model/element~Element#name name}:\n\t *\n\t *\t\trootElement.is( 'rootElement', '$root' ); // -> same as above\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name ) {\n\t\tif ( !name ) {\n\t\t\treturn type === 'rootElement' || type === 'model:rootElement' ||\n\t\t\t\t// From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n\t\t\t\ttype === 'element' || type === 'model:element' ||\n\t\t\t\ttype === 'node' || type === 'model:node';\n\t\t}\n\n\t\treturn name === this.name && (\n\t\t\ttype === 'rootElement' || type === 'model:rootElement' ||\n\t\t\t// From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n\t\t\ttype === 'element' || type === 'model:element'\n\t\t);\n\t}\n\n\t/**\n\t * Converts `RootElement` instance to `String` containing it's name.\n\t *\n\t * @returns {String} `RootElement` instance converted to `String`.\n\t */\n\ttoJSON() {\n\t\treturn this.rootName;\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn this.rootName;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // log() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ModelRootElement: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n}\n\n"]},"metadata":{},"sourceType":"module"}