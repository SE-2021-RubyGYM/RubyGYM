{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/eventinfo\n */\nimport spy from './spy';\n/**\n * The event object passed to event callbacks. It is used to provide information about the event as well as a tool to\n * manipulate it.\n */\n\nexport default class EventInfo {\n  /**\n   * @param {Object} source The emitter.\n   * @param {String} name The event name.\n   */\n  constructor(source, name) {\n    /**\n     * The object that fired the event.\n     *\n     * @readonly\n     * @member {Object}\n     */\n    this.source = source;\n    /**\n     * The event name.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.name = name;\n    /**\n     * Path this event has followed. See {@link module:utils/emittermixin~EmitterMixin#delegate}.\n     *\n     * @readonly\n     * @member {Array.<Object>}\n     */\n\n    this.path = []; // The following methods are defined in the constructor because they must be re-created per instance.\n\n    /**\n     * Stops the event emitter to call further callbacks for this event interaction.\n     *\n     * @method #stop\n     */\n\n    this.stop = spy();\n    /**\n     * Removes the current callback from future interactions of this event.\n     *\n     * @method #off\n     */\n\n    this.off = spy();\n    /**\n     * The value which will be returned by {@link module:utils/emittermixin~EmitterMixin#fire}.\n     *\n     * It's `undefined` by default and can be changed by an event listener:\n     *\n     *\t\tdataController.fire( 'getSelectedContent', ( evt ) => {\n     *\t\t\t// This listener will make `dataController.fire( 'getSelectedContent' )`\n     *\t\t\t// always return an empty DocumentFragment.\n     *\t\t\tevt.return = new DocumentFragment();\n     *\n     *\t\t\t// Make sure no other listeners are executed.\n     *\t\t\tevt.stop();\n     *\t\t} );\n     *\n     * @member #return\n     */\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-utils/src/eventinfo.js"],"names":["spy","EventInfo","constructor","source","name","path","stop","off"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,GAAP,MAAgB,OAAhB;AAEA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,SAAN,CAAgB;AAC9B;AACD;AACA;AACA;AACCC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,IAAV,EAAiB;AAC3B;AACF;AACA;AACA;AACA;AACA;AACE,SAAKD,MAAL,GAAcA,MAAd;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,IAAL,GAAYA,IAAZ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,IAAL,GAAY,EAAZ,CAvB2B,CAyB3B;;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKC,IAAL,GAAYN,GAAG,EAAf;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKO,GAAL,GAAWP,GAAG,EAAd;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;;AA9D6B","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/eventinfo\n */\n\nimport spy from './spy';\n\n/**\n * The event object passed to event callbacks. It is used to provide information about the event as well as a tool to\n * manipulate it.\n */\nexport default class EventInfo {\n\t/**\n\t * @param {Object} source The emitter.\n\t * @param {String} name The event name.\n\t */\n\tconstructor( source, name ) {\n\t\t/**\n\t\t * The object that fired the event.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object}\n\t\t */\n\t\tthis.source = source;\n\n\t\t/**\n\t\t * The event name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Path this event has followed. See {@link module:utils/emittermixin~EmitterMixin#delegate}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<Object>}\n\t\t */\n\t\tthis.path = [];\n\n\t\t// The following methods are defined in the constructor because they must be re-created per instance.\n\n\t\t/**\n\t\t * Stops the event emitter to call further callbacks for this event interaction.\n\t\t *\n\t\t * @method #stop\n\t\t */\n\t\tthis.stop = spy();\n\n\t\t/**\n\t\t * Removes the current callback from future interactions of this event.\n\t\t *\n\t\t * @method #off\n\t\t */\n\t\tthis.off = spy();\n\n\t\t/**\n\t\t * The value which will be returned by {@link module:utils/emittermixin~EmitterMixin#fire}.\n\t\t *\n\t\t * It's `undefined` by default and can be changed by an event listener:\n\t\t *\n\t\t *\t\tdataController.fire( 'getSelectedContent', ( evt ) => {\n\t\t *\t\t\t// This listener will make `dataController.fire( 'getSelectedContent' )`\n\t\t *\t\t\t// always return an empty DocumentFragment.\n\t\t *\t\t\tevt.return = new DocumentFragment();\n\t\t *\n\t\t *\t\t\t// Make sure no other listeners are executed.\n\t\t *\t\t\tevt.stop();\n\t\t *\t\t} );\n\t\t *\n\t\t * @member #return\n\t\t */\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}