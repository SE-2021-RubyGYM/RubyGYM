{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _Cell = _interopRequireDefault(require(\"../Cell\"));\n\nvar _TableContext = _interopRequireDefault(require(\"../context/TableContext\"));\n\nvar _BodyContext = _interopRequireDefault(require(\"../context/BodyContext\"));\n\nvar _valueUtil = require(\"../utils/valueUtil\");\n\nvar _ExpandedRow = _interopRequireDefault(require(\"./ExpandedRow\"));\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      rowKey = props.rowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(_TableContext.default),\n      prefixCls = _React$useContext.prefixCls,\n      fixedInfoList = _React$useContext.fixedInfoList;\n\n  var _React$useContext2 = React.useContext(_BodyContext.default),\n      fixHeader = _React$useContext2.fixHeader,\n      fixColumn = _React$useContext2.fixColumn,\n      horizonScroll = _React$useContext2.horizonScroll,\n      componentWidth = _React$useContext2.componentWidth,\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // ======================== Expandable =========================\n\n  var onExpandRef = React.useRef(onTriggerExpand);\n  onExpandRef.current = onTriggerExpand;\n\n  var onInternalTriggerExpand = function onInternalTriggerExpand() {\n    onExpandRef.current.apply(onExpandRef, arguments);\n  }; // =========================== onRow ===========================\n\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    var _additionalProps, _additionalProps$onCl;\n\n    if (expandRowByClick && mergedExpandable) {\n      onInternalTriggerExpand(record, event);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_additionalProps = additionalProps) === null || _additionalProps === void 0 ? void 0 : (_additionalProps$onCl = _additionalProps.onClick) === null || _additionalProps$onCl === void 0 ? void 0 : _additionalProps$onCl.call.apply(_additionalProps$onCl, [_additionalProps, event].concat(args));\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = (0, _valueUtil.getColumnsKey)(flattenColumns);\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, (0, _extends2.default)({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: (0, _classnames.default)(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onInternalTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return /*#__PURE__*/React.createElement(_Cell.default, (0, _extends2.default)({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate,\n      expanded: appendCellNode && expanded\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = /*#__PURE__*/React.createElement(_ExpandedRow.default, {\n      expanded: expanded,\n      className: (0, _classnames.default)(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      fixHeader: fixHeader,\n      fixColumn: fixColumn,\n      horizonScroll: horizonScroll,\n      component: RowComponent,\n      componentWidth: componentWidth,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length\n    }, expandContent);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nvar _default = BodyRow;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/nvtung/Các project thực hiện/CNPM/RubyGYM/client/node_modules/rc-table/lib/Body/BodyRow.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","default","_extends2","_objectSpread2","_slicedToArray2","React","_classnames","_Cell","_TableContext","_BodyContext","_valueUtil","_ExpandedRow","BodyRow","props","className","style","record","index","rowKey","rowExpandable","expandedKeys","onRow","_props$indent","indent","RowComponent","rowComponent","cellComponent","childrenColumnName","_React$useContext","useContext","prefixCls","fixedInfoList","_React$useContext2","fixHeader","fixColumn","horizonScroll","componentWidth","flattenColumns","expandableType","expandRowByClick","onTriggerExpand","rowClassName","expandedRowClassName","indentSize","expandIcon","expandedRowRender","expandIconColumnIndex","_React$useState","useState","_React$useState2","expandRended","setExpandRended","expanded","has","recordKey","useEffect","rowSupportExpand","nestExpandable","hasNestChildren","mergedExpandable","onExpandRef","useRef","current","onInternalTriggerExpand","apply","arguments","additionalProps","onClick","event","_additionalProps","_additionalProps$onCl","_len","length","args","Array","_key","call","concat","computeRowClassName","columnsKey","getColumnsKey","baseRowNode","createElement","map","column","colIndex","render","dataIndex","columnClassName","key","fixedInfo","appendCellNode","Fragment","paddingLeft","expandable","onExpand","additionalCellProps","onCell","ellipsis","align","component","shouldCellUpdate","appendNode","expandRowNode","expandContent","computedExpandedRowClassName","colSpan","displayName","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _Cell = _interopRequireDefault(require(\"../Cell\"));\n\nvar _TableContext = _interopRequireDefault(require(\"../context/TableContext\"));\n\nvar _BodyContext = _interopRequireDefault(require(\"../context/BodyContext\"));\n\nvar _valueUtil = require(\"../utils/valueUtil\");\n\nvar _ExpandedRow = _interopRequireDefault(require(\"./ExpandedRow\"));\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      rowKey = props.rowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(_TableContext.default),\n      prefixCls = _React$useContext.prefixCls,\n      fixedInfoList = _React$useContext.fixedInfoList;\n\n  var _React$useContext2 = React.useContext(_BodyContext.default),\n      fixHeader = _React$useContext2.fixHeader,\n      fixColumn = _React$useContext2.fixColumn,\n      horizonScroll = _React$useContext2.horizonScroll,\n      componentWidth = _React$useContext2.componentWidth,\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // ======================== Expandable =========================\n\n  var onExpandRef = React.useRef(onTriggerExpand);\n  onExpandRef.current = onTriggerExpand;\n\n  var onInternalTriggerExpand = function onInternalTriggerExpand() {\n    onExpandRef.current.apply(onExpandRef, arguments);\n  }; // =========================== onRow ===========================\n\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    var _additionalProps, _additionalProps$onCl;\n\n    if (expandRowByClick && mergedExpandable) {\n      onInternalTriggerExpand(record, event);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_additionalProps = additionalProps) === null || _additionalProps === void 0 ? void 0 : (_additionalProps$onCl = _additionalProps.onClick) === null || _additionalProps$onCl === void 0 ? void 0 : _additionalProps$onCl.call.apply(_additionalProps$onCl, [_additionalProps, event].concat(args));\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = (0, _valueUtil.getColumnsKey)(flattenColumns);\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, (0, _extends2.default)({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: (0, _classnames.default)(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onInternalTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return /*#__PURE__*/React.createElement(_Cell.default, (0, _extends2.default)({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate,\n      expanded: appendCellNode && expanded\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = /*#__PURE__*/React.createElement(_ExpandedRow.default, {\n      expanded: expanded,\n      className: (0, _classnames.default)(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      fixHeader: fixHeader,\n      fixColumn: fixColumn,\n      horizonScroll: horizonScroll,\n      component: RowComponent,\n      componentWidth: componentWidth,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length\n    }, expandContent);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nvar _default = BodyRow;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}