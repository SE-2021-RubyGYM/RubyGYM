{"ast":null,"code":"/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactInputSelection\r\n */\n'use strict';\n\nvar ReactDOMSelection = require('./ReactDOMSelection');\n\nvar containsNode = require('fbjs/lib/containsNode');\n\nvar focusNode = require('fbjs/lib/focusNode');\n\nvar getActiveElement = require('fbjs/lib/getActiveElement');\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n/**\r\n * @ReactInputSelection: React input selection module. Based on Selection.js,\r\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\r\n * assume buttons have range selections allowed).\r\n * Input selection module for React.\r\n */\n\n\nvar ReactInputSelection = {\n  hasSelectionCapabilities: function (elem) {\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\n  },\n  getSelectionInformation: function () {\n    var focusedElem = getActiveElement();\n    return {\n      focusedElem: focusedElem,\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\n    };\n  },\n\n  /**\r\n   * @restoreSelection: If any selection information was potentially lost,\r\n   * restore it. This is useful when performing operations that could remove dom\r\n   * nodes and place them back in, resulting in focus being lost.\r\n   */\n  restoreSelection: function (priorSelectionInformation) {\n    var curFocusedElem = getActiveElement();\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\n\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);\n      }\n\n      focusNode(priorFocusedElem);\n    }\n  },\n\n  /**\r\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\r\n   * contentEditable node.\r\n   * -@input: Look up selection bounds of this input\r\n   * -@return {start: selectionStart, end: selectionEnd}\r\n   */\n  getSelection: function (input) {\n    var selection;\n\n    if ('selectionStart' in input) {\n      // Modern browser with input or textarea.\n      selection = {\n        start: input.selectionStart,\n        end: input.selectionEnd\n      };\n    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {\n      // IE8 input.\n      var range = document.selection.createRange(); // There can only be one selection per document in IE, so it must\n      // be in our element.\n\n      if (range.parentElement() === input) {\n        selection = {\n          start: -range.moveStart('character', -input.value.length),\n          end: -range.moveEnd('character', -input.value.length)\n        };\n      }\n    } else {\n      // Content editable or old IE textarea.\n      selection = ReactDOMSelection.getOffsets(input);\n    }\n\n    return selection || {\n      start: 0,\n      end: 0\n    };\n  },\n\n  /**\r\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\r\n   * the input.\r\n   * -@input     Set selection bounds of this input or textarea\r\n   * -@offsets   Object of same form that is returned from get*\r\n   */\n  setSelection: function (input, offsets) {\n    var start = offsets.start;\n    var end = offsets.end;\n\n    if (typeof end === 'undefined') {\n      end = start;\n    }\n\n    if ('selectionStart' in input) {\n      input.selectionStart = start;\n      input.selectionEnd = Math.min(end, input.value.length);\n    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {\n      var range = input.createTextRange();\n      range.collapse(true);\n      range.moveStart('character', start);\n      range.moveEnd('character', end - start);\n      range.select();\n    } else {\n      ReactDOMSelection.setOffsets(input, offsets);\n    }\n  }\n};\nmodule.exports = ReactInputSelection;","map":{"version":3,"sources":["C:/Users/nvtung/Các project thực hiện/RubyGYM-master_test_2/client/node_modules/jsx-to-string/node_modules/react/lib/ReactInputSelection.js"],"names":["ReactDOMSelection","require","containsNode","focusNode","getActiveElement","isInDocument","node","document","documentElement","ReactInputSelection","hasSelectionCapabilities","elem","nodeName","toLowerCase","type","contentEditable","getSelectionInformation","focusedElem","selectionRange","getSelection","restoreSelection","priorSelectionInformation","curFocusedElem","priorFocusedElem","priorSelectionRange","setSelection","input","selection","start","selectionStart","end","selectionEnd","range","createRange","parentElement","moveStart","value","length","moveEnd","getOffsets","offsets","Math","min","createTextRange","collapse","select","setOffsets","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactInputSelection\r\n */\r\n\r\n'use strict';\r\n\r\nvar ReactDOMSelection = require('./ReactDOMSelection');\r\n\r\nvar containsNode = require('fbjs/lib/containsNode');\r\nvar focusNode = require('fbjs/lib/focusNode');\r\nvar getActiveElement = require('fbjs/lib/getActiveElement');\r\n\r\nfunction isInDocument(node) {\r\n  return containsNode(document.documentElement, node);\r\n}\r\n\r\n/**\r\n * @ReactInputSelection: React input selection module. Based on Selection.js,\r\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\r\n * assume buttons have range selections allowed).\r\n * Input selection module for React.\r\n */\r\nvar ReactInputSelection = {\r\n\r\n  hasSelectionCapabilities: function (elem) {\r\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\r\n    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\r\n  },\r\n\r\n  getSelectionInformation: function () {\r\n    var focusedElem = getActiveElement();\r\n    return {\r\n      focusedElem: focusedElem,\r\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\r\n    };\r\n  },\r\n\r\n  /**\r\n   * @restoreSelection: If any selection information was potentially lost,\r\n   * restore it. This is useful when performing operations that could remove dom\r\n   * nodes and place them back in, resulting in focus being lost.\r\n   */\r\n  restoreSelection: function (priorSelectionInformation) {\r\n    var curFocusedElem = getActiveElement();\r\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\r\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\r\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\r\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\r\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);\r\n      }\r\n      focusNode(priorFocusedElem);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\r\n   * contentEditable node.\r\n   * -@input: Look up selection bounds of this input\r\n   * -@return {start: selectionStart, end: selectionEnd}\r\n   */\r\n  getSelection: function (input) {\r\n    var selection;\r\n\r\n    if ('selectionStart' in input) {\r\n      // Modern browser with input or textarea.\r\n      selection = {\r\n        start: input.selectionStart,\r\n        end: input.selectionEnd\r\n      };\r\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {\r\n      // IE8 input.\r\n      var range = document.selection.createRange();\r\n      // There can only be one selection per document in IE, so it must\r\n      // be in our element.\r\n      if (range.parentElement() === input) {\r\n        selection = {\r\n          start: -range.moveStart('character', -input.value.length),\r\n          end: -range.moveEnd('character', -input.value.length)\r\n        };\r\n      }\r\n    } else {\r\n      // Content editable or old IE textarea.\r\n      selection = ReactDOMSelection.getOffsets(input);\r\n    }\r\n\r\n    return selection || { start: 0, end: 0 };\r\n  },\r\n\r\n  /**\r\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\r\n   * the input.\r\n   * -@input     Set selection bounds of this input or textarea\r\n   * -@offsets   Object of same form that is returned from get*\r\n   */\r\n  setSelection: function (input, offsets) {\r\n    var start = offsets.start;\r\n    var end = offsets.end;\r\n    if (typeof end === 'undefined') {\r\n      end = start;\r\n    }\r\n\r\n    if ('selectionStart' in input) {\r\n      input.selectionStart = start;\r\n      input.selectionEnd = Math.min(end, input.value.length);\r\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {\r\n      var range = input.createTextRange();\r\n      range.collapse(true);\r\n      range.moveStart('character', start);\r\n      range.moveEnd('character', end - start);\r\n      range.select();\r\n    } else {\r\n      ReactDOMSelection.setOffsets(input, offsets);\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = ReactInputSelection;"]},"metadata":{},"sourceType":"script"}