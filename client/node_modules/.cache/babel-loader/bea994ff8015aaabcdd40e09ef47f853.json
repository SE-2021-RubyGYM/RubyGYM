{"ast":null,"code":"/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule SyntheticKeyboardEvent\r\n * @typechecks static-only\r\n */\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar getEventCharCode = require('./getEventCharCode');\n\nvar getEventKey = require('./getEventKey');\n\nvar getEventModifierState = require('./getEventModifierState');\n/**\r\n * @interface KeyboardEvent\r\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\r\n */\n\n\nvar KeyboardEventInterface = {\n  key: getEventKey,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function (event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n\n    return 0;\n  },\n  keyCode: function (event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n\n    return 0;\n  },\n  which: function (event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n\n    return 0;\n  }\n};\n/**\r\n * @param {object} dispatchConfig Configuration used to dispatch this event.\r\n * @param {string} dispatchMarker Marker identifying the event target.\r\n * @param {object} nativeEvent Native browser event.\r\n * @extends {SyntheticUIEvent}\r\n */\n\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);\nmodule.exports = SyntheticKeyboardEvent;","map":{"version":3,"sources":["F:/Administrator/Documents/Code for fun/Web/Project Introduction to SE/RubyGYM/client/node_modules/jsx-to-string/node_modules/react/lib/SyntheticKeyboardEvent.js"],"names":["SyntheticUIEvent","require","getEventCharCode","getEventKey","getEventModifierState","KeyboardEventInterface","key","location","ctrlKey","shiftKey","altKey","metaKey","repeat","locale","getModifierState","charCode","event","type","keyCode","which","SyntheticKeyboardEvent","dispatchConfig","dispatchMarker","nativeEvent","nativeEventTarget","call","augmentClass","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA9B;;AAEA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIG,qBAAqB,GAAGH,OAAO,CAAC,yBAAD,CAAnC;AAEA;AACA;AACA;AACA;;;AACA,IAAII,sBAAsB,GAAG;AAC3BC,EAAAA,GAAG,EAAEH,WADsB;AAE3BI,EAAAA,QAAQ,EAAE,IAFiB;AAG3BC,EAAAA,OAAO,EAAE,IAHkB;AAI3BC,EAAAA,QAAQ,EAAE,IAJiB;AAK3BC,EAAAA,MAAM,EAAE,IALmB;AAM3BC,EAAAA,OAAO,EAAE,IANkB;AAO3BC,EAAAA,MAAM,EAAE,IAPmB;AAQ3BC,EAAAA,MAAM,EAAE,IARmB;AAS3BC,EAAAA,gBAAgB,EAAEV,qBATS;AAU3B;AACAW,EAAAA,QAAQ,EAAE,UAAUC,KAAV,EAAiB;AACzB;AACA;AAEA;AACA;AACA,QAAIA,KAAK,CAACC,IAAN,KAAe,UAAnB,EAA+B;AAC7B,aAAOf,gBAAgB,CAACc,KAAD,CAAvB;AACD;;AACD,WAAO,CAAP;AACD,GArB0B;AAsB3BE,EAAAA,OAAO,EAAE,UAAUF,KAAV,EAAiB;AACxB;AACA;AAEA;AACA;AACA;AACA;AACA,QAAIA,KAAK,CAACC,IAAN,KAAe,SAAf,IAA4BD,KAAK,CAACC,IAAN,KAAe,OAA/C,EAAwD;AACtD,aAAOD,KAAK,CAACE,OAAb;AACD;;AACD,WAAO,CAAP;AACD,GAlC0B;AAmC3BC,EAAAA,KAAK,EAAE,UAAUH,KAAV,EAAiB;AACtB;AACA;AACA,QAAIA,KAAK,CAACC,IAAN,KAAe,UAAnB,EAA+B;AAC7B,aAAOf,gBAAgB,CAACc,KAAD,CAAvB;AACD;;AACD,QAAIA,KAAK,CAACC,IAAN,KAAe,SAAf,IAA4BD,KAAK,CAACC,IAAN,KAAe,OAA/C,EAAwD;AACtD,aAAOD,KAAK,CAACE,OAAb;AACD;;AACD,WAAO,CAAP;AACD;AA7C0B,CAA7B;AAgDA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,sBAAT,CAAgCC,cAAhC,EAAgDC,cAAhD,EAAgEC,WAAhE,EAA6EC,iBAA7E,EAAgG;AAC9FxB,EAAAA,gBAAgB,CAACyB,IAAjB,CAAsB,IAAtB,EAA4BJ,cAA5B,EAA4CC,cAA5C,EAA4DC,WAA5D,EAAyEC,iBAAzE;AACD;;AAEDxB,gBAAgB,CAAC0B,YAAjB,CAA8BN,sBAA9B,EAAsDf,sBAAtD;AAEAsB,MAAM,CAACC,OAAP,GAAiBR,sBAAjB","sourcesContent":["/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule SyntheticKeyboardEvent\r\n * @typechecks static-only\r\n */\r\n\r\n'use strict';\r\n\r\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\r\n\r\nvar getEventCharCode = require('./getEventCharCode');\r\nvar getEventKey = require('./getEventKey');\r\nvar getEventModifierState = require('./getEventModifierState');\r\n\r\n/**\r\n * @interface KeyboardEvent\r\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\r\n */\r\nvar KeyboardEventInterface = {\r\n  key: getEventKey,\r\n  location: null,\r\n  ctrlKey: null,\r\n  shiftKey: null,\r\n  altKey: null,\r\n  metaKey: null,\r\n  repeat: null,\r\n  locale: null,\r\n  getModifierState: getEventModifierState,\r\n  // Legacy Interface\r\n  charCode: function (event) {\r\n    // `charCode` is the result of a KeyPress event and represents the value of\r\n    // the actual printable character.\r\n\r\n    // KeyPress is deprecated, but its replacement is not yet final and not\r\n    // implemented in any major browser. Only KeyPress has charCode.\r\n    if (event.type === 'keypress') {\r\n      return getEventCharCode(event);\r\n    }\r\n    return 0;\r\n  },\r\n  keyCode: function (event) {\r\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\r\n    // physical keyboard key.\r\n\r\n    // The actual meaning of the value depends on the users' keyboard layout\r\n    // which cannot be detected. Assuming that it is a US keyboard layout\r\n    // provides a surprisingly accurate mapping for US and European users.\r\n    // Due to this, it is left to the user to implement at this time.\r\n    if (event.type === 'keydown' || event.type === 'keyup') {\r\n      return event.keyCode;\r\n    }\r\n    return 0;\r\n  },\r\n  which: function (event) {\r\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\r\n    // type of the event.\r\n    if (event.type === 'keypress') {\r\n      return getEventCharCode(event);\r\n    }\r\n    if (event.type === 'keydown' || event.type === 'keyup') {\r\n      return event.keyCode;\r\n    }\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * @param {object} dispatchConfig Configuration used to dispatch this event.\r\n * @param {string} dispatchMarker Marker identifying the event target.\r\n * @param {object} nativeEvent Native browser event.\r\n * @extends {SyntheticUIEvent}\r\n */\r\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\r\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\r\n}\r\n\r\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);\r\n\r\nmodule.exports = SyntheticKeyboardEvent;"]},"metadata":{},"sourceType":"script"}