{"ast":null,"code":"/* eslint-disable jsdoc/require-param, valid-jsdoc */\n\n/**\r\n * Function helps to find which highlightSearch is to call based on your data.\r\n *\r\n * @param  {HTMLElement} element - Specifies an li element.\r\n * @param  {string} query - Specifies the string to be highlighted.\r\n * @param  {boolean} ignoreCase - Specifies the ignoreCase option.\r\n * @param  {HightLightType} type - Specifies the type of highlight.\r\n * @returns {void}\r\n */\nexport function highlightSearch(element, query, ignoreCase, type) {\n  if (query === '') {\n    return;\n  } else {\n    var ignoreRegex = ignoreCase ? 'gim' : 'gm'; // eslint-disable-next-line\n\n    query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n    var replaceQuery = type === 'StartsWith' ? '^(' + query + ')' : type === 'EndsWith' ? '(' + query + ')$' : '(' + query + ')';\n    findTextNode(element, new RegExp(replaceQuery, ignoreRegex));\n  }\n}\n/* eslint-enable jsdoc/require-param, valid-jsdoc */\n\n/**\r\n *\r\n * @param {HTMLElement} element - Specifies the element.\r\n * @param {RegExp} pattern - Specifies the regex to match the searched text.\r\n * @returns {void}\r\n */\n\nfunction findTextNode(element, pattern) {\n  for (var index = 0; element.childNodes && index < element.childNodes.length; index++) {\n    if (element.childNodes[index].nodeType === 3 && element.childNodes[index].textContent.trim() !== '') {\n      var value = element.childNodes[index].nodeValue.trim().replace(pattern, '<span class=\"e-highlight\">$1</span>');\n      element.childNodes[index].nodeValue = '';\n      element.innerHTML = element.innerHTML.trim() + value;\n      break;\n    } else {\n      findTextNode(element.childNodes[index], pattern);\n    }\n  }\n}\n/**\r\n * Function helps to remove highlighted element based on your data.\r\n *\r\n * @param  {HTMLElement} content - Specifies an content element.\r\n * @returns {void}\r\n */\n\n\nexport function revertHighlightSearch(content) {\n  var contentElement = content.querySelectorAll('.e-highlight');\n\n  for (var i = contentElement.length - 1; i >= 0; i--) {\n    var parent_1 = contentElement[i].parentNode;\n    var text = document.createTextNode(contentElement[i].textContent);\n    parent_1.replaceChild(text, contentElement[i]);\n  }\n}","map":{"version":3,"sources":["C:/Users/nvtung/Các project thực hiện/CNPM/RubyGYM/client/node_modules/@syncfusion/ej2-dropdowns/src/common/highlight-search.js"],"names":["highlightSearch","element","query","ignoreCase","type","ignoreRegex","test","replace","replaceQuery","findTextNode","RegExp","pattern","index","childNodes","length","nodeType","textContent","trim","value","nodeValue","innerHTML","revertHighlightSearch","content","contentElement","querySelectorAll","i","parent_1","parentNode","text","document","createTextNode","replaceChild"],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAT,CAAyBC,OAAzB,EAAkCC,KAAlC,EAAyCC,UAAzC,EAAqDC,IAArD,EAA2D;AAC9D,MAAIF,KAAK,KAAK,EAAd,EAAkB;AACd;AACH,GAFD,MAGK;AACD,QAAIG,WAAW,GAAGF,UAAU,GAAG,KAAH,GAAW,IAAvC,CADC,CAED;;AACAD,IAAAA,KAAK,GAAG,mBAAmBI,IAAnB,CAAwBJ,KAAxB,IAAiCA,KAAjC,GAAyCA,KAAK,CAACK,OAAN,CAAc,qCAAd,EAAqD,MAArD,CAAjD;AACA,QAAIC,YAAY,GAAGJ,IAAI,KAAK,YAAT,GAAwB,OAAOF,KAAP,GAAe,GAAvC,GAA6CE,IAAI,KAAK,UAAT,GAC5D,MAAMF,KAAN,GAAc,IAD8C,GACvC,MAAMA,KAAN,GAAc,GADvC;AAEAO,IAAAA,YAAY,CAACR,OAAD,EAAU,IAAIS,MAAJ,CAAWF,YAAX,EAAyBH,WAAzB,CAAV,CAAZ;AACH;AACJ;AACD;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASI,YAAT,CAAsBR,OAAtB,EAA+BU,OAA/B,EAAwC;AACpC,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBX,OAAO,CAACY,UAAR,IAAuBD,KAAK,GAAGX,OAAO,CAACY,UAAR,CAAmBC,MAAtE,EAA+EF,KAAK,EAApF,EAAwF;AACpF,QAAIX,OAAO,CAACY,UAAR,CAAmBD,KAAnB,EAA0BG,QAA1B,KAAuC,CAAvC,IAA4Cd,OAAO,CAACY,UAAR,CAAmBD,KAAnB,EAA0BI,WAA1B,CAAsCC,IAAtC,OAAiD,EAAjG,EAAqG;AACjG,UAAIC,KAAK,GAAGjB,OAAO,CAACY,UAAR,CAAmBD,KAAnB,EAA0BO,SAA1B,CAAoCF,IAApC,GAA2CV,OAA3C,CAAmDI,OAAnD,EAA4D,qCAA5D,CAAZ;AACAV,MAAAA,OAAO,CAACY,UAAR,CAAmBD,KAAnB,EAA0BO,SAA1B,GAAsC,EAAtC;AACAlB,MAAAA,OAAO,CAACmB,SAAR,GAAoBnB,OAAO,CAACmB,SAAR,CAAkBH,IAAlB,KAA2BC,KAA/C;AACA;AACH,KALD,MAMK;AACDT,MAAAA,YAAY,CAACR,OAAO,CAACY,UAAR,CAAmBD,KAAnB,CAAD,EAA4BD,OAA5B,CAAZ;AACH;AACJ;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASU,qBAAT,CAA+BC,OAA/B,EAAwC;AAC3C,MAAIC,cAAc,GAAGD,OAAO,CAACE,gBAAR,CAAyB,cAAzB,CAArB;;AACA,OAAK,IAAIC,CAAC,GAAGF,cAAc,CAACT,MAAf,GAAwB,CAArC,EAAwCW,CAAC,IAAI,CAA7C,EAAgDA,CAAC,EAAjD,EAAqD;AACjD,QAAIC,QAAQ,GAAGH,cAAc,CAACE,CAAD,CAAd,CAAkBE,UAAjC;AACA,QAAIC,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwBP,cAAc,CAACE,CAAD,CAAd,CAAkBT,WAA1C,CAAX;AACAU,IAAAA,QAAQ,CAACK,YAAT,CAAsBH,IAAtB,EAA4BL,cAAc,CAACE,CAAD,CAA1C;AACH;AACJ","sourcesContent":["/* eslint-disable jsdoc/require-param, valid-jsdoc */\r\n/**\r\n * Function helps to find which highlightSearch is to call based on your data.\r\n *\r\n * @param  {HTMLElement} element - Specifies an li element.\r\n * @param  {string} query - Specifies the string to be highlighted.\r\n * @param  {boolean} ignoreCase - Specifies the ignoreCase option.\r\n * @param  {HightLightType} type - Specifies the type of highlight.\r\n * @returns {void}\r\n */\r\nexport function highlightSearch(element, query, ignoreCase, type) {\r\n    if (query === '') {\r\n        return;\r\n    }\r\n    else {\r\n        var ignoreRegex = ignoreCase ? 'gim' : 'gm';\r\n        // eslint-disable-next-line\r\n        query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\r\n        var replaceQuery = type === 'StartsWith' ? '^(' + query + ')' : type === 'EndsWith' ?\r\n            '(' + query + ')$' : '(' + query + ')';\r\n        findTextNode(element, new RegExp(replaceQuery, ignoreRegex));\r\n    }\r\n}\r\n/* eslint-enable jsdoc/require-param, valid-jsdoc */\r\n/**\r\n *\r\n * @param {HTMLElement} element - Specifies the element.\r\n * @param {RegExp} pattern - Specifies the regex to match the searched text.\r\n * @returns {void}\r\n */\r\nfunction findTextNode(element, pattern) {\r\n    for (var index = 0; element.childNodes && (index < element.childNodes.length); index++) {\r\n        if (element.childNodes[index].nodeType === 3 && element.childNodes[index].textContent.trim() !== '') {\r\n            var value = element.childNodes[index].nodeValue.trim().replace(pattern, '<span class=\"e-highlight\">$1</span>');\r\n            element.childNodes[index].nodeValue = '';\r\n            element.innerHTML = element.innerHTML.trim() + value;\r\n            break;\r\n        }\r\n        else {\r\n            findTextNode(element.childNodes[index], pattern);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Function helps to remove highlighted element based on your data.\r\n *\r\n * @param  {HTMLElement} content - Specifies an content element.\r\n * @returns {void}\r\n */\r\nexport function revertHighlightSearch(content) {\r\n    var contentElement = content.querySelectorAll('.e-highlight');\r\n    for (var i = contentElement.length - 1; i >= 0; i--) {\r\n        var parent_1 = contentElement[i].parentNode;\r\n        var text = document.createTextNode(contentElement[i].textContent);\r\n        parent_1.replaceChild(text, contentElement[i]);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}