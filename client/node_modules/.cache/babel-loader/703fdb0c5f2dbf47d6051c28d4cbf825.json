{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/button/splitbuttonview\n */\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport '../../../theme/components/dropdown/splitbutton.css';\n/**\n * The split button view class.\n *\n *\t\tconst view = new SplitButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n *\n * @implements module:ui/dropdown/button/dropdownbutton~DropdownButton\n * @extends module:ui/view~View\n */\n\nexport default class SplitButtonView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    const bind = this.bindTemplate; // Implement the Button interface.\n\n    this.set('class');\n    this.set('icon');\n    this.set('isEnabled', true);\n    this.set('isOn', false);\n    this.set('isToggleable', false);\n    this.set('isVisible', true);\n    this.set('keystroke');\n    this.set('label');\n    this.set('tabindex', -1);\n    this.set('tooltip');\n    this.set('tooltipPosition', 's');\n    this.set('type', 'button');\n    this.set('withText', false);\n    /**\n     * Collection of the child views inside of the split button {@link #element}.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.children = this.createCollection();\n    /**\n     * A main button of split button.\n     *\n     * @readonly\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.actionView = this._createActionView();\n    /**\n     * A secondary button of split button that opens dropdown.\n     *\n     * @readonly\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.arrowView = this._createArrowView();\n    /**\n     * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}. It manages\n     * keystrokes of the split button:\n     *\n     * * <kbd>▶</kbd> moves focus to arrow view when action view is focused,\n     * * <kbd>◀</kbd> moves focus to action view when arrow view is focused.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * Tracks information about DOM focus in the dropdown.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-splitbutton', bind.to('class'), bind.if('isVisible', 'ck-hidden', value => !value), this.arrowView.bindTemplate.if('isOn', 'ck-splitbutton_open')]\n      },\n      children: this.children\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    this.children.add(this.actionView);\n    this.children.add(this.arrowView);\n    this.focusTracker.add(this.actionView.element);\n    this.focusTracker.add(this.arrowView.element);\n    this.keystrokes.listenTo(this.element); // Overrides toolbar focus cycling behavior.\n\n    this.keystrokes.set('arrowright', (evt, cancel) => {\n      if (this.focusTracker.focusedElement === this.actionView.element) {\n        this.arrowView.focus();\n        cancel();\n      }\n    }); // Overrides toolbar focus cycling behavior.\n\n    this.keystrokes.set('arrowleft', (evt, cancel) => {\n      if (this.focusTracker.focusedElement === this.arrowView.element) {\n        this.actionView.focus();\n        cancel();\n      }\n    });\n  }\n  /**\n   * Focuses the {@link #actionView#element} of the action part of split button.\n   */\n\n\n  focus() {\n    this.actionView.focus();\n  }\n  /**\n   * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #actionView} and binds it with main split button\n   * attributes.\n   *\n   * @private\n   * @returns {module:ui/button/buttonview~ButtonView}\n   */\n\n\n  _createActionView() {\n    const actionView = new ButtonView();\n    actionView.bind('icon', 'isEnabled', 'isOn', 'isToggleable', 'keystroke', 'label', 'tabindex', 'tooltip', 'tooltipPosition', 'type', 'withText').to(this);\n    actionView.extendTemplate({\n      attributes: {\n        class: 'ck-splitbutton__action'\n      }\n    });\n    actionView.delegate('execute').to(this);\n    return actionView;\n  }\n  /**\n   * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #arrowView} and binds it with main split button\n   * attributes.\n   *\n   * @private\n   * @returns {module:ui/button/buttonview~ButtonView}\n   */\n\n\n  _createArrowView() {\n    const arrowView = new ButtonView();\n    const bind = arrowView.bindTemplate;\n    arrowView.icon = dropdownArrowIcon;\n    arrowView.extendTemplate({\n      attributes: {\n        class: 'ck-splitbutton__arrow',\n        'aria-haspopup': true,\n        'aria-expanded': bind.to('isOn', value => String(value))\n      }\n    });\n    arrowView.bind('isEnabled').to(this);\n    arrowView.delegate('execute').to(this, 'open');\n    return arrowView;\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-ui/src/dropdown/button/splitbuttonview.js"],"names":["View","ButtonView","KeystrokeHandler","FocusTracker","dropdownArrowIcon","SplitButtonView","constructor","locale","bind","bindTemplate","set","children","createCollection","actionView","_createActionView","arrowView","_createArrowView","keystrokes","focusTracker","setTemplate","tag","attributes","class","to","if","value","render","add","element","listenTo","evt","cancel","focusedElement","focus","extendTemplate","delegate","icon","String"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/button/splitbuttonview\n */\n\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\n\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\n\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\n\nimport '../../../theme/components/dropdown/splitbutton.css';\n\n/**\n * The split button view class.\n *\n *\t\tconst view = new SplitButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n *\n * @implements module:ui/dropdown/button/dropdownbutton~DropdownButton\n * @extends module:ui/view~View\n */\nexport default class SplitButtonView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t// Implement the Button interface.\n\t\tthis.set( 'class' );\n\t\tthis.set( 'icon' );\n\t\tthis.set( 'isEnabled', true );\n\t\tthis.set( 'isOn', false );\n\t\tthis.set( 'isToggleable', false );\n\t\tthis.set( 'isVisible', true );\n\t\tthis.set( 'keystroke' );\n\t\tthis.set( 'label' );\n\t\tthis.set( 'tabindex', -1 );\n\t\tthis.set( 'tooltip' );\n\t\tthis.set( 'tooltipPosition', 's' );\n\t\tthis.set( 'type', 'button' );\n\t\tthis.set( 'withText', false );\n\n\t\t/**\n\t\t * Collection of the child views inside of the split button {@link #element}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\t/**\n\t\t * A main button of split button.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.actionView = this._createActionView();\n\n\t\t/**\n\t\t * A secondary button of split button that opens dropdown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.arrowView = this._createArrowView();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}. It manages\n\t\t * keystrokes of the split button:\n\t\t *\n\t\t * * <kbd>▶</kbd> moves focus to arrow view when action view is focused,\n\t\t * * <kbd>◀</kbd> moves focus to action view when arrow view is focused.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the dropdown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-splitbutton',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-hidden', value => !value ),\n\t\t\t\t\tthis.arrowView.bindTemplate.if( 'isOn', 'ck-splitbutton_open' )\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.children.add( this.actionView );\n\t\tthis.children.add( this.arrowView );\n\n\t\tthis.focusTracker.add( this.actionView.element );\n\t\tthis.focusTracker.add( this.arrowView.element );\n\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\t// Overrides toolbar focus cycling behavior.\n\t\tthis.keystrokes.set( 'arrowright', ( evt, cancel ) => {\n\t\t\tif ( this.focusTracker.focusedElement === this.actionView.element ) {\n\t\t\t\tthis.arrowView.focus();\n\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Overrides toolbar focus cycling behavior.\n\t\tthis.keystrokes.set( 'arrowleft', ( evt, cancel ) => {\n\t\t\tif ( this.focusTracker.focusedElement === this.arrowView.element ) {\n\t\t\t\tthis.actionView.focus();\n\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the {@link #actionView#element} of the action part of split button.\n\t */\n\tfocus() {\n\t\tthis.actionView.focus();\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #actionView} and binds it with main split button\n\t * attributes.\n\t *\n\t * @private\n\t * @returns {module:ui/button/buttonview~ButtonView}\n\t */\n\t_createActionView() {\n\t\tconst actionView = new ButtonView();\n\n\t\tactionView.bind(\n\t\t\t'icon',\n\t\t\t'isEnabled',\n\t\t\t'isOn',\n\t\t\t'isToggleable',\n\t\t\t'keystroke',\n\t\t\t'label',\n\t\t\t'tabindex',\n\t\t\t'tooltip',\n\t\t\t'tooltipPosition',\n\t\t\t'type',\n\t\t\t'withText'\n\t\t).to( this );\n\n\t\tactionView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-splitbutton__action'\n\t\t\t}\n\t\t} );\n\n\t\tactionView.delegate( 'execute' ).to( this );\n\n\t\treturn actionView;\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #arrowView} and binds it with main split button\n\t * attributes.\n\t *\n\t * @private\n\t * @returns {module:ui/button/buttonview~ButtonView}\n\t */\n\t_createArrowView() {\n\t\tconst arrowView = new ButtonView();\n\t\tconst bind = arrowView.bindTemplate;\n\n\t\tarrowView.icon = dropdownArrowIcon;\n\n\t\tarrowView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-splitbutton__arrow',\n\t\t\t\t'aria-haspopup': true,\n\t\t\t\t'aria-expanded': bind.to( 'isOn', value => String( value ) )\n\t\t\t}\n\t\t} );\n\n\t\tarrowView.bind( 'isEnabled' ).to( this );\n\n\t\tarrowView.delegate( 'execute' ).to( this, 'open' );\n\n\t\treturn arrowView;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}