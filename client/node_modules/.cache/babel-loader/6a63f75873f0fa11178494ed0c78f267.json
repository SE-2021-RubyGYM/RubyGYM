{"ast":null,"code":"/**\r\n * IncrementalSearch module file\r\n */\nvar queryString = '';\nvar prevString = '';\nvar matches = [];\nvar activeClass = 'e-active';\nvar prevElementId = '';\n/**\r\n * Search and focus the list item based on key code matches with list text content\r\n *\r\n * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.\r\n * @param  { HTMLElement[]} items - Specifies an array of HTMLElement, from which matches find has done.\r\n * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen\r\n * after selected item otherwise it will do from initial.\r\n * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.\r\n * @param {string} elementId - Specifies the list element ID.\r\n * @returns {Element} Returns list item based on key code matches with list text content.\r\n */\n\nexport function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId) {\n  queryString += String.fromCharCode(keyCode);\n  setTimeout(function () {\n    queryString = '';\n  }, 1000);\n  var index;\n  queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n\n  if (prevElementId === elementId && prevString === queryString) {\n    for (var i = 0; i < matches.length; i++) {\n      if (matches[i].classList.contains(activeClass)) {\n        index = i;\n        break;\n      }\n    }\n\n    index = index + 1;\n    return matches[index] ? matches[index] : matches[0];\n  } else {\n    var listItems = items;\n    var strLength = queryString.length;\n    var text = void 0;\n    var item = void 0;\n    selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n    var i = selectedIndex;\n    matches = [];\n\n    do {\n      if (i === listItems.length) {\n        i = -1;\n      }\n\n      if (i === -1) {\n        index = 0;\n      } else {\n        index = i;\n      }\n\n      item = listItems[index];\n      text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n\n      if (text.substr(0, strLength) === queryString) {\n        matches.push(listItems[index]);\n      }\n\n      i++;\n    } while (i !== selectedIndex);\n\n    prevString = queryString;\n    prevElementId = elementId;\n    return matches[0];\n  }\n}\n/**\r\n * Search the list item based on given input value matches with search type.\r\n *\r\n * @param {string} inputVal - Specifies the given input value.\r\n * @param {HTMLElement[]} items - Specifies the list items.\r\n * @param {SearchType} searchType - Specifies the filter type.\r\n * @param {boolean} ignoreCase - Specifies the case sensitive option for search operation.\r\n * @returns {Element | number} Returns the search matched items.\r\n */\n\nexport function Search(inputVal, items, searchType, ignoreCase) {\n  var listItems = items;\n  ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n  var itemData = {\n    item: null,\n    index: null\n  };\n\n  if (inputVal && inputVal.length) {\n    var strLength = inputVal.length;\n    var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n\n    for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {\n      var item = itemsData[i];\n      var text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n\n      if (searchType === 'Equal' && text === queryStr || searchType === 'StartsWith' && text.substr(0, strLength) === queryStr) {\n        itemData.item = item;\n        itemData.index = i;\n        return {\n          item: item,\n          index: i\n        };\n      }\n    }\n\n    return itemData;\n  }\n\n  return itemData;\n}\nexport function resetIncrementalSearchValues(elementId) {\n  if (prevElementId === elementId) {\n    prevElementId = '';\n    prevString = '';\n    queryString = '';\n    matches = [];\n  }\n}","map":{"version":3,"sources":["D:/HUST/20211/Introduction to Software Engineering/Project/Sprint 2/RubyGYM/client/node_modules/@syncfusion/ej2-dropdowns/src/common/incremental-search.js"],"names":["queryString","prevString","matches","activeClass","prevElementId","incrementalSearch","keyCode","items","selectedIndex","ignoreCase","elementId","String","fromCharCode","setTimeout","index","toLowerCase","i","length","classList","contains","listItems","strLength","text","item","innerText","substr","push","Search","inputVal","searchType","undefined","itemData","queryStr","toLocaleLowerCase","itemsData","textContent","replace","resetIncrementalSearchValues"],"mappings":"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","sourcesContent":["/**\r\n * IncrementalSearch module file\r\n */\r\nvar queryString = '';\r\nvar prevString = '';\r\nvar matches = [];\r\nvar activeClass = 'e-active';\r\nvar prevElementId = '';\r\n/**\r\n * Search and focus the list item based on key code matches with list text content\r\n *\r\n * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.\r\n * @param  { HTMLElement[]} items - Specifies an array of HTMLElement, from which matches find has done.\r\n * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen\r\n * after selected item otherwise it will do from initial.\r\n * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.\r\n * @param {string} elementId - Specifies the list element ID.\r\n * @returns {Element} Returns list item based on key code matches with list text content.\r\n */\r\nexport function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId) {\r\n    queryString += String.fromCharCode(keyCode);\r\n    setTimeout(function () {\r\n        queryString = '';\r\n    }, 1000);\r\n    var index;\r\n    queryString = ignoreCase ? queryString.toLowerCase() : queryString;\r\n    if (prevElementId === elementId && prevString === queryString) {\r\n        for (var i = 0; i < matches.length; i++) {\r\n            if (matches[i].classList.contains(activeClass)) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        index = index + 1;\r\n        return matches[index] ? matches[index] : matches[0];\r\n    }\r\n    else {\r\n        var listItems = items;\r\n        var strLength = queryString.length;\r\n        var text = void 0;\r\n        var item = void 0;\r\n        selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\r\n        var i = selectedIndex;\r\n        matches = [];\r\n        do {\r\n            if (i === listItems.length) {\r\n                i = -1;\r\n            }\r\n            if (i === -1) {\r\n                index = 0;\r\n            }\r\n            else {\r\n                index = i;\r\n            }\r\n            item = listItems[index];\r\n            text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\r\n            if (text.substr(0, strLength) === queryString) {\r\n                matches.push(listItems[index]);\r\n            }\r\n            i++;\r\n        } while (i !== selectedIndex);\r\n        prevString = queryString;\r\n        prevElementId = elementId;\r\n        return matches[0];\r\n    }\r\n}\r\n/**\r\n * Search the list item based on given input value matches with search type.\r\n *\r\n * @param {string} inputVal - Specifies the given input value.\r\n * @param {HTMLElement[]} items - Specifies the list items.\r\n * @param {SearchType} searchType - Specifies the filter type.\r\n * @param {boolean} ignoreCase - Specifies the case sensitive option for search operation.\r\n * @returns {Element | number} Returns the search matched items.\r\n */\r\nexport function Search(inputVal, items, searchType, ignoreCase) {\r\n    var listItems = items;\r\n    ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\r\n    var itemData = { item: null, index: null };\r\n    if (inputVal && inputVal.length) {\r\n        var strLength = inputVal.length;\r\n        var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\r\n        for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {\r\n            var item = itemsData[i];\r\n            var text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\r\n            if ((searchType === 'Equal' && text === queryStr) || (searchType === 'StartsWith' && text.substr(0, strLength) === queryStr)) {\r\n                itemData.item = item;\r\n                itemData.index = i;\r\n                return { item: item, index: i };\r\n            }\r\n        }\r\n        return itemData;\r\n    }\r\n    return itemData;\r\n}\r\nexport function resetIncrementalSearchValues(elementId) {\r\n    if (prevElementId === elementId) {\r\n        prevElementId = '';\r\n        prevString = '';\r\n        queryString = '';\r\n        matches = [];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}