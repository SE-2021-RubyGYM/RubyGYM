{"ast":null,"code":"/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule FallbackCompositionState\r\n * @typechecks static-only\r\n */\n'use strict';\n\nvar PooledClass = require('./PooledClass');\n\nvar assign = require('./Object.assign');\n\nvar getTextContentAccessor = require('./getTextContentAccessor');\n/**\r\n * This helper class stores information about text content of a target node,\r\n * allowing comparison of content before and after a given event.\r\n *\r\n * Identify the node where selection currently begins, then observe\r\n * both its text content and its current position in the DOM. Since the\r\n * browser may natively replace the target node during composition, we can\r\n * use its position to find its replacement.\r\n *\r\n * @param {DOMEventTarget} root\r\n */\n\n\nfunction FallbackCompositionState(root) {\n  this._root = root;\n  this._startText = this.getText();\n  this._fallbackText = null;\n}\n\nassign(FallbackCompositionState.prototype, {\n  destructor: function () {\n    this._root = null;\n    this._startText = null;\n    this._fallbackText = null;\n  },\n\n  /**\r\n   * Get current text of input.\r\n   *\r\n   * @return {string}\r\n   */\n  getText: function () {\n    if ('value' in this._root) {\n      return this._root.value;\n    }\n\n    return this._root[getTextContentAccessor()];\n  },\n\n  /**\r\n   * Determine the differing substring between the initially stored\r\n   * text content and the current content.\r\n   *\r\n   * @return {string}\r\n   */\n  getData: function () {\n    if (this._fallbackText) {\n      return this._fallbackText;\n    }\n\n    var start;\n    var startValue = this._startText;\n    var startLength = startValue.length;\n    var end;\n    var endValue = this.getText();\n    var endLength = endValue.length;\n\n    for (start = 0; start < startLength; start++) {\n      if (startValue[start] !== endValue[start]) {\n        break;\n      }\n    }\n\n    var minEnd = startLength - start;\n\n    for (end = 1; end <= minEnd; end++) {\n      if (startValue[startLength - end] !== endValue[endLength - end]) {\n        break;\n      }\n    }\n\n    var sliceTail = end > 1 ? 1 - end : undefined;\n    this._fallbackText = endValue.slice(start, sliceTail);\n    return this._fallbackText;\n  }\n});\nPooledClass.addPoolingTo(FallbackCompositionState);\nmodule.exports = FallbackCompositionState;","map":{"version":3,"sources":["F:/Administrator/Documents/Code for fun/Web/Project Introduction to SE/RubyGYM/client/node_modules/jsx-to-string/node_modules/react/lib/FallbackCompositionState.js"],"names":["PooledClass","require","assign","getTextContentAccessor","FallbackCompositionState","root","_root","_startText","getText","_fallbackText","prototype","destructor","value","getData","start","startValue","startLength","length","end","endValue","endLength","minEnd","sliceTail","undefined","slice","addPoolingTo","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIE,sBAAsB,GAAGF,OAAO,CAAC,0BAAD,CAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,wBAAT,CAAkCC,IAAlC,EAAwC;AACtC,OAAKC,KAAL,GAAaD,IAAb;AACA,OAAKE,UAAL,GAAkB,KAAKC,OAAL,EAAlB;AACA,OAAKC,aAAL,GAAqB,IAArB;AACD;;AAEDP,MAAM,CAACE,wBAAwB,CAACM,SAA1B,EAAqC;AACzCC,EAAAA,UAAU,EAAE,YAAY;AACtB,SAAKL,KAAL,GAAa,IAAb;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKE,aAAL,GAAqB,IAArB;AACD,GALwC;;AAOzC;AACF;AACA;AACA;AACA;AACED,EAAAA,OAAO,EAAE,YAAY;AACnB,QAAI,WAAW,KAAKF,KAApB,EAA2B;AACzB,aAAO,KAAKA,KAAL,CAAWM,KAAlB;AACD;;AACD,WAAO,KAAKN,KAAL,CAAWH,sBAAsB,EAAjC,CAAP;AACD,GAjBwC;;AAmBzC;AACF;AACA;AACA;AACA;AACA;AACEU,EAAAA,OAAO,EAAE,YAAY;AACnB,QAAI,KAAKJ,aAAT,EAAwB;AACtB,aAAO,KAAKA,aAAZ;AACD;;AAED,QAAIK,KAAJ;AACA,QAAIC,UAAU,GAAG,KAAKR,UAAtB;AACA,QAAIS,WAAW,GAAGD,UAAU,CAACE,MAA7B;AACA,QAAIC,GAAJ;AACA,QAAIC,QAAQ,GAAG,KAAKX,OAAL,EAAf;AACA,QAAIY,SAAS,GAAGD,QAAQ,CAACF,MAAzB;;AAEA,SAAKH,KAAK,GAAG,CAAb,EAAgBA,KAAK,GAAGE,WAAxB,EAAqCF,KAAK,EAA1C,EAA8C;AAC5C,UAAIC,UAAU,CAACD,KAAD,CAAV,KAAsBK,QAAQ,CAACL,KAAD,CAAlC,EAA2C;AACzC;AACD;AACF;;AAED,QAAIO,MAAM,GAAGL,WAAW,GAAGF,KAA3B;;AACA,SAAKI,GAAG,GAAG,CAAX,EAAcA,GAAG,IAAIG,MAArB,EAA6BH,GAAG,EAAhC,EAAoC;AAClC,UAAIH,UAAU,CAACC,WAAW,GAAGE,GAAf,CAAV,KAAkCC,QAAQ,CAACC,SAAS,GAAGF,GAAb,CAA9C,EAAiE;AAC/D;AACD;AACF;;AAED,QAAII,SAAS,GAAGJ,GAAG,GAAG,CAAN,GAAU,IAAIA,GAAd,GAAoBK,SAApC;AACA,SAAKd,aAAL,GAAqBU,QAAQ,CAACK,KAAT,CAAeV,KAAf,EAAsBQ,SAAtB,CAArB;AACA,WAAO,KAAKb,aAAZ;AACD;AArDwC,CAArC,CAAN;AAwDAT,WAAW,CAACyB,YAAZ,CAAyBrB,wBAAzB;AAEAsB,MAAM,CAACC,OAAP,GAAiBvB,wBAAjB","sourcesContent":["/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule FallbackCompositionState\r\n * @typechecks static-only\r\n */\r\n\r\n'use strict';\r\n\r\nvar PooledClass = require('./PooledClass');\r\n\r\nvar assign = require('./Object.assign');\r\nvar getTextContentAccessor = require('./getTextContentAccessor');\r\n\r\n/**\r\n * This helper class stores information about text content of a target node,\r\n * allowing comparison of content before and after a given event.\r\n *\r\n * Identify the node where selection currently begins, then observe\r\n * both its text content and its current position in the DOM. Since the\r\n * browser may natively replace the target node during composition, we can\r\n * use its position to find its replacement.\r\n *\r\n * @param {DOMEventTarget} root\r\n */\r\nfunction FallbackCompositionState(root) {\r\n  this._root = root;\r\n  this._startText = this.getText();\r\n  this._fallbackText = null;\r\n}\r\n\r\nassign(FallbackCompositionState.prototype, {\r\n  destructor: function () {\r\n    this._root = null;\r\n    this._startText = null;\r\n    this._fallbackText = null;\r\n  },\r\n\r\n  /**\r\n   * Get current text of input.\r\n   *\r\n   * @return {string}\r\n   */\r\n  getText: function () {\r\n    if ('value' in this._root) {\r\n      return this._root.value;\r\n    }\r\n    return this._root[getTextContentAccessor()];\r\n  },\r\n\r\n  /**\r\n   * Determine the differing substring between the initially stored\r\n   * text content and the current content.\r\n   *\r\n   * @return {string}\r\n   */\r\n  getData: function () {\r\n    if (this._fallbackText) {\r\n      return this._fallbackText;\r\n    }\r\n\r\n    var start;\r\n    var startValue = this._startText;\r\n    var startLength = startValue.length;\r\n    var end;\r\n    var endValue = this.getText();\r\n    var endLength = endValue.length;\r\n\r\n    for (start = 0; start < startLength; start++) {\r\n      if (startValue[start] !== endValue[start]) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    var minEnd = startLength - start;\r\n    for (end = 1; end <= minEnd; end++) {\r\n      if (startValue[startLength - end] !== endValue[endLength - end]) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    var sliceTail = end > 1 ? 1 - end : undefined;\r\n    this._fallbackText = endValue.slice(start, sliceTail);\r\n    return this._fallbackText;\r\n  }\r\n});\r\n\r\nPooledClass.addPoolingTo(FallbackCompositionState);\r\n\r\nmodule.exports = FallbackCompositionState;"]},"metadata":{},"sourceType":"script"}