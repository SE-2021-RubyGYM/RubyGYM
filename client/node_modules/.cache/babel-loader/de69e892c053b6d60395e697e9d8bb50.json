{"ast":null,"code":"/**\r\n * Copyright 2014-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactComponentEnvironment\r\n */\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar injected = false;\nvar ReactComponentEnvironment = {\n  /**\r\n   * Optionally injectable environment dependent cleanup hook. (server vs.\r\n   * browser etc). Example: A browser system caches DOM nodes based on component\r\n   * ID and must remove that cache entry when this instance is unmounted.\r\n   */\n  unmountIDFromEnvironment: null,\n\n  /**\r\n   * Optionally injectable hook for swapping out mount images in the middle of\r\n   * the tree.\r\n   */\n  replaceNodeWithMarkupByID: null,\n\n  /**\r\n   * Optionally injectable hook for processing a queue of child updates. Will\r\n   * later move into MultiChildComponents.\r\n   */\n  processChildrenUpdates: null,\n  injection: {\n    injectEnvironment: function (environment) {\n      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;\n      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;\n      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;\n      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;\n      injected = true;\n    }\n  }\n};\nmodule.exports = ReactComponentEnvironment;","map":{"version":3,"sources":["F:/Administrator/Documents/Code for fun/Web/Project Introduction to SE/RubyGYM/client/node_modules/jsx-to-string/node_modules/react/lib/ReactComponentEnvironment.js"],"names":["invariant","require","injected","ReactComponentEnvironment","unmountIDFromEnvironment","replaceNodeWithMarkupByID","processChildrenUpdates","injection","injectEnvironment","environment","process","env","NODE_ENV","undefined","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIC,QAAQ,GAAG,KAAf;AAEA,IAAIC,yBAAyB,GAAG;AAE9B;AACF;AACA;AACA;AACA;AACEC,EAAAA,wBAAwB,EAAE,IAPI;;AAS9B;AACF;AACA;AACA;AACEC,EAAAA,yBAAyB,EAAE,IAbG;;AAe9B;AACF;AACA;AACA;AACEC,EAAAA,sBAAsB,EAAE,IAnBM;AAqB9BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,iBAAiB,EAAE,UAAUC,WAAV,EAAuB;AACxC,OAAC,CAACP,QAAF,GAAaQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCZ,SAAS,CAAC,KAAD,EAAQ,uEAAR,CAAjD,GAAoIA,SAAS,CAAC,KAAD,CAA1J,GAAoKa,SAApK;AACAV,MAAAA,yBAAyB,CAACC,wBAA1B,GAAqDK,WAAW,CAACL,wBAAjE;AACAD,MAAAA,yBAAyB,CAACE,yBAA1B,GAAsDI,WAAW,CAACJ,yBAAlE;AACAF,MAAAA,yBAAyB,CAACG,sBAA1B,GAAmDG,WAAW,CAACH,sBAA/D;AACAJ,MAAAA,QAAQ,GAAG,IAAX;AACD;AAPQ;AArBmB,CAAhC;AAiCAY,MAAM,CAACC,OAAP,GAAiBZ,yBAAjB","sourcesContent":["/**\r\n * Copyright 2014-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactComponentEnvironment\r\n */\r\n\r\n'use strict';\r\n\r\nvar invariant = require('fbjs/lib/invariant');\r\n\r\nvar injected = false;\r\n\r\nvar ReactComponentEnvironment = {\r\n\r\n  /**\r\n   * Optionally injectable environment dependent cleanup hook. (server vs.\r\n   * browser etc). Example: A browser system caches DOM nodes based on component\r\n   * ID and must remove that cache entry when this instance is unmounted.\r\n   */\r\n  unmountIDFromEnvironment: null,\r\n\r\n  /**\r\n   * Optionally injectable hook for swapping out mount images in the middle of\r\n   * the tree.\r\n   */\r\n  replaceNodeWithMarkupByID: null,\r\n\r\n  /**\r\n   * Optionally injectable hook for processing a queue of child updates. Will\r\n   * later move into MultiChildComponents.\r\n   */\r\n  processChildrenUpdates: null,\r\n\r\n  injection: {\r\n    injectEnvironment: function (environment) {\r\n      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;\r\n      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;\r\n      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;\r\n      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;\r\n      injected = true;\r\n    }\r\n  }\r\n\r\n};\r\n\r\nmodule.exports = ReactComponentEnvironment;"]},"metadata":{},"sourceType":"script"}