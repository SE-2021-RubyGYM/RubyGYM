{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/liveposition\n */\nimport Position from './position';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\n * {@link module:engine/model/rootelement~RootElement}.\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\n *\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\n * have to be unbound.\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\n *\n * @extends module:engine/model/position~Position\n */\n\nexport default class LivePosition extends Position {\n  /**\n   * Creates a live position.\n   *\n   * @see module:engine/model/position~Position\n   * @param {module:engine/model/rootelement~RootElement} root\n   * @param {Array.<Number>} path\n   * @param {module:engine/model/position~PositionStickiness} [stickiness]\n   */\n  constructor(root, path) {\n    let stickiness = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'toNone';\n    super(root, path, stickiness);\n\n    if (!this.root.is('rootElement')) {\n      /**\n       * LivePosition's root has to be an instance of RootElement.\n       *\n       * @error model-liveposition-root-not-rootelement\n       */\n      throw new CKEditorError('model-liveposition-root-not-rootelement', root);\n    }\n\n    bindWithDocument.call(this);\n  }\n  /**\n   * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\n   * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n   * referring to it).\n   */\n\n\n  detach() {\n    this.stopListening();\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\tlivePosition.is( 'position' ); // -> true\n   *\t\tlivePosition.is( 'model:position' ); // -> true\n   *\t\tlivePosition.is( 'liveposition' ); // -> true\n   *\t\tlivePosition.is( 'model:livePosition' ); // -> true\n   *\n   *\t\tlivePosition.is( 'view:position' ); // -> false\n   *\t\tlivePosition.is( 'documentSelection' ); // -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type === 'livePosition' || type === 'model:livePosition' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n    type == 'position' || type === 'model:position';\n  }\n  /**\n   * Creates a {@link module:engine/model/position~Position position instance}, which is equal to this live position.\n   *\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  toPosition() {\n    return new Position(this.root, this.path.slice(), this.stickiness);\n  }\n  /**\n   * Creates a `LivePosition` instance that is equal to position.\n   *\n   * @param {module:engine/model/position~Position} position\n   * @param {module:engine/model/position~PositionStickiness} [stickiness]\n   * @returns {module:engine/model/liveposition~LivePosition}\n   */\n\n\n  static fromPosition(position, stickiness) {\n    return new this(position.root, position.path.slice(), stickiness ? stickiness : position.stickiness);\n  }\n  /**\n   * @static\n   * @protected\n   * @method module:engine/model/liveposition~LivePosition._createAfter\n   * @see module:engine/model/position~Position._createAfter\n   * @param {module:engine/model/node~Node} node\n   * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n   * @returns {module:engine/model/liveposition~LivePosition}\n   */\n\n  /**\n   * @static\n   * @protected\n   * @method module:engine/model/liveposition~LivePosition._createBefore\n   * @see module:engine/model/position~Position._createBefore\n   * @param {module:engine/model/node~Node} node\n   * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n   * @returns {module:engine/model/liveposition~LivePosition}\n   */\n\n  /**\n   * @static\n   * @protected\n   * @method module:engine/model/liveposition~LivePosition._createAt\n   * @see module:engine/model/position~Position._createAt\n   * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset]\n   * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n   * @returns {module:engine/model/liveposition~LivePosition}\n   */\n\n  /**\n   * Fired when `LivePosition` instance is changed due to changes on {@link module:engine/model/document~Document}.\n   *\n   * @event module:engine/model/liveposition~LivePosition#change\n   * @param {module:engine/model/position~Position} oldPosition Position equal to this live position before it got changed.\n   */\n\n\n} // Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\n// this position's {@link module:engine/model/position~Position#root root}.\n//\n// @private\n\nfunction bindWithDocument() {\n  this.listenTo(this.root.document.model, 'applyOperation', (event, args) => {\n    const operation = args[0];\n\n    if (!operation.isDocumentOperation) {\n      return;\n    }\n\n    transform.call(this, operation);\n  }, {\n    priority: 'low'\n  });\n} // Updates this position accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\n\n\nfunction transform(operation) {\n  const result = this.getTransformedByOperation(operation);\n\n  if (!this.isEqual(result)) {\n    const oldPosition = this.toPosition();\n    this.path = result.path;\n    this.root = result.root;\n    this.fire('change', oldPosition);\n  }\n}\n\nmix(LivePosition, EmitterMixin);","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/model/liveposition.js"],"names":["Position","EmitterMixin","mix","CKEditorError","LivePosition","constructor","root","path","stickiness","is","bindWithDocument","call","detach","stopListening","type","toPosition","slice","fromPosition","position","listenTo","document","model","event","args","operation","isDocumentOperation","transform","priority","result","getTransformedByOperation","isEqual","oldPosition","fire"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/liveposition\n */\n\nimport Position from './position';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\n * {@link module:engine/model/rootelement~RootElement}.\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\n *\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\n * have to be unbound.\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\n *\n * @extends module:engine/model/position~Position\n */\nexport default class LivePosition extends Position {\n\t/**\n\t * Creates a live position.\n\t *\n\t * @see module:engine/model/position~Position\n\t * @param {module:engine/model/rootelement~RootElement} root\n\t * @param {Array.<Number>} path\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness]\n\t */\n\tconstructor( root, path, stickiness = 'toNone' ) {\n\t\tsuper( root, path, stickiness );\n\n\t\tif ( !this.root.is( 'rootElement' ) ) {\n\t\t\t/**\n\t\t\t * LivePosition's root has to be an instance of RootElement.\n\t\t\t *\n\t\t\t * @error model-liveposition-root-not-rootelement\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-liveposition-root-not-rootelement', root );\n\t\t}\n\n\t\tbindWithDocument.call( this );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\n\t * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n\t * referring to it).\n\t */\n\tdetach() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tlivePosition.is( 'position' ); // -> true\n\t *\t\tlivePosition.is( 'model:position' ); // -> true\n\t *\t\tlivePosition.is( 'liveposition' ); // -> true\n\t *\t\tlivePosition.is( 'model:livePosition' ); // -> true\n\t *\n\t *\t\tlivePosition.is( 'view:position' ); // -> false\n\t *\t\tlivePosition.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === 'livePosition' || type === 'model:livePosition' ||\n\t\t\t// From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n\t\t\ttype == 'position' || type === 'model:position';\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/position~Position position instance}, which is equal to this live position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\ttoPosition() {\n\t\treturn new Position( this.root, this.path.slice(), this.stickiness );\n\t}\n\n\t/**\n\t * Creates a `LivePosition` instance that is equal to position.\n\t *\n\t * @param {module:engine/model/position~Position} position\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness]\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\tstatic fromPosition( position, stickiness ) {\n\t\treturn new this( position.root, position.path.slice(), stickiness ? stickiness : position.stickiness );\n\t}\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createAfter\n\t * @see module:engine/model/position~Position._createAfter\n\t * @param {module:engine/model/node~Node} node\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createBefore\n\t * @see module:engine/model/position~Position._createBefore\n\t * @param {module:engine/model/node~Node} node\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createAt\n\t * @see module:engine/model/position~Position._createAt\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset]\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * Fired when `LivePosition` instance is changed due to changes on {@link module:engine/model/document~Document}.\n\t *\n\t * @event module:engine/model/liveposition~LivePosition#change\n\t * @param {module:engine/model/position~Position} oldPosition Position equal to this live position before it got changed.\n\t */\n}\n\n// Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\n// this position's {@link module:engine/model/position~Position#root root}.\n//\n// @private\nfunction bindWithDocument() {\n\tthis.listenTo(\n\t\tthis.root.document.model,\n\t\t'applyOperation',\n\t\t( event, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransform.call( this, operation );\n\t\t},\n\t\t{ priority: 'low' }\n\t);\n}\n\n// Updates this position accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\nfunction transform( operation ) {\n\tconst result = this.getTransformedByOperation( operation );\n\n\tif ( !this.isEqual( result ) ) {\n\t\tconst oldPosition = this.toPosition();\n\n\t\tthis.path = result.path;\n\t\tthis.root = result.root;\n\n\t\tthis.fire( 'change', oldPosition );\n\t}\n}\n\nmix( LivePosition, EmitterMixin );\n"]},"metadata":{},"sourceType":"module"}