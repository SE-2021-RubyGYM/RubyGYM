{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/inputtext/inputtextview\n */\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport '../../theme/components/inputtext/inputtext.css';\n/**\n * The text input view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class InputTextView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    var _this;\n\n    super(locale);\n    _this = this;\n\n    /**\n     * The value of the input.\n     *\n     * @observable\n     * @member {String} #value\n     */\n    this.set('value');\n    /**\n     * The `id` attribute of the input (i.e. to pair with a `<label>` element).\n     *\n     * @observable\n     * @member {String} #id\n     */\n\n    this.set('id');\n    /**\n     * The `placeholder` attribute of the input.\n     *\n     * @observable\n     * @member {String} #placeholder\n     */\n\n    this.set('placeholder');\n    /**\n     * Controls whether the input view is in read-only mode.\n     *\n     * @observable\n     * @member {Boolean} #isReadOnly\n     */\n\n    this.set('isReadOnly', false);\n    /**\n     * Set to `true` when the field has some error. Usually controlled via\n     * {@link module:ui/labeledinput/labeledinputview~LabeledInputView#errorText}.\n     *\n     * @observable\n     * @member {Boolean} #hasError\n     */\n\n    this.set('hasError', false);\n    /**\n     * The `id` of the element describing this field, e.g. when it has\n     * some error, it helps screen readers read the error text.\n     *\n     * @observable\n     * @member {Boolean} #ariaDescribedById\n     */\n\n    this.set('ariaDescribedById');\n    /**\n     * Stores information about the editor UI focus and propagates it so various plugins and components\n     * are unified as a focus group.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker} #focusTracker\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * An observable flag set to `true` when the input is currently focused by the user.\n     * Set to `false` otherwise.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isFocused\n     * @default false\n     */\n\n    this.bind('isFocused').to(this.focusTracker);\n    /**\n     * An observable flag set to `true` when the input contains no text, i.e.\n     * when {@link #value} is `''`, `null`, or `false`.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isEmpty\n     * @default true\n     */\n\n    this.set('isEmpty', true);\n    const bind = this.bindTemplate;\n    this.setTemplate({\n      tag: 'input',\n      attributes: {\n        type: 'text',\n        class: ['ck', 'ck-input', 'ck-input-text', bind.if('isFocused', 'ck-input_focused'), bind.if('isEmpty', 'ck-input-text_empty'), bind.if('hasError', 'ck-error')],\n        id: bind.to('id'),\n        placeholder: bind.to('placeholder'),\n        readonly: bind.to('isReadOnly'),\n        'aria-invalid': bind.if('hasError', true),\n        'aria-describedby': bind.to('ariaDescribedById')\n      },\n      on: {\n        input: bind.to(function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          _this.fire('input', ...args);\n\n          _this._updateIsEmpty();\n        }),\n        change: bind.to(this._updateIsEmpty.bind(this))\n      }\n    });\n    /**\n     * Fired when the user types in the input. Corresponds to the native\n     * DOM `input` event.\n     *\n     * @event input\n     */\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    this.focusTracker.add(this.element);\n\n    this._setDomElementValue(this.value);\n\n    this._updateIsEmpty(); // Bind `this.value` to the DOM element's value.\n    // We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n\n\n    this.on('change:value', (evt, name, value) => {\n      this._setDomElementValue(value);\n\n      this._updateIsEmpty();\n    });\n  }\n  /**\n   * Moves the focus to the input and selects the value.\n   */\n\n\n  select() {\n    this.element.select();\n  }\n  /**\n   * Focuses the input.\n   */\n\n\n  focus() {\n    this.element.focus();\n  }\n  /**\n   * Updates the {@link #isEmpty} property value on demand.\n   *\n   * @private\n   */\n\n\n  _updateIsEmpty() {\n    this.isEmpty = isInputElementEmpty(this.element);\n  }\n  /**\n   * Sets the `value` property of the {@link #element DOM element} on demand.\n   *\n   * @private\n   */\n\n\n  _setDomElementValue(value) {\n    this.element.value = !value && value !== 0 ? '' : value;\n  }\n\n}\n\nfunction isInputElementEmpty(domElement) {\n  return !domElement.value;\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-ui/src/inputtext/inputtextview.js"],"names":["View","FocusTracker","InputTextView","constructor","locale","set","focusTracker","bind","to","bindTemplate","setTemplate","tag","attributes","type","class","if","id","placeholder","readonly","on","input","args","fire","_updateIsEmpty","change","render","add","element","_setDomElementValue","value","evt","name","select","focus","isEmpty","isInputElementEmpty","domElement"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/inputtext/inputtextview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport '../../theme/components/inputtext/inputtext.css';\n\n/**\n * The text input view class.\n *\n * @extends module:ui/view~View\n */\nexport default class InputTextView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The value of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * The `id` attribute of the input (i.e. to pair with a `<label>` element).\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #id\n\t\t */\n\t\tthis.set( 'id' );\n\n\t\t/**\n\t\t * The `placeholder` attribute of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #placeholder\n\t\t */\n\t\tthis.set( 'placeholder' );\n\n\t\t/**\n\t\t * Controls whether the input view is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Set to `true` when the field has some error. Usually controlled via\n\t\t * {@link module:ui/labeledinput/labeledinputview~LabeledInputView#errorText}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #hasError\n\t\t */\n\t\tthis.set( 'hasError', false );\n\n\t\t/**\n\t\t * The `id` of the element describing this field, e.g. when it has\n\t\t * some error, it helps screen readers read the error text.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #ariaDescribedById\n\t\t */\n\t\tthis.set( 'ariaDescribedById' );\n\n\t\t/**\n\t\t * Stores information about the editor UI focus and propagates it so various plugins and components\n\t\t * are unified as a focus group.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An observable flag set to `true` when the input is currently focused by the user.\n\t\t * Set to `false` otherwise.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t * @default false\n\t\t */\n\t\tthis.bind( 'isFocused' ).to( this.focusTracker );\n\n\t\t/**\n\t\t * An observable flag set to `true` when the input contains no text, i.e.\n\t\t * when {@link #value} is `''`, `null`, or `false`.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isEmpty\n\t\t * @default true\n\t\t */\n\t\tthis.set( 'isEmpty', true );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'input',\n\t\t\tattributes: {\n\t\t\t\ttype: 'text',\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-input',\n\t\t\t\t\t'ck-input-text',\n\t\t\t\t\tbind.if( 'isFocused', 'ck-input_focused' ),\n\t\t\t\t\tbind.if( 'isEmpty', 'ck-input-text_empty' ),\n\t\t\t\t\tbind.if( 'hasError', 'ck-error' )\n\t\t\t\t],\n\t\t\t\tid: bind.to( 'id' ),\n\t\t\t\tplaceholder: bind.to( 'placeholder' ),\n\t\t\t\treadonly: bind.to( 'isReadOnly' ),\n\t\t\t\t'aria-invalid': bind.if( 'hasError', true ),\n\t\t\t\t'aria-describedby': bind.to( 'ariaDescribedById' )\n\t\t\t},\n\t\t\ton: {\n\t\t\t\tinput: bind.to( ( ...args ) => {\n\t\t\t\t\tthis.fire( 'input', ...args );\n\t\t\t\t\tthis._updateIsEmpty();\n\t\t\t\t} ),\n\t\t\t\tchange: bind.to( this._updateIsEmpty.bind( this ) )\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Fired when the user types in the input. Corresponds to the native\n\t\t * DOM `input` event.\n\t\t *\n\t\t * @event input\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.focusTracker.add( this.element );\n\n\t\tthis._setDomElementValue( this.value );\n\t\tthis._updateIsEmpty();\n\n\t\t// Bind `this.value` to the DOM element's value.\n\t\t// We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n\t\tthis.on( 'change:value', ( evt, name, value ) => {\n\t\t\tthis._setDomElementValue( value );\n\t\t\tthis._updateIsEmpty();\n\t\t} );\n\t}\n\n\t/**\n\t * Moves the focus to the input and selects the value.\n\t */\n\tselect() {\n\t\tthis.element.select();\n\t}\n\n\t/**\n\t * Focuses the input.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n\n\t/**\n\t * Updates the {@link #isEmpty} property value on demand.\n\t *\n\t * @private\n\t */\n\t_updateIsEmpty() {\n\t\tthis.isEmpty = isInputElementEmpty( this.element );\n\t}\n\n\t/**\n\t * Sets the `value` property of the {@link #element DOM element} on demand.\n\t *\n\t * @private\n\t */\n\t_setDomElementValue( value ) {\n\t\tthis.element.value = ( !value && value !== 0 ) ? '' : value;\n\t}\n}\n\nfunction isInputElementEmpty( domElement ) {\n\treturn !domElement.value;\n}\n"]},"metadata":{},"sourceType":"module"}