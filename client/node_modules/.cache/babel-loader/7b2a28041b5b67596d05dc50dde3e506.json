{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboardpipeline\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport EventInfo from '@ckeditor/ckeditor5-utils/src/eventinfo';\nimport ClipboardObserver from './clipboardobserver';\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext.js'; // Input pipeline events overview:\n//\n//              ┌──────────────────────┐          ┌──────────────────────┐\n//              │     view.Document    │          │     view.Document    │\n//              │         paste        │          │         drop         │\n//              └───────────┬──────────┘          └───────────┬──────────┘\n//                          │                                 │\n//                          └────────────────┌────────────────┘\n//                                           │\n//                                 ┌─────────V────────┐\n//                                 │   view.Document  │   Retrieves text/html or text/plain from data.dataTransfer\n//                                 │  clipboardInput  │   and processes it to view.DocumentFragment.\n//                                 └─────────┬────────┘\n//                                           │\n//                               ┌───────────V───────────┐\n//                               │   ClipboardPipeline   │   Converts view.DocumentFragment to model.DocumentFragment.\n//                               │  inputTransformation  │\n//                               └───────────┬───────────┘\n//                                           │\n//                                ┌──────────V──────────┐\n//                                │  ClipboardPipeline  │   Calls model.insertContent().\n//                                │   contentInsertion  │\n//                                └─────────────────────┘\n//\n//\n// Output pipeline events overview:\n//\n//              ┌──────────────────────┐          ┌──────────────────────┐\n//              │     view.Document    │          │     view.Document    │   Retrieves the selected model.DocumentFragment\n//              │         copy         │          │          cut         │   and converts it to view.DocumentFragment.\n//              └───────────┬──────────┘          └───────────┬──────────┘\n//                          │                                 │\n//                          └────────────────┌────────────────┘\n//                                           │\n//                                 ┌─────────V────────┐\n//                                 │   view.Document  │   Processes view.DocumentFragment to text/html and text/plain\n//                                 │  clipboardOutput │   and stores the results in data.dataTransfer.\n//                                 └──────────────────┘\n//\n\n/**\n * The clipboard pipeline feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through a series of events in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with the serialized editor's data.\n *\n * # Input pipeline\n *\n * The behavior of the default handlers (all at a `low` priority):\n *\n * ## Event: `paste` or `drop`\n *\n * 1. Translates the event data.\n * 2. Fires the {@link module:engine/view/document~Document#event:clipboardInput `view.Document#clipboardInput`} event.\n *\n * ## Event: `view.Document#clipboardInput`\n *\n * 1. If the `data.content` event field is already set (by some listener on a higher priority), it takes this content and fires the event\n *    from the last point.\n * 2. Otherwise, it retrieves `text/html` or `text/plain` from `data.dataTransfer`.\n * 3. Normalizes the raw data by applying simple filters on string data.\n * 4. Processes the raw data to {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`} with the\n *    {@link module:engine/controller/datacontroller~DataController#htmlProcessor `DataController#htmlProcessor`}.\n * 5. Fires the {@link module:clipboard/clipboardpipeline~ClipboardPipeline#event:inputTransformation\n *   `ClipboardPipeline#inputTransformation`} event with the view document fragment in the `data.content` event field.\n *\n * ## Event: `ClipboardPipeline#inputTransformation`\n *\n * 1. Converts {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`} from the `data.content` field to\n *    {@link module:engine/model/documentfragment~DocumentFragment `model.DocumentFragment`}.\n * 2. Fires the {@link module:clipboard/clipboardpipeline~ClipboardPipeline#event:contentInsertion `ClipboardPipeline#contentInsertion`}\n *    event with the model document fragment in the `data.content` event field.\n *    **Note**: The `ClipboardPipeline#contentInsertion` event is fired within a model change block to allow other handlers\n *    to run in the same block without post-fixers called in between (i.e., the selection post-fixer).\n *\n * ## Event: `ClipboardPipeline#contentInsertion`\n *\n * 1. Calls {@link module:engine/model/model~Model#insertContent `model.insertContent()`} to insert `data.content`\n *    at the current selection position.\n *\n * # Output pipeline\n *\n * The behavior of the default handlers (all at a `low` priority):\n *\n * ## Event: `copy`, `cut` or `dragstart`\n *\n * 1. Retrieves the selected {@link module:engine/model/documentfragment~DocumentFragment `model.DocumentFragment`} by calling\n *    {@link module:engine/model/model~Model#getSelectedContent `model#getSelectedContent()`}.\n * 2. Converts the model document fragment to {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`}.\n * 3. Fires the {@link module:engine/view/document~Document#event:clipboardOutput `view.Document#clipboardOutput`} event\n *    with the view document fragment in the `data.content` event field.\n *\n * ## Event: `view.Document#clipboardOutput`\n *\n * 1. Processes `data.content` to HTML and plain text with the\n *    {@link module:engine/controller/datacontroller~DataController#htmlProcessor `DataController#htmlProcessor`}.\n * 2. Updates the `data.dataTransfer` data for `text/html` and `text/plain` with the processed data.\n * 3. For the `cut` method, calls {@link module:engine/model/model~Model#deleteContent `model.deleteContent()`}\n *    on the current selection.\n *\n * Read more about the clipboard integration in the {@glink framework/guides/deep-dive/clipboard clipboard deep dive guide}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ClipboardPipeline extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ClipboardPipeline';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const view = editor.editing.view;\n    view.addObserver(ClipboardObserver);\n\n    this._setupPasteDrop();\n\n    this._setupCopyCut();\n  }\n  /**\n   * The clipboard paste pipeline.\n   *\n   * @private\n   */\n\n\n  _setupPasteDrop() {\n    const editor = this.editor;\n    const model = editor.model;\n    const view = editor.editing.view;\n    const viewDocument = view.document; // Pasting and dropping is disabled when editor is in the read-only mode.\n    // See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\n    this.listenTo(viewDocument, 'clipboardInput', evt => {\n      if (editor.isReadOnly) {\n        evt.stop();\n      }\n    }, {\n      priority: 'highest'\n    });\n    this.listenTo(viewDocument, 'clipboardInput', (evt, data) => {\n      const dataTransfer = data.dataTransfer;\n      let content = data.content || ''; // Some feature could already inject content in the higher priority event handler (i.e., codeBlock).\n\n      if (!content) {\n        if (dataTransfer.getData('text/html')) {\n          content = normalizeClipboardHtml(dataTransfer.getData('text/html'));\n        } else if (dataTransfer.getData('text/plain')) {\n          content = plainTextToHtml(dataTransfer.getData('text/plain'));\n        }\n\n        content = this.editor.data.htmlProcessor.toView(content);\n      }\n\n      const eventInfo = new EventInfo(this, 'inputTransformation');\n      this.fire(eventInfo, {\n        content,\n        dataTransfer,\n        targetRanges: data.targetRanges,\n        method: data.method\n      }); // If CKEditor handled the input, do not bubble the original event any further.\n      // This helps external integrations recognize this fact and act accordingly.\n      // https://github.com/ckeditor/ckeditor5-upload/issues/92\n\n      if (eventInfo.stop.called) {\n        evt.stop();\n      }\n\n      view.scrollToTheSelection();\n    }, {\n      priority: 'low'\n    });\n    this.listenTo(this, 'inputTransformation', (evt, data) => {\n      if (data.content.isEmpty) {\n        return;\n      }\n\n      const dataController = this.editor.data; // Convert the pasted content into a model document fragment.\n      // The conversion is contextual, but in this case an \"all allowed\" context is needed\n      // and for that we use the $clipboardHolder item.\n\n      const modelFragment = dataController.toModel(data.content, '$clipboardHolder');\n\n      if (modelFragment.childCount == 0) {\n        return;\n      }\n\n      evt.stop(); // Fire content insertion event in a single change block to allow other handlers to run in the same block\n      // without post-fixers called in between (i.e., the selection post-fixer).\n\n      model.change(() => {\n        this.fire('contentInsertion', {\n          content: modelFragment,\n          method: data.method,\n          dataTransfer: data.dataTransfer,\n          targetRanges: data.targetRanges\n        });\n      });\n    }, {\n      priority: 'low'\n    });\n    this.listenTo(this, 'contentInsertion', (evt, data) => {\n      data.resultRange = model.insertContent(data.content);\n    }, {\n      priority: 'low'\n    });\n  }\n  /**\n   * The clipboard copy/cut pipeline.\n   *\n   * @private\n   */\n\n\n  _setupCopyCut() {\n    const editor = this.editor;\n    const modelDocument = editor.model.document;\n    const view = editor.editing.view;\n    const viewDocument = view.document;\n\n    function onCopyCut(evt, data) {\n      const dataTransfer = data.dataTransfer;\n      data.preventDefault();\n      const content = editor.data.toView(editor.model.getSelectedContent(modelDocument.selection));\n      viewDocument.fire('clipboardOutput', {\n        dataTransfer,\n        content,\n        method: evt.name\n      });\n    }\n\n    this.listenTo(viewDocument, 'copy', onCopyCut, {\n      priority: 'low'\n    });\n    this.listenTo(viewDocument, 'cut', (evt, data) => {\n      // Cutting is disabled when editor is in the read-only mode.\n      // See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n      if (editor.isReadOnly) {\n        data.preventDefault();\n      } else {\n        onCopyCut(evt, data);\n      }\n    }, {\n      priority: 'low'\n    });\n    this.listenTo(viewDocument, 'clipboardOutput', (evt, data) => {\n      if (!data.content.isEmpty) {\n        data.dataTransfer.setData('text/html', this.editor.data.htmlProcessor.toData(data.content));\n        data.dataTransfer.setData('text/plain', viewToPlainText(data.content));\n      }\n\n      if (data.method == 'cut') {\n        editor.model.deleteContent(modelDocument.selection);\n      }\n    }, {\n      priority: 'low'\n    });\n  }\n\n}\n/**\n * Fired with the `content`, `dataTransfer`, `method`, and `targetRanges` properties:\n *\n * * The `content` which comes from the clipboard (it was pasted or dropped) should be processed in order to be inserted into the editor.\n * * The `dataTransfer` object is available in case the transformation functions need access to the raw clipboard data.\n * * The `method` indicates the original DOM event (for example `'drop'` or `'paste'`).\n * * The `targetRanges` property is an array of view ranges (it is available only for `'drop'`).\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline clipboard input pipeline}.\n *\n * **Note**: You should not stop this event if you want to change the input data. You should modify the `content` property instead.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboardpipeline~ClipboardPipeline\n * @event module:clipboard/clipboardpipeline~ClipboardPipeline#event:inputTransformation\n * @param {Object} data The event data.\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content The event data. The content to be inserted into the editor.\n * It can be modified by event listeners. Read more about the clipboard pipelines in\n * the {@glink framework/guides/deep-dive/clipboard clipboard deep dive guide}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer The data transfer instance.\n * @param {'paste'|'drop'} data.method Whether the event was triggered by a paste or drop operation.\n * @param {Array.<module:engine/view/range~Range>} data.targetRanges The target drop ranges.\n */\n\n/**\n * Fired with the `content`, `dataTransfer`, `method`, and `targetRanges` properties:\n *\n * * The `content` which comes from the clipboard (was pasted or dropped) should be processed in order to be inserted into the editor.\n * * The `dataTransfer` object is available in case the transformation functions need access to the raw clipboard data.\n * * The `method` indicates the original DOM event (for example `'drop'` or `'paste'`).\n * * The `targetRanges` property is an array of view ranges (it is available only for `'drop'`).\n *\n * Event handlers can modify the content according to the final insertion position.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline clipboard input pipeline}.\n *\n * **Note**: You should not stop this event if you want to change the input data. You should modify the `content` property instead.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboardpipeline~ClipboardPipeline\n * @see module:clipboard/clipboardpipeline~ClipboardPipeline#event:inputTransformation\n * @event module:clipboard/clipboardpipeline~ClipboardPipeline#event:contentInsertion\n * @param {Object} data The event data.\n * @param {module:engine/model/documentfragment~DocumentFragment} data.content The event data. The content to be inserted into the editor.\n * Read more about the clipboard pipelines in the {@glink framework/guides/deep-dive/clipboard clipboard deep dive guide}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer The data transfer instance.\n * @param {'paste'|'drop'} data.method Whether the event was triggered by a paste or drop operation.\n * @param {Array.<module:engine/view/range~Range>} data.targetRanges The target drop ranges.\n * @param {module:engine/model/range~Range} data.resultRange The result of the `model.insertContent()` call\n *  (inserted by the event handler at a low priority).\n */\n\n/**\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n * with a copy of the selected content. The content can be processed before it ends up in the clipboard.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#output-pipeline clipboard output pipeline}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboardpipeline~ClipboardPipeline\n * @event module:engine/view/document~Document#event:clipboardOutput\n * @param {module:clipboard/clipboardpipeline~ClipboardOutputEventData} data The event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\n *\n * @class module:clipboard/clipboardpipeline~ClipboardOutputEventData\n */\n\n/**\n * The data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboardpipeline~ClipboardOutputEventData#dataTransfer\n */\n\n/**\n * Content to be put into the clipboard. It can be modified by the event listeners.\n * Read more about the clipboard pipelines in the {@glink framework/guides/deep-dive/clipboard clipboard deep dive guide}.\n *\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboardpipeline~ClipboardOutputEventData#content\n */\n\n/**\n * Whether the event was triggered by a copy or cut operation.\n *\n * @member {'copy'|'cut'} module:clipboard/clipboardpipeline~ClipboardOutputEventData#method\n */","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-clipboard/src/clipboardpipeline.js"],"names":["Plugin","EventInfo","ClipboardObserver","plainTextToHtml","normalizeClipboardHtml","viewToPlainText","ClipboardPipeline","pluginName","init","editor","view","editing","addObserver","_setupPasteDrop","_setupCopyCut","model","viewDocument","document","listenTo","evt","isReadOnly","stop","priority","data","dataTransfer","content","getData","htmlProcessor","toView","eventInfo","fire","targetRanges","method","called","scrollToTheSelection","isEmpty","dataController","modelFragment","toModel","childCount","change","resultRange","insertContent","modelDocument","onCopyCut","preventDefault","getSelectedContent","selection","name","setData","toData","deleteContent"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,qCAAnB;AACA,OAAOC,SAAP,MAAsB,yCAAtB;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,sBAAP,MAAmC,gCAAnC;AACA,OAAOC,eAAP,MAA4B,4BAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,iBAAN,SAAgCN,MAAhC,CAAuC;AACrD;AACD;AACA;AACsB,aAAVO,UAAU,GAAG;AACvB,WAAO,mBAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,IAAI,GAAGD,MAAM,CAACE,OAAP,CAAeD,IAA5B;AAEAA,IAAAA,IAAI,CAACE,WAAL,CAAkBV,iBAAlB;;AAEA,SAAKW,eAAL;;AACA,SAAKC,aAAL;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCD,EAAAA,eAAe,GAAG;AACjB,UAAMJ,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMM,KAAK,GAAGN,MAAM,CAACM,KAArB;AACA,UAAML,IAAI,GAAGD,MAAM,CAACE,OAAP,CAAeD,IAA5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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboardpipeline\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport EventInfo from '@ckeditor/ckeditor5-utils/src/eventinfo';\n\nimport ClipboardObserver from './clipboardobserver';\n\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext.js';\n\n// Input pipeline events overview:\n//\n//              ┌──────────────────────┐          ┌──────────────────────┐\n//              │     view.Document    │          │     view.Document    │\n//              │         paste        │          │         drop         │\n//              └───────────┬──────────┘          └───────────┬──────────┘\n//                          │                                 │\n//                          └────────────────┌────────────────┘\n//                                           │\n//                                 ┌─────────V────────┐\n//                                 │   view.Document  │   Retrieves text/html or text/plain from data.dataTransfer\n//                                 │  clipboardInput  │   and processes it to view.DocumentFragment.\n//                                 └─────────┬────────┘\n//                                           │\n//                               ┌───────────V───────────┐\n//                               │   ClipboardPipeline   │   Converts view.DocumentFragment to model.DocumentFragment.\n//                               │  inputTransformation  │\n//                               └───────────┬───────────┘\n//                                           │\n//                                ┌──────────V──────────┐\n//                                │  ClipboardPipeline  │   Calls model.insertContent().\n//                                │   contentInsertion  │\n//                                └─────────────────────┘\n//\n//\n// Output pipeline events overview:\n//\n//              ┌──────────────────────┐          ┌──────────────────────┐\n//              │     view.Document    │          │     view.Document    │   Retrieves the selected model.DocumentFragment\n//              │         copy         │          │          cut         │   and converts it to view.DocumentFragment.\n//              └───────────┬──────────┘          └───────────┬──────────┘\n//                          │                                 │\n//                          └────────────────┌────────────────┘\n//                                           │\n//                                 ┌─────────V────────┐\n//                                 │   view.Document  │   Processes view.DocumentFragment to text/html and text/plain\n//                                 │  clipboardOutput │   and stores the results in data.dataTransfer.\n//                                 └──────────────────┘\n//\n\n/**\n * The clipboard pipeline feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through a series of events in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with the serialized editor's data.\n *\n * # Input pipeline\n *\n * The behavior of the default handlers (all at a `low` priority):\n *\n * ## Event: `paste` or `drop`\n *\n * 1. Translates the event data.\n * 2. Fires the {@link module:engine/view/document~Document#event:clipboardInput `view.Document#clipboardInput`} event.\n *\n * ## Event: `view.Document#clipboardInput`\n *\n * 1. If the `data.content` event field is already set (by some listener on a higher priority), it takes this content and fires the event\n *    from the last point.\n * 2. Otherwise, it retrieves `text/html` or `text/plain` from `data.dataTransfer`.\n * 3. Normalizes the raw data by applying simple filters on string data.\n * 4. Processes the raw data to {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`} with the\n *    {@link module:engine/controller/datacontroller~DataController#htmlProcessor `DataController#htmlProcessor`}.\n * 5. Fires the {@link module:clipboard/clipboardpipeline~ClipboardPipeline#event:inputTransformation\n *   `ClipboardPipeline#inputTransformation`} event with the view document fragment in the `data.content` event field.\n *\n * ## Event: `ClipboardPipeline#inputTransformation`\n *\n * 1. Converts {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`} from the `data.content` field to\n *    {@link module:engine/model/documentfragment~DocumentFragment `model.DocumentFragment`}.\n * 2. Fires the {@link module:clipboard/clipboardpipeline~ClipboardPipeline#event:contentInsertion `ClipboardPipeline#contentInsertion`}\n *    event with the model document fragment in the `data.content` event field.\n *    **Note**: The `ClipboardPipeline#contentInsertion` event is fired within a model change block to allow other handlers\n *    to run in the same block without post-fixers called in between (i.e., the selection post-fixer).\n *\n * ## Event: `ClipboardPipeline#contentInsertion`\n *\n * 1. Calls {@link module:engine/model/model~Model#insertContent `model.insertContent()`} to insert `data.content`\n *    at the current selection position.\n *\n * # Output pipeline\n *\n * The behavior of the default handlers (all at a `low` priority):\n *\n * ## Event: `copy`, `cut` or `dragstart`\n *\n * 1. Retrieves the selected {@link module:engine/model/documentfragment~DocumentFragment `model.DocumentFragment`} by calling\n *    {@link module:engine/model/model~Model#getSelectedContent `model#getSelectedContent()`}.\n * 2. Converts the model document fragment to {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`}.\n * 3. Fires the {@link module:engine/view/document~Document#event:clipboardOutput `view.Document#clipboardOutput`} event\n *    with the view document fragment in the `data.content` event field.\n *\n * ## Event: `view.Document#clipboardOutput`\n *\n * 1. Processes `data.content` to HTML and plain text with the\n *    {@link module:engine/controller/datacontroller~DataController#htmlProcessor `DataController#htmlProcessor`}.\n * 2. Updates the `data.dataTransfer` data for `text/html` and `text/plain` with the processed data.\n * 3. For the `cut` method, calls {@link module:engine/model/model~Model#deleteContent `model.deleteContent()`}\n *    on the current selection.\n *\n * Read more about the clipboard integration in the {@glink framework/guides/deep-dive/clipboard clipboard deep dive guide}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ClipboardPipeline extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ClipboardPipeline';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\n\t\tview.addObserver( ClipboardObserver );\n\n\t\tthis._setupPasteDrop();\n\t\tthis._setupCopyCut();\n\t}\n\n\t/**\n\t * The clipboard paste pipeline.\n\t *\n\t * @private\n\t */\n\t_setupPasteDrop() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t// Pasting and dropping is disabled when editor is in the read-only mode.\n\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\tthis.listenTo( viewDocument, 'clipboardInput', evt => {\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardInput', ( evt, data ) => {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\t\t\tlet content = data.content || '';\n\n\t\t\t// Some feature could already inject content in the higher priority event handler (i.e., codeBlock).\n\t\t\tif ( !content ) {\n\t\t\t\tif ( dataTransfer.getData( 'text/html' ) ) {\n\t\t\t\t\tcontent = normalizeClipboardHtml( dataTransfer.getData( 'text/html' ) );\n\t\t\t\t} else if ( dataTransfer.getData( 'text/plain' ) ) {\n\t\t\t\t\tcontent = plainTextToHtml( dataTransfer.getData( 'text/plain' ) );\n\t\t\t\t}\n\n\t\t\t\tcontent = this.editor.data.htmlProcessor.toView( content );\n\t\t\t}\n\n\t\t\tconst eventInfo = new EventInfo( this, 'inputTransformation' );\n\n\t\t\tthis.fire( eventInfo, {\n\t\t\t\tcontent,\n\t\t\t\tdataTransfer,\n\t\t\t\ttargetRanges: data.targetRanges,\n\t\t\t\tmethod: data.method\n\t\t\t} );\n\n\t\t\t// If CKEditor handled the input, do not bubble the original event any further.\n\t\t\t// This helps external integrations recognize this fact and act accordingly.\n\t\t\t// https://github.com/ckeditor/ckeditor5-upload/issues/92\n\t\t\tif ( eventInfo.stop.called ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( this, 'inputTransformation', ( evt, data ) => {\n\t\t\tif ( data.content.isEmpty ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst dataController = this.editor.data;\n\n\t\t\t// Convert the pasted content into a model document fragment.\n\t\t\t// The conversion is contextual, but in this case an \"all allowed\" context is needed\n\t\t\t// and for that we use the $clipboardHolder item.\n\t\t\tconst modelFragment = dataController.toModel( data.content, '$clipboardHolder' );\n\n\t\t\tif ( modelFragment.childCount == 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevt.stop();\n\n\t\t\t// Fire content insertion event in a single change block to allow other handlers to run in the same block\n\t\t\t// without post-fixers called in between (i.e., the selection post-fixer).\n\t\t\tmodel.change( () => {\n\t\t\t\tthis.fire( 'contentInsertion', {\n\t\t\t\t\tcontent: modelFragment,\n\t\t\t\t\tmethod: data.method,\n\t\t\t\t\tdataTransfer: data.dataTransfer,\n\t\t\t\t\ttargetRanges: data.targetRanges\n\t\t\t\t} );\n\t\t\t} );\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( this, 'contentInsertion', ( evt, data ) => {\n\t\t\tdata.resultRange = model.insertContent( data.content );\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * The clipboard copy/cut pipeline.\n\t *\n\t * @private\n\t */\n\t_setupCopyCut() {\n\t\tconst editor = this.editor;\n\t\tconst modelDocument = editor.model.document;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tfunction onCopyCut( evt, data ) {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\n\t\t\tdata.preventDefault();\n\n\t\t\tconst content = editor.data.toView( editor.model.getSelectedContent( modelDocument.selection ) );\n\n\t\t\tviewDocument.fire( 'clipboardOutput', { dataTransfer, content, method: evt.name } );\n\t\t}\n\n\t\tthis.listenTo( viewDocument, 'copy', onCopyCut, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'cut', ( evt, data ) => {\n\t\t\t// Cutting is disabled when editor is in the read-only mode.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t} else {\n\t\t\t\tonCopyCut( evt, data );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardOutput', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tdata.dataTransfer.setData( 'text/html', this.editor.data.htmlProcessor.toData( data.content ) );\n\t\t\t\tdata.dataTransfer.setData( 'text/plain', viewToPlainText( data.content ) );\n\t\t\t}\n\n\t\t\tif ( data.method == 'cut' ) {\n\t\t\t\teditor.model.deleteContent( modelDocument.selection );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t}\n}\n\n/**\n * Fired with the `content`, `dataTransfer`, `method`, and `targetRanges` properties:\n *\n * * The `content` which comes from the clipboard (it was pasted or dropped) should be processed in order to be inserted into the editor.\n * * The `dataTransfer` object is available in case the transformation functions need access to the raw clipboard data.\n * * The `method` indicates the original DOM event (for example `'drop'` or `'paste'`).\n * * The `targetRanges` property is an array of view ranges (it is available only for `'drop'`).\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline clipboard input pipeline}.\n *\n * **Note**: You should not stop this event if you want to change the input data. You should modify the `content` property instead.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboardpipeline~ClipboardPipeline\n * @event module:clipboard/clipboardpipeline~ClipboardPipeline#event:inputTransformation\n * @param {Object} data The event data.\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content The event data. The content to be inserted into the editor.\n * It can be modified by event listeners. Read more about the clipboard pipelines in\n * the {@glink framework/guides/deep-dive/clipboard clipboard deep dive guide}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer The data transfer instance.\n * @param {'paste'|'drop'} data.method Whether the event was triggered by a paste or drop operation.\n * @param {Array.<module:engine/view/range~Range>} data.targetRanges The target drop ranges.\n */\n\n/**\n * Fired with the `content`, `dataTransfer`, `method`, and `targetRanges` properties:\n *\n * * The `content` which comes from the clipboard (was pasted or dropped) should be processed in order to be inserted into the editor.\n * * The `dataTransfer` object is available in case the transformation functions need access to the raw clipboard data.\n * * The `method` indicates the original DOM event (for example `'drop'` or `'paste'`).\n * * The `targetRanges` property is an array of view ranges (it is available only for `'drop'`).\n *\n * Event handlers can modify the content according to the final insertion position.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline clipboard input pipeline}.\n *\n * **Note**: You should not stop this event if you want to change the input data. You should modify the `content` property instead.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboardpipeline~ClipboardPipeline\n * @see module:clipboard/clipboardpipeline~ClipboardPipeline#event:inputTransformation\n * @event module:clipboard/clipboardpipeline~ClipboardPipeline#event:contentInsertion\n * @param {Object} data The event data.\n * @param {module:engine/model/documentfragment~DocumentFragment} data.content The event data. The content to be inserted into the editor.\n * Read more about the clipboard pipelines in the {@glink framework/guides/deep-dive/clipboard clipboard deep dive guide}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer The data transfer instance.\n * @param {'paste'|'drop'} data.method Whether the event was triggered by a paste or drop operation.\n * @param {Array.<module:engine/view/range~Range>} data.targetRanges The target drop ranges.\n * @param {module:engine/model/range~Range} data.resultRange The result of the `model.insertContent()` call\n *  (inserted by the event handler at a low priority).\n */\n\n/**\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n * with a copy of the selected content. The content can be processed before it ends up in the clipboard.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#output-pipeline clipboard output pipeline}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboardpipeline~ClipboardPipeline\n * @event module:engine/view/document~Document#event:clipboardOutput\n * @param {module:clipboard/clipboardpipeline~ClipboardOutputEventData} data The event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\n *\n * @class module:clipboard/clipboardpipeline~ClipboardOutputEventData\n */\n\n/**\n * The data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboardpipeline~ClipboardOutputEventData#dataTransfer\n */\n\n/**\n * Content to be put into the clipboard. It can be modified by the event listeners.\n * Read more about the clipboard pipelines in the {@glink framework/guides/deep-dive/clipboard clipboard deep dive guide}.\n *\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboardpipeline~ClipboardOutputEventData#content\n */\n\n/**\n * Whether the event was triggered by a copy or cut operation.\n *\n * @member {'copy'|'cut'} module:clipboard/clipboardpipeline~ClipboardOutputEventData#method\n */\n"]},"metadata":{},"sourceType":"module"}