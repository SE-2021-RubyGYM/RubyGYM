{"ast":null,"code":"/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule getMarkupWrap\r\n */\n\n/*eslint-disable fb-www/unsafe-html */\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar invariant = require('./invariant');\n/**\r\n * Dummy container used to detect which wraps are necessary.\r\n */\n\n\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n/**\r\n * Some browsers cannot use `innerHTML` to render certain elements standalone,\r\n * so we wrap them, render the wrapped nodes, then extract the desired node.\r\n *\r\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').\r\n */\n\nvar shouldWrap = {};\nvar selectWrap = [1, '<select multiple=\"true\">', '</select>'];\nvar tableWrap = [1, '<table>', '</table>'];\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\nvar svgWrap = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\">', '</svg>'];\nvar markupWrap = {\n  '*': [1, '?<div>', '</div>'],\n  'area': [1, '<map>', '</map>'],\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\n  'legend': [1, '<fieldset>', '</fieldset>'],\n  'param': [1, '<object>', '</object>'],\n  'tr': [2, '<table><tbody>', '</tbody></table>'],\n  'optgroup': selectWrap,\n  'option': selectWrap,\n  'caption': tableWrap,\n  'colgroup': tableWrap,\n  'tbody': tableWrap,\n  'tfoot': tableWrap,\n  'thead': tableWrap,\n  'td': trWrap,\n  'th': trWrap\n}; // Initialize the SVG elements since we know they'll always need to be wrapped\n// consistently. If they are created inside a <div> they will be initialized in\n// the wrong namespace (and will not display).\n\nvar svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];\nsvgElements.forEach(function (nodeName) {\n  markupWrap[nodeName] = svgWrap;\n  shouldWrap[nodeName] = true;\n});\n/**\r\n * Gets the markup wrap configuration for the supplied `nodeName`.\r\n *\r\n * NOTE: This lazily detects which wraps are necessary for the current browser.\r\n *\r\n * @param {string} nodeName Lowercase `nodeName`.\r\n * @return {?array} Markup wrap configuration, if applicable.\r\n */\n\nfunction getMarkupWrap(nodeName) {\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;\n\n  if (!markupWrap.hasOwnProperty(nodeName)) {\n    nodeName = '*';\n  }\n\n  if (!shouldWrap.hasOwnProperty(nodeName)) {\n    if (nodeName === '*') {\n      dummyNode.innerHTML = '<link />';\n    } else {\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';\n    }\n\n    shouldWrap[nodeName] = !dummyNode.firstChild;\n  }\n\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;\n}\n\nmodule.exports = getMarkupWrap;","map":{"version":3,"sources":["C:/Users/nvtung/Các project thực hiện/RubyGYM/client/node_modules/jsx-to-string/node_modules/fbjs/lib/getMarkupWrap.js"],"names":["ExecutionEnvironment","require","invariant","dummyNode","canUseDOM","document","createElement","shouldWrap","selectWrap","tableWrap","trWrap","svgWrap","markupWrap","svgElements","forEach","nodeName","getMarkupWrap","process","env","NODE_ENV","undefined","hasOwnProperty","innerHTML","firstChild","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule getMarkupWrap\r\n */\r\n\r\n/*eslint-disable fb-www/unsafe-html */\r\n\r\n'use strict';\r\n\r\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\r\n\r\nvar invariant = require('./invariant');\r\n\r\n/**\r\n * Dummy container used to detect which wraps are necessary.\r\n */\r\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\r\n\r\n/**\r\n * Some browsers cannot use `innerHTML` to render certain elements standalone,\r\n * so we wrap them, render the wrapped nodes, then extract the desired node.\r\n *\r\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').\r\n */\r\n\r\nvar shouldWrap = {};\r\n\r\nvar selectWrap = [1, '<select multiple=\"true\">', '</select>'];\r\nvar tableWrap = [1, '<table>', '</table>'];\r\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\r\n\r\nvar svgWrap = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\">', '</svg>'];\r\n\r\nvar markupWrap = {\r\n  '*': [1, '?<div>', '</div>'],\r\n\r\n  'area': [1, '<map>', '</map>'],\r\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\r\n  'legend': [1, '<fieldset>', '</fieldset>'],\r\n  'param': [1, '<object>', '</object>'],\r\n  'tr': [2, '<table><tbody>', '</tbody></table>'],\r\n\r\n  'optgroup': selectWrap,\r\n  'option': selectWrap,\r\n\r\n  'caption': tableWrap,\r\n  'colgroup': tableWrap,\r\n  'tbody': tableWrap,\r\n  'tfoot': tableWrap,\r\n  'thead': tableWrap,\r\n\r\n  'td': trWrap,\r\n  'th': trWrap\r\n};\r\n\r\n// Initialize the SVG elements since we know they'll always need to be wrapped\r\n// consistently. If they are created inside a <div> they will be initialized in\r\n// the wrong namespace (and will not display).\r\nvar svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];\r\nsvgElements.forEach(function (nodeName) {\r\n  markupWrap[nodeName] = svgWrap;\r\n  shouldWrap[nodeName] = true;\r\n});\r\n\r\n/**\r\n * Gets the markup wrap configuration for the supplied `nodeName`.\r\n *\r\n * NOTE: This lazily detects which wraps are necessary for the current browser.\r\n *\r\n * @param {string} nodeName Lowercase `nodeName`.\r\n * @return {?array} Markup wrap configuration, if applicable.\r\n */\r\nfunction getMarkupWrap(nodeName) {\r\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;\r\n  if (!markupWrap.hasOwnProperty(nodeName)) {\r\n    nodeName = '*';\r\n  }\r\n  if (!shouldWrap.hasOwnProperty(nodeName)) {\r\n    if (nodeName === '*') {\r\n      dummyNode.innerHTML = '<link />';\r\n    } else {\r\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';\r\n    }\r\n    shouldWrap[nodeName] = !dummyNode.firstChild;\r\n  }\r\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;\r\n}\r\n\r\nmodule.exports = getMarkupWrap;"]},"metadata":{},"sourceType":"script"}