{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport Command from './command';\n/**\n * @module core/multicommand\n */\n\n/**\n * A CKEditor command that aggregates other commands.\n *\n * This command is used to proxy multiple commands. The multi-command is enabled when\n * at least one of its registered child commands is enabled.\n * When executing a multi-command the first command that is enabled will be executed.\n *\n *\t\tconst multiCommand = new MultiCommand( editor );\n *\n *\t\tconst commandFoo = new Command( editor );\n *\t\tconst commandBar = new Command( editor );\n *\n *\t\t// Register child commands.\n *\t\tmultiCommand.registerChildCommand( commandFoo );\n *\t\tmultiCommand.registerChildCommand( commandBar );\n *\n *\t\t// Enable one of the commands.\n *\t\tcommandBar.isEnabled = true;\n *\n *\t\tmultiCommand.execute(); // Will execute commandBar.\n *\n * @extends module:core/command~Command\n */\n\nexport default class MultiCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor);\n    /**\n     * Registered child commands.\n     *\n     * @type {Array.<module:core/command~Command>}\n     * @private\n     */\n\n    this._childCommands = [];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {// Override base command refresh(): the command's state is changed when one of child commands changes states.\n  }\n  /**\n   * Executes the first of it registered child commands.\n   *\n   * @returns {*} The value returned by the {@link module:core/command~Command#execute `command.execute()`}.\n   */\n\n\n  execute() {\n    const command = this._getFirstEnabledCommand();\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return command != null && command.execute(args);\n  }\n  /**\n   * Registers a child command.\n   *\n   * @param {module:core/command~Command} command\n   */\n\n\n  registerChildCommand(command) {\n    this._childCommands.push(command); // Change multi command enabled state when one of registered commands changes state.\n\n\n    command.on('change:isEnabled', () => this._checkEnabled());\n\n    this._checkEnabled();\n  }\n  /**\n   * Checks if any of child commands is enabled.\n   *\n   * @private\n   */\n\n\n  _checkEnabled() {\n    this.isEnabled = !!this._getFirstEnabledCommand();\n  }\n  /**\n   * Returns a first enabled command or undefined if none of them is enabled.\n   *\n   * @returns {module:core/command~Command|undefined}\n   * @private\n   */\n\n\n  _getFirstEnabledCommand() {\n    return this._childCommands.find(command => command.isEnabled);\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-core/src/multicommand.js"],"names":["Command","MultiCommand","constructor","editor","_childCommands","refresh","execute","command","_getFirstEnabledCommand","args","registerChildCommand","push","on","_checkEnabled","isEnabled","find"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,WAApB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,YAAN,SAA2BD,OAA3B,CAAmC;AACjD;AACD;AACA;AACCE,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,cAAL,GAAsB,EAAtB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG,CACT;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,OAAO,GAAY;AAClB,UAAMC,OAAO,GAAG,KAAKC,uBAAL,EAAhB;;AADkB,sCAAPC,IAAO;AAAPA,MAAAA,IAAO;AAAA;;AAGlB,WAAOF,OAAO,IAAI,IAAX,IAAmBA,OAAO,CAACD,OAAR,CAAiBG,IAAjB,CAA1B;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,oBAAoB,CAAEH,OAAF,EAAY;AAC/B,SAAKH,cAAL,CAAoBO,IAApB,CAA0BJ,OAA1B,EAD+B,CAG/B;;;AACAA,IAAAA,OAAO,CAACK,EAAR,CAAY,kBAAZ,EAAgC,MAAM,KAAKC,aAAL,EAAtC;;AAEA,SAAKA,aAAL;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCA,EAAAA,aAAa,GAAG;AACf,SAAKC,SAAL,GAAiB,CAAC,CAAC,KAAKN,uBAAL,EAAnB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCA,EAAAA,uBAAuB,GAAG;AACzB,WAAO,KAAKJ,cAAL,CAAoBW,IAApB,CAA0BR,OAAO,IAAIA,OAAO,CAACO,SAA7C,CAAP;AACA;;AAjEgD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport Command from './command';\n\n/**\n * @module core/multicommand\n */\n\n/**\n * A CKEditor command that aggregates other commands.\n *\n * This command is used to proxy multiple commands. The multi-command is enabled when\n * at least one of its registered child commands is enabled.\n * When executing a multi-command the first command that is enabled will be executed.\n *\n *\t\tconst multiCommand = new MultiCommand( editor );\n *\n *\t\tconst commandFoo = new Command( editor );\n *\t\tconst commandBar = new Command( editor );\n *\n *\t\t// Register child commands.\n *\t\tmultiCommand.registerChildCommand( commandFoo );\n *\t\tmultiCommand.registerChildCommand( commandBar );\n *\n *\t\t// Enable one of the commands.\n *\t\tcommandBar.isEnabled = true;\n *\n *\t\tmultiCommand.execute(); // Will execute commandBar.\n *\n * @extends module:core/command~Command\n */\nexport default class MultiCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Registered child commands.\n\t\t *\n\t\t * @type {Array.<module:core/command~Command>}\n\t\t * @private\n\t\t */\n\t\tthis._childCommands = [];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\t// Override base command refresh(): the command's state is changed when one of child commands changes states.\n\t}\n\n\t/**\n\t * Executes the first of it registered child commands.\n\t *\n\t * @returns {*} The value returned by the {@link module:core/command~Command#execute `command.execute()`}.\n\t */\n\texecute( ...args ) {\n\t\tconst command = this._getFirstEnabledCommand();\n\n\t\treturn command != null && command.execute( args );\n\t}\n\n\t/**\n\t * Registers a child command.\n\t *\n\t * @param {module:core/command~Command} command\n\t */\n\tregisterChildCommand( command ) {\n\t\tthis._childCommands.push( command );\n\n\t\t// Change multi command enabled state when one of registered commands changes state.\n\t\tcommand.on( 'change:isEnabled', () => this._checkEnabled() );\n\n\t\tthis._checkEnabled();\n\t}\n\n\t/**\n\t * Checks if any of child commands is enabled.\n\t *\n\t * @private\n\t */\n\t_checkEnabled() {\n\t\tthis.isEnabled = !!this._getFirstEnabledCommand();\n\t}\n\n\t/**\n\t * Returns a first enabled command or undefined if none of them is enabled.\n\t *\n\t * @returns {module:core/command~Command|undefined}\n\t * @private\n\t */\n\t_getFirstEnabledCommand() {\n\t\treturn this._childCommands.find( command => command.isEnabled );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}