{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/elementreplacer\n */\n\n/**\n * Utility class allowing to hide existing HTML elements or replace them with given ones in a way that doesn't remove\n * the original elements from the DOM.\n */\nexport default class ElementReplacer {\n  constructor() {\n    /**\n     * The elements replaced by {@link #replace} and their replacements.\n     *\n     * @private\n     * @member {Array.<Object>}\n     */\n    this._replacedElements = [];\n  }\n  /**\n   * Hides the `element` and, if specified, inserts the the given element next to it.\n   *\n   * The effect of this method can be reverted by {@link #restore}.\n   *\n   * @param {HTMLElement} element The element to replace.\n   * @param {HTMLElement} [newElement] The replacement element. If not passed, then the `element` will just be hidden.\n   */\n\n\n  replace(element, newElement) {\n    this._replacedElements.push({\n      element,\n      newElement\n    });\n\n    element.style.display = 'none';\n\n    if (newElement) {\n      element.parentNode.insertBefore(newElement, element.nextSibling);\n    }\n  }\n  /**\n   * Restores what {@link #replace} did.\n   */\n\n\n  restore() {\n    this._replacedElements.forEach(_ref => {\n      let {\n        element,\n        newElement\n      } = _ref;\n      element.style.display = '';\n\n      if (newElement) {\n        newElement.remove();\n      }\n    });\n\n    this._replacedElements = [];\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-utils/src/elementreplacer.js"],"names":["ElementReplacer","constructor","_replacedElements","replace","element","newElement","push","style","display","parentNode","insertBefore","nextSibling","restore","forEach","remove"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,MAAMA,eAAN,CAAsB;AACpCC,EAAAA,WAAW,GAAG;AACb;AACF;AACA;AACA;AACA;AACA;AACE,SAAKC,iBAAL,GAAyB,EAAzB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,OAAO,CAAEC,OAAF,EAAWC,UAAX,EAAwB;AAC9B,SAAKH,iBAAL,CAAuBI,IAAvB,CAA6B;AAAEF,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAA7B;;AAEAD,IAAAA,OAAO,CAACG,KAAR,CAAcC,OAAd,GAAwB,MAAxB;;AAEA,QAAKH,UAAL,EAAkB;AACjBD,MAAAA,OAAO,CAACK,UAAR,CAAmBC,YAAnB,CAAiCL,UAAjC,EAA6CD,OAAO,CAACO,WAArD;AACA;AACD;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,SAAKV,iBAAL,CAAuBW,OAAvB,CAAgC,QAA+B;AAAA,UAA7B;AAAET,QAAAA,OAAF;AAAWC,QAAAA;AAAX,OAA6B;AAC9DD,MAAAA,OAAO,CAACG,KAAR,CAAcC,OAAd,GAAwB,EAAxB;;AAEA,UAAKH,UAAL,EAAkB;AACjBA,QAAAA,UAAU,CAACS,MAAX;AACA;AACD,KAND;;AAQA,SAAKZ,iBAAL,GAAyB,EAAzB;AACA;;AA1CmC","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/elementreplacer\n */\n\n/**\n * Utility class allowing to hide existing HTML elements or replace them with given ones in a way that doesn't remove\n * the original elements from the DOM.\n */\nexport default class ElementReplacer {\n\tconstructor() {\n\t\t/**\n\t\t * The elements replaced by {@link #replace} and their replacements.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<Object>}\n\t\t */\n\t\tthis._replacedElements = [];\n\t}\n\n\t/**\n\t * Hides the `element` and, if specified, inserts the the given element next to it.\n\t *\n\t * The effect of this method can be reverted by {@link #restore}.\n\t *\n\t * @param {HTMLElement} element The element to replace.\n\t * @param {HTMLElement} [newElement] The replacement element. If not passed, then the `element` will just be hidden.\n\t */\n\treplace( element, newElement ) {\n\t\tthis._replacedElements.push( { element, newElement } );\n\n\t\telement.style.display = 'none';\n\n\t\tif ( newElement ) {\n\t\t\telement.parentNode.insertBefore( newElement, element.nextSibling );\n\t\t}\n\t}\n\n\t/**\n\t * Restores what {@link #replace} did.\n\t */\n\trestore() {\n\t\tthis._replacedElements.forEach( ( { element, newElement } ) => {\n\t\t\telement.style.display = '';\n\n\t\t\tif ( newElement ) {\n\t\t\t\tnewElement.remove();\n\t\t\t}\n\t\t} );\n\n\t\tthis._replacedElements = [];\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}