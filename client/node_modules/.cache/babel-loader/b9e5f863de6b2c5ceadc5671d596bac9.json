{"ast":null,"code":"/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactOwner\r\n */\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n/**\r\n * ReactOwners are capable of storing references to owned components.\r\n *\r\n * All components are capable of //being// referenced by owner components, but\r\n * only ReactOwner components are capable of //referencing// owned components.\r\n * The named reference is known as a \"ref\".\r\n *\r\n * Refs are available when mounted and updated during reconciliation.\r\n *\r\n *   var MyComponent = React.createClass({\r\n *     render: function() {\r\n *       return (\r\n *         <div onClick={this.handleClick}>\r\n *           <CustomComponent ref=\"custom\" />\r\n *         </div>\r\n *       );\r\n *     },\r\n *     handleClick: function() {\r\n *       this.refs.custom.handleClick();\r\n *     },\r\n *     componentDidMount: function() {\r\n *       this.refs.custom.initialize();\r\n *     }\r\n *   });\r\n *\r\n * Refs should rarely be used. When refs are used, they should only be done to\r\n * control data that is not handled by React's data flow.\r\n *\r\n * @class ReactOwner\r\n */\n\n\nvar ReactOwner = {\n  /**\r\n   * @param {?object} object\r\n   * @return {boolean} True if `object` is a valid owner.\r\n   * @final\r\n   */\n  isValidOwner: function (object) {\n    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');\n  },\n\n  /**\r\n   * Adds a component by ref to an owner component.\r\n   *\r\n   * @param {ReactComponent} component Component to reference.\r\n   * @param {string} ref Name by which to refer to the component.\r\n   * @param {ReactOwner} owner Component on which to record the ref.\r\n   * @final\r\n   * @internal\r\n   */\n  addComponentAsRefTo: function (component, ref, owner) {\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;\n    owner.attachRef(ref, component);\n  },\n\n  /**\r\n   * Removes a component by ref from an owner component.\r\n   *\r\n   * @param {ReactComponent} component Component to dereference.\r\n   * @param {string} ref Name of the ref to remove.\r\n   * @param {ReactOwner} owner Component on which the ref is recorded.\r\n   * @final\r\n   * @internal\r\n   */\n  removeComponentAsRefFrom: function (component, ref, owner) {\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined; // Check that `component` is still the current ref because we do not want to\n    // detach the ref if another component stole it.\n\n    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {\n      owner.detachRef(ref);\n    }\n  }\n};\nmodule.exports = ReactOwner;","map":{"version":3,"sources":["F:/Administrator/Documents/Code for fun/Web/Project Introduction to SE/RubyGYM/client/node_modules/jsx-to-string/node_modules/react/lib/ReactOwner.js"],"names":["invariant","require","ReactOwner","isValidOwner","object","attachRef","detachRef","addComponentAsRefTo","component","ref","owner","process","env","NODE_ENV","undefined","removeComponentAsRefFrom","getPublicInstance","refs","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,UAAU,GAAG;AAEf;AACF;AACA;AACA;AACA;AACEC,EAAAA,YAAY,EAAE,UAAUC,MAAV,EAAkB;AAC9B,WAAO,CAAC,EAAEA,MAAM,IAAI,OAAOA,MAAM,CAACC,SAAd,KAA4B,UAAtC,IAAoD,OAAOD,MAAM,CAACE,SAAd,KAA4B,UAAlF,CAAR;AACD,GATc;;AAWf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,mBAAmB,EAAE,UAAUC,SAAV,EAAqBC,GAArB,EAA0BC,KAA1B,EAAiC;AACpD,KAACR,UAAU,CAACC,YAAX,CAAwBO,KAAxB,CAAD,GAAkCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCb,SAAS,CAAC,KAAD,EAAQ,0EAA0E,4EAA1E,GAAyJ,+DAAzJ,GAA2N,sDAAnO,CAAjD,GAA8UA,SAAS,CAAC,KAAD,CAAzX,GAAmYc,SAAnY;AACAJ,IAAAA,KAAK,CAACL,SAAN,CAAgBI,GAAhB,EAAqBD,SAArB;AACD,GAvBc;;AAyBf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEO,EAAAA,wBAAwB,EAAE,UAAUP,SAAV,EAAqBC,GAArB,EAA0BC,KAA1B,EAAiC;AACzD,KAACR,UAAU,CAACC,YAAX,CAAwBO,KAAxB,CAAD,GAAkCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCb,SAAS,CAAC,KAAD,EAAQ,+EAA+E,8EAA/E,GAAgK,+DAAhK,GAAkO,sDAA1O,CAAjD,GAAqVA,SAAS,CAAC,KAAD,CAAhY,GAA0Yc,SAA1Y,CADyD,CAEzD;AACA;;AACA,QAAIJ,KAAK,CAACM,iBAAN,GAA0BC,IAA1B,CAA+BR,GAA/B,MAAwCD,SAAS,CAACQ,iBAAV,EAA5C,EAA2E;AACzEN,MAAAA,KAAK,CAACJ,SAAN,CAAgBG,GAAhB;AACD;AACF;AAzCc,CAAjB;AA6CAS,MAAM,CAACC,OAAP,GAAiBjB,UAAjB","sourcesContent":["/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactOwner\r\n */\r\n\r\n'use strict';\r\n\r\nvar invariant = require('fbjs/lib/invariant');\r\n\r\n/**\r\n * ReactOwners are capable of storing references to owned components.\r\n *\r\n * All components are capable of //being// referenced by owner components, but\r\n * only ReactOwner components are capable of //referencing// owned components.\r\n * The named reference is known as a \"ref\".\r\n *\r\n * Refs are available when mounted and updated during reconciliation.\r\n *\r\n *   var MyComponent = React.createClass({\r\n *     render: function() {\r\n *       return (\r\n *         <div onClick={this.handleClick}>\r\n *           <CustomComponent ref=\"custom\" />\r\n *         </div>\r\n *       );\r\n *     },\r\n *     handleClick: function() {\r\n *       this.refs.custom.handleClick();\r\n *     },\r\n *     componentDidMount: function() {\r\n *       this.refs.custom.initialize();\r\n *     }\r\n *   });\r\n *\r\n * Refs should rarely be used. When refs are used, they should only be done to\r\n * control data that is not handled by React's data flow.\r\n *\r\n * @class ReactOwner\r\n */\r\nvar ReactOwner = {\r\n\r\n  /**\r\n   * @param {?object} object\r\n   * @return {boolean} True if `object` is a valid owner.\r\n   * @final\r\n   */\r\n  isValidOwner: function (object) {\r\n    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');\r\n  },\r\n\r\n  /**\r\n   * Adds a component by ref to an owner component.\r\n   *\r\n   * @param {ReactComponent} component Component to reference.\r\n   * @param {string} ref Name by which to refer to the component.\r\n   * @param {ReactOwner} owner Component on which to record the ref.\r\n   * @final\r\n   * @internal\r\n   */\r\n  addComponentAsRefTo: function (component, ref, owner) {\r\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;\r\n    owner.attachRef(ref, component);\r\n  },\r\n\r\n  /**\r\n   * Removes a component by ref from an owner component.\r\n   *\r\n   * @param {ReactComponent} component Component to dereference.\r\n   * @param {string} ref Name of the ref to remove.\r\n   * @param {ReactOwner} owner Component on which the ref is recorded.\r\n   * @final\r\n   * @internal\r\n   */\r\n  removeComponentAsRefFrom: function (component, ref, owner) {\r\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;\r\n    // Check that `component` is still the current ref because we do not want to\r\n    // detach the ref if another component stole it.\r\n    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {\r\n      owner.detachRef(ref);\r\n    }\r\n  }\r\n\r\n};\r\n\r\nmodule.exports = ReactOwner;"]},"metadata":{},"sourceType":"script"}