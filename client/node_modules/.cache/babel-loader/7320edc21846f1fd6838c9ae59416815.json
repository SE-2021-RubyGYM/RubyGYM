{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/rootattributeoperation\n */\nimport Operation from './operation';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Operation to change root element's attribute. Using this class you can add, remove or change value of the attribute.\n *\n * This operation is needed, because root elements can't be changed through\n * @link module:engine/model/operation/attributeoperation~AttributeOperation}.\n * It is because {@link module:engine/model/operation/attributeoperation~AttributeOperation}\n * requires a range to change and root element can't\n * be a part of range because every {@link module:engine/model/position~Position} has to be inside a root.\n * {@link module:engine/model/position~Position} can't be created before a root element.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class RootAttributeOperation extends Operation {\n  /**\n   * Creates an operation that changes, removes or adds attributes on root element.\n   *\n   * @see module:engine/model/operation/attributeoperation~AttributeOperation\n   * @param {module:engine/model/rootelement~RootElement} root Root element to change.\n   * @param {String} key Key of an attribute to change or remove.\n   * @param {*} oldValue Old value of the attribute with given key or `null` if adding a new attribute.\n   * @param {*} newValue New value to set for the attribute. If `null`, then the operation just removes the attribute.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(root, key, oldValue, newValue, baseVersion) {\n    super(baseVersion);\n    /**\n     * Root element to change.\n     *\n     * @readonly\n     * @member {module:engine/model/rootelement~RootElement}\n     */\n\n    this.root = root;\n    /**\n     * Key of an attribute to change or remove.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.key = key;\n    /**\n     * Old value of the attribute with given key or `null` if adding a new attribute.\n     *\n     * @readonly\n     * @member {*}\n     */\n\n    this.oldValue = oldValue;\n    /**\n     * New value to set for the attribute. If `null`, then the operation just removes the attribute.\n     *\n     * @readonly\n     * @member {*}\n     */\n\n    this.newValue = newValue;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    if (this.oldValue === null) {\n      return 'addRootAttribute';\n    } else if (this.newValue === null) {\n      return 'removeRootAttribute';\n    } else {\n      return 'changeRootAttribute';\n    }\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    return new RootAttributeOperation(this.root, this.key, this.oldValue, this.newValue, this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n   */\n\n\n  getReversed() {\n    return new RootAttributeOperation(this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _validate() {\n    if (this.root != this.root.root || this.root.is('documentFragment')) {\n      /**\n       * The element to change is not a root element.\n       *\n       * @error rootattribute-operation-not-a-root\n       * @param {module:engine/model/rootelement~RootElement} root\n       * @param {String} key\n       * @param {*} value\n       */\n      throw new CKEditorError('rootattribute-operation-not-a-root', this, {\n        root: this.root,\n        key: this.key\n      });\n    }\n\n    if (this.oldValue !== null && this.root.getAttribute(this.key) !== this.oldValue) {\n      /**\n       * The attribute which should be removed does not exists for the given node.\n       *\n       * @error rootattribute-operation-wrong-old-value\n       * @param {module:engine/model/rootelement~RootElement} root\n       * @param {String} key\n       * @param {*} value\n       */\n      throw new CKEditorError('rootattribute-operation-wrong-old-value', this, {\n        root: this.root,\n        key: this.key\n      });\n    }\n\n    if (this.oldValue === null && this.newValue !== null && this.root.hasAttribute(this.key)) {\n      /**\n       * The attribute with given key already exists for the given node.\n       *\n       * @error rootattribute-operation-attribute-exists\n       * @param {module:engine/model/rootelement~RootElement} root\n       * @param {String} key\n       */\n      throw new CKEditorError('rootattribute-operation-attribute-exists', this, {\n        root: this.root,\n        key: this.key\n      });\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    if (this.newValue !== null) {\n      this.root._setAttribute(this.key, this.newValue);\n    } else {\n      this.root._removeAttribute(this.key);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.root = this.root.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'RootAttributeOperation';\n  }\n  /**\n   * Creates RootAttributeOperation object from deserilized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n   */\n\n\n  static fromJSON(json, document) {\n    if (!document.getRoot(json.root)) {\n      /**\n       * Cannot create RootAttributeOperation for document. Root with specified name does not exist.\n       *\n       * @error rootattribute-operation-fromjson-no-root\n       * @param {String} rootName\n       */\n      throw new CKEditorError('rootattribute-operation-fromjson-no-root', this, {\n        rootName: json.root\n      });\n    }\n\n    return new RootAttributeOperation(document.getRoot(json.root), json.key, json.oldValue, json.newValue, json.baseVersion);\n  } // @if CK_DEBUG_ENGINE // toString() {\n  // @if CK_DEBUG_ENGINE // \treturn `RootAttributeOperation( ${ this.baseVersion } ): ` +\n  // @if CK_DEBUG_ENGINE //\t\t`\"${ this.key }\": ${ JSON.stringify( this.oldValue ) }` +\n  // @if CK_DEBUG_ENGINE //\t\t` -> ${ JSON.stringify( this.newValue ) }, ${ this.root.rootName }`;\n  // @if CK_DEBUG_ENGINE // }\n\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/rootattributeoperation.js"],"names":["Operation","CKEditorError","RootAttributeOperation","constructor","root","key","oldValue","newValue","baseVersion","type","clone","getReversed","_validate","is","getAttribute","hasAttribute","_execute","_setAttribute","_removeAttribute","toJSON","json","className","fromJSON","document","getRoot","rootName"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/rootattributeoperation\n */\n\nimport Operation from './operation';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to change root element's attribute. Using this class you can add, remove or change value of the attribute.\n *\n * This operation is needed, because root elements can't be changed through\n * @link module:engine/model/operation/attributeoperation~AttributeOperation}.\n * It is because {@link module:engine/model/operation/attributeoperation~AttributeOperation}\n * requires a range to change and root element can't\n * be a part of range because every {@link module:engine/model/position~Position} has to be inside a root.\n * {@link module:engine/model/position~Position} can't be created before a root element.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RootAttributeOperation extends Operation {\n\t/**\n\t * Creates an operation that changes, removes or adds attributes on root element.\n\t *\n\t * @see module:engine/model/operation/attributeoperation~AttributeOperation\n\t * @param {module:engine/model/rootelement~RootElement} root Root element to change.\n\t * @param {String} key Key of an attribute to change or remove.\n\t * @param {*} oldValue Old value of the attribute with given key or `null` if adding a new attribute.\n\t * @param {*} newValue New value to set for the attribute. If `null`, then the operation just removes the attribute.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( root, key, oldValue, newValue, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Root element to change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/rootelement~RootElement}\n\t\t */\n\t\tthis.root = root;\n\n\t\t/**\n\t\t * Key of an attribute to change or remove.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/**\n\t\t * Old value of the attribute with given key or `null` if adding a new attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.oldValue = oldValue;\n\n\t\t/**\n\t\t * New value to set for the attribute. If `null`, then the operation just removes the attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.newValue = newValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.oldValue === null ) {\n\t\t\treturn 'addRootAttribute';\n\t\t} else if ( this.newValue === null ) {\n\t\t\treturn 'removeRootAttribute';\n\t\t} else {\n\t\t\treturn 'changeRootAttribute';\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new RootAttributeOperation( this.root, this.key, this.oldValue, this.newValue, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n\t */\n\tgetReversed() {\n\t\treturn new RootAttributeOperation( this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( this.root != this.root.root || this.root.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * The element to change is not a root element.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-not-a-root\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t * @param {*} value\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-not-a-root',\n\t\t\t\tthis,\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\n\t\tif ( this.oldValue !== null && this.root.getAttribute( this.key ) !== this.oldValue ) {\n\t\t\t/**\n\t\t\t * The attribute which should be removed does not exists for the given node.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-wrong-old-value\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t * @param {*} value\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-wrong-old-value',\n\t\t\t\tthis,\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\n\t\tif ( this.oldValue === null && this.newValue !== null && this.root.hasAttribute( this.key ) ) {\n\t\t\t/**\n\t\t\t * The attribute with given key already exists for the given node.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-attribute-exists\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-attribute-exists',\n\t\t\t\tthis,\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tif ( this.newValue !== null ) {\n\t\t\tthis.root._setAttribute( this.key, this.newValue );\n\t\t} else {\n\t\t\tthis.root._removeAttribute( this.key );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.root = this.root.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'RootAttributeOperation';\n\t}\n\n\t/**\n\t * Creates RootAttributeOperation object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tif ( !document.getRoot( json.root ) ) {\n\t\t\t/**\n\t\t\t * Cannot create RootAttributeOperation for document. Root with specified name does not exist.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-fromjson-no-root\n\t\t\t * @param {String} rootName\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'rootattribute-operation-fromjson-no-root', this, { rootName: json.root } );\n\t\t}\n\n\t\treturn new RootAttributeOperation( document.getRoot( json.root ), json.key, json.oldValue, json.newValue, json.baseVersion );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `RootAttributeOperation( ${ this.baseVersion } ): ` +\n\t// @if CK_DEBUG_ENGINE //\t\t`\"${ this.key }\": ${ JSON.stringify( this.oldValue ) }` +\n\t// @if CK_DEBUG_ENGINE //\t\t` -> ${ JSON.stringify( this.newValue ) }, ${ this.root.rootName }`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]},"metadata":{},"sourceType":"module"}