{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.registerTheme = registerTheme;\n\nvar _dynamicCSS = require(\"rc-util/lib/Dom/dynamicCSS\");\n\nvar _tinycolor = require(\"@ctrl/tinycolor\");\n\nvar _colors = require(\"@ant-design/colors\");\n/* eslint-disable import/prefer-default-export, prefer-destructuring */\n\n\nvar dynamicStyleMark = \"-ant-\".concat(Date.now(), \"-\").concat(Math.random());\n\nfunction registerTheme(globalPrefixCls, theme) {\n  var variables = {};\n\n  var formatColor = function formatColor(color, updater) {\n    var clone = color.clone();\n    clone = (updater === null || updater === void 0 ? void 0 : updater(clone)) || clone;\n    return clone.toRgbString();\n  };\n\n  var fillColor = function fillColor(colorVal, type) {\n    var baseColor = new _tinycolor.TinyColor(colorVal);\n    var colorPalettes = (0, _colors.generate)(baseColor.toRgbString());\n    variables[\"\".concat(type, \"-color\")] = formatColor(baseColor);\n    variables[\"\".concat(type, \"-color-disabled\")] = colorPalettes[1];\n    variables[\"\".concat(type, \"-color-hover\")] = colorPalettes[4];\n    variables[\"\".concat(type, \"-color-active\")] = colorPalettes[7];\n    variables[\"\".concat(type, \"-color-outline\")] = baseColor.clone().setAlpha(0.2).toRgbString();\n    variables[\"\".concat(type, \"-color-deprecated-bg\")] = colorPalettes[1];\n    variables[\"\".concat(type, \"-color-deprecated-border\")] = colorPalettes[3];\n  }; // ================ Primary Color ================\n\n\n  if (theme.primaryColor) {\n    fillColor(theme.primaryColor, 'primary');\n    var primaryColor = new _tinycolor.TinyColor(theme.primaryColor);\n    var primaryColors = (0, _colors.generate)(primaryColor.toRgbString()); // Legacy - We should use semantic naming standard\n\n    primaryColors.forEach(function (color, index) {\n      variables[\"primary-\".concat(index + 1)] = color;\n    }); // Deprecated\n\n    variables['primary-color-deprecated-l-35'] = formatColor(primaryColor, function (c) {\n      return c.lighten(35);\n    });\n    variables['primary-color-deprecated-l-20'] = formatColor(primaryColor, function (c) {\n      return c.lighten(20);\n    });\n    variables['primary-color-deprecated-t-20'] = formatColor(primaryColor, function (c) {\n      return c.tint(20);\n    });\n    variables['primary-color-deprecated-t-50'] = formatColor(primaryColor, function (c) {\n      return c.tint(50);\n    });\n    variables['primary-color-deprecated-f-12'] = formatColor(primaryColor, function (c) {\n      return c.setAlpha(c.getAlpha() * 0.12);\n    });\n    var primaryActiveColor = new _tinycolor.TinyColor(primaryColors[0]);\n    variables['primary-color-active-deprecated-f-30'] = formatColor(primaryActiveColor, function (c) {\n      return c.setAlpha(c.getAlpha() * 0.3);\n    });\n    variables['primary-color-active-deprecated-d-02'] = formatColor(primaryActiveColor, function (c) {\n      return c.darken(2);\n    });\n  } // ================ Success Color ================\n\n\n  if (theme.successColor) {\n    fillColor(theme.successColor, 'success');\n  } // ================ Warning Color ================\n\n\n  if (theme.warningColor) {\n    fillColor(theme.warningColor, 'warning');\n  } // ================= Error Color =================\n\n\n  if (theme.errorColor) {\n    fillColor(theme.errorColor, 'error');\n  } // ================= Info Color ==================\n\n\n  if (theme.infoColor) {\n    fillColor(theme.infoColor, 'info');\n  } // Convert to css variables\n\n\n  var cssList = Object.keys(variables).map(function (key) {\n    return \"--\".concat(globalPrefixCls, \"-\").concat(key, \": \").concat(variables[key], \";\");\n  });\n  (0, _dynamicCSS.updateCSS)(\"\\n  :root {\\n    \".concat(cssList.join('\\n'), \"\\n  }\\n  \"), \"\".concat(dynamicStyleMark, \"-dynamic-theme\"));\n}","map":{"version":3,"sources":["D:/4_PROJECTS/RubyGYM/client/node_modules/antd/lib/config-provider/cssVariables.js"],"names":["Object","defineProperty","exports","value","registerTheme","_dynamicCSS","require","_tinycolor","_colors","dynamicStyleMark","concat","Date","now","Math","random","globalPrefixCls","theme","variables","formatColor","color","updater","clone","toRgbString","fillColor","colorVal","type","baseColor","TinyColor","colorPalettes","generate","setAlpha","primaryColor","primaryColors","forEach","index","c","lighten","tint","getAlpha","primaryActiveColor","darken","successColor","warningColor","errorColor","infoColor","cssList","keys","map","key","updateCSS","join"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.registerTheme = registerTheme;\r\n\r\nvar _dynamicCSS = require(\"rc-util/lib/Dom/dynamicCSS\");\r\n\r\nvar _tinycolor = require(\"@ctrl/tinycolor\");\r\n\r\nvar _colors = require(\"@ant-design/colors\");\r\n\r\n/* eslint-disable import/prefer-default-export, prefer-destructuring */\r\nvar dynamicStyleMark = \"-ant-\".concat(Date.now(), \"-\").concat(Math.random());\r\n\r\nfunction registerTheme(globalPrefixCls, theme) {\r\n  var variables = {};\r\n\r\n  var formatColor = function formatColor(color, updater) {\r\n    var clone = color.clone();\r\n    clone = (updater === null || updater === void 0 ? void 0 : updater(clone)) || clone;\r\n    return clone.toRgbString();\r\n  };\r\n\r\n  var fillColor = function fillColor(colorVal, type) {\r\n    var baseColor = new _tinycolor.TinyColor(colorVal);\r\n    var colorPalettes = (0, _colors.generate)(baseColor.toRgbString());\r\n    variables[\"\".concat(type, \"-color\")] = formatColor(baseColor);\r\n    variables[\"\".concat(type, \"-color-disabled\")] = colorPalettes[1];\r\n    variables[\"\".concat(type, \"-color-hover\")] = colorPalettes[4];\r\n    variables[\"\".concat(type, \"-color-active\")] = colorPalettes[7];\r\n    variables[\"\".concat(type, \"-color-outline\")] = baseColor.clone().setAlpha(0.2).toRgbString();\r\n    variables[\"\".concat(type, \"-color-deprecated-bg\")] = colorPalettes[1];\r\n    variables[\"\".concat(type, \"-color-deprecated-border\")] = colorPalettes[3];\r\n  }; // ================ Primary Color ================\r\n\r\n\r\n  if (theme.primaryColor) {\r\n    fillColor(theme.primaryColor, 'primary');\r\n    var primaryColor = new _tinycolor.TinyColor(theme.primaryColor);\r\n    var primaryColors = (0, _colors.generate)(primaryColor.toRgbString()); // Legacy - We should use semantic naming standard\r\n\r\n    primaryColors.forEach(function (color, index) {\r\n      variables[\"primary-\".concat(index + 1)] = color;\r\n    }); // Deprecated\r\n\r\n    variables['primary-color-deprecated-l-35'] = formatColor(primaryColor, function (c) {\r\n      return c.lighten(35);\r\n    });\r\n    variables['primary-color-deprecated-l-20'] = formatColor(primaryColor, function (c) {\r\n      return c.lighten(20);\r\n    });\r\n    variables['primary-color-deprecated-t-20'] = formatColor(primaryColor, function (c) {\r\n      return c.tint(20);\r\n    });\r\n    variables['primary-color-deprecated-t-50'] = formatColor(primaryColor, function (c) {\r\n      return c.tint(50);\r\n    });\r\n    variables['primary-color-deprecated-f-12'] = formatColor(primaryColor, function (c) {\r\n      return c.setAlpha(c.getAlpha() * 0.12);\r\n    });\r\n    var primaryActiveColor = new _tinycolor.TinyColor(primaryColors[0]);\r\n    variables['primary-color-active-deprecated-f-30'] = formatColor(primaryActiveColor, function (c) {\r\n      return c.setAlpha(c.getAlpha() * 0.3);\r\n    });\r\n    variables['primary-color-active-deprecated-d-02'] = formatColor(primaryActiveColor, function (c) {\r\n      return c.darken(2);\r\n    });\r\n  } // ================ Success Color ================\r\n\r\n\r\n  if (theme.successColor) {\r\n    fillColor(theme.successColor, 'success');\r\n  } // ================ Warning Color ================\r\n\r\n\r\n  if (theme.warningColor) {\r\n    fillColor(theme.warningColor, 'warning');\r\n  } // ================= Error Color =================\r\n\r\n\r\n  if (theme.errorColor) {\r\n    fillColor(theme.errorColor, 'error');\r\n  } // ================= Info Color ==================\r\n\r\n\r\n  if (theme.infoColor) {\r\n    fillColor(theme.infoColor, 'info');\r\n  } // Convert to css variables\r\n\r\n\r\n  var cssList = Object.keys(variables).map(function (key) {\r\n    return \"--\".concat(globalPrefixCls, \"-\").concat(key, \": \").concat(variables[key], \";\");\r\n  });\r\n  (0, _dynamicCSS.updateCSS)(\"\\n  :root {\\n    \".concat(cssList.join('\\n'), \"\\n  }\\n  \"), \"\".concat(dynamicStyleMark, \"-dynamic-theme\"));\r\n}"]},"metadata":{},"sourceType":"script"}