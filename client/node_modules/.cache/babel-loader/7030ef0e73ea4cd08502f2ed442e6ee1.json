{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/detachoperation\n */\nimport Operation from './operation';\nimport Range from '../range';\nimport { _remove } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror'; // @if CK_DEBUG_ENGINE // const ModelRange = require( '../range' ).default;\n\n/**\n * Operation to permanently remove node from detached root.\n * Note this operation is only a local operation and won't be send to the other clients.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class DetachOperation extends Operation {\n  /**\n   * Creates an insert operation.\n   *\n   * @param {module:engine/model/position~Position} sourcePosition\n   * Position before the first {@link module:engine/model/item~Item model item} to move.\n   * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n   * `sourcePosition` with offset shifted by `howMany`.\n   */\n  constructor(sourcePosition, howMany) {\n    super(null);\n    /**\n     * Position before the first {@link module:engine/model/item~Item model item} to detach.\n     *\n     * @member {module:engine/model/position~Position} #sourcePosition\n     */\n\n    this.sourcePosition = sourcePosition.clone();\n    /**\n     * Offset size of moved range.\n     *\n     * @member {Number} #howMany\n     */\n\n    this.howMany = howMany;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    return 'detach';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.sourcePosition = this.sourcePosition.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _validate() {\n    if (this.sourcePosition.root.document) {\n      /**\n       * Cannot detach document node.\n       *\n       * @error detach-operation-on-document-node\n       */\n      throw new CKEditorError('detach-operation-on-document-node', this);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    _remove(Range._createFromPositionAndShift(this.sourcePosition, this.howMany));\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'DetachOperation';\n  } // @if CK_DEBUG_ENGINE // toString() {\n  // @if CK_DEBUG_ENGINE // const range = ModelRange._createFromPositionAndShift( this.sourcePosition, this.howMany );\n  // @if CK_DEBUG_ENGINE //\tconst nodes = Array.from( range.getItems() );\n  // @if CK_DEBUG_ENGINE //\tconst nodeString = nodes.length > 1 ? `[ ${ nodes.length } ]` : nodes[ 0 ];\n  // @if CK_DEBUG_ENGINE //\treturn `DetachOperation( ${ this.baseVersion } ): ${ nodeString } -> ${ range }`;\n  // @if CK_DEBUG_ENGINE // }\n\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/detachoperation.js"],"names":["Operation","Range","_remove","CKEditorError","DetachOperation","constructor","sourcePosition","howMany","clone","type","toJSON","json","_validate","root","document","_execute","_createFromPositionAndShift","className"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAOC,aAAP,MAA0B,6CAA1B,C,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,eAAN,SAA8BJ,SAA9B,CAAwC;AACtD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACCK,EAAAA,WAAW,CAAEC,cAAF,EAAkBC,OAAlB,EAA4B;AACtC,UAAO,IAAP;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKD,cAAL,GAAsBA,cAAc,CAACE,KAAf,EAAtB;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKD,OAAL,GAAeA,OAAf;AACA;AAED;AACD;AACA;;;AACS,MAAJE,IAAI,GAAG;AACV,WAAO,QAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,MAAM,GAAG;AACR,UAAMC,IAAI,GAAG,MAAMD,MAAN,EAAb;AAEAC,IAAAA,IAAI,CAACL,cAAL,GAAsB,KAAKA,cAAL,CAAoBI,MAApB,EAAtB;AAEA,WAAOC,IAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,SAAS,GAAG;AACX,QAAK,KAAKN,cAAL,CAAoBO,IAApB,CAAyBC,QAA9B,EAAyC;AACxC;AACH;AACA;AACA;AACA;AACG,YAAM,IAAIX,aAAJ,CAAmB,mCAAnB,EAAwD,IAAxD,CAAN;AACA;AACD;AAED;AACD;AACA;;;AACCY,EAAAA,QAAQ,GAAG;AACVb,IAAAA,OAAO,CAAED,KAAK,CAACe,2BAAN,CAAmC,KAAKV,cAAxC,EAAwD,KAAKC,OAA7D,CAAF,CAAP;AACA;AAED;AACD;AACA;;;AACqB,aAATU,SAAS,GAAG;AACtB,WAAO,iBAAP;AACA,GAvEqD,CAyEtD;AACA;AACA;AACA;AAEA;AACA;;;AA/EsD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/detachoperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\nimport { _remove } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n// @if CK_DEBUG_ENGINE // const ModelRange = require( '../range' ).default;\n\n/**\n * Operation to permanently remove node from detached root.\n * Note this operation is only a local operation and won't be send to the other clients.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class DetachOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition\n\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n\t * `sourcePosition` with offset shifted by `howMany`.\n\t */\n\tconstructor( sourcePosition, howMany ) {\n\t\tsuper( null );\n\n\t\t/**\n\t\t * Position before the first {@link module:engine/model/item~Item model item} to detach.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} #sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\n\t\t/**\n\t\t * Offset size of moved range.\n\t\t *\n\t\t * @member {Number} #howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'detach';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = this.sourcePosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( this.sourcePosition.root.document ) {\n\t\t\t/**\n\t\t\t * Cannot detach document node.\n\t\t\t *\n\t\t\t * @error detach-operation-on-document-node\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'detach-operation-on-document-node', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t_remove( Range._createFromPositionAndShift( this.sourcePosition, this.howMany ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'DetachOperation';\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // const range = ModelRange._createFromPositionAndShift( this.sourcePosition, this.howMany );\n\t// @if CK_DEBUG_ENGINE //\tconst nodes = Array.from( range.getItems() );\n\t// @if CK_DEBUG_ENGINE //\tconst nodeString = nodes.length > 1 ? `[ ${ nodes.length } ]` : nodes[ 0 ];\n\n\t// @if CK_DEBUG_ENGINE //\treturn `DetachOperation( ${ this.baseVersion } ): ${ nodeString } -> ${ range }`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]},"metadata":{},"sourceType":"module"}