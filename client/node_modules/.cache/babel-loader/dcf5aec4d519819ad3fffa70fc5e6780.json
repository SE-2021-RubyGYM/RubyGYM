{"ast":null,"code":"import { extend, isNullOrUndefined } from './util';\nimport { defaultCulture } from './internationalization';\n/**\r\n * L10n modules provides localized text for different culture.\r\n * ```typescript\r\n * import {setCulture} from '@syncfusion/ts-base-library';\r\n * //load global locale object common for all components.\r\n * L10n.load({\r\n *    'fr-BE': {\r\n *       'button': {\r\n *            'check': 'vérifié'\r\n *        }\r\n *    }\r\n * });\r\n * //set globale default locale culture.\r\n * setCulture('fr-BE');\r\n * let instance: L10n = new L10n('button', {\r\n *    check: 'checked'\r\n * });\r\n * //Get locale text for current property.\r\n * instance.getConstant('check');\r\n * //Change locale culture in a component.\r\n * instance.setLocale('en-US');\r\n * ```\r\n */\n\nvar L10n =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param {string} controlName ?\r\n   * @param {Object} localeStrings ?\r\n   * @param {string} locale ?\r\n   */\n  function L10n(controlName, localeStrings, locale) {\n    this.controlName = controlName;\n    this.localeStrings = localeStrings;\n    this.setLocale(locale || defaultCulture);\n  }\n  /**\r\n   * Sets the locale text\r\n   *\r\n   * @param {string} locale ?\r\n   * @returns {void} ?\r\n   */\n\n\n  L10n.prototype.setLocale = function (locale) {\n    var intLocale = this.intGetControlConstant(L10n.locale, locale);\n    this.currentLocale = intLocale || this.localeStrings;\n  };\n  /**\r\n   * Sets the global locale for all components.\r\n   *\r\n   * @param {Object} localeObject - specifies the localeObject to be set as global locale.\r\n   * @returns {void} ?\r\n   */\n\n\n  L10n.load = function (localeObject) {\n    this.locale = extend(this.locale, localeObject, {}, true);\n  };\n  /**\r\n   * Returns current locale text for the property based on the culture name and control name.\r\n   *\r\n   * @param {string} prop - specifies the property for which localize text to be returned.\r\n   * @returns {string} ?\r\n   */\n\n\n  L10n.prototype.getConstant = function (prop) {\n    // Removed conditional operator because this method does not return correct value when passing 0 as value in localization\n    if (!isNullOrUndefined(this.currentLocale[prop])) {\n      return this.currentLocale[prop];\n    } else {\n      return this.localeStrings[prop] || '';\n    }\n  };\n  /**\r\n   * Returns the control constant object for current object and the locale specified.\r\n   *\r\n   * @param {Object} curObject ?\r\n   * @param {string} locale ?\r\n   * @returns {Object} ?\r\n   */\n\n\n  L10n.prototype.intGetControlConstant = function (curObject, locale) {\n    if (curObject[locale]) {\n      return curObject[locale][this.controlName];\n    }\n\n    return null;\n  };\n\n  L10n.locale = {};\n  return L10n;\n}();\n\nexport { L10n };","map":{"version":3,"sources":["C:/Users/nvtung/Các project thực hiện/CNPM/RubyGYM/client/node_modules/@syncfusion/ej2-base/src/l10n.js"],"names":["extend","isNullOrUndefined","defaultCulture","L10n","controlName","localeStrings","locale","setLocale","prototype","intLocale","intGetControlConstant","currentLocale","load","localeObject","getConstant","prop","curObject"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,iBAAjB,QAA0C,QAA1C;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,IAAI;AAAG;AAAe,YAAY;AAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,WAASA,IAAT,CAAcC,WAAd,EAA2BC,aAA3B,EAA0CC,MAA1C,EAAkD;AAC9C,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKE,SAAL,CAAeD,MAAM,IAAIJ,cAAzB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,IAAI,CAACK,SAAL,CAAeD,SAAf,GAA2B,UAAUD,MAAV,EAAkB;AACzC,QAAIG,SAAS,GAAG,KAAKC,qBAAL,CAA2BP,IAAI,CAACG,MAAhC,EAAwCA,MAAxC,CAAhB;AACA,SAAKK,aAAL,GAAqBF,SAAS,IAAI,KAAKJ,aAAvC;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,IAAI,CAACS,IAAL,GAAY,UAAUC,YAAV,EAAwB;AAChC,SAAKP,MAAL,GAAcN,MAAM,CAAC,KAAKM,MAAN,EAAcO,YAAd,EAA4B,EAA5B,EAAgC,IAAhC,CAApB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIV,EAAAA,IAAI,CAACK,SAAL,CAAeM,WAAf,GAA6B,UAAUC,IAAV,EAAgB;AACzC;AACA,QAAI,CAACd,iBAAiB,CAAC,KAAKU,aAAL,CAAmBI,IAAnB,CAAD,CAAtB,EAAkD;AAC9C,aAAO,KAAKJ,aAAL,CAAmBI,IAAnB,CAAP;AACH,KAFD,MAGK;AACD,aAAO,KAAKV,aAAL,CAAmBU,IAAnB,KAA4B,EAAnC;AACH;AACJ,GARD;AASA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIZ,EAAAA,IAAI,CAACK,SAAL,CAAeE,qBAAf,GAAuC,UAAUM,SAAV,EAAqBV,MAArB,EAA6B;AAChE,QAAKU,SAAD,CAAYV,MAAZ,CAAJ,EAAyB;AACrB,aAAQU,SAAD,CAAYV,MAAZ,EAAoB,KAAKF,WAAzB,CAAP;AACH;;AACD,WAAO,IAAP;AACH,GALD;;AAMAD,EAAAA,IAAI,CAACG,MAAL,GAAc,EAAd;AACA,SAAOH,IAAP;AACH,CA9DyB,EAA1B;;AA+DA,SAASA,IAAT","sourcesContent":["import { extend, isNullOrUndefined } from './util';\r\nimport { defaultCulture } from './internationalization';\r\n/**\r\n * L10n modules provides localized text for different culture.\r\n * ```typescript\r\n * import {setCulture} from '@syncfusion/ts-base-library';\r\n * //load global locale object common for all components.\r\n * L10n.load({\r\n *    'fr-BE': {\r\n *       'button': {\r\n *            'check': 'vérifié'\r\n *        }\r\n *    }\r\n * });\r\n * //set globale default locale culture.\r\n * setCulture('fr-BE');\r\n * let instance: L10n = new L10n('button', {\r\n *    check: 'checked'\r\n * });\r\n * //Get locale text for current property.\r\n * instance.getConstant('check');\r\n * //Change locale culture in a component.\r\n * instance.setLocale('en-US');\r\n * ```\r\n */\r\nvar L10n = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {string} controlName ?\r\n     * @param {Object} localeStrings ?\r\n     * @param {string} locale ?\r\n     */\r\n    function L10n(controlName, localeStrings, locale) {\r\n        this.controlName = controlName;\r\n        this.localeStrings = localeStrings;\r\n        this.setLocale(locale || defaultCulture);\r\n    }\r\n    /**\r\n     * Sets the locale text\r\n     *\r\n     * @param {string} locale ?\r\n     * @returns {void} ?\r\n     */\r\n    L10n.prototype.setLocale = function (locale) {\r\n        var intLocale = this.intGetControlConstant(L10n.locale, locale);\r\n        this.currentLocale = intLocale || this.localeStrings;\r\n    };\r\n    /**\r\n     * Sets the global locale for all components.\r\n     *\r\n     * @param {Object} localeObject - specifies the localeObject to be set as global locale.\r\n     * @returns {void} ?\r\n     */\r\n    L10n.load = function (localeObject) {\r\n        this.locale = extend(this.locale, localeObject, {}, true);\r\n    };\r\n    /**\r\n     * Returns current locale text for the property based on the culture name and control name.\r\n     *\r\n     * @param {string} prop - specifies the property for which localize text to be returned.\r\n     * @returns {string} ?\r\n     */\r\n    L10n.prototype.getConstant = function (prop) {\r\n        // Removed conditional operator because this method does not return correct value when passing 0 as value in localization\r\n        if (!isNullOrUndefined(this.currentLocale[prop])) {\r\n            return this.currentLocale[prop];\r\n        }\r\n        else {\r\n            return this.localeStrings[prop] || '';\r\n        }\r\n    };\r\n    /**\r\n     * Returns the control constant object for current object and the locale specified.\r\n     *\r\n     * @param {Object} curObject ?\r\n     * @param {string} locale ?\r\n     * @returns {Object} ?\r\n     */\r\n    L10n.prototype.intGetControlConstant = function (curObject, locale) {\r\n        if ((curObject)[locale]) {\r\n            return (curObject)[locale][this.controlName];\r\n        }\r\n        return null;\r\n    };\r\n    L10n.locale = {};\r\n    return L10n;\r\n}());\r\nexport { L10n };\r\n"]},"metadata":{},"sourceType":"module"}