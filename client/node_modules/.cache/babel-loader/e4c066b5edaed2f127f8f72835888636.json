{"ast":null,"code":"import { debounce, extend } from './util';\nimport { Browser } from './browser';\n/**\r\n * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element\r\n * ```html\r\n * <div id=\"Eventdiv\">  </div>\r\n * <script>\r\n *   let node: HTMLElement = document.querySelector(\"#Eventdiv\");\r\n *   EventHandler.addEventListener(node, \"click\", function(){\r\n *       // click handler function code\r\n *   });\r\n *   EventHandler.addEventListener(node, \"onmouseover\", function(){\r\n *       // mouseover handler function code\r\n *   });\r\n *   EventHandler.removeEventListener(node, \"click\", function(){\r\n *       // click handler function code\r\n *   });\r\n *   eventObj.clearEvents();\r\n * </script>\r\n * ```\r\n */\n\nvar EventHandler =\n/** @class */\nfunction () {\n  function EventHandler() {} // to get the event data based on element\n\n\n  EventHandler.addOrGetEventData = function (element) {\n    if ('__eventList' in element) {\n      return element.__eventList.events;\n    } else {\n      element.__eventList = {};\n      return element.__eventList.events = [];\n    }\n  };\n  /**\r\n   * Add an event to the specified DOM element.\r\n   *\r\n   * @param {any} element - Target HTML DOM element\r\n   * @param {string} eventName - A string that specifies the name of the event\r\n   * @param {Function} listener - Specifies the function to run when the event occurs\r\n   * @param {Object} bindTo - A object that binds 'this' variable in the event handler\r\n   * @param {number} intDebounce - Specifies at what interval given event listener should be triggered.\r\n   * @returns {Function} ?\r\n   */\n\n\n  EventHandler.add = function (element, eventName, listener, bindTo, intDebounce) {\n    var eventData = EventHandler.addOrGetEventData(element);\n    var debounceListener;\n\n    if (intDebounce) {\n      debounceListener = debounce(listener, intDebounce);\n    } else {\n      debounceListener = listener;\n    }\n\n    if (bindTo) {\n      debounceListener = debounceListener.bind(bindTo);\n    }\n\n    var event = eventName.split(' ');\n\n    for (var i = 0; i < event.length; i++) {\n      eventData.push({\n        name: event[i],\n        listener: listener,\n        debounce: debounceListener\n      });\n\n      if (Browser.isIE) {\n        element.addEventListener(event[i], debounceListener);\n      } else {\n        element.addEventListener(event[i], debounceListener, {\n          passive: false\n        });\n      }\n    }\n\n    return debounceListener;\n  };\n  /**\r\n   * Remove an event listener that has been attached before.\r\n   *\r\n   * @param {any} element - Specifies the target html element to remove the event\r\n   * @param {string} eventName - A string that specifies the name of the event to remove\r\n   * @param {Function} listener - Specifies the function to remove\r\n   * @returns {void} ?\r\n   */\n\n\n  EventHandler.remove = function (element, eventName, listener) {\n    var eventData = EventHandler.addOrGetEventData(element);\n    var event = eventName.split(' ');\n\n    var _loop_1 = function (j) {\n      var index = -1;\n      var debounceListener;\n\n      if (eventData && eventData.length !== 0) {\n        eventData.some(function (x, i) {\n          return x.name === event[j] && x.listener === listener ? (index = i, debounceListener = x.debounce, true) : false;\n        });\n      }\n\n      if (index !== -1) {\n        eventData.splice(index, 1);\n      }\n\n      if (debounceListener) {\n        element.removeEventListener(event[j], debounceListener);\n      }\n    };\n\n    for (var j = 0; j < event.length; j++) {\n      _loop_1(j);\n    }\n  };\n  /**\r\n   * Clear all the event listeners that has been previously attached to the element.\r\n   *\r\n   * @param {any} element - Specifies the target html element to clear the events\r\n   * @returns {void} ?\r\n   */\n\n\n  EventHandler.clearEvents = function (element) {\n    var eventData;\n    var copyData; // eslint-disable-next-line\n\n    eventData = EventHandler.addOrGetEventData(element); // eslint-disable-next-line\n\n    copyData = extend([], copyData, eventData);\n\n    for (var i = 0; i < copyData.length; i++) {\n      element.removeEventListener(copyData[i].name, copyData[i].debounce);\n      eventData.shift();\n    }\n  };\n  /**\r\n   * Trigger particular event of the element.\r\n   *\r\n   * @param {any} element - Specifies the target html element to trigger the events\r\n   * @param {string} eventName - Specifies the event to trigger for the specified element.\r\n   * Can be a custom event, or any of the standard events.\r\n   * @param {any} eventProp - Additional parameters to pass on to the event properties\r\n   * @returns {void} ?\r\n   */\n\n\n  EventHandler.trigger = function (element, eventName, eventProp) {\n    var eventData = EventHandler.addOrGetEventData(element);\n\n    for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {\n      var event_1 = eventData_1[_i];\n\n      if (event_1.name === eventName) {\n        event_1.debounce.call(this, eventProp);\n      }\n    }\n  };\n\n  return EventHandler;\n}();\n\nexport { EventHandler };","map":{"version":3,"sources":["C:/Users/nvtung/Các project thực hiện/CNPM/RubyGYM/client/node_modules/@syncfusion/ej2-base/src/event-handler.js"],"names":["debounce","extend","Browser","EventHandler","addOrGetEventData","element","__eventList","events","add","eventName","listener","bindTo","intDebounce","eventData","debounceListener","bind","event","split","i","length","push","name","isIE","addEventListener","passive","remove","_loop_1","j","index","some","x","splice","removeEventListener","clearEvents","copyData","shift","trigger","eventProp","_i","eventData_1","event_1","call"],"mappings":"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","sourcesContent":["import { debounce, extend } from './util';\r\nimport { Browser } from './browser';\r\n/**\r\n * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element\r\n * ```html\r\n * <div id=\"Eventdiv\">  </div>\r\n * <script>\r\n *   let node: HTMLElement = document.querySelector(\"#Eventdiv\");\r\n *   EventHandler.addEventListener(node, \"click\", function(){\r\n *       // click handler function code\r\n *   });\r\n *   EventHandler.addEventListener(node, \"onmouseover\", function(){\r\n *       // mouseover handler function code\r\n *   });\r\n *   EventHandler.removeEventListener(node, \"click\", function(){\r\n *       // click handler function code\r\n *   });\r\n *   eventObj.clearEvents();\r\n * </script>\r\n * ```\r\n */\r\nvar EventHandler = /** @class */ (function () {\r\n    function EventHandler() {\r\n    }\r\n    // to get the event data based on element\r\n    EventHandler.addOrGetEventData = function (element) {\r\n        if ('__eventList' in element) {\r\n            return element.__eventList.events;\r\n        }\r\n        else {\r\n            element.__eventList = {};\r\n            return element.__eventList.events = [];\r\n        }\r\n    };\r\n    /**\r\n     * Add an event to the specified DOM element.\r\n     *\r\n     * @param {any} element - Target HTML DOM element\r\n     * @param {string} eventName - A string that specifies the name of the event\r\n     * @param {Function} listener - Specifies the function to run when the event occurs\r\n     * @param {Object} bindTo - A object that binds 'this' variable in the event handler\r\n     * @param {number} intDebounce - Specifies at what interval given event listener should be triggered.\r\n     * @returns {Function} ?\r\n     */\r\n    EventHandler.add = function (element, eventName, listener, bindTo, intDebounce) {\r\n        var eventData = EventHandler.addOrGetEventData(element);\r\n        var debounceListener;\r\n        if (intDebounce) {\r\n            debounceListener = debounce(listener, intDebounce);\r\n        }\r\n        else {\r\n            debounceListener = listener;\r\n        }\r\n        if (bindTo) {\r\n            debounceListener = debounceListener.bind(bindTo);\r\n        }\r\n        var event = eventName.split(' ');\r\n        for (var i = 0; i < event.length; i++) {\r\n            eventData.push({\r\n                name: event[i],\r\n                listener: listener,\r\n                debounce: debounceListener\r\n            });\r\n            if (Browser.isIE) {\r\n                element.addEventListener(event[i], debounceListener);\r\n            }\r\n            else {\r\n                element.addEventListener(event[i], debounceListener, { passive: false });\r\n            }\r\n        }\r\n        return debounceListener;\r\n    };\r\n    /**\r\n     * Remove an event listener that has been attached before.\r\n     *\r\n     * @param {any} element - Specifies the target html element to remove the event\r\n     * @param {string} eventName - A string that specifies the name of the event to remove\r\n     * @param {Function} listener - Specifies the function to remove\r\n     * @returns {void} ?\r\n     */\r\n    EventHandler.remove = function (element, eventName, listener) {\r\n        var eventData = EventHandler.addOrGetEventData(element);\r\n        var event = eventName.split(' ');\r\n        var _loop_1 = function (j) {\r\n            var index = -1;\r\n            var debounceListener;\r\n            if (eventData && eventData.length !== 0) {\r\n                eventData.some(function (x, i) {\r\n                    return x.name === event[j] && x.listener === listener ?\r\n                        (index = i, debounceListener = x.debounce, true) : false;\r\n                });\r\n            }\r\n            if (index !== -1) {\r\n                eventData.splice(index, 1);\r\n            }\r\n            if (debounceListener) {\r\n                element.removeEventListener(event[j], debounceListener);\r\n            }\r\n        };\r\n        for (var j = 0; j < event.length; j++) {\r\n            _loop_1(j);\r\n        }\r\n    };\r\n    /**\r\n     * Clear all the event listeners that has been previously attached to the element.\r\n     *\r\n     * @param {any} element - Specifies the target html element to clear the events\r\n     * @returns {void} ?\r\n     */\r\n    EventHandler.clearEvents = function (element) {\r\n        var eventData;\r\n        var copyData;\r\n        // eslint-disable-next-line\r\n        eventData = EventHandler.addOrGetEventData(element);\r\n        // eslint-disable-next-line\r\n        copyData = extend([], copyData, eventData);\r\n        for (var i = 0; i < copyData.length; i++) {\r\n            element.removeEventListener(copyData[i].name, copyData[i].debounce);\r\n            eventData.shift();\r\n        }\r\n    };\r\n    /**\r\n     * Trigger particular event of the element.\r\n     *\r\n     * @param {any} element - Specifies the target html element to trigger the events\r\n     * @param {string} eventName - Specifies the event to trigger for the specified element.\r\n     * Can be a custom event, or any of the standard events.\r\n     * @param {any} eventProp - Additional parameters to pass on to the event properties\r\n     * @returns {void} ?\r\n     */\r\n    EventHandler.trigger = function (element, eventName, eventProp) {\r\n        var eventData = EventHandler.addOrGetEventData(element);\r\n        for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {\r\n            var event_1 = eventData_1[_i];\r\n            if (event_1.name === eventName) {\r\n                event_1.debounce.call(this, eventProp);\r\n            }\r\n        }\r\n    };\r\n    return EventHandler;\r\n}());\r\nexport { EventHandler };\r\n"]},"metadata":{},"sourceType":"module"}