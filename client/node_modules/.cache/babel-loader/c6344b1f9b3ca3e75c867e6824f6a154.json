{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/uid\n */\n// A hash table of hex numbers to avoid using toString() in uid() which is costly.\n// [ '00', '01', '02', ..., 'fe', 'ff' ]\nconst HEX_NUMBERS = new Array(256).fill().map((val, index) => ('0' + index.toString(16)).slice(-2));\n/**\n * Returns a unique id. The id starts with an \"e\" character and a randomly generated string of\n * 32 alphanumeric characters.\n *\n * **Note**: The characters the unique id is built from correspond to the hex number notation\n * (from \"0\" to \"9\", from \"a\" to \"f\"). In other words, each id corresponds to an \"e\" followed\n * by 16 8-bit numbers next to each other.\n *\n * @returns {String} An unique id string.\n */\n\nexport default function uid() {\n  // Let's create some positive random 32bit integers first.\n  //\n  // 1. Math.random() is a float between 0 and 1.\n  // 2. 0x100000000 is 2^32 = 4294967296.\n  // 3. >>> 0 enforces integer (in JS all numbers are floating point).\n  //\n  // For instance:\n  //\t\tMath.random() * 0x100000000 = 3366450031.853859\n  // but\n  //\t\tMath.random() * 0x100000000 >>> 0 = 3366450031.\n  const r1 = Math.random() * 0x100000000 >>> 0;\n  const r2 = Math.random() * 0x100000000 >>> 0;\n  const r3 = Math.random() * 0x100000000 >>> 0;\n  const r4 = Math.random() * 0x100000000 >>> 0; // Make sure that id does not start with number.\n\n  return 'e' + HEX_NUMBERS[r1 >> 0 & 0xFF] + HEX_NUMBERS[r1 >> 8 & 0xFF] + HEX_NUMBERS[r1 >> 16 & 0xFF] + HEX_NUMBERS[r1 >> 24 & 0xFF] + HEX_NUMBERS[r2 >> 0 & 0xFF] + HEX_NUMBERS[r2 >> 8 & 0xFF] + HEX_NUMBERS[r2 >> 16 & 0xFF] + HEX_NUMBERS[r2 >> 24 & 0xFF] + HEX_NUMBERS[r3 >> 0 & 0xFF] + HEX_NUMBERS[r3 >> 8 & 0xFF] + HEX_NUMBERS[r3 >> 16 & 0xFF] + HEX_NUMBERS[r3 >> 24 & 0xFF] + HEX_NUMBERS[r4 >> 0 & 0xFF] + HEX_NUMBERS[r4 >> 8 & 0xFF] + HEX_NUMBERS[r4 >> 16 & 0xFF] + HEX_NUMBERS[r4 >> 24 & 0xFF];\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-utils/src/uid.js"],"names":["HEX_NUMBERS","Array","fill","map","val","index","toString","slice","uid","r1","Math","random","r2","r3","r4"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA,MAAMA,WAAW,GAAG,IAAIC,KAAJ,CAAW,GAAX,EAAiBC,IAAjB,GAClBC,GADkB,CACb,CAAEC,GAAF,EAAOC,KAAP,KAAkB,CAAE,MAAQA,KAAF,CAAUC,QAAV,CAAoB,EAApB,CAAR,EAAmCC,KAAnC,CAA0C,CAAC,CAA3C,CADL,CAApB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,GAAT,GAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,EAAE,GAAGC,IAAI,CAACC,MAAL,KAAgB,WAAhB,KAAgC,CAA3C;AACA,QAAMC,EAAE,GAAGF,IAAI,CAACC,MAAL,KAAgB,WAAhB,KAAgC,CAA3C;AACA,QAAME,EAAE,GAAGH,IAAI,CAACC,MAAL,KAAgB,WAAhB,KAAgC,CAA3C;AACA,QAAMG,EAAE,GAAGJ,IAAI,CAACC,MAAL,KAAgB,WAAhB,KAAgC,CAA3C,CAd6B,CAgB7B;;AACA,SAAO,MACNX,WAAW,CAAES,EAAE,IAAI,CAAN,GAAU,IAAZ,CADL,GAENT,WAAW,CAAES,EAAE,IAAI,CAAN,GAAU,IAAZ,CAFL,GAGNT,WAAW,CAAES,EAAE,IAAI,EAAN,GAAW,IAAb,CAHL,GAINT,WAAW,CAAES,EAAE,IAAI,EAAN,GAAW,IAAb,CAJL,GAKNT,WAAW,CAAEY,EAAE,IAAI,CAAN,GAAU,IAAZ,CALL,GAMNZ,WAAW,CAAEY,EAAE,IAAI,CAAN,GAAU,IAAZ,CANL,GAONZ,WAAW,CAAEY,EAAE,IAAI,EAAN,GAAW,IAAb,CAPL,GAQNZ,WAAW,CAAEY,EAAE,IAAI,EAAN,GAAW,IAAb,CARL,GASNZ,WAAW,CAAEa,EAAE,IAAI,CAAN,GAAU,IAAZ,CATL,GAUNb,WAAW,CAAEa,EAAE,IAAI,CAAN,GAAU,IAAZ,CAVL,GAWNb,WAAW,CAAEa,EAAE,IAAI,EAAN,GAAW,IAAb,CAXL,GAYNb,WAAW,CAAEa,EAAE,IAAI,EAAN,GAAW,IAAb,CAZL,GAaNb,WAAW,CAAEc,EAAE,IAAI,CAAN,GAAU,IAAZ,CAbL,GAcNd,WAAW,CAAEc,EAAE,IAAI,CAAN,GAAU,IAAZ,CAdL,GAeNd,WAAW,CAAEc,EAAE,IAAI,EAAN,GAAW,IAAb,CAfL,GAgBNd,WAAW,CAAEc,EAAE,IAAI,EAAN,GAAW,IAAb,CAhBZ;AAiBA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/uid\n */\n\n// A hash table of hex numbers to avoid using toString() in uid() which is costly.\n// [ '00', '01', '02', ..., 'fe', 'ff' ]\nconst HEX_NUMBERS = new Array( 256 ).fill()\n\t.map( ( val, index ) => ( '0' + ( index ).toString( 16 ) ).slice( -2 ) );\n\n/**\n * Returns a unique id. The id starts with an \"e\" character and a randomly generated string of\n * 32 alphanumeric characters.\n *\n * **Note**: The characters the unique id is built from correspond to the hex number notation\n * (from \"0\" to \"9\", from \"a\" to \"f\"). In other words, each id corresponds to an \"e\" followed\n * by 16 8-bit numbers next to each other.\n *\n * @returns {String} An unique id string.\n */\nexport default function uid() {\n\t// Let's create some positive random 32bit integers first.\n\t//\n\t// 1. Math.random() is a float between 0 and 1.\n\t// 2. 0x100000000 is 2^32 = 4294967296.\n\t// 3. >>> 0 enforces integer (in JS all numbers are floating point).\n\t//\n\t// For instance:\n\t//\t\tMath.random() * 0x100000000 = 3366450031.853859\n\t// but\n\t//\t\tMath.random() * 0x100000000 >>> 0 = 3366450031.\n\tconst r1 = Math.random() * 0x100000000 >>> 0;\n\tconst r2 = Math.random() * 0x100000000 >>> 0;\n\tconst r3 = Math.random() * 0x100000000 >>> 0;\n\tconst r4 = Math.random() * 0x100000000 >>> 0;\n\n\t// Make sure that id does not start with number.\n\treturn 'e' +\n\t\tHEX_NUMBERS[ r1 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r1 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r1 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r1 >> 24 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 24 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 24 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 24 & 0xFF ];\n}\n"]},"metadata":{},"sourceType":"module"}