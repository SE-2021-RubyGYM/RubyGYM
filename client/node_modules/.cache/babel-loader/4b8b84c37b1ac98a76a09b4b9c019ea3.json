{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/editableui/editableuiview\n */\nimport View from '../view';\n/**\n * The editable UI view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class EditableUIView extends View {\n  /**\n   * Creates an instance of EditableUIView class.\n   *\n   * @param {module:utils/locale~Locale} [locale] The locale instance.\n   * @param {module:engine/view/view~View} editingView The editing view instance the editable is related to.\n   * @param {HTMLElement} [editableElement] The editable element. If not specified, this view\n   * should create it. Otherwise, the existing element should be used.\n   */\n  constructor(locale, editingView, editableElement) {\n    super(locale);\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-content', 'ck-editor__editable', 'ck-rounded-corners'],\n        lang: locale.contentLanguage,\n        dir: locale.contentLanguageDirection\n      }\n    });\n    /**\n     * The name of the editable UI view.\n     *\n     * @member {String} #name\n     */\n\n    this.name = null;\n    /**\n     * Controls whether the editable is focused, i.e. the user is typing in it.\n     *\n     * @observable\n     * @member {Boolean} #isFocused\n     */\n\n    this.set('isFocused', false);\n    /**\n     * The element which is the main editable element (usually the one with `contentEditable=\"true\"`).\n     *\n     * @private\n     * @type {HTMLElement}\n     */\n\n    this._editableElement = editableElement;\n    /**\n     * Whether an external {@link #_editableElement} was passed into the constructor, which also means\n     * the view will not render its {@link #template}.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._hasExternalElement = !!this._editableElement;\n    /**\n     * The editing view instance the editable is related to. Editable uses the editing\n     * view to dynamically modify its certain DOM attributes after {@link #render rendering}.\n     *\n     * **Note**: The DOM attributes are performed by the editing view and not UI\n     * {@link module:ui/view~View#bindTemplate template bindings} because once rendered,\n     * the editable DOM element must remain under the full control of the engine to work properly.\n     *\n     * @protected\n     * @type {module:engine/view/view~View}\n     */\n\n    this._editingView = editingView;\n  }\n  /**\n   * Renders the view by either applying the {@link #template} to the existing\n   * {@link #_editableElement} or assigning {@link #element} as {@link #_editableElement}.\n   */\n\n\n  render() {\n    super.render();\n\n    if (this._hasExternalElement) {\n      this.template.apply(this.element = this._editableElement);\n    } else {\n      this._editableElement = this.element;\n    }\n\n    this.on('change:isFocused', () => this._updateIsFocusedClasses());\n\n    this._updateIsFocusedClasses();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    if (this._hasExternalElement) {\n      this.template.revert(this._editableElement);\n    }\n\n    super.destroy();\n  }\n  /**\n   * Updates the `ck-focused` and `ck-blurred` CSS classes on the {@link #element} according to\n   * the {@link #isFocused} property value using the {@link #_editingView editing view} API.\n   *\n   * @private\n   */\n\n\n  _updateIsFocusedClasses() {\n    const editingView = this._editingView;\n\n    if (editingView.isRenderingInProgress) {\n      updateAfterRender(this);\n    } else {\n      update(this);\n    }\n\n    function update(view) {\n      editingView.change(writer => {\n        const viewRoot = editingView.document.getRoot(view.name);\n        writer.addClass(view.isFocused ? 'ck-focused' : 'ck-blurred', viewRoot);\n        writer.removeClass(view.isFocused ? 'ck-blurred' : 'ck-focused', viewRoot);\n      });\n    } // In a case of a multi-root editor, a callback will be attached more than once (one callback for each root).\n    // While executing one callback the `isRenderingInProgress` observable is changing what causes executing another\n    // callback and render is called inside the already pending render.\n    // We need to be sure that callback is executed only when the value has changed from `true` to `false`.\n    // See https://github.com/ckeditor/ckeditor5/issues/1676.\n\n\n    function updateAfterRender(view) {\n      editingView.once('change:isRenderingInProgress', (evt, name, value) => {\n        if (!value) {\n          update(view);\n        } else {\n          updateAfterRender(view);\n        }\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-ui/src/editableui/editableuiview.js"],"names":["View","EditableUIView","constructor","locale","editingView","editableElement","setTemplate","tag","attributes","class","lang","contentLanguage","dir","contentLanguageDirection","name","set","_editableElement","_hasExternalElement","_editingView","render","template","apply","element","on","_updateIsFocusedClasses","destroy","revert","isRenderingInProgress","updateAfterRender","update","view","change","writer","viewRoot","document","getRoot","addClass","isFocused","removeClass","once","evt","value"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/editableui/editableuiview\n */\n\nimport View from '../view';\n\n/**\n * The editable UI view class.\n *\n * @extends module:ui/view~View\n */\nexport default class EditableUIView extends View {\n\t/**\n\t * Creates an instance of EditableUIView class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t * @param {module:engine/view/view~View} editingView The editing view instance the editable is related to.\n\t * @param {HTMLElement} [editableElement] The editable element. If not specified, this view\n\t * should create it. Otherwise, the existing element should be used.\n\t */\n\tconstructor( locale, editingView, editableElement ) {\n\t\tsuper( locale );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-content',\n\t\t\t\t\t'ck-editor__editable',\n\t\t\t\t\t'ck-rounded-corners'\n\t\t\t\t],\n\t\t\t\tlang: locale.contentLanguage,\n\t\t\t\tdir: locale.contentLanguageDirection\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The name of the editable UI view.\n\t\t *\n\t\t * @member {String} #name\n\t\t */\n\t\tthis.name = null;\n\n\t\t/**\n\t\t * Controls whether the editable is focused, i.e. the user is typing in it.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * The element which is the main editable element (usually the one with `contentEditable=\"true\"`).\n\t\t *\n\t\t * @private\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis._editableElement = editableElement;\n\n\t\t/**\n\t\t * Whether an external {@link #_editableElement} was passed into the constructor, which also means\n\t\t * the view will not render its {@link #template}.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._hasExternalElement = !!this._editableElement;\n\n\t\t/**\n\t\t * The editing view instance the editable is related to. Editable uses the editing\n\t\t * view to dynamically modify its certain DOM attributes after {@link #render rendering}.\n\t\t *\n\t\t * **Note**: The DOM attributes are performed by the editing view and not UI\n\t\t * {@link module:ui/view~View#bindTemplate template bindings} because once rendered,\n\t\t * the editable DOM element must remain under the full control of the engine to work properly.\n\t\t *\n\t\t * @protected\n\t\t * @type {module:engine/view/view~View}\n\t\t */\n\t\tthis._editingView = editingView;\n\t}\n\n\t/**\n\t * Renders the view by either applying the {@link #template} to the existing\n\t * {@link #_editableElement} or assigning {@link #element} as {@link #_editableElement}.\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tif ( this._hasExternalElement ) {\n\t\t\tthis.template.apply( this.element = this._editableElement );\n\t\t} else {\n\t\t\tthis._editableElement = this.element;\n\t\t}\n\n\t\tthis.on( 'change:isFocused', () => this._updateIsFocusedClasses() );\n\t\tthis._updateIsFocusedClasses();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tif ( this._hasExternalElement ) {\n\t\t\tthis.template.revert( this._editableElement );\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * Updates the `ck-focused` and `ck-blurred` CSS classes on the {@link #element} according to\n\t * the {@link #isFocused} property value using the {@link #_editingView editing view} API.\n\t *\n\t * @private\n\t */\n\t_updateIsFocusedClasses() {\n\t\tconst editingView = this._editingView;\n\n\t\tif ( editingView.isRenderingInProgress ) {\n\t\t\tupdateAfterRender( this );\n\t\t} else {\n\t\t\tupdate( this );\n\t\t}\n\n\t\tfunction update( view ) {\n\t\t\teditingView.change( writer => {\n\t\t\t\tconst viewRoot = editingView.document.getRoot( view.name );\n\n\t\t\t\twriter.addClass( view.isFocused ? 'ck-focused' : 'ck-blurred', viewRoot );\n\t\t\t\twriter.removeClass( view.isFocused ? 'ck-blurred' : 'ck-focused', viewRoot );\n\t\t\t} );\n\t\t}\n\n\t\t// In a case of a multi-root editor, a callback will be attached more than once (one callback for each root).\n\t\t// While executing one callback the `isRenderingInProgress` observable is changing what causes executing another\n\t\t// callback and render is called inside the already pending render.\n\t\t// We need to be sure that callback is executed only when the value has changed from `true` to `false`.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1676.\n\t\tfunction updateAfterRender( view ) {\n\t\t\teditingView.once( 'change:isRenderingInProgress', ( evt, name, value ) => {\n\t\t\t\tif ( !value ) {\n\t\t\t\t\tupdate( view );\n\t\t\t\t} else {\n\t\t\t\t\tupdateAfterRender( view );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}