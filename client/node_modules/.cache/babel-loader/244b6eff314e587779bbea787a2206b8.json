{"ast":null,"code":"/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule SyntheticWheelEvent\r\n * @typechecks static-only\r\n */\n'use strict';\n\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n/**\r\n * @interface WheelEvent\r\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\r\n */\n\n\nvar WheelEventInterface = {\n  deltaX: function (event) {\n    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;\n  },\n  deltaY: function (event) {\n    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n    'wheelDelta' in event ? -event.wheelDelta : 0;\n  },\n  deltaZ: null,\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: null\n};\n/**\r\n * @param {object} dispatchConfig Configuration used to dispatch this event.\r\n * @param {string} dispatchMarker Marker identifying the event target.\r\n * @param {object} nativeEvent Native browser event.\r\n * @extends {SyntheticMouseEvent}\r\n */\n\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);\nmodule.exports = SyntheticWheelEvent;","map":{"version":3,"sources":["C:/Users/nvtung/Các project thực hiện/RubyGYM/client/node_modules/jsx-to-string/node_modules/react/lib/SyntheticWheelEvent.js"],"names":["SyntheticMouseEvent","require","WheelEventInterface","deltaX","event","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","SyntheticWheelEvent","dispatchConfig","dispatchMarker","nativeEvent","nativeEventTarget","call","augmentClass","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACA,IAAIC,mBAAmB,GAAG;AACxBC,EAAAA,MAAM,EAAE,UAAUC,KAAV,EAAiB;AACvB,WAAO,YAAYA,KAAZ,GAAoBA,KAAK,CAACD,MAA1B,GACP;AACA,qBAAiBC,KAAjB,GAAyB,CAACA,KAAK,CAACC,WAAhC,GAA8C,CAF9C;AAGD,GALuB;AAMxBC,EAAAA,MAAM,EAAE,UAAUF,KAAV,EAAiB;AACvB,WAAO,YAAYA,KAAZ,GAAoBA,KAAK,CAACE,MAA1B,GACP;AACA,qBAAiBF,KAAjB,GAAyB,CAACA,KAAK,CAACG,WAAhC,GACA;AACA,oBAAgBH,KAAhB,GAAwB,CAACA,KAAK,CAACI,UAA/B,GAA4C,CAJ5C;AAKD,GAZuB;AAaxBC,EAAAA,MAAM,EAAE,IAbgB;AAexB;AACA;AACA;AACA;AACAC,EAAAA,SAAS,EAAE;AAnBa,CAA1B;AAsBA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,mBAAT,CAA6BC,cAA7B,EAA6CC,cAA7C,EAA6DC,WAA7D,EAA0EC,iBAA1E,EAA6F;AAC3Ff,EAAAA,mBAAmB,CAACgB,IAApB,CAAyB,IAAzB,EAA+BJ,cAA/B,EAA+CC,cAA/C,EAA+DC,WAA/D,EAA4EC,iBAA5E;AACD;;AAEDf,mBAAmB,CAACiB,YAApB,CAAiCN,mBAAjC,EAAsDT,mBAAtD;AAEAgB,MAAM,CAACC,OAAP,GAAiBR,mBAAjB","sourcesContent":["/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule SyntheticWheelEvent\r\n * @typechecks static-only\r\n */\r\n\r\n'use strict';\r\n\r\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\r\n\r\n/**\r\n * @interface WheelEvent\r\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\r\n */\r\nvar WheelEventInterface = {\r\n  deltaX: function (event) {\r\n    return 'deltaX' in event ? event.deltaX :\r\n    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\r\n    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;\r\n  },\r\n  deltaY: function (event) {\r\n    return 'deltaY' in event ? event.deltaY :\r\n    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\r\n    'wheelDeltaY' in event ? -event.wheelDeltaY :\r\n    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\r\n    'wheelDelta' in event ? -event.wheelDelta : 0;\r\n  },\r\n  deltaZ: null,\r\n\r\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\r\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\r\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\r\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\r\n  deltaMode: null\r\n};\r\n\r\n/**\r\n * @param {object} dispatchConfig Configuration used to dispatch this event.\r\n * @param {string} dispatchMarker Marker identifying the event target.\r\n * @param {object} nativeEvent Native browser event.\r\n * @extends {SyntheticMouseEvent}\r\n */\r\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\r\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\r\n}\r\n\r\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);\r\n\r\nmodule.exports = SyntheticWheelEvent;"]},"metadata":{},"sourceType":"script"}