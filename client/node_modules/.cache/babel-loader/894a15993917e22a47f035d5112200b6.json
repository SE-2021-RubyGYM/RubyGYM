{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/clickoutsidehandler\n */\n\n/* global document */\n\n/**\n * Handles clicking **outside** of a specified set of elements, then fires an action.\n *\n * **Note**: Actually, the action is executed upon `mousedown`, not `click`. It prevents\n * certain issues when the user keeps holding the mouse button and the UI cannot react\n * properly.\n *\n * @param {Object} options Configuration options.\n * @param {module:utils/dom/emittermixin~Emitter} options.emitter The emitter to which this behavior\n * should be added.\n * @param {Function} options.activator Function returning a `Boolean`, to determine whether the handler is active.\n * @param {Array.<HTMLElement>} options.contextElements HTML elements that determine the scope of the\n * handler. Clicking any of them or their descendants will **not** fire the callback.\n * @param {Function} options.callback An action executed by the handler.\n */\nexport default function clickOutsideHandler(_ref) {\n  let {\n    emitter,\n    activator,\n    callback,\n    contextElements\n  } = _ref;\n  emitter.listenTo(document, 'mousedown', (evt, domEvt) => {\n    if (!activator()) {\n      return;\n    } // Check if `composedPath` is `undefined` in case the browser does not support native shadow DOM.\n    // Can be removed when all supported browsers support native shadow DOM.\n\n\n    const path = typeof domEvt.composedPath == 'function' ? domEvt.composedPath() : [];\n\n    for (const contextElement of contextElements) {\n      if (contextElement.contains(domEvt.target) || path.includes(contextElement)) {\n        return;\n      }\n    }\n\n    callback();\n  });\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler.js"],"names":["clickOutsideHandler","emitter","activator","callback","contextElements","listenTo","document","evt","domEvt","path","composedPath","contextElement","contains","target","includes"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,mBAAT,OAAkF;AAAA,MAApD;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA,QAAtB;AAAgCC,IAAAA;AAAhC,GAAoD;AAChGH,EAAAA,OAAO,CAACI,QAAR,CAAkBC,QAAlB,EAA4B,WAA5B,EAAyC,CAAEC,GAAF,EAAOC,MAAP,KAAmB;AAC3D,QAAK,CAACN,SAAS,EAAf,EAAoB;AACnB;AACA,KAH0D,CAK3D;AACA;;;AACA,UAAMO,IAAI,GAAG,OAAOD,MAAM,CAACE,YAAd,IAA8B,UAA9B,GAA2CF,MAAM,CAACE,YAAP,EAA3C,GAAmE,EAAhF;;AAEA,SAAM,MAAMC,cAAZ,IAA8BP,eAA9B,EAAgD;AAC/C,UAAKO,cAAc,CAACC,QAAf,CAAyBJ,MAAM,CAACK,MAAhC,KAA4CJ,IAAI,CAACK,QAAL,CAAeH,cAAf,CAAjD,EAAmF;AAClF;AACA;AACD;;AAEDR,IAAAA,QAAQ;AACR,GAhBD;AAiBA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/clickoutsidehandler\n */\n\n/* global document */\n\n/**\n * Handles clicking **outside** of a specified set of elements, then fires an action.\n *\n * **Note**: Actually, the action is executed upon `mousedown`, not `click`. It prevents\n * certain issues when the user keeps holding the mouse button and the UI cannot react\n * properly.\n *\n * @param {Object} options Configuration options.\n * @param {module:utils/dom/emittermixin~Emitter} options.emitter The emitter to which this behavior\n * should be added.\n * @param {Function} options.activator Function returning a `Boolean`, to determine whether the handler is active.\n * @param {Array.<HTMLElement>} options.contextElements HTML elements that determine the scope of the\n * handler. Clicking any of them or their descendants will **not** fire the callback.\n * @param {Function} options.callback An action executed by the handler.\n */\nexport default function clickOutsideHandler( { emitter, activator, callback, contextElements } ) {\n\temitter.listenTo( document, 'mousedown', ( evt, domEvt ) => {\n\t\tif ( !activator() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if `composedPath` is `undefined` in case the browser does not support native shadow DOM.\n\t\t// Can be removed when all supported browsers support native shadow DOM.\n\t\tconst path = typeof domEvt.composedPath == 'function' ? domEvt.composedPath() : [];\n\n\t\tfor ( const contextElement of contextElements ) {\n\t\t\tif ( contextElement.contains( domEvt.target ) || path.includes( contextElement ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tcallback();\n\t} );\n}\n"]},"metadata":{},"sourceType":"module"}