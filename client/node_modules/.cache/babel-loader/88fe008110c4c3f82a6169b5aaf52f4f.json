{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/ckeditorerror\n */\n\n/* globals console */\n\n/**\n * URL to the documentation with error codes.\n */\nexport const DOCUMENTATION_URL = 'https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html';\n/**\n * The CKEditor error class.\n *\n * You should throw `CKEditorError` when:\n *\n * * An unexpected situation occurred and the editor (most probably) will not work properly. Such exception will be handled\n * by the {@link module:watchdog/watchdog~Watchdog watchdog} (if it is integrated),\n * * If the editor is incorrectly integrated or the editor API is used in the wrong way. This way you will give\n * feedback to the developer as soon as possible. Keep in mind that for common integration issues which should not\n * stop editor initialization (like missing upload adapter, wrong name of a toolbar component) we use\n * {@link module:utils/ckeditorerror~logWarning `logWarning()`} and\n * {@link module:utils/ckeditorerror~logError `logError()`}\n * to improve developers experience and let them see the a working editor as soon as possible.\n *\n *\t\t/**\n *\t\t * Error thrown when a plugin cannot be loaded due to JavaScript errors, lack of plugins with a given name, etc.\n *\t\t *\n *\t\t * @error plugin-load\n *\t\t * @param pluginName The name of the plugin that could not be loaded.\n *\t\t * @param moduleName The name of the module which tried to load this plugin.\n *\t\t * /\n *\t\tthrow new CKEditorError( 'plugin-load', {\n *\t\t\tpluginName: 'foo',\n *\t\t\tmoduleName: 'bar'\n *\t\t} );\n *\n * @extends Error\n */\n\nexport default class CKEditorError extends Error {\n  /**\n   * Creates an instance of the CKEditorError class.\n   *\n   * @param {String} errorName The error id in an `error-name` format. A link to this error documentation page will be added\n   * to the thrown error's `message`.\n   * @param {Object|null} context A context of the error by which the {@link module:watchdog/watchdog~Watchdog watchdog}\n   * is able to determine which editor crashed. It should be an editor instance or a property connected to it. It can be also\n   * a `null` value if the editor should not be restarted in case of the error (e.g. during the editor initialization).\n   * The error context should be checked using the `areConnectedThroughProperties( editor, context )` utility\n   * to check if the object works as the context.\n   * @param {Object} [data] Additional data describing the error. A stringified version of this object\n   * will be appended to the error message, so the data are quickly visible in the console. The original\n   * data object will also be later available under the {@link #data} property.\n   */\n  constructor(errorName, context, data) {\n    super(getErrorMessage(errorName, data));\n    /**\n     * @type {String}\n     */\n\n    this.name = 'CKEditorError';\n    /**\n     * A context of the error by which the Watchdog is able to determine which editor crashed.\n     *\n     * @type {Object|null}\n     */\n\n    this.context = context;\n    /**\n     * The additional error data passed to the constructor. Undefined if none was passed.\n     *\n     * @type {Object|undefined}\n     */\n\n    this.data = data;\n  }\n  /**\n   * Checks if the error is of the `CKEditorError` type.\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type === 'CKEditorError';\n  }\n  /**\n   * A utility that ensures that the thrown error is a {@link module:utils/ckeditorerror~CKEditorError} one.\n   * It is useful when combined with the {@link module:watchdog/watchdog~Watchdog} feature, which can restart the editor in case\n   * of a {@link module:utils/ckeditorerror~CKEditorError} error.\n   *\n   * @static\n   * @param {Error} err The error to rethrow.\n   * @param {Object} context An object connected through properties with the editor instance. This context will be used\n   * by the watchdog to verify which editor should be restarted.\n   */\n\n\n  static rethrowUnexpectedError(err, context) {\n    if (err.is && err.is('CKEditorError')) {\n      throw err;\n    }\n    /**\n     * An unexpected error occurred inside the CKEditor 5 codebase. This error will look like the original one\n     * to make the debugging easier.\n     *\n     * This error is only useful when the editor is initialized using the {@link module:watchdog/watchdog~Watchdog} feature.\n     * In case of such error (or any {@link module:utils/ckeditorerror~CKEditorError} error) the watchdog should restart the editor.\n     *\n     * @error unexpected-error\n     */\n\n\n    const error = new CKEditorError(err.message, context); // Restore the original stack trace to make the error look like the original one.\n    // See https://github.com/ckeditor/ckeditor5/issues/5595 for more details.\n\n    error.stack = err.stack;\n    throw error;\n  }\n\n}\n/**\n * Logs a warning to the console with a properly formatted message and adds a link to the documentation.\n * Use whenever you want to log a warning to the console.\n *\n *\t\t/**\n *\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t * name does not exist, so it was omitted when rendering the toolbar.\n *\t\t *\n *\t\t * @error toolbarview-item-unavailable\n *\t\t * @param {String} name The name of the component.\n *\t\t * /\n *\t\tlogWarning( 'toolbarview-item-unavailable', { name } );\n *\n * See also {@link module:utils/ckeditorerror~CKEditorError} for an explanation when to throw an error and when to log\n * a warning or an error to the console.\n *\n * @param {String} errorName The error name to be logged.\n * @param {Object} [data] Additional data to be logged.\n */\n\nexport function logWarning(errorName, data) {\n  console.warn(...formatConsoleArguments(errorName, data));\n}\n/**\n * Logs an error to the console with a properly formatted message and adds a link to the documentation.\n * Use whenever you want to log an error to the console.\n *\n *\t\t/**\n *\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t * name does not exist, so it was omitted when rendering the toolbar.\n *\t\t *\n *\t\t * @error toolbarview-item-unavailable\n *\t\t * @param {String} name The name of the component.\n *\t\t * /\n *\t\t logError( 'toolbarview-item-unavailable', { name } );\n *\n * **Note**: In most cases logging a warning using {@link module:utils/ckeditorerror~logWarning} is enough.\n *\n * See also {@link module:utils/ckeditorerror~CKEditorError} for an explanation when to use each method.\n *\n * @param {String} errorName The error name to be logged.\n * @param {Object} [data] Additional data to be logged.\n */\n\nexport function logError(errorName, data) {\n  console.error(...formatConsoleArguments(errorName, data));\n} // Returns formatted link to documentation message.\n//\n// @private\n// @param {String} errorName\n// @returns {string}\n\nfunction getLinkToDocumentationMessage(errorName) {\n  return `\\nRead more: ${DOCUMENTATION_URL}#error-${errorName}`;\n} // Returns formatted error message.\n//\n// @private\n// @param {String} errorName\n// @param {Object} [data]\n// @returns {string}\n\n\nfunction getErrorMessage(errorName, data) {\n  const processedObjects = new WeakSet();\n\n  const circularReferencesReplacer = (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (processedObjects.has(value)) {\n        return `[object ${value.constructor.name}]`;\n      }\n\n      processedObjects.add(value);\n    }\n\n    return value;\n  };\n\n  const stringifiedData = data ? ` ${JSON.stringify(data, circularReferencesReplacer)}` : '';\n  const documentationLink = getLinkToDocumentationMessage(errorName);\n  return errorName + stringifiedData + documentationLink;\n} // Returns formatted console error arguments.\n//\n// @private\n// @param {String} errorName\n// @param {Object} [data]\n// @returns {Array}\n\n\nfunction formatConsoleArguments(errorName, data) {\n  const documentationMessage = getLinkToDocumentationMessage(errorName);\n  return data ? [errorName, data, documentationMessage] : [errorName, documentationMessage];\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"],"names":["DOCUMENTATION_URL","CKEditorError","Error","constructor","errorName","context","data","getErrorMessage","name","is","type","rethrowUnexpectedError","err","error","message","stack","logWarning","console","warn","formatConsoleArguments","logError","getLinkToDocumentationMessage","processedObjects","WeakSet","circularReferencesReplacer","key","value","has","add","stringifiedData","JSON","stringify","documentationLink","documentationMessage"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO,MAAMA,iBAAiB,GAC7B,sFADM;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,aAAN,SAA4BC,KAA5B,CAAkC;AAChD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAAEC,SAAF,EAAaC,OAAb,EAAsBC,IAAtB,EAA6B;AACvC,UAAOC,eAAe,CAAEH,SAAF,EAAaE,IAAb,CAAtB;AAEA;AACF;AACA;;AACE,SAAKE,IAAL,GAAY,eAAZ;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKH,OAAL,GAAeA,OAAf;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKC,IAAL,GAAYA,IAAZ;AACA;AAED;AACD;AACA;AACA;;;AACCG,EAAAA,EAAE,CAAEC,IAAF,EAAS;AACV,WAAOA,IAAI,KAAK,eAAhB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC8B,SAAtBC,sBAAsB,CAAEC,GAAF,EAAOP,OAAP,EAAiB;AAC7C,QAAKO,GAAG,CAACH,EAAJ,IAAUG,GAAG,CAACH,EAAJ,CAAQ,eAAR,CAAf,EAA2C;AAC1C,YAAMG,GAAN;AACA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,UAAMC,KAAK,GAAG,IAAIZ,aAAJ,CAAmBW,GAAG,CAACE,OAAvB,EAAgCT,OAAhC,CAAd,CAd6C,CAgB7C;AACA;;AACAQ,IAAAA,KAAK,CAACE,KAAN,GAAcH,GAAG,CAACG,KAAlB;AAEA,UAAMF,KAAN;AACA;;AA7E+C;AAgFjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,UAAT,CAAqBZ,SAArB,EAAgCE,IAAhC,EAAuC;AAC7CW,EAAAA,OAAO,CAACC,IAAR,CAAc,GAAGC,sBAAsB,CAAEf,SAAF,EAAaE,IAAb,CAAvC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASc,QAAT,CAAmBhB,SAAnB,EAA8BE,IAA9B,EAAqC;AAC3CW,EAAAA,OAAO,CAACJ,KAAR,CAAe,GAAGM,sBAAsB,CAAEf,SAAF,EAAaE,IAAb,CAAxC;AACA,C,CAED;AACA;AACA;AACA;AACA;;AACA,SAASe,6BAAT,CAAwCjB,SAAxC,EAAoD;AACnD,SAAQ,gBAAgBJ,iBAAmB,UAAUI,SAAW,EAAhE;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,eAAT,CAA0BH,SAA1B,EAAqCE,IAArC,EAA4C;AAC3C,QAAMgB,gBAAgB,GAAG,IAAIC,OAAJ,EAAzB;;AACA,QAAMC,0BAA0B,GAAG,CAAEC,GAAF,EAAOC,KAAP,KAAkB;AACpD,QAAK,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA5C,EAAmD;AAClD,UAAKJ,gBAAgB,CAACK,GAAjB,CAAsBD,KAAtB,CAAL,EAAqC;AACpC,eAAQ,WAAWA,KAAK,CAACvB,WAAN,CAAkBK,IAAM,GAA3C;AACA;;AAEDc,MAAAA,gBAAgB,CAACM,GAAjB,CAAsBF,KAAtB;AACA;;AAED,WAAOA,KAAP;AACA,GAVD;;AAYA,QAAMG,eAAe,GAAGvB,IAAI,GAAI,IAAIwB,IAAI,CAACC,SAAL,CAAgBzB,IAAhB,EAAsBkB,0BAAtB,CAAoD,EAA5D,GAAgE,EAA5F;AACA,QAAMQ,iBAAiB,GAAGX,6BAA6B,CAAEjB,SAAF,CAAvD;AAEA,SAAOA,SAAS,GAAGyB,eAAZ,GAA8BG,iBAArC;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASb,sBAAT,CAAiCf,SAAjC,EAA4CE,IAA5C,EAAmD;AAClD,QAAM2B,oBAAoB,GAAGZ,6BAA6B,CAAEjB,SAAF,CAA1D;AAEA,SAAOE,IAAI,GAAG,CAAEF,SAAF,EAAaE,IAAb,EAAmB2B,oBAAnB,CAAH,GAA+C,CAAE7B,SAAF,EAAa6B,oBAAb,CAA1D;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/ckeditorerror\n */\n\n/* globals console */\n\n/**\n * URL to the documentation with error codes.\n */\nexport const DOCUMENTATION_URL =\n\t'https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html';\n\n/**\n * The CKEditor error class.\n *\n * You should throw `CKEditorError` when:\n *\n * * An unexpected situation occurred and the editor (most probably) will not work properly. Such exception will be handled\n * by the {@link module:watchdog/watchdog~Watchdog watchdog} (if it is integrated),\n * * If the editor is incorrectly integrated or the editor API is used in the wrong way. This way you will give\n * feedback to the developer as soon as possible. Keep in mind that for common integration issues which should not\n * stop editor initialization (like missing upload adapter, wrong name of a toolbar component) we use\n * {@link module:utils/ckeditorerror~logWarning `logWarning()`} and\n * {@link module:utils/ckeditorerror~logError `logError()`}\n * to improve developers experience and let them see the a working editor as soon as possible.\n *\n *\t\t/**\n *\t\t * Error thrown when a plugin cannot be loaded due to JavaScript errors, lack of plugins with a given name, etc.\n *\t\t *\n *\t\t * @error plugin-load\n *\t\t * @param pluginName The name of the plugin that could not be loaded.\n *\t\t * @param moduleName The name of the module which tried to load this plugin.\n *\t\t * /\n *\t\tthrow new CKEditorError( 'plugin-load', {\n *\t\t\tpluginName: 'foo',\n *\t\t\tmoduleName: 'bar'\n *\t\t} );\n *\n * @extends Error\n */\nexport default class CKEditorError extends Error {\n\t/**\n\t * Creates an instance of the CKEditorError class.\n\t *\n\t * @param {String} errorName The error id in an `error-name` format. A link to this error documentation page will be added\n\t * to the thrown error's `message`.\n\t * @param {Object|null} context A context of the error by which the {@link module:watchdog/watchdog~Watchdog watchdog}\n\t * is able to determine which editor crashed. It should be an editor instance or a property connected to it. It can be also\n\t * a `null` value if the editor should not be restarted in case of the error (e.g. during the editor initialization).\n\t * The error context should be checked using the `areConnectedThroughProperties( editor, context )` utility\n\t * to check if the object works as the context.\n\t * @param {Object} [data] Additional data describing the error. A stringified version of this object\n\t * will be appended to the error message, so the data are quickly visible in the console. The original\n\t * data object will also be later available under the {@link #data} property.\n\t */\n\tconstructor( errorName, context, data ) {\n\t\tsuper( getErrorMessage( errorName, data ) );\n\n\t\t/**\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = 'CKEditorError';\n\n\t\t/**\n\t\t * A context of the error by which the Watchdog is able to determine which editor crashed.\n\t\t *\n\t\t * @type {Object|null}\n\t\t */\n\t\tthis.context = context;\n\n\t\t/**\n\t\t * The additional error data passed to the constructor. Undefined if none was passed.\n\t\t *\n\t\t * @type {Object|undefined}\n\t\t */\n\t\tthis.data = data;\n\t}\n\n\t/**\n\t * Checks if the error is of the `CKEditorError` type.\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === 'CKEditorError';\n\t}\n\n\t/**\n\t * A utility that ensures that the thrown error is a {@link module:utils/ckeditorerror~CKEditorError} one.\n\t * It is useful when combined with the {@link module:watchdog/watchdog~Watchdog} feature, which can restart the editor in case\n\t * of a {@link module:utils/ckeditorerror~CKEditorError} error.\n\t *\n\t * @static\n\t * @param {Error} err The error to rethrow.\n\t * @param {Object} context An object connected through properties with the editor instance. This context will be used\n\t * by the watchdog to verify which editor should be restarted.\n\t */\n\tstatic rethrowUnexpectedError( err, context ) {\n\t\tif ( err.is && err.is( 'CKEditorError' ) ) {\n\t\t\tthrow err;\n\t\t}\n\n\t\t/**\n\t\t * An unexpected error occurred inside the CKEditor 5 codebase. This error will look like the original one\n\t\t * to make the debugging easier.\n\t\t *\n\t\t * This error is only useful when the editor is initialized using the {@link module:watchdog/watchdog~Watchdog} feature.\n\t\t * In case of such error (or any {@link module:utils/ckeditorerror~CKEditorError} error) the watchdog should restart the editor.\n\t\t *\n\t\t * @error unexpected-error\n\t\t */\n\t\tconst error = new CKEditorError( err.message, context );\n\n\t\t// Restore the original stack trace to make the error look like the original one.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/5595 for more details.\n\t\terror.stack = err.stack;\n\n\t\tthrow error;\n\t}\n}\n\n/**\n * Logs a warning to the console with a properly formatted message and adds a link to the documentation.\n * Use whenever you want to log a warning to the console.\n *\n *\t\t/**\n *\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t * name does not exist, so it was omitted when rendering the toolbar.\n *\t\t *\n *\t\t * @error toolbarview-item-unavailable\n *\t\t * @param {String} name The name of the component.\n *\t\t * /\n *\t\tlogWarning( 'toolbarview-item-unavailable', { name } );\n *\n * See also {@link module:utils/ckeditorerror~CKEditorError} for an explanation when to throw an error and when to log\n * a warning or an error to the console.\n *\n * @param {String} errorName The error name to be logged.\n * @param {Object} [data] Additional data to be logged.\n */\nexport function logWarning( errorName, data ) {\n\tconsole.warn( ...formatConsoleArguments( errorName, data ) );\n}\n\n/**\n * Logs an error to the console with a properly formatted message and adds a link to the documentation.\n * Use whenever you want to log an error to the console.\n *\n *\t\t/**\n *\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t * name does not exist, so it was omitted when rendering the toolbar.\n *\t\t *\n *\t\t * @error toolbarview-item-unavailable\n *\t\t * @param {String} name The name of the component.\n *\t\t * /\n *\t\t logError( 'toolbarview-item-unavailable', { name } );\n *\n * **Note**: In most cases logging a warning using {@link module:utils/ckeditorerror~logWarning} is enough.\n *\n * See also {@link module:utils/ckeditorerror~CKEditorError} for an explanation when to use each method.\n *\n * @param {String} errorName The error name to be logged.\n * @param {Object} [data] Additional data to be logged.\n */\nexport function logError( errorName, data ) {\n\tconsole.error( ...formatConsoleArguments( errorName, data ) );\n}\n\n// Returns formatted link to documentation message.\n//\n// @private\n// @param {String} errorName\n// @returns {string}\nfunction getLinkToDocumentationMessage( errorName ) {\n\treturn `\\nRead more: ${ DOCUMENTATION_URL }#error-${ errorName }`;\n}\n\n// Returns formatted error message.\n//\n// @private\n// @param {String} errorName\n// @param {Object} [data]\n// @returns {string}\nfunction getErrorMessage( errorName, data ) {\n\tconst processedObjects = new WeakSet();\n\tconst circularReferencesReplacer = ( key, value ) => {\n\t\tif ( typeof value === 'object' && value !== null ) {\n\t\t\tif ( processedObjects.has( value ) ) {\n\t\t\t\treturn `[object ${ value.constructor.name }]`;\n\t\t\t}\n\n\t\t\tprocessedObjects.add( value );\n\t\t}\n\n\t\treturn value;\n\t};\n\n\tconst stringifiedData = data ? ` ${ JSON.stringify( data, circularReferencesReplacer ) }` : '';\n\tconst documentationLink = getLinkToDocumentationMessage( errorName );\n\n\treturn errorName + stringifiedData + documentationLink;\n}\n\n// Returns formatted console error arguments.\n//\n// @private\n// @param {String} errorName\n// @param {Object} [data]\n// @returns {Array}\nfunction formatConsoleArguments( errorName, data ) {\n\tconst documentationMessage = getLinkToDocumentationMessage( errorName );\n\n\treturn data ? [ errorName, data, documentationMessage ] : [ errorName, documentationMessage ];\n}\n"]},"metadata":{},"sourceType":"module"}