{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/domeventdata\n */\nimport { extend } from 'lodash-es';\n/**\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\n * It wraps the native event, which usually should not be used as the wrapper contains\n * additional data (like key code for keyboard events).\n */\n\nexport default class DomEventData {\n  /**\n   * @param {module:engine/view/view~View} view The instance of the view controller.\n   * @param {Event} domEvent The DOM event.\n   * @param {Object} [additionalData] Additional properties that the instance should contain.\n   */\n  constructor(view, domEvent, additionalData) {\n    /**\n     * Instance of the view controller.\n     *\n     * @readonly\n     * @member {module:engine/view/view~View} module:engine/view/observer/observer~Observer.DomEvent#view\n     */\n    this.view = view;\n    /**\n     * The instance of the document.\n     *\n     * @readonly\n     * @member {module:engine/view/document~Document} module:engine/view/observer/observer~Observer.DomEvent#document\n     */\n\n    this.document = view.document;\n    /**\n     * The DOM event.\n     *\n     * @readonly\n     * @member {Event} module:engine/view/observer/observer~Observer.DomEvent#domEvent\n     */\n\n    this.domEvent = domEvent;\n    /**\n     * The DOM target.\n     *\n     * @readonly\n     * @member {HTMLElement} module:engine/view/observer/observer~Observer.DomEvent#target\n     */\n\n    this.domTarget = domEvent.target;\n    extend(this, additionalData);\n  }\n  /**\n   * The tree view element representing the target.\n   *\n   * @readonly\n   * @type module:engine/view/element~Element\n   */\n\n\n  get target() {\n    return this.view.domConverter.mapDomToView(this.domTarget);\n  }\n  /**\n   * Prevents the native's event default action.\n   */\n\n\n  preventDefault() {\n    this.domEvent.preventDefault();\n  }\n  /**\n   * Stops native event propagation.\n   */\n\n\n  stopPropagation() {\n    this.domEvent.stopPropagation();\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventdata.js"],"names":["extend","DomEventData","constructor","view","domEvent","additionalData","document","domTarget","target","domConverter","mapDomToView","preventDefault","stopPropagation"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,WAAvB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,YAAN,CAAmB;AACjC;AACD;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,QAAR,EAAkBC,cAAlB,EAAmC;AAC7C;AACF;AACA;AACA;AACA;AACA;AACE,SAAKF,IAAL,GAAYA,IAAZ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKG,QAAL,GAAgBH,IAAI,CAACG,QAArB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKF,QAAL,GAAgBA,QAAhB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKG,SAAL,GAAiBH,QAAQ,CAACI,MAA1B;AAEAR,IAAAA,MAAM,CAAE,IAAF,EAAQK,cAAR,CAAN;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACW,MAANG,MAAM,GAAG;AACZ,WAAO,KAAKL,IAAL,CAAUM,YAAV,CAAuBC,YAAvB,CAAqC,KAAKH,SAA1C,CAAP;AACA;AAED;AACD;AACA;;;AACCI,EAAAA,cAAc,GAAG;AAChB,SAAKP,QAAL,CAAcO,cAAd;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,eAAe,GAAG;AACjB,SAAKR,QAAL,CAAcQ,eAAd;AACA;;AAhEgC","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/domeventdata\n */\n\nimport { extend } from 'lodash-es';\n\n/**\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\n * It wraps the native event, which usually should not be used as the wrapper contains\n * additional data (like key code for keyboard events).\n */\nexport default class DomEventData {\n\t/**\n\t * @param {module:engine/view/view~View} view The instance of the view controller.\n\t * @param {Event} domEvent The DOM event.\n\t * @param {Object} [additionalData] Additional properties that the instance should contain.\n\t */\n\tconstructor( view, domEvent, additionalData ) {\n\t\t/**\n\t\t * Instance of the view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View} module:engine/view/observer/observer~Observer.DomEvent#view\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * The instance of the document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document} module:engine/view/observer/observer~Observer.DomEvent#document\n\t\t */\n\t\tthis.document = view.document;\n\n\t\t/**\n\t\t * The DOM event.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Event} module:engine/view/observer/observer~Observer.DomEvent#domEvent\n\t\t */\n\t\tthis.domEvent = domEvent;\n\n\t\t/**\n\t\t * The DOM target.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} module:engine/view/observer/observer~Observer.DomEvent#target\n\t\t */\n\t\tthis.domTarget = domEvent.target;\n\n\t\textend( this, additionalData );\n\t}\n\n\t/**\n\t * The tree view element representing the target.\n\t *\n\t * @readonly\n\t * @type module:engine/view/element~Element\n\t */\n\tget target() {\n\t\treturn this.view.domConverter.mapDomToView( this.domTarget );\n\t}\n\n\t/**\n\t * Prevents the native's event default action.\n\t */\n\tpreventDefault() {\n\t\tthis.domEvent.preventDefault();\n\t}\n\n\t/**\n\t * Stops native event propagation.\n\t */\n\tstopPropagation() {\n\t\tthis.domEvent.stopPropagation();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}