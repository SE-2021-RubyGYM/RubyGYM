{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { FileRepository } from 'ckeditor5/src/upload';\nimport { Command } from 'ckeditor5/src/core';\nimport { toArray } from 'ckeditor5/src/utils';\n/**\n * @module image/imageupload/uploadimagecommand\n */\n\n/**\n * The upload image command.\n *\n * The command is registered by the {@link module:image/imageupload/imageuploadediting~ImageUploadEditing} plugin as `uploadImage`\n * and it is also available via aliased `imageUpload` name.\n *\n * In order to upload an image at the current selection position\n * (according to the {@link module:widget/utils~findOptimalInsertionRange} algorithm),\n * execute the command and pass the native image file instance:\n *\n *\t\tthis.listenTo( editor.editing.view.document, 'clipboardInput', ( evt, data ) => {\n *\t\t\t// Assuming that only images were pasted:\n *\t\t\tconst images = Array.from( data.dataTransfer.files );\n *\n *\t\t\t// Upload the first image:\n *\t\t\teditor.execute( 'uploadImage', { file: images[ 0 ] } );\n *\t\t} );\n *\n * It is also possible to insert multiple images at once:\n *\n *\t\teditor.execute( 'uploadImage', {\n *\t\t\tfile: [\n *\t\t\t\tfile1,\n *\t\t\t\tfile2\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\n\nexport default class UploadImageCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const editor = this.editor;\n    const imageUtils = editor.plugins.get('ImageUtils');\n    const selectedElement = editor.model.document.selection.getSelectedElement(); // TODO: This needs refactoring.\n\n    this.isEnabled = imageUtils.isImageAllowed() || imageUtils.isImage(selectedElement);\n  }\n  /**\n   * Executes the command.\n   *\n   * @fires execute\n   * @param {Object} options Options for the executed command.\n   * @param {File|Array.<File>} options.file The image file or an array of image files to upload.\n   */\n\n\n  execute(options) {\n    const files = toArray(options.file);\n    const selection = this.editor.model.document.selection;\n    const imageUtils = this.editor.plugins.get('ImageUtils'); // In case of multiple files, each file (starting from the 2nd) will be inserted at a position that\n    // follows the previous one. That will move the selection and, to stay on the safe side and make sure\n    // all images inherit the same selection attributes, they are collected beforehand.\n    //\n    // Applying these attributes ensures, for instance, that inserting an (inline) image into a link does\n    // not split that link but preserves its continuity.\n    //\n    // Note: Selection attributes that do not make sense for images will be filtered out by insertImage() anyway.\n\n    const selectionAttributes = Object.fromEntries(selection.getAttributes());\n    files.forEach((file, index) => {\n      const selectedElement = selection.getSelectedElement(); // Inserting of an inline image replace the selected element and make a selection on the inserted image.\n      // Therefore inserting multiple inline images requires creating position after each element.\n\n      if (index && selectedElement && imageUtils.isImage(selectedElement)) {\n        const position = this.editor.model.createPositionAfter(selectedElement);\n\n        this._uploadImage(file, selectionAttributes, position);\n      } else {\n        this._uploadImage(file, selectionAttributes);\n      }\n    });\n  }\n  /**\n   * Handles uploading single file.\n   *\n   * @private\n   * @param {File} file\n   * @param {Object} attributes\n   * @param {module:engine/model/position~Position} position\n   */\n\n\n  _uploadImage(file, attributes, position) {\n    const editor = this.editor;\n    const fileRepository = editor.plugins.get(FileRepository);\n    const loader = fileRepository.createLoader(file);\n    const imageUtils = editor.plugins.get('ImageUtils'); // Do not throw when upload adapter is not set. FileRepository will log an error anyway.\n\n    if (!loader) {\n      return;\n    }\n\n    imageUtils.insertImage({ ...attributes,\n      uploadId: loader.id\n    }, position);\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-image/src/imageupload/uploadimagecommand.js"],"names":["FileRepository","Command","toArray","UploadImageCommand","refresh","editor","imageUtils","plugins","get","selectedElement","model","document","selection","getSelectedElement","isEnabled","isImageAllowed","isImage","execute","options","files","file","selectionAttributes","Object","fromEntries","getAttributes","forEach","index","position","createPositionAfter","_uploadImage","attributes","fileRepository","loader","createLoader","insertImage","uploadId","id"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,cAAT,QAA+B,sBAA/B;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,kBAAN,SAAiCF,OAAjC,CAAyC;AACvD;AACD;AACA;AACCG,EAAAA,OAAO,GAAG;AACT,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,UAAU,GAAGD,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAoB,YAApB,CAAnB;AACA,UAAMC,eAAe,GAAGJ,MAAM,CAACK,KAAP,CAAaC,QAAb,CAAsBC,SAAtB,CAAgCC,kBAAhC,EAAxB,CAHS,CAKT;;AACA,SAAKC,SAAL,GAAiBR,UAAU,CAACS,cAAX,MAA+BT,UAAU,CAACU,OAAX,CAAoBP,eAApB,CAAhD;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCQ,EAAAA,OAAO,CAAEC,OAAF,EAAY;AAClB,UAAMC,KAAK,GAAGjB,OAAO,CAAEgB,OAAO,CAACE,IAAV,CAArB;AACA,UAAMR,SAAS,GAAG,KAAKP,MAAL,CAAYK,KAAZ,CAAkBC,QAAlB,CAA2BC,SAA7C;AACA,UAAMN,UAAU,GAAG,KAAKD,MAAL,CAAYE,OAAZ,CAAoBC,GAApB,CAAyB,YAAzB,CAAnB,CAHkB,CAKlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMa,mBAAmB,GAAGC,MAAM,CAACC,WAAP,CAAoBX,SAAS,CAACY,aAAV,EAApB,CAA5B;AAEAL,IAAAA,KAAK,CAACM,OAAN,CAAe,CAAEL,IAAF,EAAQM,KAAR,KAAmB;AACjC,YAAMjB,eAAe,GAAGG,SAAS,CAACC,kBAAV,EAAxB,CADiC,CAGjC;AACA;;AACA,UAAKa,KAAK,IAAIjB,eAAT,IAA4BH,UAAU,CAACU,OAAX,CAAoBP,eAApB,CAAjC,EAAyE;AACxE,cAAMkB,QAAQ,GAAG,KAAKtB,MAAL,CAAYK,KAAZ,CAAkBkB,mBAAlB,CAAuCnB,eAAvC,CAAjB;;AAEA,aAAKoB,YAAL,CAAmBT,IAAnB,EAAyBC,mBAAzB,EAA8CM,QAA9C;AACA,OAJD,MAIO;AACN,aAAKE,YAAL,CAAmBT,IAAnB,EAAyBC,mBAAzB;AACA;AACD,KAZD;AAaA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCQ,EAAAA,YAAY,CAAET,IAAF,EAAQU,UAAR,EAAoBH,QAApB,EAA+B;AAC1C,UAAMtB,MAAM,GAAG,KAAKA,MAApB;AACA,UAAM0B,cAAc,GAAG1B,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAoBR,cAApB,CAAvB;AACA,UAAMgC,MAAM,GAAGD,cAAc,CAACE,YAAf,CAA6Bb,IAA7B,CAAf;AACA,UAAMd,UAAU,GAAGD,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAoB,YAApB,CAAnB,CAJ0C,CAM1C;;AACA,QAAK,CAACwB,MAAN,EAAe;AACd;AACA;;AAED1B,IAAAA,UAAU,CAAC4B,WAAX,CAAwB,EAAE,GAAGJ,UAAL;AAAiBK,MAAAA,QAAQ,EAAEH,MAAM,CAACI;AAAlC,KAAxB,EAAgET,QAAhE;AACA;;AAtEsD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport { FileRepository } from 'ckeditor5/src/upload';\nimport { Command } from 'ckeditor5/src/core';\nimport { toArray } from 'ckeditor5/src/utils';\n\n/**\n * @module image/imageupload/uploadimagecommand\n */\n\n/**\n * The upload image command.\n *\n * The command is registered by the {@link module:image/imageupload/imageuploadediting~ImageUploadEditing} plugin as `uploadImage`\n * and it is also available via aliased `imageUpload` name.\n *\n * In order to upload an image at the current selection position\n * (according to the {@link module:widget/utils~findOptimalInsertionRange} algorithm),\n * execute the command and pass the native image file instance:\n *\n *\t\tthis.listenTo( editor.editing.view.document, 'clipboardInput', ( evt, data ) => {\n *\t\t\t// Assuming that only images were pasted:\n *\t\t\tconst images = Array.from( data.dataTransfer.files );\n *\n *\t\t\t// Upload the first image:\n *\t\t\teditor.execute( 'uploadImage', { file: images[ 0 ] } );\n *\t\t} );\n *\n * It is also possible to insert multiple images at once:\n *\n *\t\teditor.execute( 'uploadImage', {\n *\t\t\tfile: [\n *\t\t\t\tfile1,\n *\t\t\t\tfile2\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\nexport default class UploadImageCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst editor = this.editor;\n\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\t\tconst selectedElement = editor.model.document.selection.getSelectedElement();\n\n\t\t// TODO: This needs refactoring.\n\t\tthis.isEnabled = imageUtils.isImageAllowed() || imageUtils.isImage( selectedElement );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} options Options for the executed command.\n\t * @param {File|Array.<File>} options.file The image file or an array of image files to upload.\n\t */\n\texecute( options ) {\n\t\tconst files = toArray( options.file );\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst imageUtils = this.editor.plugins.get( 'ImageUtils' );\n\n\t\t// In case of multiple files, each file (starting from the 2nd) will be inserted at a position that\n\t\t// follows the previous one. That will move the selection and, to stay on the safe side and make sure\n\t\t// all images inherit the same selection attributes, they are collected beforehand.\n\t\t//\n\t\t// Applying these attributes ensures, for instance, that inserting an (inline) image into a link does\n\t\t// not split that link but preserves its continuity.\n\t\t//\n\t\t// Note: Selection attributes that do not make sense for images will be filtered out by insertImage() anyway.\n\t\tconst selectionAttributes = Object.fromEntries( selection.getAttributes() );\n\n\t\tfiles.forEach( ( file, index ) => {\n\t\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\t\t// Inserting of an inline image replace the selected element and make a selection on the inserted image.\n\t\t\t// Therefore inserting multiple inline images requires creating position after each element.\n\t\t\tif ( index && selectedElement && imageUtils.isImage( selectedElement ) ) {\n\t\t\t\tconst position = this.editor.model.createPositionAfter( selectedElement );\n\n\t\t\t\tthis._uploadImage( file, selectionAttributes, position );\n\t\t\t} else {\n\t\t\t\tthis._uploadImage( file, selectionAttributes );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Handles uploading single file.\n\t *\n\t * @private\n\t * @param {File} file\n\t * @param {Object} attributes\n\t * @param {module:engine/model/position~Position} position\n\t */\n\t_uploadImage( file, attributes, position ) {\n\t\tconst editor = this.editor;\n\t\tconst fileRepository = editor.plugins.get( FileRepository );\n\t\tconst loader = fileRepository.createLoader( file );\n\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\n\t\t// Do not throw when upload adapter is not set. FileRepository will log an error anyway.\n\t\tif ( !loader ) {\n\t\t\treturn;\n\t\t}\n\n\t\timageUtils.insertImage( { ...attributes, uploadId: loader.id }, position );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}