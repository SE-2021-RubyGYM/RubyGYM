{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/version\n */\n\n/* globals window, global */\nimport CKEditorError from './ckeditorerror';\nconst version = '31.0.0';\nexport default version;\n/* istanbul ignore next */\n\nconst windowOrGlobal = typeof window === 'object' ? window : global;\n/* istanbul ignore next */\n\nif (windowOrGlobal.CKEDITOR_VERSION) {\n  /**\n   * This error is thrown when due to a mistake in how CKEditor 5 was installed or initialized, some\n   * of its modules were duplicated (evaluated and executed twice). Module duplication leads to inevitable runtime\n   * errors.\n   *\n   * There are many situations in which some modules can be loaded twice. In the worst case scenario,\n   * you may need to check your project for each of these issues and fix them all.\n   *\n   * # Trying to add a plugin to an existing build\n   *\n   * If you import an existing CKEditor 5 build and a plugin like this:\n   *\n   *\t\timport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n   *\t\timport Highlight from '@ckeditor/ckeditor5-highlight/src/highlight';\n   *\n   * Then your project loads some CKEditor 5 packages twice. How does it happen?\n   *\n   * The build package contains a file which is already compiled with webpack. This means\n   * that it contains all the necessary code from e.g. `@ckeditor/ckeditor5-engine` and `@ckeditor/ckeditor5-utils`.\n   *\n   * However, the `Highlight` plugin imports some of the modules from these packages, too. If you ask webpack to\n   * build such a project, you will end up with the modules being included (and run) twice &mdash; first, because they are\n   * included inside the build package, and second, because they are required by the `Highlight` plugin.\n   *\n   * Therefore, **you must never add plugins to an existing build** unless your plugin has no dependencies.\n   *\n   * Adding plugins to a build is done by taking the source version of this build (so, before it was built with webpack)\n   * and adding plugins there. In this situation, webpack will know that it only needs to load each plugin once.\n   *\n   * Read more in the {@glink builds/guides/integration/installing-plugins \"Installing plugins\"} guide.\n   *\n   * # Confused an editor build with an editor implementation\n   *\n   * This scenario is very similar to the previous one, but has a different origin.\n   *\n   * Let's assume that you wanted to use CKEditor 5 from source, as explained in the\n   * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"} section\n   * or in the {@glink framework/guides/quick-start \"Quick start\"} guide of CKEditor 5 Framework.\n   *\n   * The correct way to do so is to import an editor and plugins and run them together like this:\n   *\n   *\t\timport ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\n   *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n   *\t\timport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n   *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n   *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n   *\n   *\t\tClassicEditor\n   *\t\t\t.create( document.querySelector( '#editor' ), {\n   *\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n   *\t\t\t\ttoolbar: [ 'bold', 'italic' ]\n   *\t\t\t} )\n   *\t\t\t.then( editor => {\n   *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n   *\t\t\t} )\n   *\t\t\t.catch( error => {\n   *\t\t\t\tconsole.error( error.stack );\n   *\t\t\t} );\n   *\n   * However, you might have mistakenly imported a build instead of the source `ClassicEditor`. In this case\n   * your imports will look like this:\n   *\n   *\t\timport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n   *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n   *\t\timport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n   *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n   *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n   *\n   * This creates the same situation as in the previous section because you use a build together with source plugins.\n   *\n   * Remember: `@ckeditor/ckeditor5-build-*` packages contain editor builds and `@ckeditor/ckeditor5-editor-*` contain source editors.\n   *\n   * # Loading two or more builds on one page\n   *\n   * If you use CKEditor 5 builds, you might have loaded two (or more) `ckeditor.js` files on one web page.\n   * Check your web page for duplicated `<script>` elements or make sure your page builder/bundler includes CKEditor only once.\n   *\n   * If you want to use two different types of editors at once, see the\n   * {@glink builds/guides/integration/advanced-setup#scenario-3-using-two-different-editors \"Using two different editors\"}\n   * section.\n   *\n   * # Using outdated packages\n   *\n   * Building CKEditor 5 from source requires using multiple npm packages. These packages have their dependencies\n   * to other packages. If you use the latest version of, for example, `@ckeditor/ckeditor5-editor-classic` with\n   * an outdated version of `@ckeditor/ckeditor5-image`, npm or yarn will need to install two different versions of\n   * `@ckeditor/ckeditor5-core` because `@ckeditor/ckeditor5-editor-classic` and `@ckeditor/ckeditor5-image` may require\n   * different versions of the core package.\n   *\n   * The solution to this issue is to update all packages to their latest version. We recommend\n   * using tools like [`npm-check-updates`](https://www.npmjs.com/package/npm-check-updates) which simplify this process.\n   *\n   * # Conflicting version of dependencies\n   *\n   * This is a special case of the previous scenario. If you use CKEditor 5 with some third-party plugins,\n   * it may happen that even if you use the latest versions of the official packages and the latest version of\n   * these third-party packages, there will be a conflict between some of their dependencies.\n   *\n   * Such a problem can be resolved by either downgrading CKEditor 5 packages (which we do not recommend) or\n   * asking the author of the third-party package to upgrade its depdendencies (or forking their project and doing this yourself).\n   *\n   * **Note:** All official CKEditor 5 packages (excluding integrations and `ckeditor5-dev-*` packages) are released in the\n   * same major version. This is &mdash; in the `x.y.z`, the `x` is the same for all packages. This is the simplest way to check\n   * whether you use packages coming from the same CKEditor 5 version. You can read more about versioning in the\n   * {@glink framework/guides/support/versioning-policy Versioning policy} guide.\n   *\n   * # Packages were duplicated in `node_modules`\n   *\n   * In some situations, especially when calling `npm install` multiple times, it may happen\n   * that npm will not correctly \"deduplicate\" packages.\n   *\n   * Normally, npm deduplicates all packages so, for example, `@ckeditor/ckeditor5-core` is installed only once in `node_modules/`.\n   * However, it is known to fail to do so from time to time.\n   *\n   * We recommend checking if any of the steps listed below help:\n   *\n   * * `rm -rf node_modules && npm install` to make sure you have a clean `node_modules/` directory. This step\n   * is known to help in most cases.\n   * * If you use `yarn.lock` or `package-lock.json`, remove it before `npm install`.\n   * * Check whether all CKEditor 5 packages are up to date and reinstall them\n   * if you changed anything (`rm -rf node_modules && npm install`).\n   *\n   * If all packages are correct and compatible with each other, the steps above are known to help. If not, you may\n   * try to check with `npm ls` how many times packages like `@ckeditor/ckeditor5-core`, `@ckeditor/ckeditor5-engine` and\n   *`@ckeditor/ckeditor5-utils` are installed. If more than once, verify which package causes that.\n   *\n   * @error ckeditor-duplicated-modules\n   */\n  throw new CKEditorError('ckeditor-duplicated-modules', null);\n} else {\n  windowOrGlobal.CKEDITOR_VERSION = version;\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-utils/src/version.js"],"names":["CKEditorError","version","windowOrGlobal","window","global","CKEDITOR_VERSION"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA,OAAOA,aAAP,MAA0B,iBAA1B;AAEA,MAAMC,OAAO,GAAG,QAAhB;AAEA,eAAeA,OAAf;AAEA;;AACA,MAAMC,cAAc,GAAG,OAAOC,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCC,MAA7D;AAEA;;AACA,IAAKF,cAAc,CAACG,gBAApB,EAAuC;AACtaAAJ,CACL,6BADK,EAEL,IAFK,CAAN;AAIA,CArID,MAqIO;AACNE,EAAAA,cAAc,CAACG,gBAAf,GAAkCJ,OAAlC;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/version\n */\n\n/* globals window, global */\n\nimport CKEditorError from './ckeditorerror';\n\nconst version = '31.0.0';\n\nexport default version;\n\n/* istanbul ignore next */\nconst windowOrGlobal = typeof window === 'object' ? window : global;\n\n/* istanbul ignore next */\nif ( windowOrGlobal.CKEDITOR_VERSION ) {\n\t/**\n\t * This error is thrown when due to a mistake in how CKEditor 5 was installed or initialized, some\n\t * of its modules were duplicated (evaluated and executed twice). Module duplication leads to inevitable runtime\n\t * errors.\n\t *\n\t * There are many situations in which some modules can be loaded twice. In the worst case scenario,\n\t * you may need to check your project for each of these issues and fix them all.\n\t *\n\t * # Trying to add a plugin to an existing build\n\t *\n\t * If you import an existing CKEditor 5 build and a plugin like this:\n\t *\n\t *\t\timport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\t *\t\timport Highlight from '@ckeditor/ckeditor5-highlight/src/highlight';\n\t *\n\t * Then your project loads some CKEditor 5 packages twice. How does it happen?\n\t *\n\t * The build package contains a file which is already compiled with webpack. This means\n\t * that it contains all the necessary code from e.g. `@ckeditor/ckeditor5-engine` and `@ckeditor/ckeditor5-utils`.\n\t *\n\t * However, the `Highlight` plugin imports some of the modules from these packages, too. If you ask webpack to\n\t * build such a project, you will end up with the modules being included (and run) twice &mdash; first, because they are\n\t * included inside the build package, and second, because they are required by the `Highlight` plugin.\n\t *\n\t * Therefore, **you must never add plugins to an existing build** unless your plugin has no dependencies.\n\t *\n\t * Adding plugins to a build is done by taking the source version of this build (so, before it was built with webpack)\n\t * and adding plugins there. In this situation, webpack will know that it only needs to load each plugin once.\n\t *\n\t * Read more in the {@glink builds/guides/integration/installing-plugins \"Installing plugins\"} guide.\n\t *\n\t * # Confused an editor build with an editor implementation\n\t *\n\t * This scenario is very similar to the previous one, but has a different origin.\n\t *\n\t * Let's assume that you wanted to use CKEditor 5 from source, as explained in the\n\t * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"} section\n\t * or in the {@glink framework/guides/quick-start \"Quick start\"} guide of CKEditor 5 Framework.\n\t *\n\t * The correct way to do so is to import an editor and plugins and run them together like this:\n\t *\n\t *\t\timport ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\n\t *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n\t *\t\timport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n\t *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n\t *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n\t *\n\t *\t\tClassicEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ), {\n\t *\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\t *\t\t\t\ttoolbar: [ 'bold', 'italic' ]\n\t *\t\t\t} )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( error => {\n\t *\t\t\t\tconsole.error( error.stack );\n\t *\t\t\t} );\n\t *\n\t * However, you might have mistakenly imported a build instead of the source `ClassicEditor`. In this case\n\t * your imports will look like this:\n\t *\n\t *\t\timport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\t *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n\t *\t\timport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n\t *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n\t *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n\t *\n\t * This creates the same situation as in the previous section because you use a build together with source plugins.\n\t *\n\t * Remember: `@ckeditor/ckeditor5-build-*` packages contain editor builds and `@ckeditor/ckeditor5-editor-*` contain source editors.\n\t *\n\t * # Loading two or more builds on one page\n\t *\n\t * If you use CKEditor 5 builds, you might have loaded two (or more) `ckeditor.js` files on one web page.\n\t * Check your web page for duplicated `<script>` elements or make sure your page builder/bundler includes CKEditor only once.\n\t *\n\t * If you want to use two different types of editors at once, see the\n\t * {@glink builds/guides/integration/advanced-setup#scenario-3-using-two-different-editors \"Using two different editors\"}\n\t * section.\n\t *\n\t * # Using outdated packages\n\t *\n\t * Building CKEditor 5 from source requires using multiple npm packages. These packages have their dependencies\n\t * to other packages. If you use the latest version of, for example, `@ckeditor/ckeditor5-editor-classic` with\n\t * an outdated version of `@ckeditor/ckeditor5-image`, npm or yarn will need to install two different versions of\n\t * `@ckeditor/ckeditor5-core` because `@ckeditor/ckeditor5-editor-classic` and `@ckeditor/ckeditor5-image` may require\n\t * different versions of the core package.\n\t *\n\t * The solution to this issue is to update all packages to their latest version. We recommend\n\t * using tools like [`npm-check-updates`](https://www.npmjs.com/package/npm-check-updates) which simplify this process.\n\t *\n\t * # Conflicting version of dependencies\n\t *\n\t * This is a special case of the previous scenario. If you use CKEditor 5 with some third-party plugins,\n\t * it may happen that even if you use the latest versions of the official packages and the latest version of\n\t * these third-party packages, there will be a conflict between some of their dependencies.\n\t *\n\t * Such a problem can be resolved by either downgrading CKEditor 5 packages (which we do not recommend) or\n\t * asking the author of the third-party package to upgrade its depdendencies (or forking their project and doing this yourself).\n\t *\n\t * **Note:** All official CKEditor 5 packages (excluding integrations and `ckeditor5-dev-*` packages) are released in the\n\t * same major version. This is &mdash; in the `x.y.z`, the `x` is the same for all packages. This is the simplest way to check\n\t * whether you use packages coming from the same CKEditor 5 version. You can read more about versioning in the\n\t * {@glink framework/guides/support/versioning-policy Versioning policy} guide.\n\t *\n\t * # Packages were duplicated in `node_modules`\n\t *\n\t * In some situations, especially when calling `npm install` multiple times, it may happen\n\t * that npm will not correctly \"deduplicate\" packages.\n\t *\n\t * Normally, npm deduplicates all packages so, for example, `@ckeditor/ckeditor5-core` is installed only once in `node_modules/`.\n\t * However, it is known to fail to do so from time to time.\n\t *\n\t * We recommend checking if any of the steps listed below help:\n\t *\n\t * * `rm -rf node_modules && npm install` to make sure you have a clean `node_modules/` directory. This step\n\t * is known to help in most cases.\n\t * * If you use `yarn.lock` or `package-lock.json`, remove it before `npm install`.\n\t * * Check whether all CKEditor 5 packages are up to date and reinstall them\n\t * if you changed anything (`rm -rf node_modules && npm install`).\n\t *\n\t * If all packages are correct and compatible with each other, the steps above are known to help. If not, you may\n\t * try to check with `npm ls` how many times packages like `@ckeditor/ckeditor5-core`, `@ckeditor/ckeditor5-engine` and\n\t *`@ckeditor/ckeditor5-utils` are installed. If more than once, verify which package causes that.\n\t *\n\t * @error ckeditor-duplicated-modules\n\t */\n\tthrow new CKEditorError(\n\t\t'ckeditor-duplicated-modules',\n\t\tnull\n\t);\n} else {\n\twindowOrGlobal.CKEDITOR_VERSION = version;\n}\n"]},"metadata":{},"sourceType":"module"}