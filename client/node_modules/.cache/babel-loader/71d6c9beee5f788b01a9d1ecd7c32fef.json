{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/editorui\n */\n\n/* globals console */\nimport ComponentFactory from '@ckeditor/ckeditor5-ui/src/componentfactory';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * A class providing the minimal interface that is required to successfully bootstrap any editor UI.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\n\nexport default class EditorUI {\n  /**\n   * Creates an instance of the editor UI class.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   */\n  constructor(editor) {\n    /**\n     * The editor that the UI belongs to.\n     *\n     * @readonly\n     * @member {module:core/editor/editor~Editor} #editor\n     */\n    this.editor = editor;\n    /**\n     * An instance of the {@link module:ui/componentfactory~ComponentFactory}, a registry used by plugins\n     * to register factories of specific UI components.\n     *\n     * @readonly\n     * @member {module:ui/componentfactory~ComponentFactory} #componentFactory\n     */\n\n    this.componentFactory = new ComponentFactory(editor);\n    /**\n     * Stores the information about the editor UI focus and propagates it so various plugins and components\n     * are unified as a focus group.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker} #focusTracker\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * Stores viewport offsets from every direction.\n     *\n     * Viewport offset can be used to constrain balloons or other UI elements into an element smaller than the viewport.\n     * This can be useful if there are any other absolutely positioned elements that may interfere with editor UI.\n     *\n     * Example `editor.ui.viewportOffset` returns:\n     *\n     * ```js\n     * {\n     * \ttop: 50,\n     * \tright: 50,\n     * \tbottom: 50,\n     * \tleft: 50\n     * }\n     * ```\n     *\n     * This property can be overriden after editor already being initialized:\n     *\n     * ```js\n     * editor.ui.viewportOffset = {\n     * \ttop: 100,\n     * \tright: 0,\n     * \tbottom: 0,\n     * \tleft: 0\n     * };\n     * ```\n     *\n     * @observable\n     * @member {Object} #viewportOffset\n     */\n\n    this.set('viewportOffset', this._readViewportOffsetFromConfig());\n    /**\n     * Stores all editable elements used by the editor instance.\n     *\n     * @private\n     * @member {Map.<String,HTMLElement>}\n     */\n\n    this._editableElementsMap = new Map(); // Informs UI components that should be refreshed after layout change.\n\n    this.listenTo(editor.editing.view.document, 'layoutChanged', () => this.update());\n  }\n  /**\n   * The main (outermost) DOM element of the editor UI.\n   *\n   * For example, in {@link module:editor-classic/classiceditor~ClassicEditor} it is a `<div>` which\n   * wraps the editable element and the toolbar. In {@link module:editor-inline/inlineeditor~InlineEditor}\n   * it is the editable element itself (as there is no other wrapper). However, in\n   * {@link module:editor-decoupled/decouplededitor~DecoupledEditor} it is set to `null` because this editor does not\n   * come with a single \"main\" HTML element (its editable element and toolbar are separate).\n   *\n   * This property can be understood as a shorthand for retrieving the element that a specific editor integration\n   * considers to be its main DOM element.\n   *\n   * @readonly\n   * @member {HTMLElement|null} #element\n   */\n\n\n  get element() {\n    return null;\n  }\n  /**\n   * Fires the {@link module:core/editor/editorui~EditorUI#event:update `update`} event.\n   *\n   * This method should be called when the editor UI (e.g. positions of its balloons) needs to be updated due to\n   * some environmental change which CKEditor 5 is not aware of (e.g. resize of a container in which it is used).\n   */\n\n\n  update() {\n    this.fire('update');\n  }\n  /**\n   * Destroys the UI.\n   */\n\n\n  destroy() {\n    this.stopListening();\n    this.focusTracker.destroy(); // Clean–up the references to the CKEditor instance stored in the native editable DOM elements.\n\n    for (const domElement of this._editableElementsMap.values()) {\n      domElement.ckeditorInstance = null;\n    }\n\n    this._editableElementsMap = new Map();\n  }\n  /**\n   * Store the native DOM editable element used by the editor under\n   * a unique name.\n   *\n   * @param {String} rootName The unique name of the editable element.\n   * @param {HTMLElement} domElement The native DOM editable element.\n   */\n\n\n  setEditableElement(rootName, domElement) {\n    this._editableElementsMap.set(rootName, domElement); // Put a reference to the CKEditor instance in the editable native DOM element.\n    // It helps 3rd–party software (browser extensions, other libraries) access and recognize\n    // CKEditor 5 instances (editing roots) and use their API (there is no global editor\n    // instance registry).\n\n\n    if (!domElement.ckeditorInstance) {\n      domElement.ckeditorInstance = this.editor;\n    }\n  }\n  /**\n   * Returns the editable editor element with the given name or null if editable does not exist.\n   *\n   * @param {String} [rootName=main] The editable name.\n   * @returns {HTMLElement|undefined}\n   */\n\n\n  getEditableElement() {\n    let rootName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'main';\n    return this._editableElementsMap.get(rootName);\n  }\n  /**\n   * Returns array of names of all editor editable elements.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  getEditableElementsNames() {\n    return this._editableElementsMap.keys();\n  }\n  /**\n   * Stores all editable elements used by the editor instance.\n   *\n   * @protected\n   * @deprecated\n   * @member {Map.<String,HTMLElement>}\n   */\n\n\n  get _editableElements() {\n    /**\n     * The {@link module:core/editor/editorui~EditorUI#_editableElements `EditorUI#_editableElements`} property has been\n     * deprecated and will be removed in the near future. Please use {@link #setEditableElement `setEditableElement()`} and\n     * {@link #getEditableElement `getEditableElement()`} methods instead.\n     *\n     * @error editor-ui-deprecated-editable-elements\n     * @param {module:core/editor/editorui~EditorUI} editorUI Editor UI instance the deprecated property belongs to.\n     */\n    console.warn('editor-ui-deprecated-editable-elements: ' + 'The EditorUI#_editableElements property has been deprecated and will be removed in the near future.', {\n      editorUI: this\n    });\n    return this._editableElementsMap;\n  }\n  /**\n   * Returns viewport offsets object:\n   *\n   * ```js\n   * {\n   * \ttop: Number,\n   * \tright: Number,\n   * \tbottom: Number,\n   * \tleft: Number\n   * }\n   * ```\n   *\n   * Only top property is currently supported.\n   *\n   * @private\n   * @return {Object}\n   */\n\n\n  _readViewportOffsetFromConfig() {\n    const editor = this.editor;\n    const viewportOffsetConfig = editor.config.get('ui.viewportOffset');\n\n    if (viewportOffsetConfig) {\n      return viewportOffsetConfig;\n    }\n\n    const legacyOffsetConfig = editor.config.get('toolbar.viewportTopOffset'); // Fall back to deprecated toolbar config.\n\n    if (legacyOffsetConfig) {\n      /**\n       * The {@link module:core/editor/editorconfig~EditorConfig#toolbar `EditorConfig#toolbar.viewportTopOffset`}\n       * property has been deprecated and will be removed in the near future. Please use\n       * {@link module:core/editor/editorconfig~EditorConfig#ui `EditorConfig#ui.viewportOffset`} instead.\n       *\n       * @error editor-ui-deprecated-viewport-offset-config\n       */\n      console.warn('editor-ui-deprecated-viewport-offset-config: ' + 'The `toolbar.vieportTopOffset` configuration option is deprecated. ' + 'It will be removed from future CKEditor versions. Use `ui.viewportOffset.top` instead.');\n      return {\n        top: legacyOffsetConfig\n      };\n    } // More keys to come in the future.\n\n\n    return {\n      top: 0\n    };\n  }\n  /**\n   * Fired when the editor UI is ready.\n   *\n   * Fired before {@link module:engine/controller/datacontroller~DataController#event:ready}.\n   *\n   * @event ready\n   */\n\n  /**\n   * Fired whenever the UI (all related components) should be refreshed.\n   *\n   * **Note:**: The event is fired after each {@link module:engine/view/document~Document#event:layoutChanged}.\n   * It can also be fired manually via the {@link module:core/editor/editorui~EditorUI#update} method.\n   *\n   * @event update\n   */\n\n\n}\nmix(EditorUI, ObservableMixin);","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-core/src/editor/editorui.js"],"names":["ComponentFactory","FocusTracker","ObservableMixin","mix","EditorUI","constructor","editor","componentFactory","focusTracker","set","_readViewportOffsetFromConfig","_editableElementsMap","Map","listenTo","editing","view","document","update","element","fire","destroy","stopListening","domElement","values","ckeditorInstance","setEditableElement","rootName","getEditableElement","get","getEditableElementsNames","keys","_editableElements","console","warn","editorUI","viewportOffsetConfig","config","legacyOffsetConfig","top"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/editorui\n */\n\n/* globals console */\n\nimport ComponentFactory from '@ckeditor/ckeditor5-ui/src/componentfactory';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * A class providing the minimal interface that is required to successfully bootstrap any editor UI.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class EditorUI {\n\t/**\n\t * Creates an instance of the editor UI class.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor that the UI belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * An instance of the {@link module:ui/componentfactory~ComponentFactory}, a registry used by plugins\n\t\t * to register factories of specific UI components.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/componentfactory~ComponentFactory} #componentFactory\n\t\t */\n\t\tthis.componentFactory = new ComponentFactory( editor );\n\n\t\t/**\n\t\t * Stores the information about the editor UI focus and propagates it so various plugins and components\n\t\t * are unified as a focus group.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Stores viewport offsets from every direction.\n\t\t *\n\t\t * Viewport offset can be used to constrain balloons or other UI elements into an element smaller than the viewport.\n\t\t * This can be useful if there are any other absolutely positioned elements that may interfere with editor UI.\n\t\t *\n\t\t * Example `editor.ui.viewportOffset` returns:\n\t\t *\n\t\t * ```js\n\t\t * {\n\t\t * \ttop: 50,\n\t\t * \tright: 50,\n\t\t * \tbottom: 50,\n\t\t * \tleft: 50\n\t\t * }\n\t\t * ```\n\t\t *\n\t\t * This property can be overriden after editor already being initialized:\n\t\t *\n\t\t * ```js\n\t\t * editor.ui.viewportOffset = {\n\t\t * \ttop: 100,\n\t\t * \tright: 0,\n\t\t * \tbottom: 0,\n\t\t * \tleft: 0\n\t\t * };\n\t\t * ```\n\t\t *\n\t\t * @observable\n\t\t * @member {Object} #viewportOffset\n\t\t */\n\t\tthis.set( 'viewportOffset', this._readViewportOffsetFromConfig() );\n\n\t\t/**\n\t\t * Stores all editable elements used by the editor instance.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<String,HTMLElement>}\n\t\t */\n\t\tthis._editableElementsMap = new Map();\n\n\t\t// Informs UI components that should be refreshed after layout change.\n\t\tthis.listenTo( editor.editing.view.document, 'layoutChanged', () => this.update() );\n\t}\n\n\t/**\n\t * The main (outermost) DOM element of the editor UI.\n\t *\n\t * For example, in {@link module:editor-classic/classiceditor~ClassicEditor} it is a `<div>` which\n\t * wraps the editable element and the toolbar. In {@link module:editor-inline/inlineeditor~InlineEditor}\n\t * it is the editable element itself (as there is no other wrapper). However, in\n\t * {@link module:editor-decoupled/decouplededitor~DecoupledEditor} it is set to `null` because this editor does not\n\t * come with a single \"main\" HTML element (its editable element and toolbar are separate).\n\t *\n\t * This property can be understood as a shorthand for retrieving the element that a specific editor integration\n\t * considers to be its main DOM element.\n\t *\n\t * @readonly\n\t * @member {HTMLElement|null} #element\n\t */\n\tget element() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Fires the {@link module:core/editor/editorui~EditorUI#event:update `update`} event.\n\t *\n\t * This method should be called when the editor UI (e.g. positions of its balloons) needs to be updated due to\n\t * some environmental change which CKEditor 5 is not aware of (e.g. resize of a container in which it is used).\n\t */\n\tupdate() {\n\t\tthis.fire( 'update' );\n\t}\n\n\t/**\n\t * Destroys the UI.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\n\t\tthis.focusTracker.destroy();\n\n\t\t// Clean–up the references to the CKEditor instance stored in the native editable DOM elements.\n\t\tfor ( const domElement of this._editableElementsMap.values() ) {\n\t\t\tdomElement.ckeditorInstance = null;\n\t\t}\n\n\t\tthis._editableElementsMap = new Map();\n\t}\n\n\t/**\n\t * Store the native DOM editable element used by the editor under\n\t * a unique name.\n\t *\n\t * @param {String} rootName The unique name of the editable element.\n\t * @param {HTMLElement} domElement The native DOM editable element.\n\t */\n\tsetEditableElement( rootName, domElement ) {\n\t\tthis._editableElementsMap.set( rootName, domElement );\n\n\t\t// Put a reference to the CKEditor instance in the editable native DOM element.\n\t\t// It helps 3rd–party software (browser extensions, other libraries) access and recognize\n\t\t// CKEditor 5 instances (editing roots) and use their API (there is no global editor\n\t\t// instance registry).\n\t\tif ( !domElement.ckeditorInstance ) {\n\t\t\tdomElement.ckeditorInstance = this.editor;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the editable editor element with the given name or null if editable does not exist.\n\t *\n\t * @param {String} [rootName=main] The editable name.\n\t * @returns {HTMLElement|undefined}\n\t */\n\tgetEditableElement( rootName = 'main' ) {\n\t\treturn this._editableElementsMap.get( rootName );\n\t}\n\n\t/**\n\t * Returns array of names of all editor editable elements.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetEditableElementsNames() {\n\t\treturn this._editableElementsMap.keys();\n\t}\n\n\t/**\n\t * Stores all editable elements used by the editor instance.\n\t *\n\t * @protected\n\t * @deprecated\n\t * @member {Map.<String,HTMLElement>}\n\t */\n\tget _editableElements() {\n\t\t/**\n\t\t * The {@link module:core/editor/editorui~EditorUI#_editableElements `EditorUI#_editableElements`} property has been\n\t\t * deprecated and will be removed in the near future. Please use {@link #setEditableElement `setEditableElement()`} and\n\t\t * {@link #getEditableElement `getEditableElement()`} methods instead.\n\t\t *\n\t\t * @error editor-ui-deprecated-editable-elements\n\t\t * @param {module:core/editor/editorui~EditorUI} editorUI Editor UI instance the deprecated property belongs to.\n\t\t */\n\t\tconsole.warn(\n\t\t\t'editor-ui-deprecated-editable-elements: ' +\n\t\t\t'The EditorUI#_editableElements property has been deprecated and will be removed in the near future.',\n\t\t\t{ editorUI: this } );\n\n\t\treturn this._editableElementsMap;\n\t}\n\n\t/**\n\t * Returns viewport offsets object:\n\t *\n\t * ```js\n\t * {\n\t * \ttop: Number,\n\t * \tright: Number,\n\t * \tbottom: Number,\n\t * \tleft: Number\n\t * }\n\t * ```\n\t *\n\t * Only top property is currently supported.\n\t *\n\t * @private\n\t * @return {Object}\n\t */\n\t_readViewportOffsetFromConfig() {\n\t\tconst editor = this.editor;\n\t\tconst viewportOffsetConfig = editor.config.get( 'ui.viewportOffset' );\n\n\t\tif ( viewportOffsetConfig ) {\n\t\t\treturn viewportOffsetConfig;\n\t\t}\n\n\t\tconst legacyOffsetConfig = editor.config.get( 'toolbar.viewportTopOffset' );\n\n\t\t// Fall back to deprecated toolbar config.\n\t\tif ( legacyOffsetConfig ) {\n\t\t\t/**\n\t\t\t * The {@link module:core/editor/editorconfig~EditorConfig#toolbar `EditorConfig#toolbar.viewportTopOffset`}\n\t\t\t * property has been deprecated and will be removed in the near future. Please use\n\t\t\t * {@link module:core/editor/editorconfig~EditorConfig#ui `EditorConfig#ui.viewportOffset`} instead.\n\t\t\t *\n\t\t\t * @error editor-ui-deprecated-viewport-offset-config\n\t\t\t */\n\t\t\tconsole.warn(\n\t\t\t\t'editor-ui-deprecated-viewport-offset-config: ' +\n\t\t\t\t'The `toolbar.vieportTopOffset` configuration option is deprecated. ' +\n\t\t\t\t'It will be removed from future CKEditor versions. Use `ui.viewportOffset.top` instead.'\n\t\t\t);\n\n\t\t\treturn { top: legacyOffsetConfig };\n\t\t}\n\n\t\t// More keys to come in the future.\n\t\treturn { top: 0 };\n\t}\n\n\t/**\n\t * Fired when the editor UI is ready.\n\t *\n\t * Fired before {@link module:engine/controller/datacontroller~DataController#event:ready}.\n\t *\n\t * @event ready\n\t */\n\n\t/**\n\t * Fired whenever the UI (all related components) should be refreshed.\n\t *\n\t * **Note:**: The event is fired after each {@link module:engine/view/document~Document#event:layoutChanged}.\n\t * It can also be fired manually via the {@link module:core/editor/editorui~EditorUI#update} method.\n\t *\n\t * @event update\n\t */\n}\n\nmix( EditorUI, ObservableMixin );\n"]},"metadata":{},"sourceType":"module"}