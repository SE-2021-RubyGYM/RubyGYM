{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/panel/balloon/contextualballoon\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BalloonPanelView from './balloonpanelview';\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport prevIcon from '../../../theme/icons/previous-arrow.svg';\nimport nextIcon from '../../../theme/icons/next-arrow.svg';\nimport '../../../theme/components/panel/balloonrotator.css';\nimport '../../../theme/components/panel/fakepanel.css';\nconst toPx = toUnit('px');\n/**\n * Provides the common contextual balloon for the editor.\n *\n * The role of this plugin is to unify the contextual balloons logic, simplify views management and help\n * avoid the unnecessary complexity of handling multiple {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * instances in the editor.\n *\n * This plugin allows for creating single or multiple panel stacks.\n *\n * Each stack may have multiple views, with the one on the top being visible. When the visible view is removed from the stack,\n * the previous view becomes visible.\n *\n * It might be useful to implement nested navigation in a balloon. For instance, a toolbar view may contain a link button.\n * When you click it, a link view (which lets you set the URL) is created and put on top of the toolbar view, so the link panel\n * is displayed. When you finish editing the link and close (remove) the link view, the toolbar view is visible again.\n *\n * However, there are cases when there are multiple independent balloons to be displayed, for instance, if the selection\n * is inside two inline comments at the same time. For such cases, you can create two independent panel stacks.\n * The contextual balloon plugin will create a navigation bar to let the users switch between these panel stacks using the \"Next\"\n * and \"Previous\" buttons.\n *\n * If there are no views in the current stack, the balloon panel will try to switch to the next stack. If there are no\n * panels in any stack, the balloon panel will be hidden.\n *\n * **Note**: To force the balloon panel to show only one view, even if there are other stacks, use the `singleViewMode=true` option\n * when {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon#add adding} a view to a panel.\n *\n * From the implementation point of view, the contextual ballon plugin is reusing a single\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView} instance to display multiple contextual balloon\n * panels in the editor. It also creates a special {@link module:ui/panel/balloon/contextualballoon~RotatorView rotator view},\n * used to manage multiple panel stacks. Rotator view is a child of the balloon panel view and the parent of the specific\n * view you want to display. If there is more than one panel stack to be displayed, the rotator view will add a\n * navigation bar. If there is only one stack, the rotator view is transparent (it does not add any UI elements).\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ContextualBalloon extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ContextualBalloon';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    /**\n     * The {@link module:utils/dom/position~Options#limiter position limiter}\n     * for the {@link #view balloon}, used when no `limiter` has been passed into {@link #add}\n     * or {@link #updatePosition}.\n     *\n     * By default, a function that obtains the farthest DOM\n     * {@link module:engine/view/rooteditableelement~RootEditableElement}\n     * of the {@link module:engine/view/document~Document#selection}.\n     *\n     * @member {module:utils/dom/position~Options#limiter} #positionLimiter\n     */\n\n    this.positionLimiter = () => {\n      const view = this.editor.editing.view;\n      const viewDocument = view.document;\n      const editableElement = viewDocument.selection.editableElement;\n\n      if (editableElement) {\n        return view.domConverter.mapViewToDom(editableElement.root);\n      }\n\n      return null;\n    };\n    /**\n     * The currently visible view or `null` when there are no views in any stack.\n     *\n     * @readonly\n     * @observable\n     * @member {module:ui/view~View|null} #visibleView\n     */\n\n\n    this.set('visibleView', null);\n    /**\n     * The common balloon panel view.\n     *\n     * @readonly\n     * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} #view\n     */\n\n    this.view = new BalloonPanelView(editor.locale);\n    editor.ui.view.body.add(this.view);\n    editor.ui.focusTracker.add(this.view.element);\n    /**\n     * The map of views and their stacks.\n     *\n     * @private\n     * @type {Map.<module:ui/view~View,Set>}\n     */\n\n    this._viewToStack = new Map();\n    /**\n     * The map of IDs and stacks.\n     *\n     * @private\n     * @type {Map.<String,Set>}\n     */\n\n    this._idToStack = new Map();\n    /**\n     * A total number of all stacks in the balloon.\n     *\n     * @private\n     * @readonly\n     * @observable\n     * @member {Number} #_numberOfStacks\n     */\n\n    this.set('_numberOfStacks', 0);\n    /**\n     * A flag that controls the single view mode.\n     *\n     * @private\n     * @readonly\n     * @observable\n     * @member {Boolean} #_singleViewMode\n     */\n\n    this.set('_singleViewMode', false);\n    /**\n     * Rotator view embedded in the contextual balloon.\n     * Displays the currently visible view in the balloon and provides navigation for switching stacks.\n     *\n     * @private\n     * @type {module:ui/panel/balloon/contextualballoon~RotatorView}\n     */\n\n    this._rotatorView = this._createRotatorView();\n    /**\n     * Displays fake panels under the balloon panel view when multiple stacks are added to the balloon.\n     *\n     * @private\n     * @type {module:ui/view~View}\n     */\n\n    this._fakePanelsView = this._createFakePanelsView();\n  }\n  /**\n   * Returns `true` when the given view is in one of the stacks. Otherwise returns `false`.\n   *\n   * @param {module:ui/view~View} view\n   * @returns {Boolean}\n   */\n\n\n  hasView(view) {\n    return Array.from(this._viewToStack.keys()).includes(view);\n  }\n  /**\n   * Adds a new view to the stack and makes it visible if the current stack is visible\n   * or it is the first view in the balloon.\n   *\n   * @param {Object} data The configuration of the view.\n   * @param {String} [data.stackId='main'] The ID of the stack that the view is added to.\n   * @param {module:ui/view~View} [data.view] The content of the balloon.\n   * @param {module:utils/dom/position~Options} [data.position] Positioning options.\n   * @param {String} [data.balloonClassName] An additional CSS class added to the {@link #view balloon} when visible.\n   * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n   * @param {Boolean} [data.singleViewMode=false] Whether the view should be the only visible view even if other stacks were added.\n   */\n\n\n  add(data) {\n    if (this.hasView(data.view)) {\n      /**\n       * Trying to add configuration of the same view more than once.\n       *\n       * @error contextualballoon-add-view-exist\n       */\n      throw new CKEditorError('contextualballoon-add-view-exist', [this, data]);\n    }\n\n    const stackId = data.stackId || 'main'; // If new stack is added, creates it and show view from this stack.\n\n    if (!this._idToStack.has(stackId)) {\n      this._idToStack.set(stackId, new Map([[data.view, data]]));\n\n      this._viewToStack.set(data.view, this._idToStack.get(stackId));\n\n      this._numberOfStacks = this._idToStack.size;\n\n      if (!this._visibleStack || data.singleViewMode) {\n        this.showStack(stackId);\n      }\n\n      return;\n    }\n\n    const stack = this._idToStack.get(stackId);\n\n    if (data.singleViewMode) {\n      this.showStack(stackId);\n    } // Add new view to the stack.\n\n\n    stack.set(data.view, data);\n\n    this._viewToStack.set(data.view, stack); // And display it if is added to the currently visible stack.\n\n\n    if (stack === this._visibleStack) {\n      this._showView(data);\n    }\n  }\n  /**\n   * Removes the given view from the stack. If the removed view was visible,\n   * the view preceding it in the stack will become visible instead.\n   * When there is no view in the stack, the next stack will be displayed.\n   * When there are no more stacks, the balloon will hide.\n   *\n   * @param {module:ui/view~View} view A view to be removed from the balloon.\n   */\n\n\n  remove(view) {\n    if (!this.hasView(view)) {\n      /**\n       * Trying to remove the configuration of the view not defined in the stack.\n       *\n       * @error contextualballoon-remove-view-not-exist\n       */\n      throw new CKEditorError('contextualballoon-remove-view-not-exist', [this, view]);\n    }\n\n    const stack = this._viewToStack.get(view);\n\n    if (this._singleViewMode && this.visibleView === view) {\n      this._singleViewMode = false;\n    } // When visible view will be removed we need to show a preceding view or next stack\n    // if a view is the only view in the stack.\n\n\n    if (this.visibleView === view) {\n      if (stack.size === 1) {\n        if (this._idToStack.size > 1) {\n          this._showNextStack();\n        } else {\n          this.view.hide();\n          this.visibleView = null;\n\n          this._rotatorView.hideView();\n        }\n      } else {\n        this._showView(Array.from(stack.values())[stack.size - 2]);\n      }\n    }\n\n    if (stack.size === 1) {\n      this._idToStack.delete(this._getStackId(stack));\n\n      this._numberOfStacks = this._idToStack.size;\n    } else {\n      stack.delete(view);\n    }\n\n    this._viewToStack.delete(view);\n  }\n  /**\n   * Updates the position of the balloon using the position data of the first visible view in the stack.\n   * When new position data is given, the position data of the currently visible view will be updated.\n   *\n   * @param {module:utils/dom/position~Options} [position] position options.\n   */\n\n\n  updatePosition(position) {\n    if (position) {\n      this._visibleStack.get(this.visibleView).position = position;\n    }\n\n    this.view.pin(this._getBalloonPosition());\n\n    this._fakePanelsView.updatePosition();\n  }\n  /**\n   * Shows the last view from the stack of a given ID.\n   *\n   * @param {String} id\n   */\n\n\n  showStack(id) {\n    this.visibleStack = id;\n\n    const stack = this._idToStack.get(id);\n\n    if (!stack) {\n      /**\n       * Trying to show a stack that does not exist.\n       *\n       * @error contextualballoon-showstack-stack-not-exist\n       */\n      throw new CKEditorError('contextualballoon-showstack-stack-not-exist', this);\n    }\n\n    if (this._visibleStack === stack) {\n      return;\n    }\n\n    this._showView(Array.from(stack.values()).pop());\n  }\n  /**\n   * Returns the stack of the currently visible view.\n   *\n   * @private\n   * @type {Set}\n   */\n\n\n  get _visibleStack() {\n    return this._viewToStack.get(this.visibleView);\n  }\n  /**\n   * Returns the ID of the given stack.\n   *\n   * @private\n   * @param {Set} stack\n   * @returns {String}\n   */\n\n\n  _getStackId(stack) {\n    const entry = Array.from(this._idToStack.entries()).find(entry => entry[1] === stack);\n    return entry[0];\n  }\n  /**\n   * Shows the last view from the next stack.\n   *\n   * @private\n   */\n\n\n  _showNextStack() {\n    const stacks = Array.from(this._idToStack.values());\n    let nextIndex = stacks.indexOf(this._visibleStack) + 1;\n\n    if (!stacks[nextIndex]) {\n      nextIndex = 0;\n    }\n\n    this.showStack(this._getStackId(stacks[nextIndex]));\n  }\n  /**\n   * Shows the last view from the previous stack.\n   *\n   * @private\n   */\n\n\n  _showPrevStack() {\n    const stacks = Array.from(this._idToStack.values());\n    let nextIndex = stacks.indexOf(this._visibleStack) - 1;\n\n    if (!stacks[nextIndex]) {\n      nextIndex = stacks.length - 1;\n    }\n\n    this.showStack(this._getStackId(stacks[nextIndex]));\n  }\n  /**\n   * Creates a rotator view.\n   *\n   * @private\n   * @returns {module:ui/panel/balloon/contextualballoon~RotatorView}\n   */\n\n\n  _createRotatorView() {\n    const view = new RotatorView(this.editor.locale);\n    const t = this.editor.locale.t;\n    this.view.content.add(view); // Hide navigation when there is only a one stack & not in single view mode.\n\n    view.bind('isNavigationVisible').to(this, '_numberOfStacks', this, '_singleViewMode', (value, isSingleViewMode) => {\n      return !isSingleViewMode && value > 1;\n    }); // Update balloon position after toggling navigation.\n\n    view.on('change:isNavigationVisible', () => this.updatePosition(), {\n      priority: 'low'\n    }); // Update stacks counter value.\n\n    view.bind('counter').to(this, 'visibleView', this, '_numberOfStacks', (visibleView, numberOfStacks) => {\n      if (numberOfStacks < 2) {\n        return '';\n      }\n\n      const current = Array.from(this._idToStack.values()).indexOf(this._visibleStack) + 1;\n      return t('%0 of %1', [current, numberOfStacks]);\n    });\n    view.buttonNextView.on('execute', () => {\n      // When current view has a focus then move focus to the editable before removing it,\n      // otherwise editor will lost focus.\n      if (view.focusTracker.isFocused) {\n        this.editor.editing.view.focus();\n      }\n\n      this._showNextStack();\n    });\n    view.buttonPrevView.on('execute', () => {\n      // When current view has a focus then move focus to the editable before removing it,\n      // otherwise editor will lost focus.\n      if (view.focusTracker.isFocused) {\n        this.editor.editing.view.focus();\n      }\n\n      this._showPrevStack();\n    });\n    return view;\n  }\n  /**\n   * @private\n   * @returns {module:ui/view~View}\n   */\n\n\n  _createFakePanelsView() {\n    const view = new FakePanelsView(this.editor.locale, this.view);\n    view.bind('numberOfPanels').to(this, '_numberOfStacks', this, '_singleViewMode', (number, isSingleViewMode) => {\n      const showPanels = !isSingleViewMode && number >= 2;\n      return showPanels ? Math.min(number - 1, 2) : 0;\n    });\n    view.listenTo(this.view, 'change:top', () => view.updatePosition());\n    view.listenTo(this.view, 'change:left', () => view.updatePosition());\n    this.editor.ui.view.body.add(view);\n    return view;\n  }\n  /**\n   * Sets the view as the content of the balloon and attaches the balloon using position\n   * options of the first view.\n   *\n   * @private\n   * @param {Object} data Configuration.\n   * @param {module:ui/view~View} [data.view] The view to show in the balloon.\n   * @param {String} [data.balloonClassName=''] Additional class name which will be added to the {@link #view balloon}.\n   * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n   */\n\n\n  _showView(_ref) {\n    let {\n      view,\n      balloonClassName = '',\n      withArrow = true,\n      singleViewMode = false\n    } = _ref;\n    this.view.class = balloonClassName;\n    this.view.withArrow = withArrow;\n\n    this._rotatorView.showView(view);\n\n    this.visibleView = view;\n    this.view.pin(this._getBalloonPosition());\n\n    this._fakePanelsView.updatePosition();\n\n    if (singleViewMode) {\n      this._singleViewMode = true;\n    }\n  }\n  /**\n   * Returns position options of the last view in the stack.\n   * This keeps the balloon in the same position when the view is changed.\n   *\n   * @private\n   * @returns {module:utils/dom/position~Options}\n   */\n\n\n  _getBalloonPosition() {\n    let position = Array.from(this._visibleStack.values()).pop().position;\n\n    if (position) {\n      // Use the default limiter if none has been specified.\n      if (!position.limiter) {\n        // Don't modify the original options object.\n        position = Object.assign({}, position, {\n          limiter: this.positionLimiter\n        });\n      } // Don't modify the original options object.\n\n\n      position = Object.assign({}, position, {\n        viewportOffsetConfig: this.editor.ui.viewportOffset\n      });\n    }\n\n    return position;\n  }\n\n}\n/**\n * Rotator view is a helper class for the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon}.\n * It is used for displaying the last view from the current stack and providing navigation buttons for switching stacks.\n * See the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon} documentation to learn more.\n *\n * @extends module:ui/view~View\n */\n\nclass RotatorView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    const t = locale.t;\n    const bind = this.bindTemplate;\n    /**\n     * Defines whether navigation is visible or not.\n     *\n     * @member {Boolean} #isNavigationVisible\n     */\n\n    this.set('isNavigationVisible', true);\n    /**\n     * Used for checking if a view is focused or not.\n     *\n     * @type {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * Navigation button for switching the stack to the previous one.\n     *\n     * @type {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.buttonPrevView = this._createButtonView(t('Previous'), prevIcon);\n    /**\n     * Navigation button for switching the stack to the next one.\n     *\n     * @type {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.buttonNextView = this._createButtonView(t('Next'), nextIcon);\n    /**\n     * A collection of the child views that creates the rotator content.\n     *\n     * @readonly\n     * @type {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.content = this.createCollection();\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-balloon-rotator'],\n        'z-index': '-1'\n      },\n      children: [{\n        tag: 'div',\n        attributes: {\n          class: ['ck-balloon-rotator__navigation', bind.to('isNavigationVisible', value => value ? '' : 'ck-hidden')]\n        },\n        children: [this.buttonPrevView, {\n          tag: 'span',\n          attributes: {\n            class: ['ck-balloon-rotator__counter']\n          },\n          children: [{\n            text: bind.to('counter')\n          }]\n        }, this.buttonNextView]\n      }, {\n        tag: 'div',\n        attributes: {\n          class: 'ck-balloon-rotator__content'\n        },\n        children: this.content\n      }]\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    this.focusTracker.add(this.element);\n  }\n  /**\n   * Shows a given view.\n   *\n   * @param {module:ui/view~View} view The view to show.\n   */\n\n\n  showView(view) {\n    this.hideView();\n    this.content.add(view);\n  }\n  /**\n   * Hides the currently displayed view.\n   */\n\n\n  hideView() {\n    this.content.clear();\n  }\n  /**\n   * Creates a navigation button view.\n   *\n   * @private\n   * @param {String} label The button label.\n   * @param {String} icon The button icon.\n   * @returns {module:ui/button/buttonview~ButtonView}\n   */\n\n\n  _createButtonView(label, icon) {\n    const view = new ButtonView(this.locale);\n    view.set({\n      label,\n      icon,\n      tooltip: true\n    });\n    return view;\n  }\n\n} // Displays additional layers under the balloon when multiple stacks are added to the balloon.\n//\n// @private\n// @extends module:ui/view~View\n\n\nclass FakePanelsView extends View {\n  // @inheritDoc\n  constructor(locale, balloonPanelView) {\n    super(locale);\n    const bind = this.bindTemplate; // Fake panels top offset.\n    //\n    // @observable\n    // @member {Number} #top\n\n    this.set('top', 0); // Fake panels left offset.\n    //\n    // @observable\n    // @member {Number} #left\n\n    this.set('left', 0); // Fake panels height.\n    //\n    // @observable\n    // @member {Number} #height\n\n    this.set('height', 0); // Fake panels width.\n    //\n    // @observable\n    // @member {Number} #width\n\n    this.set('width', 0); // Number of rendered fake panels.\n    //\n    // @observable\n    // @member {Number} #numberOfPanels\n\n    this.set('numberOfPanels', 0); // Collection of the child views which creates fake panel content.\n    //\n    // @readonly\n    // @type {module:ui/viewcollection~ViewCollection}\n\n    this.content = this.createCollection(); // Context.\n    //\n    // @private\n    // @type {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n\n    this._balloonPanelView = balloonPanelView;\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck-fake-panel', bind.to('numberOfPanels', number => number ? '' : 'ck-hidden')],\n        style: {\n          top: bind.to('top', toPx),\n          left: bind.to('left', toPx),\n          width: bind.to('width', toPx),\n          height: bind.to('height', toPx)\n        }\n      },\n      children: this.content\n    });\n    this.on('change:numberOfPanels', (evt, name, next, prev) => {\n      if (next > prev) {\n        this._addPanels(next - prev);\n      } else {\n        this._removePanels(prev - next);\n      }\n\n      this.updatePosition();\n    });\n  } // @private\n  // @param {Number} number\n\n\n  _addPanels(number) {\n    while (number--) {\n      const view = new View();\n      view.setTemplate({\n        tag: 'div'\n      });\n      this.content.add(view);\n      this.registerChild(view);\n    }\n  } // @private\n  // @param {Number} number\n\n\n  _removePanels(number) {\n    while (number--) {\n      const view = this.content.last;\n      this.content.remove(view);\n      this.deregisterChild(view);\n      view.destroy();\n    }\n  } // Updates coordinates of fake panels.\n\n\n  updatePosition() {\n    if (this.numberOfPanels) {\n      const {\n        top,\n        left\n      } = this._balloonPanelView;\n      const {\n        width,\n        height\n      } = new Rect(this._balloonPanelView.element);\n      Object.assign(this, {\n        top,\n        left,\n        width,\n        height\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon.js"],"names":["Plugin","BalloonPanelView","View","ButtonView","CKEditorError","FocusTracker","toUnit","Rect","prevIcon","nextIcon","toPx","ContextualBalloon","pluginName","constructor","editor","positionLimiter","view","editing","viewDocument","document","editableElement","selection","domConverter","mapViewToDom","root","set","locale","ui","body","add","focusTracker","element","_viewToStack","Map","_idToStack","_rotatorView","_createRotatorView","_fakePanelsView","_createFakePanelsView","hasView","Array","from","keys","includes","data","stackId","has","get","_numberOfStacks","size","_visibleStack","singleViewMode","showStack","stack","_showView","remove","_singleViewMode","visibleView","_showNextStack","hide","hideView","values","delete","_getStackId","updatePosition","position","pin","_getBalloonPosition","id","visibleStack","pop","entry","entries","find","stacks","nextIndex","indexOf","_showPrevStack","length","RotatorView","t","content","bind","to","value","isSingleViewMode","on","priority","numberOfStacks","current","buttonNextView","isFocused","focus","buttonPrevView","FakePanelsView","number","showPanels","Math","min","listenTo","balloonClassName","withArrow","class","showView","limiter","Object","assign","viewportOffsetConfig","viewportOffset","bindTemplate","_createButtonView","createCollection","setTemplate","tag","attributes","children","text","render","clear","label","icon","tooltip","balloonPanelView","_balloonPanelView","style","top","left","width","height","evt","name","next","prev","_addPanels","_removePanels","registerChild","last","deregisterChild","destroy","numberOfPanels"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/panel/balloon/contextualballoon\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BalloonPanelView from './balloonpanelview';\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\n\nimport prevIcon from '../../../theme/icons/previous-arrow.svg';\nimport nextIcon from '../../../theme/icons/next-arrow.svg';\n\nimport '../../../theme/components/panel/balloonrotator.css';\nimport '../../../theme/components/panel/fakepanel.css';\n\nconst toPx = toUnit( 'px' );\n\n/**\n * Provides the common contextual balloon for the editor.\n *\n * The role of this plugin is to unify the contextual balloons logic, simplify views management and help\n * avoid the unnecessary complexity of handling multiple {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * instances in the editor.\n *\n * This plugin allows for creating single or multiple panel stacks.\n *\n * Each stack may have multiple views, with the one on the top being visible. When the visible view is removed from the stack,\n * the previous view becomes visible.\n *\n * It might be useful to implement nested navigation in a balloon. For instance, a toolbar view may contain a link button.\n * When you click it, a link view (which lets you set the URL) is created and put on top of the toolbar view, so the link panel\n * is displayed. When you finish editing the link and close (remove) the link view, the toolbar view is visible again.\n *\n * However, there are cases when there are multiple independent balloons to be displayed, for instance, if the selection\n * is inside two inline comments at the same time. For such cases, you can create two independent panel stacks.\n * The contextual balloon plugin will create a navigation bar to let the users switch between these panel stacks using the \"Next\"\n * and \"Previous\" buttons.\n *\n * If there are no views in the current stack, the balloon panel will try to switch to the next stack. If there are no\n * panels in any stack, the balloon panel will be hidden.\n *\n * **Note**: To force the balloon panel to show only one view, even if there are other stacks, use the `singleViewMode=true` option\n * when {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon#add adding} a view to a panel.\n *\n * From the implementation point of view, the contextual ballon plugin is reusing a single\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView} instance to display multiple contextual balloon\n * panels in the editor. It also creates a special {@link module:ui/panel/balloon/contextualballoon~RotatorView rotator view},\n * used to manage multiple panel stacks. Rotator view is a child of the balloon panel view and the parent of the specific\n * view you want to display. If there is more than one panel stack to be displayed, the rotator view will add a\n * navigation bar. If there is only one stack, the rotator view is transparent (it does not add any UI elements).\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ContextualBalloon extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ContextualBalloon';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The {@link module:utils/dom/position~Options#limiter position limiter}\n\t\t * for the {@link #view balloon}, used when no `limiter` has been passed into {@link #add}\n\t\t * or {@link #updatePosition}.\n\t\t *\n\t\t * By default, a function that obtains the farthest DOM\n\t\t * {@link module:engine/view/rooteditableelement~RootEditableElement}\n\t\t * of the {@link module:engine/view/document~Document#selection}.\n\t\t *\n\t\t * @member {module:utils/dom/position~Options#limiter} #positionLimiter\n\t\t */\n\t\tthis.positionLimiter = () => {\n\t\t\tconst view = this.editor.editing.view;\n\t\t\tconst viewDocument = view.document;\n\t\t\tconst editableElement = viewDocument.selection.editableElement;\n\n\t\t\tif ( editableElement ) {\n\t\t\t\treturn view.domConverter.mapViewToDom( editableElement.root );\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\t/**\n\t\t * The currently visible view or `null` when there are no views in any stack.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {module:ui/view~View|null} #visibleView\n\t\t */\n\t\tthis.set( 'visibleView', null );\n\n\t\t/**\n\t\t * The common balloon panel view.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} #view\n\t\t */\n\t\tthis.view = new BalloonPanelView( editor.locale );\n\t\teditor.ui.view.body.add( this.view );\n\t\teditor.ui.focusTracker.add( this.view.element );\n\n\t\t/**\n\t\t * The map of views and their stacks.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<module:ui/view~View,Set>}\n\t\t */\n\t\tthis._viewToStack = new Map();\n\n\t\t/**\n\t\t * The map of IDs and stacks.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<String,Set>}\n\t\t */\n\t\tthis._idToStack = new Map();\n\n\t\t/**\n\t\t * A total number of all stacks in the balloon.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #_numberOfStacks\n\t\t */\n\t\tthis.set( '_numberOfStacks', 0 );\n\n\t\t/**\n\t\t * A flag that controls the single view mode.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #_singleViewMode\n\t\t */\n\t\tthis.set( '_singleViewMode', false );\n\n\t\t/**\n\t\t * Rotator view embedded in the contextual balloon.\n\t\t * Displays the currently visible view in the balloon and provides navigation for switching stacks.\n\t\t *\n\t\t * @private\n\t\t * @type {module:ui/panel/balloon/contextualballoon~RotatorView}\n\t\t */\n\t\tthis._rotatorView = this._createRotatorView();\n\n\t\t/**\n\t\t * Displays fake panels under the balloon panel view when multiple stacks are added to the balloon.\n\t\t *\n\t\t * @private\n\t\t * @type {module:ui/view~View}\n\t\t */\n\t\tthis._fakePanelsView = this._createFakePanelsView();\n\t}\n\n\t/**\n\t * Returns `true` when the given view is in one of the stacks. Otherwise returns `false`.\n\t *\n\t * @param {module:ui/view~View} view\n\t * @returns {Boolean}\n\t */\n\thasView( view ) {\n\t\treturn Array.from( this._viewToStack.keys() ).includes( view );\n\t}\n\n\t/**\n\t * Adds a new view to the stack and makes it visible if the current stack is visible\n\t * or it is the first view in the balloon.\n\t *\n\t * @param {Object} data The configuration of the view.\n\t * @param {String} [data.stackId='main'] The ID of the stack that the view is added to.\n\t * @param {module:ui/view~View} [data.view] The content of the balloon.\n\t * @param {module:utils/dom/position~Options} [data.position] Positioning options.\n\t * @param {String} [data.balloonClassName] An additional CSS class added to the {@link #view balloon} when visible.\n\t * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n\t * @param {Boolean} [data.singleViewMode=false] Whether the view should be the only visible view even if other stacks were added.\n\t */\n\tadd( data ) {\n\t\tif ( this.hasView( data.view ) ) {\n\t\t\t/**\n\t\t\t * Trying to add configuration of the same view more than once.\n\t\t\t *\n\t\t\t * @error contextualballoon-add-view-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'contextualballoon-add-view-exist',\n\t\t\t\t[ this, data ]\n\t\t\t);\n\t\t}\n\n\t\tconst stackId = data.stackId || 'main';\n\n\t\t// If new stack is added, creates it and show view from this stack.\n\t\tif ( !this._idToStack.has( stackId ) ) {\n\t\t\tthis._idToStack.set( stackId, new Map( [ [ data.view, data ] ] ) );\n\t\t\tthis._viewToStack.set( data.view, this._idToStack.get( stackId ) );\n\t\t\tthis._numberOfStacks = this._idToStack.size;\n\n\t\t\tif ( !this._visibleStack || data.singleViewMode ) {\n\t\t\t\tthis.showStack( stackId );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst stack = this._idToStack.get( stackId );\n\n\t\tif ( data.singleViewMode ) {\n\t\t\tthis.showStack( stackId );\n\t\t}\n\n\t\t// Add new view to the stack.\n\t\tstack.set( data.view, data );\n\t\tthis._viewToStack.set( data.view, stack );\n\n\t\t// And display it if is added to the currently visible stack.\n\t\tif ( stack === this._visibleStack ) {\n\t\t\tthis._showView( data );\n\t\t}\n\t}\n\n\t/**\n\t * Removes the given view from the stack. If the removed view was visible,\n\t * the view preceding it in the stack will become visible instead.\n\t * When there is no view in the stack, the next stack will be displayed.\n\t * When there are no more stacks, the balloon will hide.\n\t *\n\t * @param {module:ui/view~View} view A view to be removed from the balloon.\n\t */\n\tremove( view ) {\n\t\tif ( !this.hasView( view ) ) {\n\t\t\t/**\n\t\t\t * Trying to remove the configuration of the view not defined in the stack.\n\t\t\t *\n\t\t\t * @error contextualballoon-remove-view-not-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'contextualballoon-remove-view-not-exist',\n\t\t\t\t[ this, view ]\n\t\t\t);\n\t\t}\n\n\t\tconst stack = this._viewToStack.get( view );\n\n\t\tif ( this._singleViewMode && this.visibleView === view ) {\n\t\t\tthis._singleViewMode = false;\n\t\t}\n\n\t\t// When visible view will be removed we need to show a preceding view or next stack\n\t\t// if a view is the only view in the stack.\n\t\tif ( this.visibleView === view ) {\n\t\t\tif ( stack.size === 1 ) {\n\t\t\t\tif ( this._idToStack.size > 1 ) {\n\t\t\t\t\tthis._showNextStack();\n\t\t\t\t} else {\n\t\t\t\t\tthis.view.hide();\n\t\t\t\t\tthis.visibleView = null;\n\t\t\t\t\tthis._rotatorView.hideView();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._showView( Array.from( stack.values() )[ stack.size - 2 ] );\n\t\t\t}\n\t\t}\n\n\t\tif ( stack.size === 1 ) {\n\t\t\tthis._idToStack.delete( this._getStackId( stack ) );\n\t\t\tthis._numberOfStacks = this._idToStack.size;\n\t\t} else {\n\t\t\tstack.delete( view );\n\t\t}\n\n\t\tthis._viewToStack.delete( view );\n\t}\n\n\t/**\n\t * Updates the position of the balloon using the position data of the first visible view in the stack.\n\t * When new position data is given, the position data of the currently visible view will be updated.\n\t *\n\t * @param {module:utils/dom/position~Options} [position] position options.\n\t */\n\tupdatePosition( position ) {\n\t\tif ( position ) {\n\t\t\tthis._visibleStack.get( this.visibleView ).position = position;\n\t\t}\n\n\t\tthis.view.pin( this._getBalloonPosition() );\n\t\tthis._fakePanelsView.updatePosition();\n\t}\n\n\t/**\n\t * Shows the last view from the stack of a given ID.\n\t *\n\t * @param {String} id\n\t */\n\tshowStack( id ) {\n\t\tthis.visibleStack = id;\n\t\tconst stack = this._idToStack.get( id );\n\n\t\tif ( !stack ) {\n\t\t\t/**\n\t\t\t * Trying to show a stack that does not exist.\n\t\t\t *\n\t\t\t * @error contextualballoon-showstack-stack-not-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'contextualballoon-showstack-stack-not-exist',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tif ( this._visibleStack === stack ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._showView( Array.from( stack.values() ).pop() );\n\t}\n\n\t/**\n\t * Returns the stack of the currently visible view.\n\t *\n\t * @private\n\t * @type {Set}\n\t */\n\tget _visibleStack() {\n\t\treturn this._viewToStack.get( this.visibleView );\n\t}\n\n\t/**\n\t * Returns the ID of the given stack.\n\t *\n\t * @private\n\t * @param {Set} stack\n\t * @returns {String}\n\t */\n\t_getStackId( stack ) {\n\t\tconst entry = Array.from( this._idToStack.entries() ).find( entry => entry[ 1 ] === stack );\n\n\t\treturn entry[ 0 ];\n\t}\n\n\t/**\n\t * Shows the last view from the next stack.\n\t *\n\t * @private\n\t */\n\t_showNextStack() {\n\t\tconst stacks = Array.from( this._idToStack.values() );\n\n\t\tlet nextIndex = stacks.indexOf( this._visibleStack ) + 1;\n\n\t\tif ( !stacks[ nextIndex ] ) {\n\t\t\tnextIndex = 0;\n\t\t}\n\n\t\tthis.showStack( this._getStackId( stacks[ nextIndex ] ) );\n\t}\n\n\t/**\n\t * Shows the last view from the previous stack.\n\t *\n\t * @private\n\t */\n\t_showPrevStack() {\n\t\tconst stacks = Array.from( this._idToStack.values() );\n\n\t\tlet nextIndex = stacks.indexOf( this._visibleStack ) - 1;\n\n\t\tif ( !stacks[ nextIndex ] ) {\n\t\t\tnextIndex = stacks.length - 1;\n\t\t}\n\n\t\tthis.showStack( this._getStackId( stacks[ nextIndex ] ) );\n\t}\n\n\t/**\n\t * Creates a rotator view.\n\t *\n\t * @private\n\t * @returns {module:ui/panel/balloon/contextualballoon~RotatorView}\n\t */\n\t_createRotatorView() {\n\t\tconst view = new RotatorView( this.editor.locale );\n\t\tconst t = this.editor.locale.t;\n\n\t\tthis.view.content.add( view );\n\n\t\t// Hide navigation when there is only a one stack & not in single view mode.\n\t\tview.bind( 'isNavigationVisible' ).to( this, '_numberOfStacks', this, '_singleViewMode', ( value, isSingleViewMode ) => {\n\t\t\treturn !isSingleViewMode && value > 1;\n\t\t} );\n\n\t\t// Update balloon position after toggling navigation.\n\t\tview.on( 'change:isNavigationVisible', () => ( this.updatePosition() ), { priority: 'low' } );\n\n\t\t// Update stacks counter value.\n\t\tview.bind( 'counter' ).to( this, 'visibleView', this, '_numberOfStacks', ( visibleView, numberOfStacks ) => {\n\t\t\tif ( numberOfStacks < 2 ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tconst current = Array.from( this._idToStack.values() ).indexOf( this._visibleStack ) + 1;\n\n\t\t\treturn t( '%0 of %1', [ current, numberOfStacks ] );\n\t\t} );\n\n\t\tview.buttonNextView.on( 'execute', () => {\n\t\t\t// When current view has a focus then move focus to the editable before removing it,\n\t\t\t// otherwise editor will lost focus.\n\t\t\tif ( view.focusTracker.isFocused ) {\n\t\t\t\tthis.editor.editing.view.focus();\n\t\t\t}\n\n\t\t\tthis._showNextStack();\n\t\t} );\n\n\t\tview.buttonPrevView.on( 'execute', () => {\n\t\t\t// When current view has a focus then move focus to the editable before removing it,\n\t\t\t// otherwise editor will lost focus.\n\t\t\tif ( view.focusTracker.isFocused ) {\n\t\t\t\tthis.editor.editing.view.focus();\n\t\t\t}\n\n\t\t\tthis._showPrevStack();\n\t\t} );\n\n\t\treturn view;\n\t}\n\n\t/**\n\t * @private\n\t * @returns {module:ui/view~View}\n\t */\n\t_createFakePanelsView() {\n\t\tconst view = new FakePanelsView( this.editor.locale, this.view );\n\n\t\tview.bind( 'numberOfPanels' ).to( this, '_numberOfStacks', this, '_singleViewMode', ( number, isSingleViewMode ) => {\n\t\t\tconst showPanels = !isSingleViewMode && number >= 2;\n\n\t\t\treturn showPanels ? Math.min( number - 1, 2 ) : 0;\n\t\t} );\n\n\t\tview.listenTo( this.view, 'change:top', () => view.updatePosition() );\n\t\tview.listenTo( this.view, 'change:left', () => view.updatePosition() );\n\n\t\tthis.editor.ui.view.body.add( view );\n\n\t\treturn view;\n\t}\n\n\t/**\n\t * Sets the view as the content of the balloon and attaches the balloon using position\n\t * options of the first view.\n\t *\n\t * @private\n\t * @param {Object} data Configuration.\n\t * @param {module:ui/view~View} [data.view] The view to show in the balloon.\n\t * @param {String} [data.balloonClassName=''] Additional class name which will be added to the {@link #view balloon}.\n\t * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n\t */\n\t_showView( { view, balloonClassName = '', withArrow = true, singleViewMode = false } ) {\n\t\tthis.view.class = balloonClassName;\n\t\tthis.view.withArrow = withArrow;\n\n\t\tthis._rotatorView.showView( view );\n\t\tthis.visibleView = view;\n\t\tthis.view.pin( this._getBalloonPosition() );\n\t\tthis._fakePanelsView.updatePosition();\n\n\t\tif ( singleViewMode ) {\n\t\t\tthis._singleViewMode = true;\n\t\t}\n\t}\n\n\t/**\n\t * Returns position options of the last view in the stack.\n\t * This keeps the balloon in the same position when the view is changed.\n\t *\n\t * @private\n\t * @returns {module:utils/dom/position~Options}\n\t */\n\t_getBalloonPosition() {\n\t\tlet position = Array.from( this._visibleStack.values() ).pop().position;\n\n\t\tif ( position ) {\n\t\t\t// Use the default limiter if none has been specified.\n\t\t\tif ( !position.limiter ) {\n\t\t\t\t// Don't modify the original options object.\n\t\t\t\tposition = Object.assign( {}, position, {\n\t\t\t\t\tlimiter: this.positionLimiter\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Don't modify the original options object.\n\t\t\tposition = Object.assign( {}, position, {\n\t\t\t\tviewportOffsetConfig: this.editor.ui.viewportOffset\n\t\t\t} );\n\t\t}\n\n\t\treturn position;\n\t}\n}\n\n/**\n * Rotator view is a helper class for the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon}.\n * It is used for displaying the last view from the current stack and providing navigation buttons for switching stacks.\n * See the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon} documentation to learn more.\n *\n * @extends module:ui/view~View\n */\nclass RotatorView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst t = locale.t;\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Defines whether navigation is visible or not.\n\t\t *\n\t\t * @member {Boolean} #isNavigationVisible\n\t\t */\n\t\tthis.set( 'isNavigationVisible', true );\n\n\t\t/**\n\t\t * Used for checking if a view is focused or not.\n\t\t *\n\t\t * @type {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Navigation button for switching the stack to the previous one.\n\t\t *\n\t\t * @type {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.buttonPrevView = this._createButtonView( t( 'Previous' ), prevIcon );\n\n\t\t/**\n\t\t * Navigation button for switching the stack to the next one.\n\t\t *\n\t\t * @type {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.buttonNextView = this._createButtonView( t( 'Next' ), nextIcon );\n\n\t\t/**\n\t\t * A collection of the child views that creates the rotator content.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.content = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-balloon-rotator'\n\t\t\t\t],\n\t\t\t\t'z-index': '-1'\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck-balloon-rotator__navigation',\n\t\t\t\t\t\t\tbind.to( 'isNavigationVisible', value => value ? '' : 'ck-hidden' )\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\tthis.buttonPrevView,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'span',\n\n\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t\t\t'ck-balloon-rotator__counter'\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttext: bind.to( 'counter' )\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis.buttonNextView\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: 'ck-balloon-rotator__content'\n\t\t\t\t\t},\n\t\t\t\t\tchildren: this.content\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.focusTracker.add( this.element );\n\t}\n\n\t/**\n\t * Shows a given view.\n\t *\n\t * @param {module:ui/view~View} view The view to show.\n\t */\n\tshowView( view ) {\n\t\tthis.hideView();\n\t\tthis.content.add( view );\n\t}\n\n\t/**\n\t * Hides the currently displayed view.\n\t */\n\thideView() {\n\t\tthis.content.clear();\n\t}\n\n\t/**\n\t * Creates a navigation button view.\n\t *\n\t * @private\n\t * @param {String} label The button label.\n\t * @param {String} icon The button icon.\n\t * @returns {module:ui/button/buttonview~ButtonView}\n\t */\n\t_createButtonView( label, icon ) {\n\t\tconst view = new ButtonView( this.locale );\n\n\t\tview.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\treturn view;\n\t}\n}\n\n// Displays additional layers under the balloon when multiple stacks are added to the balloon.\n//\n// @private\n// @extends module:ui/view~View\nclass FakePanelsView extends View {\n\t// @inheritDoc\n\tconstructor( locale, balloonPanelView ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t// Fake panels top offset.\n\t\t//\n\t\t// @observable\n\t\t// @member {Number} #top\n\t\tthis.set( 'top', 0 );\n\n\t\t// Fake panels left offset.\n\t\t//\n\t\t// @observable\n\t\t// @member {Number} #left\n\t\tthis.set( 'left', 0 );\n\n\t\t// Fake panels height.\n\t\t//\n\t\t// @observable\n\t\t// @member {Number} #height\n\t\tthis.set( 'height', 0 );\n\n\t\t// Fake panels width.\n\t\t//\n\t\t// @observable\n\t\t// @member {Number} #width\n\t\tthis.set( 'width', 0 );\n\n\t\t// Number of rendered fake panels.\n\t\t//\n\t\t// @observable\n\t\t// @member {Number} #numberOfPanels\n\t\tthis.set( 'numberOfPanels', 0 );\n\n\t\t// Collection of the child views which creates fake panel content.\n\t\t//\n\t\t// @readonly\n\t\t// @type {module:ui/viewcollection~ViewCollection}\n\t\tthis.content = this.createCollection();\n\n\t\t// Context.\n\t\t//\n\t\t// @private\n\t\t// @type {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n\t\tthis._balloonPanelView = balloonPanelView;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-fake-panel',\n\t\t\t\t\tbind.to( 'numberOfPanels', number => number ? '' : 'ck-hidden' )\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\ttop: bind.to( 'top', toPx ),\n\t\t\t\t\tleft: bind.to( 'left', toPx ),\n\t\t\t\t\twidth: bind.to( 'width', toPx ),\n\t\t\t\t\theight: bind.to( 'height', toPx )\n\t\t\t\t}\n\t\t\t},\n\t\t\tchildren: this.content\n\t\t} );\n\n\t\tthis.on( 'change:numberOfPanels', ( evt, name, next, prev ) => {\n\t\t\tif ( next > prev ) {\n\t\t\t\tthis._addPanels( next - prev );\n\t\t\t} else {\n\t\t\t\tthis._removePanels( prev - next );\n\t\t\t}\n\n\t\t\tthis.updatePosition();\n\t\t} );\n\t}\n\n\t// @private\n\t// @param {Number} number\n\t_addPanels( number ) {\n\t\twhile ( number-- ) {\n\t\t\tconst view = new View();\n\n\t\t\tview.setTemplate( { tag: 'div' } );\n\n\t\t\tthis.content.add( view );\n\t\t\tthis.registerChild( view );\n\t\t}\n\t}\n\n\t// @private\n\t// @param {Number} number\n\t_removePanels( number ) {\n\t\twhile ( number-- ) {\n\t\t\tconst view = this.content.last;\n\n\t\t\tthis.content.remove( view );\n\t\t\tthis.deregisterChild( view );\n\t\t\tview.destroy();\n\t\t}\n\t}\n\n\t// Updates coordinates of fake panels.\n\tupdatePosition() {\n\t\tif ( this.numberOfPanels ) {\n\t\t\tconst { top, left } = this._balloonPanelView;\n\t\t\tconst { width, height } = new Rect( this._balloonPanelView.element );\n\n\t\t\tObject.assign( this, { top, left, width, height } );\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}