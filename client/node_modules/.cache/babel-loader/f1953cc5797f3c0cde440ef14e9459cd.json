{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/diff\n */\nimport fastDiff from '../src/fastdiff'; // The following code is based on the \"O(NP) Sequence Comparison Algorithm\"\n// by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n\n/**\n * Calculates the difference between two arrays or strings producing an array containing a list of changes\n * necessary to transform input into output.\n *\n *\t\tdiff( 'aba', 'acca' ); // [ 'equal', 'insert', 'insert', 'delete', 'equal' ]\n *\n * This function is based on the \"O(NP) Sequence Comparison Algorithm\" by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n * Unfortunately, while it gives the most precise results, its to complex for longer strings/arrow (above 200 items).\n * Therefore, `diff()` automatically switches to {@link module:utils/fastdiff~fastDiff `fastDiff()`} when detecting\n * such a scenario. The return formats of both functions are identical.\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Output array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default === is used.\n * @returns {Array} Array of changes.\n */\n\nexport default function diff(a, b, cmp) {\n  // Set the comparator function.\n  cmp = cmp || function (a, b) {\n    return a === b;\n  };\n\n  const aLength = a.length;\n  const bLength = b.length; // Perform `fastDiff` for longer strings/arrays (see #269).\n\n  if (aLength > 200 || bLength > 200 || aLength + bLength > 300) {\n    return diff.fastDiff(a, b, cmp, true);\n  } // Temporary action type statics.\n\n\n  let _insert, _delete; // Swapped the arrays to use the shorter one as the first one.\n\n\n  if (bLength < aLength) {\n    const tmp = a;\n    a = b;\n    b = tmp; // We swap the action types as well.\n\n    _insert = 'delete';\n    _delete = 'insert';\n  } else {\n    _insert = 'insert';\n    _delete = 'delete';\n  }\n\n  const m = a.length;\n  const n = b.length;\n  const delta = n - m; // Edit scripts, for each diagonal.\n\n  const es = {}; // Furthest points, the furthest y we can get on each diagonal.\n\n  const fp = {};\n\n  function snake(k) {\n    // We use -1 as an alternative below to handle initial values ( instead of filling the fp with -1 first ).\n    // Furthest points (y) on the diagonal below k.\n    const y1 = (fp[k - 1] !== undefined ? fp[k - 1] : -1) + 1; // Furthest points (y) on the diagonal above k.\n\n    const y2 = fp[k + 1] !== undefined ? fp[k + 1] : -1; // The way we should go to get further.\n\n    const dir = y1 > y2 ? -1 : 1; // Clone previous changes array (if any).\n\n    if (es[k + dir]) {\n      es[k] = es[k + dir].slice(0);\n    } // Create changes array.\n\n\n    if (!es[k]) {\n      es[k] = [];\n    } // Push the action.\n\n\n    es[k].push(y1 > y2 ? _insert : _delete); // Set the beginning coordinates.\n\n    let y = Math.max(y1, y2);\n    let x = y - k; // Traverse the diagonal as long as the values match.\n\n    while (x < m && y < n && cmp(a[x], b[y])) {\n      x++;\n      y++; // Push no change action.\n\n      es[k].push('equal');\n    }\n\n    return y;\n  }\n\n  let p = 0;\n  let k; // Traverse the graph until we reach the end of the longer string.\n\n  do {\n    // Updates furthest points and edit scripts for diagonals below delta.\n    for (k = -p; k < delta; k++) {\n      fp[k] = snake(k);\n    } // Updates furthest points and edit scripts for diagonals above delta.\n\n\n    for (k = delta + p; k > delta; k--) {\n      fp[k] = snake(k);\n    } // Updates furthest point and edit script for the delta diagonal.\n    // note that the delta diagonal is the one which goes through the sink (m, n).\n\n\n    fp[delta] = snake(delta);\n    p++;\n  } while (fp[delta] !== n); // Return the final list of edit changes.\n  // We remove the first item that represents the action for the injected nulls.\n\n\n  return es[delta].slice(1);\n} // Store the API in static property to easily overwrite it in tests.\n// Too bad dependency injection does not work in Webpack + ES 6 (const) + Babel.\n\ndiff.fastDiff = fastDiff;","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-utils/src/diff.js"],"names":["fastDiff","diff","a","b","cmp","aLength","length","bLength","_insert","_delete","tmp","m","n","delta","es","fp","snake","k","y1","undefined","y2","dir","slice","push","y","Math","max","x","p"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/diff\n */\n\nimport fastDiff from '../src/fastdiff';\n\n// The following code is based on the \"O(NP) Sequence Comparison Algorithm\"\n// by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n\n/**\n * Calculates the difference between two arrays or strings producing an array containing a list of changes\n * necessary to transform input into output.\n *\n *\t\tdiff( 'aba', 'acca' ); // [ 'equal', 'insert', 'insert', 'delete', 'equal' ]\n *\n * This function is based on the \"O(NP) Sequence Comparison Algorithm\" by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n * Unfortunately, while it gives the most precise results, its to complex for longer strings/arrow (above 200 items).\n * Therefore, `diff()` automatically switches to {@link module:utils/fastdiff~fastDiff `fastDiff()`} when detecting\n * such a scenario. The return formats of both functions are identical.\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Output array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default === is used.\n * @returns {Array} Array of changes.\n */\nexport default function diff( a, b, cmp ) {\n\t// Set the comparator function.\n\tcmp = cmp || function( a, b ) {\n\t\treturn a === b;\n\t};\n\n\tconst aLength = a.length;\n\tconst bLength = b.length;\n\n\t// Perform `fastDiff` for longer strings/arrays (see #269).\n\tif ( aLength > 200 || bLength > 200 || aLength + bLength > 300 ) {\n\t\treturn diff.fastDiff( a, b, cmp, true );\n\t}\n\n\t// Temporary action type statics.\n\tlet _insert, _delete;\n\n\t// Swapped the arrays to use the shorter one as the first one.\n\tif ( bLength < aLength ) {\n\t\tconst tmp = a;\n\n\t\ta = b;\n\t\tb = tmp;\n\n\t\t// We swap the action types as well.\n\t\t_insert = 'delete';\n\t\t_delete = 'insert';\n\t} else {\n\t\t_insert = 'insert';\n\t\t_delete = 'delete';\n\t}\n\n\tconst m = a.length;\n\tconst n = b.length;\n\tconst delta = n - m;\n\n\t// Edit scripts, for each diagonal.\n\tconst es = {};\n\t// Furthest points, the furthest y we can get on each diagonal.\n\tconst fp = {};\n\n\tfunction snake( k ) {\n\t\t// We use -1 as an alternative below to handle initial values ( instead of filling the fp with -1 first ).\n\t\t// Furthest points (y) on the diagonal below k.\n\t\tconst y1 = ( fp[ k - 1 ] !== undefined ? fp[ k - 1 ] : -1 ) + 1;\n\t\t// Furthest points (y) on the diagonal above k.\n\t\tconst y2 = fp[ k + 1 ] !== undefined ? fp[ k + 1 ] : -1;\n\t\t// The way we should go to get further.\n\t\tconst dir = y1 > y2 ? -1 : 1;\n\n\t\t// Clone previous changes array (if any).\n\t\tif ( es[ k + dir ] ) {\n\t\t\tes[ k ] = es[ k + dir ].slice( 0 );\n\t\t}\n\n\t\t// Create changes array.\n\t\tif ( !es[ k ] ) {\n\t\t\tes[ k ] = [];\n\t\t}\n\n\t\t// Push the action.\n\t\tes[ k ].push( y1 > y2 ? _insert : _delete );\n\n\t\t// Set the beginning coordinates.\n\t\tlet y = Math.max( y1, y2 );\n\t\tlet x = y - k;\n\n\t\t// Traverse the diagonal as long as the values match.\n\t\twhile ( x < m && y < n && cmp( a[ x ], b[ y ] ) ) {\n\t\t\tx++;\n\t\t\ty++;\n\t\t\t// Push no change action.\n\t\t\tes[ k ].push( 'equal' );\n\t\t}\n\n\t\treturn y;\n\t}\n\n\tlet p = 0;\n\tlet k;\n\n\t// Traverse the graph until we reach the end of the longer string.\n\tdo {\n\t\t// Updates furthest points and edit scripts for diagonals below delta.\n\t\tfor ( k = -p; k < delta; k++ ) {\n\t\t\tfp[ k ] = snake( k );\n\t\t}\n\n\t\t// Updates furthest points and edit scripts for diagonals above delta.\n\t\tfor ( k = delta + p; k > delta; k-- ) {\n\t\t\tfp[ k ] = snake( k );\n\t\t}\n\n\t\t// Updates furthest point and edit script for the delta diagonal.\n\t\t// note that the delta diagonal is the one which goes through the sink (m, n).\n\t\tfp[ delta ] = snake( delta );\n\n\t\tp++;\n\t} while ( fp[ delta ] !== n );\n\n\t// Return the final list of edit changes.\n\t// We remove the first item that represents the action for the injected nulls.\n\treturn es[ delta ].slice( 1 );\n}\n\n// Store the API in static property to easily overwrite it in tests.\n// Too bad dependency injection does not work in Webpack + ES 6 (const) + Babel.\ndiff.fastDiff = fastDiff;\n"]},"metadata":{},"sourceType":"module"}