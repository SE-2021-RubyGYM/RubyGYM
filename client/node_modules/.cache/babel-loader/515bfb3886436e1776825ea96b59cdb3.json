{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/view\n */\nimport Document from './document';\nimport DowncastWriter from './downcastwriter';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport MutationObserver from './observer/mutationobserver';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\nimport InputObserver from './observer/inputobserver';\nimport ArrowKeysObserver from './observer/arrowkeysobserver';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n *\t\tview.change( writer => {\n *\t\t\twriter.insert( position, writer.createText( 'foo' ) );\n *\t\t} );\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class View {\n  /**\n   * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor The styles processor instance.\n   */\n  constructor(stylesProcessor) {\n    /**\n     * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\n     *\n     * @readonly\n     * @type {module:engine/view/document~Document}\n     */\n    this.document = new Document(stylesProcessor);\n    /**\n     * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} used by\n     * {@link module:engine/view/view~View#_renderer renderer}\n     * and {@link module:engine/view/observer/observer~Observer observers}.\n     *\n     * @readonly\n     * @type {module:engine/view/domconverter~DomConverter}\n     */\n\n    this.domConverter = new DomConverter(this.document);\n    /**\n     * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n     *\n     * @readonly\n     * @type {Map.<String, HTMLElement>}\n     */\n\n    this.domRoots = new Map();\n    /**\n     * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n     *\n     * @readonly\n     * @member {Boolean} #isRenderingInProgress\n     */\n\n    this.set('isRenderingInProgress', false);\n    /**\n     * Informs whether the DOM selection is inside any of the DOM roots managed by the view.\n     *\n     * @readonly\n     * @member {Boolean} #hasDomSelection\n     */\n\n    this.set('hasDomSelection', false);\n    /**\n     * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\n     *\n     * @protected\n     * @type {module:engine/view/renderer~Renderer}\n     */\n\n    this._renderer = new Renderer(this.domConverter, this.document.selection);\n\n    this._renderer.bind('isFocused', 'isSelecting').to(this.document);\n    /**\n     * A DOM root attributes cache. It saves the initial values of DOM root attributes before the DOM element\n     * is {@link module:engine/view/view~View#attachDomRoot attached} to the view so later on, when\n     * the view is destroyed ({@link module:engine/view/view~View#detachDomRoot}), they can be easily restored.\n     * This way, the DOM element can go back to the (clean) state as if the editing view never used it.\n     *\n     * @private\n     * @member {WeakMap.<HTMLElement,Object>}\n     */\n\n\n    this._initialDomRootAttributes = new WeakMap();\n    /**\n     * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n     *\n     * @private\n     * @type {Map.<Function, module:engine/view/observer/observer~Observer>}\n     */\n\n    this._observers = new Map();\n    /**\n     * Is set to `true` when {@link #change view changes} are currently in progress.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._ongoingChange = false;\n    /**\n     * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._postFixersInProgress = false;\n    /**\n     * Internal flag to temporary disable rendering. See the usage in the {@link #_disableRendering}.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._renderingDisabled = false;\n    /**\n     * Internal flag that disables rendering when there are no changes since the last rendering.\n     * It stores information about changed selection and changed elements from attached document roots.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._hasChangedSinceTheLastRendering = false;\n    /**\n     * DowncastWriter instance used in {@link #change change method} callbacks.\n     *\n     * @private\n     * @type {module:engine/view/downcastwriter~DowncastWriter}\n     */\n\n    this._writer = new DowncastWriter(this.document); // Add default observers.\n\n    this.addObserver(MutationObserver);\n    this.addObserver(SelectionObserver);\n    this.addObserver(FocusObserver);\n    this.addObserver(KeyObserver);\n    this.addObserver(FakeSelectionObserver);\n    this.addObserver(CompositionObserver);\n    this.addObserver(ArrowKeysObserver);\n\n    if (env.isAndroid) {\n      this.addObserver(InputObserver);\n    } // Inject quirks handlers.\n\n\n    injectQuirksHandling(this);\n    injectUiElementHandling(this); // Use 'normal' priority so that rendering is performed as first when using that priority.\n\n    this.on('render', () => {\n      this._render(); // Informs that layout has changed after render.\n\n\n      this.document.fire('layoutChanged'); // Reset the `_hasChangedSinceTheLastRendering` flag after rendering.\n\n      this._hasChangedSinceTheLastRendering = false;\n    }); // Listen to the document selection changes directly.\n\n    this.listenTo(this.document.selection, 'change', () => {\n      this._hasChangedSinceTheLastRendering = true;\n    }); // Trigger re-render if only the focus changed.\n\n    this.listenTo(this.document, 'change:isFocused', () => {\n      this._hasChangedSinceTheLastRendering = true;\n    });\n  }\n  /**\n   * Attaches a DOM root element to the view element and enable all observers on that element.\n   * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized\n   * with the view what means that all child nodes will be removed and replaced with content of the view root.\n   *\n   * This method also will change view element name as the same as tag name of given dom root.\n   * Name is always transformed to lower case.\n   *\n   * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.\n   *\n   * @param {Element} domRoot DOM root element.\n   * @param {String} [name='main'] Name of the root.\n   */\n\n\n  attachDomRoot(domRoot) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'main';\n    const viewRoot = this.document.getRoot(name); // Set view root name the same as DOM root tag name.\n\n    viewRoot._name = domRoot.tagName.toLowerCase();\n    const initialDomRootAttributes = {}; // 1. Copy and cache the attributes to remember the state of the element before attaching.\n    //    The cached attributes will be restored in detachDomRoot() so the element goes to the\n    //    clean state as if the editing view never used it.\n    // 2. Apply the attributes using the view writer, so they all go under the control of the engine.\n    //    The editing view takes over the attribute management completely because various\n    //    features (e.g. addPlaceholder()) require dynamic changes of those attributes and they\n    //    cannot be managed by the engine and the UI library at the same time.\n\n    for (const {\n      name,\n      value\n    } of Array.from(domRoot.attributes)) {\n      initialDomRootAttributes[name] = value; // Do not use writer.setAttribute() for the class attribute. The EditableUIView class\n      // and its descendants could have already set some using the writer.addClass() on the view\n      // document root. They haven't been rendered yet so they are not present in the DOM root.\n      // Using writer.setAttribute( 'class', ... ) would override them completely.\n\n      if (name === 'class') {\n        this._writer.addClass(value.split(' '), viewRoot);\n      } else {\n        this._writer.setAttribute(name, value, viewRoot);\n      }\n    }\n\n    this._initialDomRootAttributes.set(domRoot, initialDomRootAttributes);\n\n    const updateContenteditableAttribute = () => {\n      this._writer.setAttribute('contenteditable', !viewRoot.isReadOnly, viewRoot);\n\n      if (viewRoot.isReadOnly) {\n        this._writer.addClass('ck-read-only', viewRoot);\n      } else {\n        this._writer.removeClass('ck-read-only', viewRoot);\n      }\n    }; // Set initial value.\n\n\n    updateContenteditableAttribute();\n    this.domRoots.set(name, domRoot);\n    this.domConverter.bindElements(domRoot, viewRoot);\n\n    this._renderer.markToSync('children', viewRoot);\n\n    this._renderer.markToSync('attributes', viewRoot);\n\n    this._renderer.domDocuments.add(domRoot.ownerDocument);\n\n    viewRoot.on('change:children', (evt, node) => this._renderer.markToSync('children', node));\n    viewRoot.on('change:attributes', (evt, node) => this._renderer.markToSync('attributes', node));\n    viewRoot.on('change:text', (evt, node) => this._renderer.markToSync('text', node));\n    viewRoot.on('change:isReadOnly', () => this.change(updateContenteditableAttribute));\n    viewRoot.on('change', () => {\n      this._hasChangedSinceTheLastRendering = true;\n    });\n\n    for (const observer of this._observers.values()) {\n      observer.observe(domRoot, name);\n    }\n  }\n  /**\n   * Detaches a DOM root element from the view element and restores its attributes to the state before\n   * {@link #attachDomRoot `attachDomRoot()`}.\n   *\n   * @param {String} name Name of the root to detach.\n   */\n\n\n  detachDomRoot(name) {\n    const domRoot = this.domRoots.get(name); // Remove all root attributes so the DOM element is \"bare\".\n\n    Array.from(domRoot.attributes).forEach(_ref => {\n      let {\n        name\n      } = _ref;\n      return domRoot.removeAttribute(name);\n    });\n\n    const initialDomRootAttributes = this._initialDomRootAttributes.get(domRoot); // Revert all view root attributes back to the state before attachDomRoot was called.\n\n\n    for (const attribute in initialDomRootAttributes) {\n      domRoot.setAttribute(attribute, initialDomRootAttributes[attribute]);\n    }\n\n    this.domRoots.delete(name);\n    this.domConverter.unbindDomElement(domRoot);\n  }\n  /**\n   * Gets DOM root element.\n   *\n   * @param {String} [name='main']  Name of the root.\n   * @returns {Element} DOM root element instance.\n   */\n\n\n  getDomRoot() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'main';\n    return this.domRoots.get(name);\n  }\n  /**\n   * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n   * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n   * {@link #domRoots DOM roots}.\n   *\n   * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n   * when registered for the first time. This means that features and other components can register a single observer\n   * multiple times without caring whether it has been already added or not.\n   *\n   * @param {Function} Observer The constructor of an observer to add.\n   * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n   * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\n   */\n\n\n  addObserver(Observer) {\n    let observer = this._observers.get(Observer);\n\n    if (observer) {\n      return observer;\n    }\n\n    observer = new Observer(this);\n\n    this._observers.set(Observer, observer);\n\n    for (const [name, domElement] of this.domRoots) {\n      observer.observe(domElement, name);\n    }\n\n    observer.enable();\n    return observer;\n  }\n  /**\n   * Returns observer of the given type or `undefined` if such observer has not been added yet.\n   *\n   * @param {Function} Observer The constructor of an observer to get.\n   * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\n   */\n\n\n  getObserver(Observer) {\n    return this._observers.get(Observer);\n  }\n  /**\n   * Disables all added observers.\n   */\n\n\n  disableObservers() {\n    for (const observer of this._observers.values()) {\n      observer.disable();\n    }\n  }\n  /**\n   * Enables all added observers.\n   */\n\n\n  enableObservers() {\n    for (const observer of this._observers.values()) {\n      observer.enable();\n    }\n  }\n  /**\n   * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n   * caret, if not already visible to the user.\n   */\n\n\n  scrollToTheSelection() {\n    const range = this.document.selection.getFirstRange();\n\n    if (range) {\n      scrollViewportToShowTarget({\n        target: this.domConverter.viewRangeToDom(range),\n        viewportOffset: 20\n      });\n    }\n  }\n  /**\n   * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n   * that is currently having selection inside.\n   */\n\n\n  focus() {\n    if (!this.document.isFocused) {\n      const editable = this.document.selection.editableElement;\n\n      if (editable) {\n        this.domConverter.focus(editable);\n        this.forceRender();\n      } else {// Before focusing view document, selection should be placed inside one of the view's editables.\n        // Normally its selection will be converted from model document (which have default selection), but\n        // when using view document on its own, we need to manually place selection before focusing it.\n        //\n        // @if CK_DEBUG // console.warn( 'There is no selection in any editable to focus.' );\n      }\n    }\n  }\n  /**\n   * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n   * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed\n   * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows\n   * to nest calls one inside another and still performs a single rendering after all those changes are made.\n   * It also returns the return value of its callback.\n   *\n   *\t\tconst text = view.change( writer => {\n   *\t\t\tconst newText = writer.createText( 'foo' );\n   *\t\t\twriter.insert( position1, newText );\n   *\n   *\t\t\tview.change( writer => {\n   *\t\t\t\twriter.insert( position2, writer.createText( 'bar' ) );\n   *\t\t\t} );\n   *\n   * \t\t\twriter.remove( range );\n   *\n   * \t\t\treturn newText;\n   *\t\t} );\n   *\n   * When the outermost change block is done and rendering to the DOM is over the\n   * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n   *\n   * This method throws a `applying-view-changes-on-rendering` error when\n   * the change block is used after rendering to the DOM has started.\n   *\n   * @param {Function} callback Callback function which may modify the view.\n   * @returns {*} Value returned by the callback.\n   */\n\n\n  change(callback) {\n    if (this.isRenderingInProgress || this._postFixersInProgress) {\n      /**\n       * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n       * cause some unexpected behaviour and inconsistency between the DOM and the view.\n       * This may be caused by:\n       *\n       * * calling {@link #change} or {@link #forceRender} during rendering process,\n       * * calling {@link #change} or {@link #forceRender} inside of\n       *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n       *\n       * @error cannot-change-view-tree\n       */\n      throw new CKEditorError('cannot-change-view-tree', this);\n    }\n\n    try {\n      // Recursive call to view.change() method - execute listener immediately.\n      if (this._ongoingChange) {\n        return callback(this._writer);\n      } // This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n      // event for all nested calls.\n\n\n      this._ongoingChange = true;\n      const callbackResult = callback(this._writer);\n      this._ongoingChange = false; // This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n      // view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all\n      // changes. Also, we don't need to render anything if there're no changes since last rendering.\n\n      if (!this._renderingDisabled && this._hasChangedSinceTheLastRendering) {\n        this._postFixersInProgress = true;\n\n        this.document._callPostFixers(this._writer);\n\n        this._postFixersInProgress = false;\n        this.fire('render');\n      }\n\n      return callbackResult;\n    } catch (err) {\n      // @if CK_DEBUG // throw err;\n\n      /* istanbul ignore next */\n      CKEditorError.rethrowUnexpectedError(err, this);\n    }\n  }\n  /**\n   * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n   * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n   *\n   * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}\n   * block and the view will automatically check whether it needs to render DOM or not.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n   * trying to re-render when rendering to DOM has already started.\n   */\n\n\n  forceRender() {\n    this._hasChangedSinceTheLastRendering = true;\n    this.change(() => {});\n  }\n  /**\n   * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n   */\n\n\n  destroy() {\n    for (const observer of this._observers.values()) {\n      observer.destroy();\n    }\n\n    this.document.destroy();\n    this.stopListening();\n  }\n  /**\n   * Creates position at the given location. The location can be specified as:\n   *\n   * * a {@link module:engine/view/position~Position position},\n   * * parent element and offset (offset defaults to `0`),\n   * * parent element and `'end'` (sets position at the end of that element),\n   * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n   *\n   * This method is a shortcut to other constructors such as:\n   *\n   * * {@link #createPositionBefore},\n   * * {@link #createPositionAfter},\n   *\n   * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/view/item~Item view item}.\n   */\n\n\n  createPositionAt(itemOrPosition, offset) {\n    return Position._createAt(itemOrPosition, offset);\n  }\n  /**\n   * Creates a new position after given view item.\n   *\n   * @param {module:engine/view/item~Item} item View item after which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n\n\n  createPositionAfter(item) {\n    return Position._createAfter(item);\n  }\n  /**\n   * Creates a new position before given view item.\n   *\n   * @param {module:engine/view/item~Item} item View item before which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n\n\n  createPositionBefore(item) {\n    return Position._createBefore(item);\n  }\n  /**\n   * Creates a range spanning from `start` position to `end` position.\n   *\n   * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n   *\n   * @param {module:engine/view/position~Position} start Start position.\n   * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  createRange(start, end) {\n    return new Range(start, end);\n  }\n  /**\n   * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n   *\n   * @param {module:engine/view/item~Item} item\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  createRangeOn(item) {\n    return Range._createOn(item);\n  }\n  /**\n   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n   * that element and ends after the last child of that element.\n   *\n   * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  createRangeIn(element) {\n    return Range._createIn(element);\n  }\n  /**\n   Creates new {@link module:engine/view/selection~Selection} instance.\n   *\n   * \t\t// Creates empty selection without ranges.\n   *\t\tconst selection = view.createSelection();\n   *\n   *\t\t// Creates selection at the given range.\n   *\t\tconst range = view.createRange( start, end );\n   *\t\tconst selection = view.createSelection( range );\n   *\n   *\t\t// Creates selection at the given ranges\n   * \t\tconst ranges = [ view.createRange( start1, end2 ), view.createRange( star2, end2 ) ];\n   *\t\tconst selection = view.createSelection( ranges );\n   *\n   *\t\t// Creates selection from the other selection.\n   *\t\tconst otherSelection = view.createSelection();\n   *\t\tconst selection = view.createSelection( otherSelection );\n   *\n   *\t\t// Creates selection from the document selection.\n   *\t\tconst selection = view.createSelection( editor.editing.view.document.selection );\n   *\n   * \t\t// Creates selection at the given position.\n   *\t\tconst position = view.createPositionFromPath( root, path );\n   *\t\tconst selection = view.createSelection( position );\n   *\n   *\t\t// Creates collapsed selection at the position of given item and offset.\n   *\t\tconst paragraph = view.createContainerElement( 'paragraph' );\n   *\t\tconst selection = view.createSelection( paragraph, offset );\n   *\n   *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n   *\t\t// first child of that element and ends after the last child of that element.\n   *\t\tconst selection = view.createSelection( paragraph, 'in' );\n   *\n   *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n   *\t\t// just after the item.\n   *\t\tconst selection = view.createSelection( paragraph, 'on' );\n   *\n   * `Selection`'s factory method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n   *\n   *\t\t// Creates backward selection.\n   *\t\tconst selection = view.createSelection( range, { backward: true } );\n   *\n   * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n   * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n   * represented in other way, for example by applying proper CSS class.\n   *\n   * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n   * (and be  properly handled by screen readers).\n   *\n   *\t\t// Creates fake selection with label.\n   *\t\tconst selection = view.createSelection( range, { fake: true, label: 'foo' } );\n   *\n   * @param {module:engine/view/selection~Selectable} [selectable=null]\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n   * @param {String} [options.label] Label for the fake selection.\n   * @returns {module:engine/view/selection~Selection}\n   */\n\n\n  createSelection(selectable, placeOrOffset, options) {\n    return new Selection(selectable, placeOrOffset, options);\n  }\n  /**\n   * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.\n   * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.\n   *\n   * @protected\n   * @param {Boolean} flag A flag indicates whether the rendering should be disabled.\n   */\n\n\n  _disableRendering(flag) {\n    this._renderingDisabled = flag;\n\n    if (flag == false) {\n      // Render when you stop blocking rendering.\n      this.change(() => {});\n    }\n  }\n  /**\n   * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\n   * before rendering and re-enabled after that.\n   *\n   * @private\n   */\n\n\n  _render() {\n    this.isRenderingInProgress = true;\n    this.disableObservers();\n\n    this._renderer.render();\n\n    this.enableObservers();\n    this.isRenderingInProgress = false;\n  }\n  /**\n   * Fired after a topmost {@link module:engine/view/view~View#change change block} and all\n   * {@link module:engine/view/document~Document#registerPostFixer post-fixers} are executed.\n   *\n   * Actual rendering is performed as a first listener on 'normal' priority.\n   *\n   *\t\tview.on( 'render', () => {\n   *\t\t\t// Rendering to the DOM is complete.\n   *\t\t} );\n   *\n   * This event is useful when you want to update interface elements after the rendering, e.g. position of the\n   * balloon panel. If you wants to change view structure use\n   * {@link module:engine/view/document~Document#registerPostFixer post-fixers}.\n   *\n   * @event module:engine/view/view~View#event:render\n   */\n\n\n}\nmix(View, ObservableMixin);","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/view/view.js"],"names":["Document","DowncastWriter","Renderer","DomConverter","Position","Range","Selection","MutationObserver","KeyObserver","FakeSelectionObserver","SelectionObserver","FocusObserver","CompositionObserver","InputObserver","ArrowKeysObserver","ObservableMixin","mix","scrollViewportToShowTarget","injectUiElementHandling","injectQuirksHandling","CKEditorError","env","View","constructor","stylesProcessor","document","domConverter","domRoots","Map","set","_renderer","selection","bind","to","_initialDomRootAttributes","WeakMap","_observers","_ongoingChange","_postFixersInProgress","_renderingDisabled","_hasChangedSinceTheLastRendering","_writer","addObserver","isAndroid","on","_render","fire","listenTo","attachDomRoot","domRoot","name","viewRoot","getRoot","_name","tagName","toLowerCase","initialDomRootAttributes","value","Array","from","attributes","addClass","split","setAttribute","updateContenteditableAttribute","isReadOnly","removeClass","bindElements","markToSync","domDocuments","add","ownerDocument","evt","node","change","observer","values","observe","detachDomRoot","get","forEach","removeAttribute","attribute","delete","unbindDomElement","getDomRoot","Observer","domElement","enable","getObserver","disableObservers","disable","enableObservers","scrollToTheSelection","range","getFirstRange","target","viewRangeToDom","viewportOffset","focus","isFocused","editable","editableElement","forceRender","callback","isRenderingInProgress","callbackResult","_callPostFixers","err","rethrowUnexpectedError","destroy","stopListening","createPositionAt","itemOrPosition","offset","_createAt","createPositionAfter","item","_createAfter","createPositionBefore","_createBefore","createRange","start","end","createRangeOn","_createOn","createRangeIn","element","_createIn","createSelection","selectable","placeOrOffset","options","_disableRendering","flag","render"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,gBAAgB,CAAEC,cAAF,EAAkBC,MAAlB,EAA2B;AAC1C,WAAO9G,QAAQ,CAAC+G,SAAT,CAAoBF,cAApB,EAAoCC,MAApC,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCE,EAAAA,mBAAmB,CAAEC,IAAF,EAAS;AAC3B,WAAOjH,QAAQ,CAACkH,YAAT,CAAuBD,IAAvB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCE,EAAAA,oBAAoB,CAAEF,IAAF,EAAS;AAC5B,WAAOjH,QAAQ,CAACoH,aAAT,CAAwBH,IAAxB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCI,EAAAA,WAAW,CAAEC,KAAF,EAASC,GAAT,EAAe;AACzB,WAAO,IAAItH,KAAJ,CAAWqH,KAAX,EAAkBC,GAAlB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,aAAa,CAAEP,IAAF,EAAS;AACrB,WAAOhH,KAAK,CAACwH,SAAN,CAAiBR,IAAjB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCS,EAAAA,aAAa,CAAEC,OAAF,EAAY;AACxB,WAAO1H,KAAK,CAAC2H,SAAN,CAAiBD,OAAjB,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCE,EAAAA,eAAe,CAAEC,UAAF,EAAcC,aAAd,EAA6BC,OAA7B,EAAuC;AACrD,WAAO,IAAI9H,SAAJ,CAAe4H,UAAf,EAA2BC,aAA3B,EAA0CC,OAA1C,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,iBAAiB,CAAEC,IAAF,EAAS;AACzB,SAAK/F,kBAAL,GAA0B+F,IAA1B;;AAEA,QAAKA,IAAI,IAAI,KAAb,EAAqB;AACpB;AACA,WAAK5D,MAAL,CAAa,MAAM,CAAE,CAArB;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;;;AACC7B,EAAAA,OAAO,GAAG;AACT,SAAK4D,qBAAL,GAA6B,IAA7B;AACA,SAAKf,gBAAL;;AACA,SAAK5D,SAAL,CAAeyG,MAAf;;AACA,SAAK3C,eAAL;AACA,SAAKa,qBAAL,GAA6B,KAA7B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA7oB0B;AAgpB1BzF,GAAG,CAAEM,IAAF,EAAQP,eAAR,CAAH","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/view\n */\n\nimport Document from './document';\nimport DowncastWriter from './downcastwriter';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\n\nimport MutationObserver from './observer/mutationobserver';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\nimport InputObserver from './observer/inputobserver';\nimport ArrowKeysObserver from './observer/arrowkeysobserver';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n *\t\tview.change( writer => {\n *\t\t\twriter.insert( position, writer.createText( 'foo' ) );\n *\t\t} );\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View {\n\t/**\n\t * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor The styles processor instance.\n\t */\n\tconstructor( stylesProcessor ) {\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = new Document( stylesProcessor );\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} used by\n\t\t * {@link module:engine/view/view~View#_renderer renderer}\n\t\t * and {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = new DomConverter( this.document );\n\n\t\t/**\n\t\t * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Map.<String, HTMLElement>}\n\t\t */\n\t\tthis.domRoots = new Map();\n\n\t\t/**\n\t\t * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isRenderingInProgress\n\t\t */\n\t\tthis.set( 'isRenderingInProgress', false );\n\n\t\t/**\n\t\t * Informs whether the DOM selection is inside any of the DOM roots managed by the view.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #hasDomSelection\n\t\t */\n\t\tthis.set( 'hasDomSelection', false );\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\n\t\t *\n\t\t * @protected\n\t\t * @type {module:engine/view/renderer~Renderer}\n\t\t */\n\t\tthis._renderer = new Renderer( this.domConverter, this.document.selection );\n\t\tthis._renderer.bind( 'isFocused', 'isSelecting' ).to( this.document );\n\n\t\t/**\n\t\t * A DOM root attributes cache. It saves the initial values of DOM root attributes before the DOM element\n\t\t * is {@link module:engine/view/view~View#attachDomRoot attached} to the view so later on, when\n\t\t * the view is destroyed ({@link module:engine/view/view~View#detachDomRoot}), they can be easily restored.\n\t\t * This way, the DOM element can go back to the (clean) state as if the editing view never used it.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap.<HTMLElement,Object>}\n\t\t */\n\t\tthis._initialDomRootAttributes = new WeakMap();\n\n\t\t/**\n\t\t * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<Function, module:engine/view/observer/observer~Observer>}\n\t\t */\n\t\tthis._observers = new Map();\n\n\t\t/**\n\t\t * Is set to `true` when {@link #change view changes} are currently in progress.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._ongoingChange = false;\n\n\t\t/**\n\t\t * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._postFixersInProgress = false;\n\n\t\t/**\n\t\t * Internal flag to temporary disable rendering. See the usage in the {@link #_disableRendering}.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._renderingDisabled = false;\n\n\t\t/**\n\t\t * Internal flag that disables rendering when there are no changes since the last rendering.\n\t\t * It stores information about changed selection and changed elements from attached document roots.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._hasChangedSinceTheLastRendering = false;\n\n\t\t/**\n\t\t * DowncastWriter instance used in {@link #change change method} callbacks.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/view/downcastwriter~DowncastWriter}\n\t\t */\n\t\tthis._writer = new DowncastWriter( this.document );\n\n\t\t// Add default observers.\n\t\tthis.addObserver( MutationObserver );\n\t\tthis.addObserver( SelectionObserver );\n\t\tthis.addObserver( FocusObserver );\n\t\tthis.addObserver( KeyObserver );\n\t\tthis.addObserver( FakeSelectionObserver );\n\t\tthis.addObserver( CompositionObserver );\n\t\tthis.addObserver( ArrowKeysObserver );\n\n\t\tif ( env.isAndroid ) {\n\t\t\tthis.addObserver( InputObserver );\n\t\t}\n\n\t\t// Inject quirks handlers.\n\t\tinjectQuirksHandling( this );\n\t\tinjectUiElementHandling( this );\n\n\t\t// Use 'normal' priority so that rendering is performed as first when using that priority.\n\t\tthis.on( 'render', () => {\n\t\t\tthis._render();\n\n\t\t\t// Informs that layout has changed after render.\n\t\t\tthis.document.fire( 'layoutChanged' );\n\n\t\t\t// Reset the `_hasChangedSinceTheLastRendering` flag after rendering.\n\t\t\tthis._hasChangedSinceTheLastRendering = false;\n\t\t} );\n\n\t\t// Listen to the document selection changes directly.\n\t\tthis.listenTo( this.document.selection, 'change', () => {\n\t\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\t} );\n\n\t\t// Trigger re-render if only the focus changed.\n\t\tthis.listenTo( this.document, 'change:isFocused', () => {\n\t\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches a DOM root element to the view element and enable all observers on that element.\n\t * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized\n\t * with the view what means that all child nodes will be removed and replaced with content of the view root.\n\t *\n\t * This method also will change view element name as the same as tag name of given dom root.\n\t * Name is always transformed to lower case.\n\t *\n\t * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.\n\t *\n\t * @param {Element} domRoot DOM root element.\n\t * @param {String} [name='main'] Name of the root.\n\t */\n\tattachDomRoot( domRoot, name = 'main' ) {\n\t\tconst viewRoot = this.document.getRoot( name );\n\n\t\t// Set view root name the same as DOM root tag name.\n\t\tviewRoot._name = domRoot.tagName.toLowerCase();\n\n\t\tconst initialDomRootAttributes = {};\n\n\t\t// 1. Copy and cache the attributes to remember the state of the element before attaching.\n\t\t//    The cached attributes will be restored in detachDomRoot() so the element goes to the\n\t\t//    clean state as if the editing view never used it.\n\t\t// 2. Apply the attributes using the view writer, so they all go under the control of the engine.\n\t\t//    The editing view takes over the attribute management completely because various\n\t\t//    features (e.g. addPlaceholder()) require dynamic changes of those attributes and they\n\t\t//    cannot be managed by the engine and the UI library at the same time.\n\t\tfor ( const { name, value } of Array.from( domRoot.attributes ) ) {\n\t\t\tinitialDomRootAttributes[ name ] = value;\n\n\t\t\t// Do not use writer.setAttribute() for the class attribute. The EditableUIView class\n\t\t\t// and its descendants could have already set some using the writer.addClass() on the view\n\t\t\t// document root. They haven't been rendered yet so they are not present in the DOM root.\n\t\t\t// Using writer.setAttribute( 'class', ... ) would override them completely.\n\t\t\tif ( name === 'class' ) {\n\t\t\t\tthis._writer.addClass( value.split( ' ' ), viewRoot );\n\t\t\t} else {\n\t\t\t\tthis._writer.setAttribute( name, value, viewRoot );\n\t\t\t}\n\t\t}\n\n\t\tthis._initialDomRootAttributes.set( domRoot, initialDomRootAttributes );\n\n\t\tconst updateContenteditableAttribute = () => {\n\t\t\tthis._writer.setAttribute( 'contenteditable', !viewRoot.isReadOnly, viewRoot );\n\n\t\t\tif ( viewRoot.isReadOnly ) {\n\t\t\t\tthis._writer.addClass( 'ck-read-only', viewRoot );\n\t\t\t} else {\n\t\t\t\tthis._writer.removeClass( 'ck-read-only', viewRoot );\n\t\t\t}\n\t\t};\n\n\t\t// Set initial value.\n\t\tupdateContenteditableAttribute();\n\n\t\tthis.domRoots.set( name, domRoot );\n\t\tthis.domConverter.bindElements( domRoot, viewRoot );\n\t\tthis._renderer.markToSync( 'children', viewRoot );\n\t\tthis._renderer.markToSync( 'attributes', viewRoot );\n\t\tthis._renderer.domDocuments.add( domRoot.ownerDocument );\n\n\t\tviewRoot.on( 'change:children', ( evt, node ) => this._renderer.markToSync( 'children', node ) );\n\t\tviewRoot.on( 'change:attributes', ( evt, node ) => this._renderer.markToSync( 'attributes', node ) );\n\t\tviewRoot.on( 'change:text', ( evt, node ) => this._renderer.markToSync( 'text', node ) );\n\t\tviewRoot.on( 'change:isReadOnly', () => this.change( updateContenteditableAttribute ) );\n\n\t\tviewRoot.on( 'change', () => {\n\t\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\t} );\n\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.observe( domRoot, name );\n\t\t}\n\t}\n\n\t/**\n\t * Detaches a DOM root element from the view element and restores its attributes to the state before\n\t * {@link #attachDomRoot `attachDomRoot()`}.\n\t *\n\t * @param {String} name Name of the root to detach.\n\t */\n\tdetachDomRoot( name ) {\n\t\tconst domRoot = this.domRoots.get( name );\n\n\t\t// Remove all root attributes so the DOM element is \"bare\".\n\t\tArray.from( domRoot.attributes ).forEach( ( { name } ) => domRoot.removeAttribute( name ) );\n\n\t\tconst initialDomRootAttributes = this._initialDomRootAttributes.get( domRoot );\n\n\t\t// Revert all view root attributes back to the state before attachDomRoot was called.\n\t\tfor ( const attribute in initialDomRootAttributes ) {\n\t\t\tdomRoot.setAttribute( attribute, initialDomRootAttributes[ attribute ] );\n\t\t}\n\n\t\tthis.domRoots.delete( name );\n\t\tthis.domConverter.unbindDomElement( domRoot );\n\t}\n\n\t/**\n\t * Gets DOM root element.\n\t *\n\t * @param {String} [name='main']  Name of the root.\n\t * @returns {Element} DOM root element instance.\n\t */\n\tgetDomRoot( name = 'main' ) {\n\t\treturn this.domRoots.get( name );\n\t}\n\n\t/**\n\t * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n\t * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n\t * {@link #domRoots DOM roots}.\n\t *\n\t * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n\t * when registered for the first time. This means that features and other components can register a single observer\n\t * multiple times without caring whether it has been already added or not.\n\t *\n\t * @param {Function} Observer The constructor of an observer to add.\n\t * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n\t * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\n\t */\n\taddObserver( Observer ) {\n\t\tlet observer = this._observers.get( Observer );\n\n\t\tif ( observer ) {\n\t\t\treturn observer;\n\t\t}\n\n\t\tobserver = new Observer( this );\n\n\t\tthis._observers.set( Observer, observer );\n\n\t\tfor ( const [ name, domElement ] of this.domRoots ) {\n\t\t\tobserver.observe( domElement, name );\n\t\t}\n\n\t\tobserver.enable();\n\n\t\treturn observer;\n\t}\n\n\t/**\n\t * Returns observer of the given type or `undefined` if such observer has not been added yet.\n\t *\n\t * @param {Function} Observer The constructor of an observer to get.\n\t * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\n\t */\n\tgetObserver( Observer ) {\n\t\treturn this._observers.get( Observer );\n\t}\n\n\t/**\n\t * Disables all added observers.\n\t */\n\tdisableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.disable();\n\t\t}\n\t}\n\n\t/**\n\t * Enables all added observers.\n\t */\n\tenableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.enable();\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n\t * caret, if not already visible to the user.\n\t */\n\tscrollToTheSelection() {\n\t\tconst range = this.document.selection.getFirstRange();\n\n\t\tif ( range ) {\n\t\t\tscrollViewportToShowTarget( {\n\t\t\t\ttarget: this.domConverter.viewRangeToDom( range ),\n\t\t\t\tviewportOffset: 20\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n\t * that is currently having selection inside.\n\t */\n\tfocus() {\n\t\tif ( !this.document.isFocused ) {\n\t\t\tconst editable = this.document.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t\tthis.forceRender();\n\t\t\t} else {\n\t\t\t\t// Before focusing view document, selection should be placed inside one of the view's editables.\n\t\t\t\t// Normally its selection will be converted from model document (which have default selection), but\n\t\t\t\t// when using view document on its own, we need to manually place selection before focusing it.\n\t\t\t\t//\n\t\t\t\t// @if CK_DEBUG // console.warn( 'There is no selection in any editable to focus.' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n\t * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed\n\t * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows\n\t * to nest calls one inside another and still performs a single rendering after all those changes are made.\n\t * It also returns the return value of its callback.\n\t *\n\t *\t\tconst text = view.change( writer => {\n\t *\t\t\tconst newText = writer.createText( 'foo' );\n\t *\t\t\twriter.insert( position1, newText );\n\t *\n\t *\t\t\tview.change( writer => {\n\t *\t\t\t\twriter.insert( position2, writer.createText( 'bar' ) );\n\t *\t\t\t} );\n\t *\n\t * \t\t\twriter.remove( range );\n\t *\n\t * \t\t\treturn newText;\n\t *\t\t} );\n\t *\n\t * When the outermost change block is done and rendering to the DOM is over the\n\t * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n\t *\n\t * This method throws a `applying-view-changes-on-rendering` error when\n\t * the change block is used after rendering to the DOM has started.\n\t *\n\t * @param {Function} callback Callback function which may modify the view.\n\t * @returns {*} Value returned by the callback.\n\t */\n\tchange( callback ) {\n\t\tif ( this.isRenderingInProgress || this._postFixersInProgress ) {\n\t\t\t/**\n\t\t\t * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n\t\t\t * cause some unexpected behaviour and inconsistency between the DOM and the view.\n\t\t\t * This may be caused by:\n\t\t\t *\n\t\t\t * * calling {@link #change} or {@link #forceRender} during rendering process,\n\t\t\t * * calling {@link #change} or {@link #forceRender} inside of\n\t\t\t *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n\t\t\t *\n\t\t\t * @error cannot-change-view-tree\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'cannot-change-view-tree',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\t// Recursive call to view.change() method - execute listener immediately.\n\t\t\tif ( this._ongoingChange ) {\n\t\t\t\treturn callback( this._writer );\n\t\t\t}\n\n\t\t\t// This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n\t\t\t// event for all nested calls.\n\t\t\tthis._ongoingChange = true;\n\t\t\tconst callbackResult = callback( this._writer );\n\t\t\tthis._ongoingChange = false;\n\n\t\t\t// This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n\t\t\t// view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all\n\t\t\t// changes. Also, we don't need to render anything if there're no changes since last rendering.\n\t\t\tif ( !this._renderingDisabled && this._hasChangedSinceTheLastRendering ) {\n\t\t\t\tthis._postFixersInProgress = true;\n\t\t\t\tthis.document._callPostFixers( this._writer );\n\t\t\t\tthis._postFixersInProgress = false;\n\n\t\t\t\tthis.fire( 'render' );\n\t\t\t}\n\n\t\t\treturn callbackResult;\n\t\t} catch ( err ) {\n\t\t\t// @if CK_DEBUG // throw err;\n\t\t\t/* istanbul ignore next */\n\t\t\tCKEditorError.rethrowUnexpectedError( err, this );\n\t\t}\n\t}\n\n\t/**\n\t * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n\t * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n\t *\n\t * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}\n\t * block and the view will automatically check whether it needs to render DOM or not.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n\t * trying to re-render when rendering to DOM has already started.\n\t */\n\tforceRender() {\n\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\tthis.change( () => {} );\n\t}\n\n\t/**\n\t * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n\t */\n\tdestroy() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.destroy();\n\t\t}\n\n\t\tthis.document.destroy();\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t Creates new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = view.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = view.createRange( start, end );\n\t *\t\tconst selection = view.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ view.createRange( start1, end2 ), view.createRange( star2, end2 ) ];\n\t *\t\tconst selection = view.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = view.createSelection();\n\t *\t\tconst selection = view.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = view.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = view.createPositionFromPath( root, path );\n\t *\t\tconst selection = view.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = view.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = view.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = view.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = view.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s factory method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = view.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = view.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.\n\t * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.\n\t *\n\t * @protected\n\t * @param {Boolean} flag A flag indicates whether the rendering should be disabled.\n\t */\n\t_disableRendering( flag ) {\n\t\tthis._renderingDisabled = flag;\n\n\t\tif ( flag == false ) {\n\t\t\t// Render when you stop blocking rendering.\n\t\t\tthis.change( () => {} );\n\t\t}\n\t}\n\n\t/**\n\t * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\n\t * before rendering and re-enabled after that.\n\t *\n\t * @private\n\t */\n\t_render() {\n\t\tthis.isRenderingInProgress = true;\n\t\tthis.disableObservers();\n\t\tthis._renderer.render();\n\t\tthis.enableObservers();\n\t\tthis.isRenderingInProgress = false;\n\t}\n\n\t/**\n\t * Fired after a topmost {@link module:engine/view/view~View#change change block} and all\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers} are executed.\n\t *\n\t * Actual rendering is performed as a first listener on 'normal' priority.\n\t *\n\t *\t\tview.on( 'render', () => {\n\t *\t\t\t// Rendering to the DOM is complete.\n\t *\t\t} );\n\t *\n\t * This event is useful when you want to update interface elements after the rendering, e.g. position of the\n\t * balloon panel. If you wants to change view structure use\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers}.\n\t *\n\t * @event module:engine/view/view~View#event:render\n\t */\n}\n\nmix( View, ObservableMixin );\n"]},"metadata":{},"sourceType":"module"}