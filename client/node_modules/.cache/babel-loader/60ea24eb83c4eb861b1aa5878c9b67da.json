{"ast":null,"code":"import { ParserBase as parser } from './parser-base';\nimport { IntlBase as base } from './intl-base';\nimport { isUndefined, throwError, getValue, isBlazor } from '../util';\nimport { HijriParser } from '../hijri-parser';\nimport { isNullOrUndefined, extend } from '../util';\nvar abbreviateRegexGlobal = /\\/MMMMM|MMMM|MMM|a|LLLL|LLL|EEEEE|EEEE|E|K|cccc|ccc|WW|W|G+|z+/gi;\nvar standalone = 'stand-alone';\nvar weekdayKey = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\nexport var basicPatterns = ['short', 'medium', 'long', 'full'];\nvar timeSetter = {\n  m: 'getMinutes',\n  h: 'getHours',\n  H: 'getHours',\n  s: 'getSeconds',\n  d: 'getDate',\n  f: 'getMilliseconds'\n};\nexport var datePartMatcher = {\n  'M': 'month',\n  'd': 'day',\n  'E': 'weekday',\n  'c': 'weekday',\n  'y': 'year',\n  'm': 'minute',\n  'h': 'hour',\n  'H': 'hour',\n  's': 'second',\n  'L': 'month',\n  'a': 'designator',\n  'z': 'timeZone',\n  'Z': 'timeZone',\n  'G': 'era',\n  'f': 'milliseconds'\n};\nvar timeSeparator = 'timeSeparator';\n/* tslint:disable no-any */\n\n/**\r\n * Date Format is a framework provides support for date formatting.\r\n *\r\n * @private\r\n */\n\nvar DateFormat =\n/** @class */\nfunction () {\n  function DateFormat() {}\n  /**\r\n   * Returns the formatter function for given skeleton.\r\n   *\r\n   * @param {string} culture -  Specifies the culture name to be which formatting.\r\n   * @param {DateFormatOptions} option - Specific the format in which date  will format.\r\n   * @param {Object} cldr - Specifies the global cldr data collection.\r\n   * @returns {Function} ?\r\n   */\n\n\n  DateFormat.dateFormat = function (culture, option, cldr) {\n    var _this = this;\n\n    var dependable = base.getDependables(cldr, culture, option.calendar);\n    var numObject = getValue('parserObject.numbers', dependable);\n    var dateObject = dependable.dateObject;\n    var formatOptions = {\n      isIslamic: base.islamicRegex.test(option.calendar)\n    };\n\n    if (isBlazor() && option.isServerRendered) {\n      option = base.compareBlazorDateFormats(option, culture);\n    }\n\n    var resPattern = option.format || base.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');\n    formatOptions.dateSeperator = isBlazor() ? getValue('dateSeperator', dateObject) : base.getDateSeparator(dependable.dateObject);\n\n    if (isUndefined(resPattern)) {\n      throwError('Format options or type given must be invalid');\n    } else {\n      resPattern = base.ConvertDateToWeekFormat(resPattern);\n\n      if (isBlazor()) {\n        resPattern = resPattern.replace(/tt/, 'a');\n      }\n\n      formatOptions.pattern = resPattern;\n      formatOptions.numMapper = isBlazor() ? extend({}, numObject) : parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr));\n      var patternMatch = resPattern.match(abbreviateRegexGlobal) || [];\n\n      for (var _i = 0, patternMatch_1 = patternMatch; _i < patternMatch_1.length; _i++) {\n        var str = patternMatch_1[_i];\n        var len = str.length;\n        var char = str[0];\n\n        if (char === 'K') {\n          char = 'h';\n        }\n\n        switch (char) {\n          case 'E':\n          case 'c':\n            if (isBlazor()) {\n              // eslint-disable-next-line\n              formatOptions.weekday = getValue('days.' + base.monthIndex[len], dateObject);\n            } else {\n              // eslint-disable-next-line\n              formatOptions.weekday = dependable.dateObject[base.days][standalone][base.monthIndex[len]];\n            }\n\n            break;\n\n          case 'M':\n          case 'L':\n            if (isBlazor()) {\n              // eslint-disable-next-line\n              formatOptions.month = getValue('months.' + base.monthIndex[len], dateObject);\n            } else {\n              // eslint-disable-next-line\n              formatOptions.month = dependable.dateObject[base.month][standalone][base.monthIndex[len]];\n            }\n\n            break;\n\n          case 'a':\n            formatOptions.designator = isBlazor() ? getValue('dayPeriods', dateObject) : getValue('dayPeriods.format.wide', dateObject);\n            break;\n\n          case 'G':\n            // eslint-disable-next-line\n            var eText = len <= 3 ? 'eraAbbr' : len === 4 ? 'eraNames' : 'eraNarrow';\n            formatOptions.era = isBlazor() ? getValue('eras', dateObject) : getValue('eras.' + eText, dependable.dateObject);\n            break;\n\n          case 'z':\n            formatOptions.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\n            break;\n        }\n      }\n    }\n\n    return function (value) {\n      if (isNaN(value.getDate())) {\n        return null;\n      }\n\n      return _this.intDateFormatter(value, formatOptions);\n    };\n  };\n  /**\r\n   * Returns formatted date string based on options passed.\r\n   *\r\n   * @param {Date} value ?\r\n   * @param {FormatOptions} options ?\r\n   * @returns {string} ?\r\n   */\n\n\n  DateFormat.intDateFormatter = function (value, options) {\n    var pattern = options.pattern;\n    var ret = '';\n    var matches = pattern.match(base.dateParseRegex);\n    var dObject = this.getCurrentDateValue(value, options.isIslamic);\n\n    for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n      var match = matches_1[_i];\n      var length_1 = match.length;\n      var char = match[0];\n\n      if (char === 'K') {\n        char = 'h';\n      }\n\n      var curval = void 0;\n      var curvalstr = '';\n      var isNumber = void 0;\n      var processNumber = void 0;\n      var curstr = '';\n\n      switch (char) {\n        case 'M':\n        case 'L':\n          curval = dObject.month;\n\n          if (length_1 > 2) {\n            // eslint-disable-next-line\n            ret += options.month[curval];\n          } else {\n            isNumber = true;\n          }\n\n          break;\n\n        case 'E':\n        case 'c':\n          // eslint-disable-next-line\n          ret += options.weekday[weekdayKey[value.getDay()]];\n          break;\n\n        case 'H':\n        case 'h':\n        case 'm':\n        case 's':\n        case 'd':\n        case 'f':\n          isNumber = true;\n\n          if (char === 'd') {\n            curval = dObject.date;\n          } else if (char === 'f') {\n            isNumber = false;\n            processNumber = true; // eslint-disable-next-line\n\n            curvalstr = value[timeSetter[char]]().toString();\n            curvalstr = curvalstr.substring(0, length_1);\n            var curlength = curvalstr.length;\n\n            if (length_1 !== curlength) {\n              if (length_1 > 3) {\n                continue;\n              }\n\n              for (var i = 0; i < length_1 - curlength; i++) {\n                curvalstr = '0' + curvalstr.toString();\n              }\n            }\n\n            curstr += curvalstr;\n          } else {\n            // eslint-disable-next-line\n            curval = value[timeSetter[char]]();\n          }\n\n          if (char === 'h') {\n            curval = curval % 12 || 12;\n          }\n\n          break;\n\n        case 'y':\n          processNumber = true;\n          curstr += dObject.year;\n\n          if (length_1 === 2) {\n            curstr = curstr.substr(curstr.length - 2);\n          }\n\n          break;\n\n        case 'a':\n          // eslint-disable-next-line\n          var desig = value.getHours() < 12 ? 'am' : 'pm'; // eslint-disable-next-line\n\n          ret += options.designator[desig];\n          break;\n\n        case 'G':\n          // eslint-disable-next-line\n          var dec = value.getFullYear() < 0 ? 0 : 1; // eslint-disable-next-line\n\n          var retu = options.era[dec];\n\n          if (isNullOrUndefined(retu)) {\n            // eslint-disable-next-line\n            retu = options.era[dec ? 0 : 1];\n          }\n\n          ret += retu || '';\n          break;\n\n        case '\\'':\n          ret += match === '\\'\\'' ? '\\'' : match.replace(/'/g, '');\n          break;\n\n        case 'z':\n          // eslint-disable-next-line\n          var timezone = value.getTimezoneOffset(); // eslint-disable-next-line\n\n          var pattern_1 = length_1 < 4 ? '+H;-H' : options.timeZone.hourFormat;\n          pattern_1 = pattern_1.replace(/:/g, options.numMapper.timeSeparator);\n\n          if (timezone === 0) {\n            ret += options.timeZone.gmtZeroFormat;\n          } else {\n            processNumber = true;\n            curstr = this.getTimeZoneValue(timezone, pattern_1);\n          }\n\n          curstr = options.timeZone.gmtFormat.replace(/\\{0\\}/, curstr);\n          break;\n\n        case ':':\n          // eslint-disable-next-line\n          ret += options.numMapper.numberSymbols[timeSeparator];\n          break;\n\n        case '/':\n          ret += options.dateSeperator;\n          break;\n\n        case 'W':\n          isNumber = true;\n          curval = base.getWeekOfYear(value);\n          break;\n\n        default:\n          ret += match;\n      }\n\n      if (isNumber) {\n        processNumber = true;\n        curstr = this.checkTwodigitNumber(curval, length_1);\n      }\n\n      if (processNumber) {\n        ret += parser.convertValueParts(curstr, base.latnParseRegex, options.numMapper.mapper);\n      }\n    }\n\n    return ret;\n  };\n\n  DateFormat.getCurrentDateValue = function (value, isIslamic) {\n    if (isIslamic) {\n      return HijriParser.getHijriDate(value);\n    }\n\n    return {\n      year: value.getFullYear(),\n      month: value.getMonth() + 1,\n      date: value.getDate()\n    };\n  };\n  /**\r\n   * Returns two digit numbers for given value and length\r\n   *\r\n   * @param {number} val ?\r\n   * @param {number} len ?\r\n   * @returns {string} ?\r\n   */\n\n\n  DateFormat.checkTwodigitNumber = function (val, len) {\n    var ret = val + '';\n\n    if (len === 2 && ret.length !== 2) {\n      return '0' + ret;\n    }\n\n    return ret;\n  };\n  /**\r\n   * Returns the value of the Time Zone.\r\n   *\r\n   * @param {number} tVal ?\r\n   * @param {string} pattern ?\r\n   * @returns {string} ?\r\n   * @private\r\n   */\n\n\n  DateFormat.getTimeZoneValue = function (tVal, pattern) {\n    var _this = this;\n\n    var splt = pattern.split(';');\n    var curPattern = splt[tVal > 0 ? 1 : 0];\n    var no = Math.abs(tVal);\n    return curPattern = curPattern.replace(/HH?|mm/g, function (str) {\n      var len = str.length;\n      var ishour = str.indexOf('H') !== -1;\n      return _this.checkTwodigitNumber(Math.floor(ishour ? no / 60 : no % 60), len);\n    });\n  };\n\n  return DateFormat;\n}();\n\nexport { DateFormat };","map":{"version":3,"sources":["D:/4_PROJECTS/RubyGYM/client/node_modules/@syncfusion/ej2-base/src/intl/date-formatter.js"],"names":["ParserBase","parser","IntlBase","base","isUndefined","throwError","getValue","isBlazor","HijriParser","isNullOrUndefined","extend","abbreviateRegexGlobal","standalone","weekdayKey","basicPatterns","timeSetter","m","h","H","s","d","f","datePartMatcher","timeSeparator","DateFormat","dateFormat","culture","option","cldr","_this","dependable","getDependables","calendar","numObject","dateObject","formatOptions","isIslamic","islamicRegex","test","isServerRendered","compareBlazorDateFormats","resPattern","format","getResultantPattern","skeleton","type","dateSeperator","getDateSeparator","ConvertDateToWeekFormat","replace","pattern","numMapper","getNumberMapper","parserObject","getNumberingSystem","patternMatch","match","_i","patternMatch_1","length","str","len","char","weekday","monthIndex","days","month","designator","eText","era","timeZone","value","isNaN","getDate","intDateFormatter","options","ret","matches","dateParseRegex","dObject","getCurrentDateValue","matches_1","length_1","curval","curvalstr","isNumber","processNumber","curstr","getDay","date","toString","substring","curlength","i","year","substr","desig","getHours","dec","getFullYear","retu","timezone","getTimezoneOffset","pattern_1","hourFormat","gmtZeroFormat","getTimeZoneValue","gmtFormat","numberSymbols","getWeekOfYear","checkTwodigitNumber","convertValueParts","latnParseRegex","mapper","getHijriDate","getMonth","val","tVal","splt","split","curPattern","no","Math","abs","ishour","indexOf","floor"],"mappings":"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","sourcesContent":["import { ParserBase as parser } from './parser-base';\r\nimport { IntlBase as base } from './intl-base';\r\nimport { isUndefined, throwError, getValue, isBlazor } from '../util';\r\nimport { HijriParser } from '../hijri-parser';\r\nimport { isNullOrUndefined, extend } from '../util';\r\nvar abbreviateRegexGlobal = /\\/MMMMM|MMMM|MMM|a|LLLL|LLL|EEEEE|EEEE|E|K|cccc|ccc|WW|W|G+|z+/gi;\r\nvar standalone = 'stand-alone';\r\nvar weekdayKey = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\r\nexport var basicPatterns = ['short', 'medium', 'long', 'full'];\r\nvar timeSetter = {\r\n    m: 'getMinutes',\r\n    h: 'getHours',\r\n    H: 'getHours',\r\n    s: 'getSeconds',\r\n    d: 'getDate',\r\n    f: 'getMilliseconds'\r\n};\r\nexport var datePartMatcher = {\r\n    'M': 'month',\r\n    'd': 'day',\r\n    'E': 'weekday',\r\n    'c': 'weekday',\r\n    'y': 'year',\r\n    'm': 'minute',\r\n    'h': 'hour',\r\n    'H': 'hour',\r\n    's': 'second',\r\n    'L': 'month',\r\n    'a': 'designator',\r\n    'z': 'timeZone',\r\n    'Z': 'timeZone',\r\n    'G': 'era',\r\n    'f': 'milliseconds'\r\n};\r\nvar timeSeparator = 'timeSeparator';\r\n/* tslint:disable no-any */\r\n/**\r\n * Date Format is a framework provides support for date formatting.\r\n *\r\n * @private\r\n */\r\nvar DateFormat = /** @class */ (function () {\r\n    function DateFormat() {\r\n    }\r\n    /**\r\n     * Returns the formatter function for given skeleton.\r\n     *\r\n     * @param {string} culture -  Specifies the culture name to be which formatting.\r\n     * @param {DateFormatOptions} option - Specific the format in which date  will format.\r\n     * @param {Object} cldr - Specifies the global cldr data collection.\r\n     * @returns {Function} ?\r\n     */\r\n    DateFormat.dateFormat = function (culture, option, cldr) {\r\n        var _this = this;\r\n        var dependable = base.getDependables(cldr, culture, option.calendar);\r\n        var numObject = getValue('parserObject.numbers', dependable);\r\n        var dateObject = dependable.dateObject;\r\n        var formatOptions = { isIslamic: base.islamicRegex.test(option.calendar) };\r\n        if (isBlazor() && option.isServerRendered) {\r\n            option = base.compareBlazorDateFormats(option, culture);\r\n        }\r\n        var resPattern = option.format ||\r\n            base.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');\r\n        formatOptions.dateSeperator = isBlazor() ? getValue('dateSeperator', dateObject) : base.getDateSeparator(dependable.dateObject);\r\n        if (isUndefined(resPattern)) {\r\n            throwError('Format options or type given must be invalid');\r\n        }\r\n        else {\r\n            resPattern = base.ConvertDateToWeekFormat(resPattern);\r\n            if (isBlazor()) {\r\n                resPattern = resPattern.replace(/tt/, 'a');\r\n            }\r\n            formatOptions.pattern = resPattern;\r\n            formatOptions.numMapper = isBlazor() ?\r\n                extend({}, numObject) : parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr));\r\n            var patternMatch = resPattern.match(abbreviateRegexGlobal) || [];\r\n            for (var _i = 0, patternMatch_1 = patternMatch; _i < patternMatch_1.length; _i++) {\r\n                var str = patternMatch_1[_i];\r\n                var len = str.length;\r\n                var char = str[0];\r\n                if (char === 'K') {\r\n                    char = 'h';\r\n                }\r\n                switch (char) {\r\n                    case 'E':\r\n                    case 'c':\r\n                        if (isBlazor()) {\r\n                            // eslint-disable-next-line\r\n                            formatOptions.weekday = getValue('days.' + base.monthIndex[len], dateObject);\r\n                        }\r\n                        else {\r\n                            // eslint-disable-next-line\r\n                            formatOptions.weekday = dependable.dateObject[base.days][standalone][base.monthIndex[len]];\r\n                        }\r\n                        break;\r\n                    case 'M':\r\n                    case 'L':\r\n                        if (isBlazor()) {\r\n                            // eslint-disable-next-line\r\n                            formatOptions.month = getValue('months.' + base.monthIndex[len], dateObject);\r\n                        }\r\n                        else {\r\n                            // eslint-disable-next-line\r\n                            formatOptions.month = dependable.dateObject[base.month][standalone][base.monthIndex[len]];\r\n                        }\r\n                        break;\r\n                    case 'a':\r\n                        formatOptions.designator = isBlazor() ?\r\n                            getValue('dayPeriods', dateObject) : getValue('dayPeriods.format.wide', dateObject);\r\n                        break;\r\n                    case 'G':\r\n                        // eslint-disable-next-line\r\n                        var eText = (len <= 3) ? 'eraAbbr' : (len === 4) ? 'eraNames' : 'eraNarrow';\r\n                        formatOptions.era = isBlazor() ? getValue('eras', dateObject) : getValue('eras.' + eText, dependable.dateObject);\r\n                        break;\r\n                    case 'z':\r\n                        formatOptions.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return function (value) {\r\n            if (isNaN(value.getDate())) {\r\n                return null;\r\n            }\r\n            return _this.intDateFormatter(value, formatOptions);\r\n        };\r\n    };\r\n    /**\r\n     * Returns formatted date string based on options passed.\r\n     *\r\n     * @param {Date} value ?\r\n     * @param {FormatOptions} options ?\r\n     * @returns {string} ?\r\n     */\r\n    DateFormat.intDateFormatter = function (value, options) {\r\n        var pattern = options.pattern;\r\n        var ret = '';\r\n        var matches = pattern.match(base.dateParseRegex);\r\n        var dObject = this.getCurrentDateValue(value, options.isIslamic);\r\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\r\n            var match = matches_1[_i];\r\n            var length_1 = match.length;\r\n            var char = match[0];\r\n            if (char === 'K') {\r\n                char = 'h';\r\n            }\r\n            var curval = void 0;\r\n            var curvalstr = '';\r\n            var isNumber = void 0;\r\n            var processNumber = void 0;\r\n            var curstr = '';\r\n            switch (char) {\r\n                case 'M':\r\n                case 'L':\r\n                    curval = dObject.month;\r\n                    if (length_1 > 2) {\r\n                        // eslint-disable-next-line\r\n                        ret += options.month[curval];\r\n                    }\r\n                    else {\r\n                        isNumber = true;\r\n                    }\r\n                    break;\r\n                case 'E':\r\n                case 'c':\r\n                    // eslint-disable-next-line\r\n                    ret += options.weekday[weekdayKey[value.getDay()]];\r\n                    break;\r\n                case 'H':\r\n                case 'h':\r\n                case 'm':\r\n                case 's':\r\n                case 'd':\r\n                case 'f':\r\n                    isNumber = true;\r\n                    if (char === 'd') {\r\n                        curval = dObject.date;\r\n                    }\r\n                    else if (char === 'f') {\r\n                        isNumber = false;\r\n                        processNumber = true;\r\n                        // eslint-disable-next-line\r\n                        curvalstr = value[timeSetter[char]]().toString();\r\n                        curvalstr = curvalstr.substring(0, length_1);\r\n                        var curlength = curvalstr.length;\r\n                        if (length_1 !== curlength) {\r\n                            if (length_1 > 3) {\r\n                                continue;\r\n                            }\r\n                            for (var i = 0; i < length_1 - curlength; i++) {\r\n                                curvalstr = '0' + curvalstr.toString();\r\n                            }\r\n                        }\r\n                        curstr += curvalstr;\r\n                    }\r\n                    else {\r\n                        // eslint-disable-next-line\r\n                        curval = value[timeSetter[char]]();\r\n                    }\r\n                    if (char === 'h') {\r\n                        curval = curval % 12 || 12;\r\n                    }\r\n                    break;\r\n                case 'y':\r\n                    processNumber = true;\r\n                    curstr += dObject.year;\r\n                    if (length_1 === 2) {\r\n                        curstr = curstr.substr(curstr.length - 2);\r\n                    }\r\n                    break;\r\n                case 'a':\r\n                    // eslint-disable-next-line\r\n                    var desig = value.getHours() < 12 ? 'am' : 'pm';\r\n                    // eslint-disable-next-line\r\n                    ret += options.designator[desig];\r\n                    break;\r\n                case 'G':\r\n                    // eslint-disable-next-line\r\n                    var dec = value.getFullYear() < 0 ? 0 : 1;\r\n                    // eslint-disable-next-line\r\n                    var retu = options.era[dec];\r\n                    if (isNullOrUndefined(retu)) {\r\n                        // eslint-disable-next-line\r\n                        retu = options.era[dec ? 0 : 1];\r\n                    }\r\n                    ret += retu || '';\r\n                    break;\r\n                case '\\'':\r\n                    ret += (match === '\\'\\'') ? '\\'' : match.replace(/'/g, '');\r\n                    break;\r\n                case 'z':\r\n                    // eslint-disable-next-line\r\n                    var timezone = value.getTimezoneOffset();\r\n                    // eslint-disable-next-line\r\n                    var pattern_1 = (length_1 < 4) ? '+H;-H' : options.timeZone.hourFormat;\r\n                    pattern_1 = pattern_1.replace(/:/g, options.numMapper.timeSeparator);\r\n                    if (timezone === 0) {\r\n                        ret += options.timeZone.gmtZeroFormat;\r\n                    }\r\n                    else {\r\n                        processNumber = true;\r\n                        curstr = this.getTimeZoneValue(timezone, pattern_1);\r\n                    }\r\n                    curstr = options.timeZone.gmtFormat.replace(/\\{0\\}/, curstr);\r\n                    break;\r\n                case ':':\r\n                    // eslint-disable-next-line\r\n                    ret += options.numMapper.numberSymbols[timeSeparator];\r\n                    break;\r\n                case '/':\r\n                    ret += options.dateSeperator;\r\n                    break;\r\n                case 'W':\r\n                    isNumber = true;\r\n                    curval = base.getWeekOfYear(value);\r\n                    break;\r\n                default:\r\n                    ret += match;\r\n            }\r\n            if (isNumber) {\r\n                processNumber = true;\r\n                curstr = this.checkTwodigitNumber(curval, length_1);\r\n            }\r\n            if (processNumber) {\r\n                ret += parser.convertValueParts(curstr, base.latnParseRegex, options.numMapper.mapper);\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    DateFormat.getCurrentDateValue = function (value, isIslamic) {\r\n        if (isIslamic) {\r\n            return HijriParser.getHijriDate(value);\r\n        }\r\n        return { year: value.getFullYear(), month: value.getMonth() + 1, date: value.getDate() };\r\n    };\r\n    /**\r\n     * Returns two digit numbers for given value and length\r\n     *\r\n     * @param {number} val ?\r\n     * @param {number} len ?\r\n     * @returns {string} ?\r\n     */\r\n    DateFormat.checkTwodigitNumber = function (val, len) {\r\n        var ret = val + '';\r\n        if (len === 2 && ret.length !== 2) {\r\n            return '0' + ret;\r\n        }\r\n        return ret;\r\n    };\r\n    /**\r\n     * Returns the value of the Time Zone.\r\n     *\r\n     * @param {number} tVal ?\r\n     * @param {string} pattern ?\r\n     * @returns {string} ?\r\n     * @private\r\n     */\r\n    DateFormat.getTimeZoneValue = function (tVal, pattern) {\r\n        var _this = this;\r\n        var splt = pattern.split(';');\r\n        var curPattern = splt[tVal > 0 ? 1 : 0];\r\n        var no = Math.abs(tVal);\r\n        return curPattern = curPattern.replace(/HH?|mm/g, function (str) {\r\n            var len = str.length;\r\n            var ishour = str.indexOf('H') !== -1;\r\n            return _this.checkTwodigitNumber(Math.floor(ishour ? (no / 60) : (no % 60)), len);\r\n        });\r\n    };\r\n    return DateFormat;\r\n}());\r\nexport { DateFormat };\r\n"]},"metadata":{},"sourceType":"module"}