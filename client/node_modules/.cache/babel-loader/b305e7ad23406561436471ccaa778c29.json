{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/node\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { clone } from 'lodash-es'; // To check if component is loaded more than once.\n\nimport '@ckeditor/ckeditor5-utils/src/version';\n/**\n * Abstract view node class.\n *\n * This is an abstract class. Its constructor should not be used directly.\n * Use the {@link module:engine/view/downcastwriter~DowncastWriter} or {@link module:engine/view/upcastwriter~UpcastWriter}\n * to create new instances of view nodes.\n *\n * @abstract\n */\n\nexport default class Node {\n  /**\n   * Creates a tree view node.\n   *\n   * @protected\n   * @param {module:engine/view/document~Document} document The document instance to which this node belongs.\n   */\n  constructor(document) {\n    /**\n     * The document instance to which this node belongs.\n     *\n     * @readonly\n     * @member {module:engine/view/document~Document}\n     */\n    this.document = document;\n    /**\n     * Parent element. Null by default. Set by {@link module:engine/view/element~Element#_insertChild}.\n     *\n     * @readonly\n     * @member {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n     */\n\n    this.parent = null;\n  }\n  /**\n   * Index of the node in the parent element or null if the node has no parent.\n   *\n   * Accessing this property throws an error if this node's parent element does not contain it.\n   * This means that view tree got broken.\n   *\n   * @readonly\n   * @type {Number|null}\n   */\n\n\n  get index() {\n    let pos;\n\n    if (!this.parent) {\n      return null;\n    } // No parent or child doesn't exist in parent's children.\n\n\n    if ((pos = this.parent.getChildIndex(this)) == -1) {\n      /**\n       * The node's parent does not contain this node. It means that the document tree is corrupted.\n       *\n       * @error view-node-not-found-in-parent\n       */\n      throw new CKEditorError('view-node-not-found-in-parent', this);\n    }\n\n    return pos;\n  }\n  /**\n   * Node's next sibling, or `null` if it is the last child.\n   *\n   * @readonly\n   * @type {module:engine/view/node~Node|null}\n   */\n\n\n  get nextSibling() {\n    const index = this.index;\n    return index !== null && this.parent.getChild(index + 1) || null;\n  }\n  /**\n   * Node's previous sibling, or `null` if it is the first child.\n   *\n   * @readonly\n   * @type {module:engine/view/node~Node|null}\n   */\n\n\n  get previousSibling() {\n    const index = this.index;\n    return index !== null && this.parent.getChild(index - 1) || null;\n  }\n  /**\n   * Top-most ancestor of the node. If the node has no parent it is the root itself.\n   *\n   * @readonly\n   * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n   */\n\n\n  get root() {\n    let root = this; // eslint-disable-line consistent-this\n\n    while (root.parent) {\n      root = root.parent;\n    }\n\n    return root;\n  }\n  /**\n   * Returns true if the node is in a tree rooted in the document (is a descendant of one of its roots).\n   *\n   * @returns {Boolean}\n   */\n\n\n  isAttached() {\n    return this.root.is('rootElement');\n  }\n  /**\n   * Gets a path to the node. The path is an array containing indices of consecutive ancestors of this node,\n   * beginning from {@link module:engine/view/node~Node#root root}, down to this node's index.\n   *\n   *\t\tconst abc = downcastWriter.createText( 'abc' );\n   *\t\tconst foo = downcastWriter.createText( 'foo' );\n   *\t\tconst h1 = downcastWriter.createElement( 'h1', null, downcastWriter.createText( 'header' ) );\n   *\t\tconst p = downcastWriter.createElement( 'p', null, [ abc, foo ] );\n   *\t\tconst div = downcastWriter.createElement( 'div', null, [ h1, p ] );\n   *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n   *\t\th1.getPath(); // Returns [ 0 ].\n   *\t\tdiv.getPath(); // Returns [].\n   *\n   * @returns {Array.<Number>} The path.\n   */\n\n\n  getPath() {\n    const path = [];\n    let node = this; // eslint-disable-line consistent-this\n\n    while (node.parent) {\n      path.unshift(node.index);\n      node = node.parent;\n    }\n\n    return path;\n  }\n  /**\n   * Returns ancestors array of this node.\n   *\n   * @param {Object} options Options object.\n   * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n   * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n   * otherwise root element will be the first item in the array.\n   * @returns {Array} Array with ancestors.\n   */\n\n\n  getAncestors() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      includeSelf: false,\n      parentFirst: false\n    };\n    const ancestors = [];\n    let parent = options.includeSelf ? this : this.parent;\n\n    while (parent) {\n      ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n      parent = parent.parent;\n    }\n\n    return ancestors;\n  }\n  /**\n   * Returns a {@link module:engine/view/element~Element} or {@link module:engine/view/documentfragment~DocumentFragment}\n   * which is a common ancestor of both nodes.\n   *\n   * @param {module:engine/view/node~Node} node The second node.\n   * @param {Object} options Options object.\n   * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n   * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n   * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n   */\n\n\n  getCommonAncestor(node) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const ancestorsA = this.getAncestors(options);\n    const ancestorsB = node.getAncestors(options);\n    let i = 0;\n\n    while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n      i++;\n    }\n\n    return i === 0 ? null : ancestorsA[i - 1];\n  }\n  /**\n   * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n   * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n   *\n   * @param {module:engine/view/node~Node} node Node to compare with.\n   * @returns {Boolean}\n   */\n\n\n  isBefore(node) {\n    // Given node is not before this node if they are same.\n    if (this == node) {\n      return false;\n    } // Return `false` if it is impossible to compare nodes.\n\n\n    if (this.root !== node.root) {\n      return false;\n    }\n\n    const thisPath = this.getPath();\n    const nodePath = node.getPath();\n    const result = compareArrays(thisPath, nodePath);\n\n    switch (result) {\n      case 'prefix':\n        return true;\n\n      case 'extension':\n        return false;\n\n      default:\n        return thisPath[result] < nodePath[result];\n    }\n  }\n  /**\n   * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n   * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n   *\n   * @param {module:engine/view/node~Node} node Node to compare with.\n   * @returns {Boolean}\n   */\n\n\n  isAfter(node) {\n    // Given node is not before this node if they are same.\n    if (this == node) {\n      return false;\n    } // Return `false` if it is impossible to compare nodes.\n\n\n    if (this.root !== node.root) {\n      return false;\n    } // In other cases, just check if the `node` is before, and return the opposite.\n\n\n    return !this.isBefore(node);\n  }\n  /**\n   * Removes node from parent.\n   *\n   * @protected\n   */\n\n\n  _remove() {\n    this.parent._removeChildren(this.index);\n  }\n  /**\n   * @protected\n   * @param {module:engine/view/document~ChangeType} type Type of the change.\n   * @param {module:engine/view/node~Node} node Changed node.\n   * @fires change\n   */\n\n\n  _fireChange(type, node) {\n    this.fire('change:' + type, node);\n\n    if (this.parent) {\n      this.parent._fireChange(type, node);\n    }\n  }\n  /**\n   * Custom toJSON method to solve child-parent circular dependencies.\n   *\n   * @returns {Object} Clone of this object with the parent property removed.\n   */\n\n\n  toJSON() {\n    const json = clone(this); // Due to circular references we need to remove parent reference.\n\n    delete json.parent;\n    return json;\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   * This method is useful when processing view objects that are of unknown type. For example, a function\n   * may return a {@link module:engine/view/documentfragment~DocumentFragment} or a {@link module:engine/view/node~Node}\n   * that can be either a text node or an element. This method can be used to check what kind of object is returned.\n   *\n   *\t\tsomeObject.is( 'element' ); // -> true if this is an element\n   *\t\tsomeObject.is( 'node' ); // -> true if this is a node (a text node or an element)\n   *\t\tsomeObject.is( 'documentFragment' ); // -> true if this is a document fragment\n   *\n   * Since this method is also available on a range of model objects, you can prefix the type of the object with\n   * `model:` or `view:` to check, for example, if this is the model's or view's element:\n   *\n   *\t\tviewElement.is( 'view:element' ); // -> true\n   *\t\tviewElement.is( 'model:element' ); // -> false\n   *\n   * By using this method it is also possible to check a name of an element:\n   *\n   *\t\timgElement.is( 'element', 'img' ); // -> true\n   *\t\timgElement.is( 'view:element', 'img' ); // -> same as above, but more precise\n   *\n   * The list of view objects which implement the `is()` method:\n   *\n   * * {@link module:engine/view/attributeelement~AttributeElement#is `AttributeElement#is()`}\n   * * {@link module:engine/view/containerelement~ContainerElement#is `ContainerElement#is()`}\n   * * {@link module:engine/view/documentfragment~DocumentFragment#is `DocumentFragment#is()`}\n   * * {@link module:engine/view/documentselection~DocumentSelection#is `DocumentSelection#is()`}\n   * * {@link module:engine/view/editableelement~EditableElement#is `EditableElement#is()`}\n   * * {@link module:engine/view/element~Element#is `Element#is()`}\n   * * {@link module:engine/view/emptyelement~EmptyElement#is `EmptyElement#is()`}\n   * * {@link module:engine/view/node~Node#is `Node#is()`}\n   * * {@link module:engine/view/position~Position#is `Position#is()`}\n   * * {@link module:engine/view/range~Range#is `Range#is()`}\n   * * {@link module:engine/view/rooteditableelement~RootEditableElement#is `RootEditableElement#is()`}\n   * * {@link module:engine/view/selection~Selection#is `Selection#is()`}\n   * * {@link module:engine/view/text~Text#is `Text#is()`}\n   * * {@link module:engine/view/textproxy~TextProxy#is `TextProxy#is()`}\n   * * {@link module:engine/view/uielement~UIElement#is `UIElement#is()`}\n   *\n   * @method #is\n   * @param {String} type Type to check.\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type === 'node' || type === 'view:node';\n  }\n  /**\n   * Clones this node.\n   *\n   * @protected\n   * @method #_clone\n   * @returns {module:engine/view/node~Node} Clone of this node.\n   */\n\n  /**\n   * Checks if provided node is similar to this node.\n   *\n   * @method #isSimilar\n   * @returns {Boolean} True if nodes are similar.\n   */\n\n\n}\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} children changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:children\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} attributes changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:attributes\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when {@link module:engine/view/text~Text text nodes} data changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:text\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * @event change\n */\n\nmix(Node, EmitterMixin);","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/view/node.js"],"names":["CKEditorError","EmitterMixin","mix","compareArrays","clone","Node","constructor","document","parent","index","pos","getChildIndex","nextSibling","getChild","previousSibling","root","isAttached","is","getPath","path","node","unshift","getAncestors","options","includeSelf","parentFirst","ancestors","getCommonAncestor","ancestorsA","ancestorsB","i","isBefore","thisPath","nodePath","result","isAfter","_remove","_removeChildren","_fireChange","type","fire","toJSON","json"],"mappings":"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F,EAAQnB,IAAR,EAAe;AACzB,SAAKoB,IAAL,CAAW,YAAYD,IAAvB,EAA6BnB,IAA7B;;AAEA,QAAK,KAAKZ,MAAV,EAAmB;AAClB,WAAKA,MAAL,CAAY8B,WAAZ,CAAyBC,IAAzB,EAA+BnB,IAA/B;AACA;AACD;AAED;AACD;AACA;AACA;AACA;;;AACCqB,EAAAA,MAAM,GAAG;AACR,UAAMC,IAAI,GAAGtC,KAAK,CAAE,IAAF,CAAlB,CADQ,CAGR;;AACA,WAAOsC,IAAI,CAAClC,MAAZ;AAEA,WAAOkC,IAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCzB,EAAAA,EAAE,CAAEsB,IAAF,EAAS;AACV,WAAOA,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,WAAnC;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;;;AAzU0B;AA4U1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEArC,GAAG,CAAEG,IAAF,EAAQJ,YAAR,CAAH","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/node\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { clone } from 'lodash-es';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Abstract view node class.\n *\n * This is an abstract class. Its constructor should not be used directly.\n * Use the {@link module:engine/view/downcastwriter~DowncastWriter} or {@link module:engine/view/upcastwriter~UpcastWriter}\n * to create new instances of view nodes.\n *\n * @abstract\n */\nexport default class Node {\n\t/**\n\t * Creates a tree view node.\n\t *\n\t * @protected\n\t * @param {module:engine/view/document~Document} document The document instance to which this node belongs.\n\t */\n\tconstructor( document ) {\n\t\t/**\n\t\t * The document instance to which this node belongs.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = document;\n\n\t\t/**\n\t\t * Parent element. Null by default. Set by {@link module:engine/view/element~Element#_insertChild}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t\t */\n\t\tthis.parent = null;\n\t}\n\n\t/**\n\t * Index of the node in the parent element or null if the node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that view tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget index() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// No parent or child doesn't exist in parent's children.\n\t\tif ( ( pos = this.parent.getChildIndex( this ) ) == -1 ) {\n\t\t\t/**\n\t\t\t * The node's parent does not contain this node. It means that the document tree is corrupted.\n\t\t\t *\n\t\t\t * @error view-node-not-found-in-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-node-not-found-in-parent', this );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Node's next sibling, or `null` if it is the last child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nextSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\n\t}\n\n\t/**\n\t * Node's previous sibling, or `null` if it is the first child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget previousSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\n\t}\n\n\t/**\n\t * Top-most ancestor of the node. If the node has no parent it is the root itself.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\tlet root = this; // eslint-disable-line consistent-this\n\n\t\twhile ( root.parent ) {\n\t\t\troot = root.parent;\n\t\t}\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * Returns true if the node is in a tree rooted in the document (is a descendant of one of its roots).\n\t *\n\t * @returns {Boolean}\n\t */\n\tisAttached() {\n\t\treturn this.root.is( 'rootElement' );\n\t}\n\n\t/**\n\t * Gets a path to the node. The path is an array containing indices of consecutive ancestors of this node,\n\t * beginning from {@link module:engine/view/node~Node#root root}, down to this node's index.\n\t *\n\t *\t\tconst abc = downcastWriter.createText( 'abc' );\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst h1 = downcastWriter.createElement( 'h1', null, downcastWriter.createText( 'header' ) );\n\t *\t\tconst p = downcastWriter.createElement( 'p', null, [ abc, foo ] );\n\t *\t\tconst div = downcastWriter.createElement( 'div', null, [ h1, p ] );\n\t *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n\t *\t\th1.getPath(); // Returns [ 0 ].\n\t *\t\tdiv.getPath(); // Returns [].\n\t *\n\t * @returns {Array.<Number>} The path.\n\t */\n\tgetPath() {\n\t\tconst path = [];\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\twhile ( node.parent ) {\n\t\t\tpath.unshift( node.index );\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this node.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/element~Element} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both nodes.\n\t *\n\t * @param {module:engine/view/node~Node} node The second node.\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( node, options = {} ) {\n\t\tconst ancestorsA = this.getAncestors( options );\n\t\tconst ancestorsB = node.getAncestors( options );\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/view/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisBefore( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisPath = this.getPath();\n\t\tconst nodePath = node.getPath();\n\n\t\tconst result = compareArrays( thisPath, nodePath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn true;\n\n\t\t\tcase 'extension':\n\t\t\t\treturn false;\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < nodePath[ result ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/view/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisAfter( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// In other cases, just check if the `node` is before, and return the opposite.\n\t\treturn !this.isBefore( node );\n\t}\n\n\t/**\n\t * Removes node from parent.\n\t *\n\t * @protected\n\t */\n\t_remove() {\n\t\tthis.parent._removeChildren( this.index );\n\t}\n\n\t/**\n\t * @protected\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Changed node.\n\t * @fires change\n\t */\n\t_fireChange( type, node ) {\n\t\tthis.fire( 'change:' + type, node );\n\n\t\tif ( this.parent ) {\n\t\t\tthis.parent._fireChange( type, node );\n\t\t}\n\t}\n\n\t/**\n\t * Custom toJSON method to solve child-parent circular dependencies.\n\t *\n\t * @returns {Object} Clone of this object with the parent property removed.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this );\n\n\t\t// Due to circular references we need to remove parent reference.\n\t\tdelete json.parent;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t * This method is useful when processing view objects that are of unknown type. For example, a function\n\t * may return a {@link module:engine/view/documentfragment~DocumentFragment} or a {@link module:engine/view/node~Node}\n\t * that can be either a text node or an element. This method can be used to check what kind of object is returned.\n\t *\n\t *\t\tsomeObject.is( 'element' ); // -> true if this is an element\n\t *\t\tsomeObject.is( 'node' ); // -> true if this is a node (a text node or an element)\n\t *\t\tsomeObject.is( 'documentFragment' ); // -> true if this is a document fragment\n\t *\n\t * Since this method is also available on a range of model objects, you can prefix the type of the object with\n\t * `model:` or `view:` to check, for example, if this is the model's or view's element:\n\t *\n\t *\t\tviewElement.is( 'view:element' ); // -> true\n\t *\t\tviewElement.is( 'model:element' ); // -> false\n\t *\n\t * By using this method it is also possible to check a name of an element:\n\t *\n\t *\t\timgElement.is( 'element', 'img' ); // -> true\n\t *\t\timgElement.is( 'view:element', 'img' ); // -> same as above, but more precise\n\t *\n\t * The list of view objects which implement the `is()` method:\n\t *\n\t * * {@link module:engine/view/attributeelement~AttributeElement#is `AttributeElement#is()`}\n\t * * {@link module:engine/view/containerelement~ContainerElement#is `ContainerElement#is()`}\n\t * * {@link module:engine/view/documentfragment~DocumentFragment#is `DocumentFragment#is()`}\n\t * * {@link module:engine/view/documentselection~DocumentSelection#is `DocumentSelection#is()`}\n\t * * {@link module:engine/view/editableelement~EditableElement#is `EditableElement#is()`}\n\t * * {@link module:engine/view/element~Element#is `Element#is()`}\n\t * * {@link module:engine/view/emptyelement~EmptyElement#is `EmptyElement#is()`}\n\t * * {@link module:engine/view/node~Node#is `Node#is()`}\n\t * * {@link module:engine/view/position~Position#is `Position#is()`}\n\t * * {@link module:engine/view/range~Range#is `Range#is()`}\n\t * * {@link module:engine/view/rooteditableelement~RootEditableElement#is `RootEditableElement#is()`}\n\t * * {@link module:engine/view/selection~Selection#is `Selection#is()`}\n\t * * {@link module:engine/view/text~Text#is `Text#is()`}\n\t * * {@link module:engine/view/textproxy~TextProxy#is `TextProxy#is()`}\n\t * * {@link module:engine/view/uielement~UIElement#is `UIElement#is()`}\n\t *\n\t * @method #is\n\t * @param {String} type Type to check.\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === 'node' || type === 'view:node';\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @method #_clone\n\t * @returns {module:engine/view/node~Node} Clone of this node.\n\t */\n\n\t/**\n\t * Checks if provided node is similar to this node.\n\t *\n\t * @method #isSimilar\n\t * @returns {Boolean} True if nodes are similar.\n\t */\n}\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} children changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:children\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} attributes changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:attributes\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when {@link module:engine/view/text~Text text nodes} data changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:text\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * @event change\n */\n\nmix( Node, EmitterMixin );\n"]},"metadata":{},"sourceType":"module"}