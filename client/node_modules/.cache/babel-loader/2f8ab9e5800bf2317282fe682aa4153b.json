{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/button/dropdownbuttonview\n */\nimport ButtonView from '../../button/buttonview';\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport IconView from '../../icon/iconview';\n/**\n * The default dropdown button view class.\n *\n *\t\tconst view = new DropdownButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n *\n * @implements module:ui/dropdown/button/dropdownbutton~DropdownButton\n * @extends module:ui/button/buttonview~ButtonView\n */\n\nexport default class DropdownButtonView extends ButtonView {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * An icon that displays arrow to indicate a dropdown button.\n     *\n     * @readonly\n     * @member {module:ui/icon/iconview~IconView}\n     */\n\n    this.arrowView = this._createArrowView();\n    this.extendTemplate({\n      attributes: {\n        'aria-haspopup': true\n      }\n    }); // The DropdownButton interface expects the open event upon which will open the dropdown.\n\n    this.delegate('execute').to(this, 'open');\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    this.children.add(this.arrowView);\n  }\n  /**\n   * Creates a {@link module:ui/icon/iconview~IconView} instance as {@link #arrowView}.\n   *\n   * @private\n   * @returns {module:ui/icon/iconview~IconView}\n   */\n\n\n  _createArrowView() {\n    const arrowView = new IconView();\n    arrowView.content = dropdownArrowIcon;\n    arrowView.extendTemplate({\n      attributes: {\n        class: 'ck-dropdown__arrow'\n      }\n    });\n    return arrowView;\n  }\n\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-ui/src/dropdown/button/dropdownbuttonview.js"],"names":["ButtonView","dropdownArrowIcon","IconView","DropdownButtonView","constructor","locale","arrowView","_createArrowView","extendTemplate","attributes","delegate","to","render","children","add","content","class"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,UAAP,MAAuB,yBAAvB;AAEA,OAAOC,iBAAP,MAA8B,yCAA9B;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,kBAAN,SAAiCH,UAAjC,CAA4C;AAC1D;AACD;AACA;AACCI,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,SAAL,GAAiB,KAAKC,gBAAL,EAAjB;AAEA,SAAKC,cAAL,CAAqB;AACpBC,MAAAA,UAAU,EAAE;AACX,yBAAiB;AADN;AADQ,KAArB,EAXqB,CAiBrB;;AACA,SAAKC,QAAL,CAAe,SAAf,EAA2BC,EAA3B,CAA+B,IAA/B,EAAqC,MAArC;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,MAAM,GAAG;AACR,UAAMA,MAAN;AAEA,SAAKC,QAAL,CAAcC,GAAd,CAAmB,KAAKR,SAAxB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,gBAAgB,GAAG;AAClB,UAAMD,SAAS,GAAG,IAAIJ,QAAJ,EAAlB;AAEAI,IAAAA,SAAS,CAACS,OAAV,GAAoBd,iBAApB;AAEAK,IAAAA,SAAS,CAACE,cAAV,CAA0B;AACzBC,MAAAA,UAAU,EAAE;AACXO,QAAAA,KAAK,EAAE;AADI;AADa,KAA1B;AAMA,WAAOV,SAAP;AACA;;AApDyD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/button/dropdownbuttonview\n */\n\nimport ButtonView from '../../button/buttonview';\n\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport IconView from '../../icon/iconview';\n\n/**\n * The default dropdown button view class.\n *\n *\t\tconst view = new DropdownButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n *\n * @implements module:ui/dropdown/button/dropdownbutton~DropdownButton\n * @extends module:ui/button/buttonview~ButtonView\n */\nexport default class DropdownButtonView extends ButtonView {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * An icon that displays arrow to indicate a dropdown button.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/icon/iconview~IconView}\n\t\t */\n\t\tthis.arrowView = this._createArrowView();\n\n\t\tthis.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\t'aria-haspopup': true\n\t\t\t}\n\t\t} );\n\n\t\t// The DropdownButton interface expects the open event upon which will open the dropdown.\n\t\tthis.delegate( 'execute' ).to( this, 'open' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.children.add( this.arrowView );\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/icon/iconview~IconView} instance as {@link #arrowView}.\n\t *\n\t * @private\n\t * @returns {module:ui/icon/iconview~IconView}\n\t */\n\t_createArrowView() {\n\t\tconst arrowView = new IconView();\n\n\t\tarrowView.content = dropdownArrowIcon;\n\n\t\tarrowView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-dropdown__arrow'\n\t\t\t}\n\t\t} );\n\n\t\treturn arrowView;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}