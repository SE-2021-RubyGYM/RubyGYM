{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/placeholder\n */\nimport '../../theme/placeholder.css'; // Each document stores information about its placeholder elements and check functions.\n\nconst documentPlaceholders = new WeakMap();\n/**\n * A helper that enables a placeholder on the provided view element (also updates its visibility).\n * The placeholder is a CSS pseudo–element (with a text content) attached to the element.\n *\n * To change the placeholder text, simply call this method again with new options.\n *\n * To disable the placeholder, use {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} helper.\n *\n * @param {Object} [options] Configuration options of the placeholder.\n * @param {module:engine/view/view~View} options.view Editing view instance.\n * @param {module:engine/view/element~Element} options.element Element that will gain a placeholder.\n * See `options.isDirectHost` to learn more.\n * @param {String} options.text Placeholder text.\n * @param {Boolean} [options.isDirectHost=true] If set `false`, the placeholder will not be enabled directly\n * in the passed `element` but in one of its children (selected automatically, i.e. a first empty child element).\n * Useful when attaching placeholders to elements that can host other elements (not just text), for instance,\n * editable root elements.\n * @param {Boolean} [options.keepOnFocus=false] If set `true`, the placeholder stay visible when the host element is focused.\n */\n\nexport function enablePlaceholder(options) {\n  const {\n    view,\n    element,\n    text,\n    isDirectHost = true,\n    keepOnFocus = false\n  } = options;\n  const doc = view.document; // Use a single a single post fixer per—document to update all placeholders.\n\n  if (!documentPlaceholders.has(doc)) {\n    documentPlaceholders.set(doc, new Map()); // If a post-fixer callback makes a change, it should return `true` so other post–fixers\n    // can re–evaluate the document again.\n\n    doc.registerPostFixer(writer => updateDocumentPlaceholders(doc, writer));\n  } // Store information about the element placeholder under its document.\n\n\n  documentPlaceholders.get(doc).set(element, {\n    text,\n    isDirectHost,\n    keepOnFocus,\n    hostElement: isDirectHost ? element : null\n  }); // Update the placeholders right away.\n\n  view.change(writer => updateDocumentPlaceholders(doc, writer));\n}\n/**\n * Disables the placeholder functionality from a given element.\n *\n * See {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} to learn more.\n *\n * @param {module:engine/view/view~View} view\n * @param {module:engine/view/element~Element} element\n */\n\nexport function disablePlaceholder(view, element) {\n  const doc = element.document;\n  view.change(writer => {\n    if (!documentPlaceholders.has(doc)) {\n      return;\n    }\n\n    const placeholders = documentPlaceholders.get(doc);\n    const config = placeholders.get(element);\n    writer.removeAttribute('data-placeholder', config.hostElement);\n    hidePlaceholder(writer, config.hostElement);\n    placeholders.delete(element);\n  });\n}\n/**\n * Shows a placeholder in the provided element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * **Note**: This helper will blindly show the placeholder directly in the root editable element if\n * one is passed, which could result in a visual clash if the editable element has some children\n * (for instance, an empty paragraph). Use {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`}\n * in that case or make sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\n\nexport function showPlaceholder(writer, element) {\n  if (!element.hasClass('ck-placeholder')) {\n    writer.addClass('ck-placeholder', element);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Hides a placeholder in the element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\n\nexport function hidePlaceholder(writer, element) {\n  if (element.hasClass('ck-placeholder')) {\n    writer.removeClass('ck-placeholder', element);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Checks if a placeholder should be displayed in the element.\n *\n * **Note**: This helper will blindly check the possibility of showing a placeholder directly in the\n * root editable element if one is passed, which may not be the expected result. If an element can\n * host other elements (not just text), most likely one of its children should be checked instead\n * because it will be the final host for the placeholder. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} in that case or make\n * sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/element~Element} element Element that holds the placeholder.\n * @param {Boolean} keepOnFocus Focusing the element will keep the placeholder visible.\n * @returns {Boolean}\n */\n\nexport function needsPlaceholder(element, keepOnFocus) {\n  if (!element.isAttached()) {\n    return false;\n  } // Anything but uiElement(s) counts as content.\n\n\n  const hasContent = Array.from(element.getChildren()).some(element => !element.is('uiElement'));\n\n  if (hasContent) {\n    return false;\n  } // Skip the focus check and make the placeholder visible already regardless of document focus state.\n\n\n  if (keepOnFocus) {\n    return true;\n  }\n\n  const doc = element.document; // If the document is blurred.\n\n  if (!doc.isFocused) {\n    return true;\n  }\n\n  const viewSelection = doc.selection;\n  const selectionAnchor = viewSelection.anchor; // If document is focused and the element is empty but the selection is not anchored inside it.\n\n  return selectionAnchor && selectionAnchor.parent !== element;\n} // Updates all placeholders associated with a document in a post–fixer callback.\n//\n// @private\n// @param { module:engine/view/document~Document} doc\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {Boolean} True if any changes were made to the view document.\n\nfunction updateDocumentPlaceholders(doc, writer) {\n  const placeholders = documentPlaceholders.get(doc);\n  const directHostElements = [];\n  let wasViewModified = false; // First set placeholders on the direct hosts.\n\n  for (const [element, config] of placeholders) {\n    if (config.isDirectHost) {\n      directHostElements.push(element);\n\n      if (updatePlaceholder(writer, element, config)) {\n        wasViewModified = true;\n      }\n    }\n  } // Then set placeholders on the indirect hosts but only on those that does not already have an direct host placeholder.\n\n\n  for (const [element, config] of placeholders) {\n    if (config.isDirectHost) {\n      continue;\n    }\n\n    const hostElement = getChildPlaceholderHostSubstitute(element); // When not a direct host, it could happen that there is no child element\n    // capable of displaying a placeholder.\n\n    if (!hostElement) {\n      continue;\n    } // Don't override placeholder if the host element already has some direct placeholder.\n\n\n    if (directHostElements.includes(hostElement)) {\n      continue;\n    } // Update the host element (used for setting and removing the placeholder).\n\n\n    config.hostElement = hostElement;\n\n    if (updatePlaceholder(writer, element, config)) {\n      wasViewModified = true;\n    }\n  }\n\n  return wasViewModified;\n} // Updates a single placeholder in a post–fixer callback.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/element~Element} element\n// @param {Object} config Configuration of the placeholder\n// @param {String} config.text\n// @param {Boolean} config.isDirectHost\n// @returns {Boolean} True if any changes were made to the view document.\n\n\nfunction updatePlaceholder(writer, element, config) {\n  const {\n    text,\n    isDirectHost,\n    hostElement\n  } = config;\n  let wasViewModified = false; // This may be necessary when updating the placeholder text to something else.\n\n  if (hostElement.getAttribute('data-placeholder') !== text) {\n    writer.setAttribute('data-placeholder', text, hostElement);\n    wasViewModified = true;\n  } // If the host element is not a direct host then placeholder is needed only when there is only one element.\n\n\n  const isOnlyChild = isDirectHost || element.childCount == 1;\n\n  if (isOnlyChild && needsPlaceholder(hostElement, config.keepOnFocus)) {\n    if (showPlaceholder(writer, hostElement)) {\n      wasViewModified = true;\n    }\n  } else if (hidePlaceholder(writer, hostElement)) {\n    wasViewModified = true;\n  }\n\n  return wasViewModified;\n} // Gets a child element capable of displaying a placeholder if a parent element can host more\n// than just text (for instance, when it is a root editable element). The child element\n// can then be used in other placeholder helpers as a substitute of its parent.\n//\n// @private\n// @param {module:engine/view/element~Element} parent\n// @returns {module:engine/view/element~Element|null}\n\n\nfunction getChildPlaceholderHostSubstitute(parent) {\n  if (parent.childCount) {\n    const firstChild = parent.getChild(0);\n\n    if (firstChild.is('element') && !firstChild.is('uiElement')) {\n      return firstChild;\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-engine/src/view/placeholder.js"],"names":["documentPlaceholders","WeakMap","enablePlaceholder","options","view","element","text","isDirectHost","keepOnFocus","doc","document","has","set","Map","registerPostFixer","writer","updateDocumentPlaceholders","get","hostElement","change","disablePlaceholder","placeholders","config","removeAttribute","hidePlaceholder","delete","showPlaceholder","hasClass","addClass","removeClass","needsPlaceholder","isAttached","hasContent","Array","from","getChildren","some","is","isFocused","viewSelection","selection","selectionAnchor","anchor","parent","directHostElements","wasViewModified","push","updatePlaceholder","getChildPlaceholderHostSubstitute","includes","getAttribute","setAttribute","isOnlyChild","childCount","firstChild","getChild"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/placeholder\n */\n\nimport '../../theme/placeholder.css';\n\n// Each document stores information about its placeholder elements and check functions.\nconst documentPlaceholders = new WeakMap();\n\n/**\n * A helper that enables a placeholder on the provided view element (also updates its visibility).\n * The placeholder is a CSS pseudo–element (with a text content) attached to the element.\n *\n * To change the placeholder text, simply call this method again with new options.\n *\n * To disable the placeholder, use {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} helper.\n *\n * @param {Object} [options] Configuration options of the placeholder.\n * @param {module:engine/view/view~View} options.view Editing view instance.\n * @param {module:engine/view/element~Element} options.element Element that will gain a placeholder.\n * See `options.isDirectHost` to learn more.\n * @param {String} options.text Placeholder text.\n * @param {Boolean} [options.isDirectHost=true] If set `false`, the placeholder will not be enabled directly\n * in the passed `element` but in one of its children (selected automatically, i.e. a first empty child element).\n * Useful when attaching placeholders to elements that can host other elements (not just text), for instance,\n * editable root elements.\n * @param {Boolean} [options.keepOnFocus=false] If set `true`, the placeholder stay visible when the host element is focused.\n */\nexport function enablePlaceholder( options ) {\n\tconst { view, element, text, isDirectHost = true, keepOnFocus = false } = options;\n\tconst doc = view.document;\n\n\t// Use a single a single post fixer per—document to update all placeholders.\n\tif ( !documentPlaceholders.has( doc ) ) {\n\t\tdocumentPlaceholders.set( doc, new Map() );\n\n\t\t// If a post-fixer callback makes a change, it should return `true` so other post–fixers\n\t\t// can re–evaluate the document again.\n\t\tdoc.registerPostFixer( writer => updateDocumentPlaceholders( doc, writer ) );\n\t}\n\n\t// Store information about the element placeholder under its document.\n\tdocumentPlaceholders.get( doc ).set( element, {\n\t\ttext,\n\t\tisDirectHost,\n\t\tkeepOnFocus,\n\t\thostElement: isDirectHost ? element : null\n\t} );\n\n\t// Update the placeholders right away.\n\tview.change( writer => updateDocumentPlaceholders( doc, writer ) );\n}\n\n/**\n * Disables the placeholder functionality from a given element.\n *\n * See {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} to learn more.\n *\n * @param {module:engine/view/view~View} view\n * @param {module:engine/view/element~Element} element\n */\nexport function disablePlaceholder( view, element ) {\n\tconst doc = element.document;\n\n\tview.change( writer => {\n\t\tif ( !documentPlaceholders.has( doc ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst placeholders = documentPlaceholders.get( doc );\n\t\tconst config = placeholders.get( element );\n\n\t\twriter.removeAttribute( 'data-placeholder', config.hostElement );\n\t\thidePlaceholder( writer, config.hostElement );\n\n\t\tplaceholders.delete( element );\n\t} );\n}\n\n/**\n * Shows a placeholder in the provided element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * **Note**: This helper will blindly show the placeholder directly in the root editable element if\n * one is passed, which could result in a visual clash if the editable element has some children\n * (for instance, an empty paragraph). Use {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`}\n * in that case or make sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\nexport function showPlaceholder( writer, element ) {\n\tif ( !element.hasClass( 'ck-placeholder' ) ) {\n\t\twriter.addClass( 'ck-placeholder', element );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Hides a placeholder in the element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\nexport function hidePlaceholder( writer, element ) {\n\tif ( element.hasClass( 'ck-placeholder' ) ) {\n\t\twriter.removeClass( 'ck-placeholder', element );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Checks if a placeholder should be displayed in the element.\n *\n * **Note**: This helper will blindly check the possibility of showing a placeholder directly in the\n * root editable element if one is passed, which may not be the expected result. If an element can\n * host other elements (not just text), most likely one of its children should be checked instead\n * because it will be the final host for the placeholder. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} in that case or make\n * sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/element~Element} element Element that holds the placeholder.\n * @param {Boolean} keepOnFocus Focusing the element will keep the placeholder visible.\n * @returns {Boolean}\n */\nexport function needsPlaceholder( element, keepOnFocus ) {\n\tif ( !element.isAttached() ) {\n\t\treturn false;\n\t}\n\n\t// Anything but uiElement(s) counts as content.\n\tconst hasContent = Array.from( element.getChildren() )\n\t\t.some( element => !element.is( 'uiElement' ) );\n\n\tif ( hasContent ) {\n\t\treturn false;\n\t}\n\n\t// Skip the focus check and make the placeholder visible already regardless of document focus state.\n\tif ( keepOnFocus ) {\n\t\treturn true;\n\t}\n\n\tconst doc = element.document;\n\n\t// If the document is blurred.\n\tif ( !doc.isFocused ) {\n\t\treturn true;\n\t}\n\n\tconst viewSelection = doc.selection;\n\tconst selectionAnchor = viewSelection.anchor;\n\n\t// If document is focused and the element is empty but the selection is not anchored inside it.\n\treturn selectionAnchor && selectionAnchor.parent !== element;\n}\n\n// Updates all placeholders associated with a document in a post–fixer callback.\n//\n// @private\n// @param { module:engine/view/document~Document} doc\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {Boolean} True if any changes were made to the view document.\nfunction updateDocumentPlaceholders( doc, writer ) {\n\tconst placeholders = documentPlaceholders.get( doc );\n\tconst directHostElements = [];\n\tlet wasViewModified = false;\n\n\t// First set placeholders on the direct hosts.\n\tfor ( const [ element, config ] of placeholders ) {\n\t\tif ( config.isDirectHost ) {\n\t\t\tdirectHostElements.push( element );\n\n\t\t\tif ( updatePlaceholder( writer, element, config ) ) {\n\t\t\t\twasViewModified = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then set placeholders on the indirect hosts but only on those that does not already have an direct host placeholder.\n\tfor ( const [ element, config ] of placeholders ) {\n\t\tif ( config.isDirectHost ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst hostElement = getChildPlaceholderHostSubstitute( element );\n\n\t\t// When not a direct host, it could happen that there is no child element\n\t\t// capable of displaying a placeholder.\n\t\tif ( !hostElement ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Don't override placeholder if the host element already has some direct placeholder.\n\t\tif ( directHostElements.includes( hostElement ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Update the host element (used for setting and removing the placeholder).\n\t\tconfig.hostElement = hostElement;\n\n\t\tif ( updatePlaceholder( writer, element, config ) ) {\n\t\t\twasViewModified = true;\n\t\t}\n\t}\n\n\treturn wasViewModified;\n}\n\n// Updates a single placeholder in a post–fixer callback.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/element~Element} element\n// @param {Object} config Configuration of the placeholder\n// @param {String} config.text\n// @param {Boolean} config.isDirectHost\n// @returns {Boolean} True if any changes were made to the view document.\nfunction updatePlaceholder( writer, element, config ) {\n\tconst { text, isDirectHost, hostElement } = config;\n\n\tlet wasViewModified = false;\n\n\t// This may be necessary when updating the placeholder text to something else.\n\tif ( hostElement.getAttribute( 'data-placeholder' ) !== text ) {\n\t\twriter.setAttribute( 'data-placeholder', text, hostElement );\n\t\twasViewModified = true;\n\t}\n\n\t// If the host element is not a direct host then placeholder is needed only when there is only one element.\n\tconst isOnlyChild = isDirectHost || element.childCount == 1;\n\n\tif ( isOnlyChild && needsPlaceholder( hostElement, config.keepOnFocus ) ) {\n\t\tif ( showPlaceholder( writer, hostElement ) ) {\n\t\t\twasViewModified = true;\n\t\t}\n\t} else if ( hidePlaceholder( writer, hostElement ) ) {\n\t\twasViewModified = true;\n\t}\n\n\treturn wasViewModified;\n}\n\n// Gets a child element capable of displaying a placeholder if a parent element can host more\n// than just text (for instance, when it is a root editable element). The child element\n// can then be used in other placeholder helpers as a substitute of its parent.\n//\n// @private\n// @param {module:engine/view/element~Element} parent\n// @returns {module:engine/view/element~Element|null}\nfunction getChildPlaceholderHostSubstitute( parent ) {\n\tif ( parent.childCount ) {\n\t\tconst firstChild = parent.getChild( 0 );\n\n\t\tif ( firstChild.is( 'element' ) && !firstChild.is( 'uiElement' ) ) {\n\t\t\treturn firstChild;\n\t\t}\n\t}\n\n\treturn null;\n}\n"]},"metadata":{},"sourceType":"module"}