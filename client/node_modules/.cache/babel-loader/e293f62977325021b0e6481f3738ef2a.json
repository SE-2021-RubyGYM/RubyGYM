{"ast":null,"code":"/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactDefaultPerf\r\n * @typechecks static-only\r\n */\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\n\nvar ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');\n\nvar ReactMount = require('./ReactMount');\n\nvar ReactPerf = require('./ReactPerf');\n\nvar performanceNow = require('fbjs/lib/performanceNow');\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [],\n  // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n  start: function () {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n  stop: function () {\n    ReactPerf.enableMeasure = false;\n  },\n  getLastMeasurements: function () {\n    return ReactDefaultPerf._allMeasurements;\n  },\n  printExclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    })); // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n  printInclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  getMeasurementsSummaryMap: function (measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);\n    return summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n  printWasted: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  printDOM: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function (item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result.type = item.type;\n      result.args = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  _recordWrite: function (id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n  measure: function (moduleName, fnName, func) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0,\n          created: {}\n        });\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;\n        return rv;\n      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === '_mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function (update) {\n            var writeArgs = {};\n\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n\n            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);\n          });\n        } else {\n          // basic format\n          var id = args[0];\n\n          if (typeof id === 'object') {\n            id = ReactMount.getID(args[0]);\n          }\n\n          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));\n        }\n\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?\n      fnName === '_renderValidatedComponent')) {\n        if (this._currentElement.type === ReactMount.TopLevelWrapper) {\n          return func.apply(this, args);\n        }\n\n        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          entry.created[rootNodeID] = true;\n          mountStack.push(0);\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] = {\n          current: this.getName(),\n          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'\n        };\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\nmodule.exports = ReactDefaultPerf;","map":{"version":3,"sources":["F:/Administrator/Documents/Code for fun/Web/Project Introduction to SE/RubyGYM/client/node_modules/jsx-to-string/node_modules/react/lib/ReactDefaultPerf.js"],"names":["DOMProperty","require","ReactDefaultPerfAnalysis","ReactMount","ReactPerf","performanceNow","roundFloat","val","Math","floor","addValue","obj","key","ReactDefaultPerf","_allMeasurements","_mountStack","_injected","start","injection","injectMeasure","measure","length","enableMeasure","stop","getLastMeasurements","printExclusive","measurements","summary","getExclusiveSummary","console","table","map","item","componentName","inclusive","exclusive","render","count","printInclusive","getInclusiveSummary","time","log","getTotalTime","toFixed","getMeasurementsSummaryMap","printWasted","printDOM","getDOMSummary","result","ID_ATTRIBUTE_NAME","id","type","args","JSON","stringify","_recordWrite","fnName","totalTime","writes","push","moduleName","func","_len","arguments","Array","_key","rv","counts","displayNames","created","apply","mountID","getID","forEach","update","writeArgs","fromIndex","toIndex","textContent","markupIndex","markup","parentID","prototype","slice","call","_currentElement","TopLevelWrapper","rootNodeID","_rootNodeID","isRender","isMount","mountStack","entry","subMountTime","pop","current","getName","owner","_owner","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright 2013-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactDefaultPerf\r\n * @typechecks static-only\r\n */\r\n\r\n'use strict';\r\n\r\nvar DOMProperty = require('./DOMProperty');\r\nvar ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');\r\nvar ReactMount = require('./ReactMount');\r\nvar ReactPerf = require('./ReactPerf');\r\n\r\nvar performanceNow = require('fbjs/lib/performanceNow');\r\n\r\nfunction roundFloat(val) {\r\n  return Math.floor(val * 100) / 100;\r\n}\r\n\r\nfunction addValue(obj, key, val) {\r\n  obj[key] = (obj[key] || 0) + val;\r\n}\r\n\r\nvar ReactDefaultPerf = {\r\n  _allMeasurements: [], // last item in the list is the current one\r\n  _mountStack: [0],\r\n  _injected: false,\r\n\r\n  start: function () {\r\n    if (!ReactDefaultPerf._injected) {\r\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\r\n    }\r\n\r\n    ReactDefaultPerf._allMeasurements.length = 0;\r\n    ReactPerf.enableMeasure = true;\r\n  },\r\n\r\n  stop: function () {\r\n    ReactPerf.enableMeasure = false;\r\n  },\r\n\r\n  getLastMeasurements: function () {\r\n    return ReactDefaultPerf._allMeasurements;\r\n  },\r\n\r\n  printExclusive: function (measurements) {\r\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\r\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\r\n    console.table(summary.map(function (item) {\r\n      return {\r\n        'Component class name': item.componentName,\r\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\r\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\r\n        'Exclusive render time (ms)': roundFloat(item.render),\r\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\r\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\r\n        'Instances': item.count\r\n      };\r\n    }));\r\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\r\n    // number.\r\n  },\r\n\r\n  printInclusive: function (measurements) {\r\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\r\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\r\n    console.table(summary.map(function (item) {\r\n      return {\r\n        'Owner > component': item.componentName,\r\n        'Inclusive time (ms)': roundFloat(item.time),\r\n        'Instances': item.count\r\n      };\r\n    }));\r\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\r\n  },\r\n\r\n  getMeasurementsSummaryMap: function (measurements) {\r\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);\r\n    return summary.map(function (item) {\r\n      return {\r\n        'Owner > component': item.componentName,\r\n        'Wasted time (ms)': item.time,\r\n        'Instances': item.count\r\n      };\r\n    });\r\n  },\r\n\r\n  printWasted: function (measurements) {\r\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\r\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\r\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\r\n  },\r\n\r\n  printDOM: function (measurements) {\r\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\r\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\r\n    console.table(summary.map(function (item) {\r\n      var result = {};\r\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\r\n      result.type = item.type;\r\n      result.args = JSON.stringify(item.args);\r\n      return result;\r\n    }));\r\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\r\n  },\r\n\r\n  _recordWrite: function (id, fnName, totalTime, args) {\r\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\r\n    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;\r\n    writes[id] = writes[id] || [];\r\n    writes[id].push({\r\n      type: fnName,\r\n      time: totalTime,\r\n      args: args\r\n    });\r\n  },\r\n\r\n  measure: function (moduleName, fnName, func) {\r\n    return function () {\r\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\r\n        args[_key] = arguments[_key];\r\n      }\r\n\r\n      var totalTime;\r\n      var rv;\r\n      var start;\r\n\r\n      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {\r\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\r\n        // to group the metrics for a given flush together so we can look at the\r\n        // components that rendered and the DOM operations that actually\r\n        // happened to determine the amount of \"wasted work\" performed.\r\n        ReactDefaultPerf._allMeasurements.push({\r\n          exclusive: {},\r\n          inclusive: {},\r\n          render: {},\r\n          counts: {},\r\n          writes: {},\r\n          displayNames: {},\r\n          totalTime: 0,\r\n          created: {}\r\n        });\r\n        start = performanceNow();\r\n        rv = func.apply(this, args);\r\n        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;\r\n        return rv;\r\n      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {\r\n        start = performanceNow();\r\n        rv = func.apply(this, args);\r\n        totalTime = performanceNow() - start;\r\n\r\n        if (fnName === '_mountImageIntoNode') {\r\n          var mountID = ReactMount.getID(args[1]);\r\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\r\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\r\n          // special format\r\n          args[0].forEach(function (update) {\r\n            var writeArgs = {};\r\n            if (update.fromIndex !== null) {\r\n              writeArgs.fromIndex = update.fromIndex;\r\n            }\r\n            if (update.toIndex !== null) {\r\n              writeArgs.toIndex = update.toIndex;\r\n            }\r\n            if (update.textContent !== null) {\r\n              writeArgs.textContent = update.textContent;\r\n            }\r\n            if (update.markupIndex !== null) {\r\n              writeArgs.markup = args[1][update.markupIndex];\r\n            }\r\n            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);\r\n          });\r\n        } else {\r\n          // basic format\r\n          var id = args[0];\r\n          if (typeof id === 'object') {\r\n            id = ReactMount.getID(args[0]);\r\n          }\r\n          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));\r\n        }\r\n        return rv;\r\n      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?\r\n      fnName === '_renderValidatedComponent')) {\r\n\r\n        if (this._currentElement.type === ReactMount.TopLevelWrapper) {\r\n          return func.apply(this, args);\r\n        }\r\n\r\n        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;\r\n        var isRender = fnName === '_renderValidatedComponent';\r\n        var isMount = fnName === 'mountComponent';\r\n\r\n        var mountStack = ReactDefaultPerf._mountStack;\r\n        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];\r\n\r\n        if (isRender) {\r\n          addValue(entry.counts, rootNodeID, 1);\r\n        } else if (isMount) {\r\n          entry.created[rootNodeID] = true;\r\n          mountStack.push(0);\r\n        }\r\n\r\n        start = performanceNow();\r\n        rv = func.apply(this, args);\r\n        totalTime = performanceNow() - start;\r\n\r\n        if (isRender) {\r\n          addValue(entry.render, rootNodeID, totalTime);\r\n        } else if (isMount) {\r\n          var subMountTime = mountStack.pop();\r\n          mountStack[mountStack.length - 1] += totalTime;\r\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\r\n          addValue(entry.inclusive, rootNodeID, totalTime);\r\n        } else {\r\n          addValue(entry.inclusive, rootNodeID, totalTime);\r\n        }\r\n\r\n        entry.displayNames[rootNodeID] = {\r\n          current: this.getName(),\r\n          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'\r\n        };\r\n\r\n        return rv;\r\n      } else {\r\n        return func.apply(this, args);\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\nmodule.exports = ReactDefaultPerf;"]},"metadata":{},"sourceType":"script"}