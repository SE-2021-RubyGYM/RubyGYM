{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/resizer\n */\nimport Template from '@ckeditor/ckeditor5-ui/src/template';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ResizeState from './resizerstate';\nimport SizeView from './sizeview';\n/**\n * Represents a resizer for a single resizable object.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class Resizer {\n  /**\n   * @param {module:widget/widgetresize~ResizerOptions} options Resizer options.\n   */\n  constructor(options) {\n    /**\n     * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n     *\n     * Note that a new state is created for each resize transaction.\n     *\n     * @readonly\n     * @member {module:widget/widgetresize/resizerstate~ResizerState} #state\n     */\n\n    /**\n     * A view displaying the proposed new element size during the resizing.\n     *\n     * @protected\n     * @readonly\n     * @member {module:widget/widgetresize/sizeview~SizeView} #_sizeView\n     */\n\n    /**\n     * Options passed to the {@link #constructor}.\n     *\n     * @private\n     * @type {module:widget/widgetresize~ResizerOptions}\n     */\n    this._options = options;\n    /**\n     * A wrapper that is controlled by the resizer. This is usually a widget element.\n     *\n     * @private\n     * @type {module:engine/view/element~Element|null}\n     */\n\n    this._viewResizerWrapper = null;\n    /**\n     * The width of the resized {@link module:widget/widgetresize~ResizerOptions#viewElement viewElement} before the resizing started.\n     *\n     * @private\n     * @member {Number|String|undefined} #_initialViewWidth\n     */\n\n    /**\n     * @observable\n     */\n\n    this.set('isEnabled', true);\n    this.decorate('begin');\n    this.decorate('cancel');\n    this.decorate('commit');\n    this.decorate('updateSize');\n    this.on('commit', event => {\n      // State might not be initialized yet. In this case, prevent further handling and make sure that the resizer is\n      // cleaned up (#5195).\n      if (!this.state.proposedWidth && !this.state.proposedWidthPercents) {\n        this._cleanup();\n\n        event.stop();\n      }\n    }, {\n      priority: 'high'\n    });\n    this.on('change:isEnabled', () => {\n      // We should redraw the resize handles when the plugin is enabled again.\n      // Otherwise they won't show up.\n      if (this.isEnabled) {\n        this.redraw();\n      }\n    });\n  }\n  /**\n   * Attaches the resizer to the DOM.\n   */\n\n\n  attach() {\n    const that = this;\n    const widgetElement = this._options.viewElement;\n    const editingView = this._options.editor.editing.view;\n    editingView.change(writer => {\n      const viewResizerWrapper = writer.createUIElement('div', {\n        class: 'ck ck-reset_all ck-widget__resizer'\n      }, function (domDocument) {\n        const domElement = this.toDomElement(domDocument);\n\n        that._appendHandles(domElement);\n\n        that._appendSizeUI(domElement);\n\n        that.on('change:isEnabled', (evt, propName, newValue) => {\n          domElement.style.display = newValue ? '' : 'none';\n        });\n        domElement.style.display = that.isEnabled ? '' : 'none';\n        return domElement;\n      }); // Append the resizer wrapper to the widget's wrapper.\n\n      writer.insert(writer.createPositionAt(widgetElement, 'end'), viewResizerWrapper);\n      writer.addClass('ck-widget_with-resizer', widgetElement);\n      this._viewResizerWrapper = viewResizerWrapper;\n    });\n  }\n  /**\n   * Starts the resizing process.\n   *\n   * Creates a new {@link #state} for the current process.\n   *\n   * @fires begin\n   * @param {HTMLElement} domResizeHandle Clicked handle.\n   */\n\n\n  begin(domResizeHandle) {\n    this.state = new ResizeState(this._options);\n\n    this._sizeView._bindToState(this._options, this.state);\n\n    this._initialViewWidth = this._options.viewElement.getStyle('width');\n    this.state.begin(domResizeHandle, this._getHandleHost(), this._getResizeHost());\n  }\n  /**\n   * Updates the proposed size based on `domEventData`.\n   *\n   * @fires updateSize\n   * @param {Event} domEventData\n   */\n\n\n  updateSize(domEventData) {\n    const newSize = this._proposeNewSize(domEventData);\n\n    const editingView = this._options.editor.editing.view;\n    editingView.change(writer => {\n      const unit = this._options.unit || '%';\n      const newWidth = (unit === '%' ? newSize.widthPercents : newSize.width) + unit;\n      writer.setStyle('width', newWidth, this._options.viewElement);\n    }); // Get an actual image width, and:\n    // * reflect this size to the resize wrapper\n    // * apply this **real** size to the state\n\n    const domHandleHost = this._getHandleHost();\n\n    const domHandleHostRect = new Rect(domHandleHost);\n    newSize.handleHostWidth = Math.round(domHandleHostRect.width);\n    newSize.handleHostHeight = Math.round(domHandleHostRect.height); // Handle max-width limitation.\n\n    const domResizeHostRect = new Rect(domHandleHost);\n    newSize.width = Math.round(domResizeHostRect.width);\n    newSize.height = Math.round(domResizeHostRect.height);\n    this.redraw(domHandleHostRect);\n    this.state.update(newSize);\n  }\n  /**\n   * Applies the geometry proposed with the resizer.\n   *\n   * @fires commit\n   */\n\n\n  commit() {\n    const unit = this._options.unit || '%';\n    const newValue = (unit === '%' ? this.state.proposedWidthPercents : this.state.proposedWidth) + unit; // Both cleanup and onCommit callback are very likely to make view changes. Ensure that it is made in a single step.\n\n    this._options.editor.editing.view.change(() => {\n      this._cleanup();\n\n      this._options.onCommit(newValue);\n    });\n  }\n  /**\n   * Cancels and rejects the proposed resize dimensions, hiding the UI.\n   *\n   * @fires cancel\n   */\n\n\n  cancel() {\n    this._cleanup();\n  }\n  /**\n   * Destroys the resizer.\n   */\n\n\n  destroy() {\n    this.cancel();\n  }\n  /**\n   * Redraws the resizer.\n   *\n   * @param {module:utils/dom/rect~Rect} [handleHostRect] Handle host rectangle might be given to improve performance.\n   */\n\n\n  redraw(handleHostRect) {\n    const domWrapper = this._domResizerWrapper; // Refresh only if resizer exists in the DOM.\n\n    if (!existsInDom(domWrapper)) {\n      return;\n    }\n\n    const widgetWrapper = domWrapper.parentElement;\n\n    const handleHost = this._getHandleHost();\n\n    const resizerWrapper = this._viewResizerWrapper;\n    const currentDimensions = [resizerWrapper.getStyle('width'), resizerWrapper.getStyle('height'), resizerWrapper.getStyle('left'), resizerWrapper.getStyle('top')];\n    let newDimensions;\n\n    if (widgetWrapper.isSameNode(handleHost)) {\n      const clientRect = handleHostRect || new Rect(handleHost);\n      newDimensions = [clientRect.width + 'px', clientRect.height + 'px', undefined, undefined];\n    } // In case a resizing host is not a widget wrapper, we need to compensate\n    // for any additional offsets the resize host might have. E.g. wrapper padding\n    // or simply another editable. By doing that the border and resizers are shown\n    // only around the resize host.\n    else {\n      newDimensions = [handleHost.offsetWidth + 'px', handleHost.offsetHeight + 'px', handleHost.offsetLeft + 'px', handleHost.offsetTop + 'px'];\n    } // Make changes to the view only if the resizer should actually get new dimensions.\n    // Otherwise, if View#change() was always called, this would cause EditorUI#update\n    // loops because the WidgetResize plugin listens to EditorUI#update and updates\n    // the resizer.\n    // https://github.com/ckeditor/ckeditor5/issues/7633\n\n\n    if (compareArrays(currentDimensions, newDimensions) !== 'same') {\n      this._options.editor.editing.view.change(writer => {\n        writer.setStyle({\n          width: newDimensions[0],\n          height: newDimensions[1],\n          left: newDimensions[2],\n          top: newDimensions[3]\n        }, resizerWrapper);\n      });\n    }\n  }\n\n  containsHandle(domElement) {\n    return this._domResizerWrapper.contains(domElement);\n  }\n\n  static isResizeHandle(domElement) {\n    return domElement.classList.contains('ck-widget__resizer__handle');\n  }\n  /**\n   * Cleans up the context state.\n   *\n   * @protected\n   */\n\n\n  _cleanup() {\n    this._sizeView._dismiss();\n\n    const editingView = this._options.editor.editing.view;\n    editingView.change(writer => {\n      writer.setStyle('width', this._initialViewWidth, this._options.viewElement);\n    });\n  }\n  /**\n   * Calculates the proposed size as the resize handles are dragged.\n   *\n   * @private\n   * @param {Event} domEventData Event data that caused the size update request. It should be used to calculate the proposed size.\n   * @returns {Object} return\n   * @returns {Number} return.width Proposed width.\n   * @returns {Number} return.height Proposed height.\n   */\n\n\n  _proposeNewSize(domEventData) {\n    const state = this.state;\n    const currentCoordinates = extractCoordinates(domEventData);\n    const isCentered = this._options.isCentered ? this._options.isCentered(this) : true; // Enlargement defines how much the resize host has changed in a given axis. Naturally it could be a negative number\n    // meaning that it has been shrunk.\n    //\n    // +----------------+--+\n    // |                |  |\n    // |       img      |  |\n    // |  /handle host  |  |\n    // +----------------+  | ^\n    // |                   | | - enlarge y\n    // +-------------------+ v\n    // \t\t\t\t\t<-->\n    // \t\t\t\t\t enlarge x\n\n    const enlargement = {\n      x: state._referenceCoordinates.x - (currentCoordinates.x + state.originalWidth),\n      y: currentCoordinates.y - state.originalHeight - state._referenceCoordinates.y\n    };\n\n    if (isCentered && state.activeHandlePosition.endsWith('-right')) {\n      enlargement.x = currentCoordinates.x - (state._referenceCoordinates.x + state.originalWidth);\n    } // Objects needs to be resized twice as much in horizontal axis if centered, since enlargement is counted from\n    // one resized corner to your cursor. It needs to be duplicated to compensate for the other side too.\n\n\n    if (isCentered) {\n      enlargement.x *= 2;\n    } // const resizeHost = this._getResizeHost();\n    // The size proposed by the user. It does not consider the aspect ratio.\n\n\n    const proposedSize = {\n      width: Math.abs(state.originalWidth + enlargement.x),\n      height: Math.abs(state.originalHeight + enlargement.y)\n    }; // Dominant determination must take the ratio into account.\n\n    proposedSize.dominant = proposedSize.width / state.aspectRatio > proposedSize.height ? 'width' : 'height';\n    proposedSize.max = proposedSize[proposedSize.dominant]; // Proposed size, respecting the aspect ratio.\n\n    const targetSize = {\n      width: proposedSize.width,\n      height: proposedSize.height\n    };\n\n    if (proposedSize.dominant == 'width') {\n      targetSize.height = targetSize.width / state.aspectRatio;\n    } else {\n      targetSize.width = targetSize.height * state.aspectRatio;\n    }\n\n    return {\n      width: Math.round(targetSize.width),\n      height: Math.round(targetSize.height),\n      widthPercents: Math.min(Math.round(state.originalWidthPercents / state.originalWidth * targetSize.width * 100) / 100, 100)\n    };\n  }\n  /**\n   * Obtains the resize host.\n   *\n   * Resize host is an object that receives dimensions which are the result of resizing.\n   *\n   * @protected\n   * @returns {HTMLElement}\n   */\n\n\n  _getResizeHost() {\n    const widgetWrapper = this._domResizerWrapper.parentElement;\n    return this._options.getResizeHost(widgetWrapper);\n  }\n  /**\n   * Obtains the handle host.\n   *\n   * Handle host is an object that the handles are aligned to.\n   *\n   * Handle host will not always be an entire widget itself. Take an image as an example. The image widget\n   * contains an image and a caption. Only the image should be surrounded with handles.\n   *\n   * @protected\n   * @returns {HTMLElement}\n   */\n\n\n  _getHandleHost() {\n    const widgetWrapper = this._domResizerWrapper.parentElement;\n    return this._options.getHandleHost(widgetWrapper);\n  }\n  /**\n   * DOM container of the entire resize UI.\n   *\n   * Note that this property will have a value only after the element bound with the resizer is rendered\n   * (otherwise `null`).\n   *\n   * @private\n   * @member {HTMLElement|null}\n   */\n\n\n  get _domResizerWrapper() {\n    return this._options.editor.editing.view.domConverter.mapViewToDom(this._viewResizerWrapper);\n  }\n  /**\n   * Renders the resize handles in the DOM.\n   *\n   * @private\n   * @param {HTMLElement} domElement The resizer wrapper.\n   */\n\n\n  _appendHandles(domElement) {\n    const resizerPositions = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];\n\n    for (const currentPosition of resizerPositions) {\n      domElement.appendChild(new Template({\n        tag: 'div',\n        attributes: {\n          class: `ck-widget__resizer__handle ${getResizerClass(currentPosition)}`\n        }\n      }).render());\n    }\n  }\n  /**\n   * Sets up the {@link #_sizeView} property and adds it to the passed `domElement`.\n   *\n   * @private\n   * @param {HTMLElement} domElement\n   */\n\n\n  _appendSizeUI(domElement) {\n    this._sizeView = new SizeView(); // Make sure icon#element is rendered before passing to appendChild().\n\n    this._sizeView.render();\n\n    domElement.appendChild(this._sizeView.element);\n  }\n  /**\n   * @event begin\n   */\n\n  /**\n   * @event updateSize\n   */\n\n  /**\n   * @event commit\n   */\n\n  /**\n   * @event cancel\n   */\n\n\n}\nmix(Resizer, ObservableMixin); // @private\n// @param {String} resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n// @returns {String} A prefixed HTML class name for the resizer element\n\nfunction getResizerClass(resizerPosition) {\n  return `ck-widget__resizer__handle-${resizerPosition}`;\n}\n\nfunction extractCoordinates(event) {\n  return {\n    x: event.pageX,\n    y: event.pageY\n  };\n}\n\nfunction existsInDom(element) {\n  return element && element.ownerDocument && element.ownerDocument.contains(element);\n}","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-widget/src/widgetresize/resizer.js"],"names":["Template","Rect","compareArrays","ObservableMixin","mix","ResizeState","SizeView","Resizer","constructor","options","_options","_viewResizerWrapper","set","decorate","on","event","state","proposedWidth","proposedWidthPercents","_cleanup","stop","priority","isEnabled","redraw","attach","that","widgetElement","viewElement","editingView","editor","editing","view","change","writer","viewResizerWrapper","createUIElement","class","domDocument","domElement","toDomElement","_appendHandles","_appendSizeUI","evt","propName","newValue","style","display","insert","createPositionAt","addClass","begin","domResizeHandle","_sizeView","_bindToState","_initialViewWidth","getStyle","_getHandleHost","_getResizeHost","updateSize","domEventData","newSize","_proposeNewSize","unit","newWidth","widthPercents","width","setStyle","domHandleHost","domHandleHostRect","handleHostWidth","Math","round","handleHostHeight","height","domResizeHostRect","update","commit","onCommit","cancel","destroy","handleHostRect","domWrapper","_domResizerWrapper","existsInDom","widgetWrapper","parentElement","handleHost","resizerWrapper","currentDimensions","newDimensions","isSameNode","clientRect","undefined","offsetWidth","offsetHeight","offsetLeft","offsetTop","left","top","containsHandle","contains","isResizeHandle","classList","_dismiss","currentCoordinates","extractCoordinates","isCentered","enlargement","x","_referenceCoordinates","originalWidth","y","originalHeight","activeHandlePosition","endsWith","proposedSize","abs","dominant","aspectRatio","max","targetSize","min","originalWidthPercents","getResizeHost","getHandleHost","domConverter","mapViewToDom","resizerPositions","currentPosition","appendChild","tag","attributes","getResizerClass","render","element","resizerPosition","pageX","pageY","ownerDocument"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/resizer\n */\n\nimport Template from '@ckeditor/ckeditor5-ui/src/template';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\nimport ResizeState from './resizerstate';\nimport SizeView from './sizeview';\n\n/**\n * Represents a resizer for a single resizable object.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Resizer {\n\t/**\n\t * @param {module:widget/widgetresize~ResizerOptions} options Resizer options.\n\t */\n\tconstructor( options ) {\n\t\t/**\n\t\t * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n\t\t *\n\t\t * Note that a new state is created for each resize transaction.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:widget/widgetresize/resizerstate~ResizerState} #state\n\t\t */\n\n\t\t/**\n\t\t * A view displaying the proposed new element size during the resizing.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:widget/widgetresize/sizeview~SizeView} #_sizeView\n\t\t */\n\n\t\t/**\n\t\t * Options passed to the {@link #constructor}.\n\t\t *\n\t\t * @private\n\t\t * @type {module:widget/widgetresize~ResizerOptions}\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * A wrapper that is controlled by the resizer. This is usually a widget element.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/view/element~Element|null}\n\t\t */\n\t\tthis._viewResizerWrapper = null;\n\n\t\t/**\n\t\t * The width of the resized {@link module:widget/widgetresize~ResizerOptions#viewElement viewElement} before the resizing started.\n\t\t *\n\t\t * @private\n\t\t * @member {Number|String|undefined} #_initialViewWidth\n\t\t */\n\n\t\t/**\n\t\t * @observable\n\t\t */\n\t\tthis.set( 'isEnabled', true );\n\n\t\tthis.decorate( 'begin' );\n\t\tthis.decorate( 'cancel' );\n\t\tthis.decorate( 'commit' );\n\t\tthis.decorate( 'updateSize' );\n\n\t\tthis.on( 'commit', event => {\n\t\t\t// State might not be initialized yet. In this case, prevent further handling and make sure that the resizer is\n\t\t\t// cleaned up (#5195).\n\t\t\tif ( !this.state.proposedWidth && !this.state.proposedWidthPercents ) {\n\t\t\t\tthis._cleanup();\n\t\t\t\tevent.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\tthis.on( 'change:isEnabled', () => {\n\t\t\t// We should redraw the resize handles when the plugin is enabled again.\n\t\t\t// Otherwise they won't show up.\n\t\t\tif ( this.isEnabled ) {\n\t\t\t\tthis.redraw();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches the resizer to the DOM.\n\t */\n\tattach() {\n\t\tconst that = this;\n\t\tconst widgetElement = this._options.viewElement;\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\tconst viewResizerWrapper = writer.createUIElement( 'div', {\n\t\t\t\tclass: 'ck ck-reset_all ck-widget__resizer'\n\t\t\t}, function( domDocument ) {\n\t\t\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t\t\tthat._appendHandles( domElement );\n\t\t\t\tthat._appendSizeUI( domElement );\n\n\t\t\t\tthat.on( 'change:isEnabled', ( evt, propName, newValue ) => {\n\t\t\t\t\tdomElement.style.display = newValue ? '' : 'none';\n\t\t\t\t} );\n\n\t\t\t\tdomElement.style.display = that.isEnabled ? '' : 'none';\n\n\t\t\t\treturn domElement;\n\t\t\t} );\n\n\t\t\t// Append the resizer wrapper to the widget's wrapper.\n\t\t\twriter.insert( writer.createPositionAt( widgetElement, 'end' ), viewResizerWrapper );\n\t\t\twriter.addClass( 'ck-widget_with-resizer', widgetElement );\n\n\t\t\tthis._viewResizerWrapper = viewResizerWrapper;\n\t\t} );\n\t}\n\n\t/**\n\t * Starts the resizing process.\n\t *\n\t * Creates a new {@link #state} for the current process.\n\t *\n\t * @fires begin\n\t * @param {HTMLElement} domResizeHandle Clicked handle.\n\t */\n\tbegin( domResizeHandle ) {\n\t\tthis.state = new ResizeState( this._options );\n\n\t\tthis._sizeView._bindToState( this._options, this.state );\n\n\t\tthis._initialViewWidth = this._options.viewElement.getStyle( 'width' );\n\n\t\tthis.state.begin( domResizeHandle, this._getHandleHost(), this._getResizeHost() );\n\t}\n\n\t/**\n\t * Updates the proposed size based on `domEventData`.\n\t *\n\t * @fires updateSize\n\t * @param {Event} domEventData\n\t */\n\tupdateSize( domEventData ) {\n\t\tconst newSize = this._proposeNewSize( domEventData );\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\tconst unit = this._options.unit || '%';\n\t\t\tconst newWidth = ( unit === '%' ? newSize.widthPercents : newSize.width ) + unit;\n\n\t\t\twriter.setStyle( 'width', newWidth, this._options.viewElement );\n\t\t} );\n\n\t\t// Get an actual image width, and:\n\t\t// * reflect this size to the resize wrapper\n\t\t// * apply this **real** size to the state\n\t\tconst domHandleHost = this._getHandleHost();\n\t\tconst domHandleHostRect = new Rect( domHandleHost );\n\n\t\tnewSize.handleHostWidth = Math.round( domHandleHostRect.width );\n\t\tnewSize.handleHostHeight = Math.round( domHandleHostRect.height );\n\n\t\t// Handle max-width limitation.\n\t\tconst domResizeHostRect = new Rect( domHandleHost );\n\n\t\tnewSize.width = Math.round( domResizeHostRect.width );\n\t\tnewSize.height = Math.round( domResizeHostRect.height );\n\n\t\tthis.redraw( domHandleHostRect );\n\n\t\tthis.state.update( newSize );\n\t}\n\n\t/**\n\t * Applies the geometry proposed with the resizer.\n\t *\n\t * @fires commit\n\t */\n\tcommit() {\n\t\tconst unit = this._options.unit || '%';\n\t\tconst newValue = ( unit === '%' ? this.state.proposedWidthPercents : this.state.proposedWidth ) + unit;\n\n\t\t// Both cleanup and onCommit callback are very likely to make view changes. Ensure that it is made in a single step.\n\t\tthis._options.editor.editing.view.change( () => {\n\t\t\tthis._cleanup();\n\t\t\tthis._options.onCommit( newValue );\n\t\t} );\n\t}\n\n\t/**\n\t * Cancels and rejects the proposed resize dimensions, hiding the UI.\n\t *\n\t * @fires cancel\n\t */\n\tcancel() {\n\t\tthis._cleanup();\n\t}\n\n\t/**\n\t * Destroys the resizer.\n\t */\n\tdestroy() {\n\t\tthis.cancel();\n\t}\n\n\t/**\n\t * Redraws the resizer.\n\t *\n\t * @param {module:utils/dom/rect~Rect} [handleHostRect] Handle host rectangle might be given to improve performance.\n\t */\n\tredraw( handleHostRect ) {\n\t\tconst domWrapper = this._domResizerWrapper;\n\n\t\t// Refresh only if resizer exists in the DOM.\n\t\tif ( !existsInDom( domWrapper ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst widgetWrapper = domWrapper.parentElement;\n\t\tconst handleHost = this._getHandleHost();\n\t\tconst resizerWrapper = this._viewResizerWrapper;\n\t\tconst currentDimensions = [\n\t\t\tresizerWrapper.getStyle( 'width' ),\n\t\t\tresizerWrapper.getStyle( 'height' ),\n\t\t\tresizerWrapper.getStyle( 'left' ),\n\t\t\tresizerWrapper.getStyle( 'top' )\n\t\t];\n\t\tlet newDimensions;\n\n\t\tif ( widgetWrapper.isSameNode( handleHost ) ) {\n\t\t\tconst clientRect = handleHostRect || new Rect( handleHost );\n\n\t\t\tnewDimensions = [\n\t\t\t\tclientRect.width + 'px',\n\t\t\t\tclientRect.height + 'px',\n\t\t\t\tundefined,\n\t\t\t\tundefined\n\t\t\t];\n\t\t}\n\t\t// In case a resizing host is not a widget wrapper, we need to compensate\n\t\t// for any additional offsets the resize host might have. E.g. wrapper padding\n\t\t// or simply another editable. By doing that the border and resizers are shown\n\t\t// only around the resize host.\n\t\telse {\n\t\t\tnewDimensions = [\n\t\t\t\thandleHost.offsetWidth + 'px',\n\t\t\t\thandleHost.offsetHeight + 'px',\n\t\t\t\thandleHost.offsetLeft + 'px',\n\t\t\t\thandleHost.offsetTop + 'px'\n\t\t\t];\n\t\t}\n\n\t\t// Make changes to the view only if the resizer should actually get new dimensions.\n\t\t// Otherwise, if View#change() was always called, this would cause EditorUI#update\n\t\t// loops because the WidgetResize plugin listens to EditorUI#update and updates\n\t\t// the resizer.\n\t\t// https://github.com/ckeditor/ckeditor5/issues/7633\n\t\tif ( compareArrays( currentDimensions, newDimensions ) !== 'same' ) {\n\t\t\tthis._options.editor.editing.view.change( writer => {\n\t\t\t\twriter.setStyle( {\n\t\t\t\t\twidth: newDimensions[ 0 ],\n\t\t\t\t\theight: newDimensions[ 1 ],\n\t\t\t\t\tleft: newDimensions[ 2 ],\n\t\t\t\t\ttop: newDimensions[ 3 ]\n\t\t\t\t}, resizerWrapper );\n\t\t\t} );\n\t\t}\n\t}\n\n\tcontainsHandle( domElement ) {\n\t\treturn this._domResizerWrapper.contains( domElement );\n\t}\n\n\tstatic isResizeHandle( domElement ) {\n\t\treturn domElement.classList.contains( 'ck-widget__resizer__handle' );\n\t}\n\n\t/**\n\t * Cleans up the context state.\n\t *\n\t * @protected\n\t */\n\t_cleanup() {\n\t\tthis._sizeView._dismiss();\n\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\twriter.setStyle( 'width', this._initialViewWidth, this._options.viewElement );\n\t\t} );\n\t}\n\n\t/**\n\t * Calculates the proposed size as the resize handles are dragged.\n\t *\n\t * @private\n\t * @param {Event} domEventData Event data that caused the size update request. It should be used to calculate the proposed size.\n\t * @returns {Object} return\n\t * @returns {Number} return.width Proposed width.\n\t * @returns {Number} return.height Proposed height.\n\t */\n\t_proposeNewSize( domEventData ) {\n\t\tconst state = this.state;\n\t\tconst currentCoordinates = extractCoordinates( domEventData );\n\t\tconst isCentered = this._options.isCentered ? this._options.isCentered( this ) : true;\n\n\t\t// Enlargement defines how much the resize host has changed in a given axis. Naturally it could be a negative number\n\t\t// meaning that it has been shrunk.\n\t\t//\n\t\t// +----------------+--+\n\t\t// |                |  |\n\t\t// |       img      |  |\n\t\t// |  /handle host  |  |\n\t\t// +----------------+  | ^\n\t\t// |                   | | - enlarge y\n\t\t// +-------------------+ v\n\t\t// \t\t\t\t\t<-->\n\t\t// \t\t\t\t\t enlarge x\n\t\tconst enlargement = {\n\t\t\tx: state._referenceCoordinates.x - ( currentCoordinates.x + state.originalWidth ),\n\t\t\ty: ( currentCoordinates.y - state.originalHeight ) - state._referenceCoordinates.y\n\t\t};\n\n\t\tif ( isCentered && state.activeHandlePosition.endsWith( '-right' ) ) {\n\t\t\tenlargement.x = currentCoordinates.x - ( state._referenceCoordinates.x + state.originalWidth );\n\t\t}\n\n\t\t// Objects needs to be resized twice as much in horizontal axis if centered, since enlargement is counted from\n\t\t// one resized corner to your cursor. It needs to be duplicated to compensate for the other side too.\n\t\tif ( isCentered ) {\n\t\t\tenlargement.x *= 2;\n\t\t}\n\n\t\t// const resizeHost = this._getResizeHost();\n\n\t\t// The size proposed by the user. It does not consider the aspect ratio.\n\t\tconst proposedSize = {\n\t\t\twidth: Math.abs( state.originalWidth + enlargement.x ),\n\t\t\theight: Math.abs( state.originalHeight + enlargement.y )\n\t\t};\n\n\t\t// Dominant determination must take the ratio into account.\n\t\tproposedSize.dominant = proposedSize.width / state.aspectRatio > proposedSize.height ? 'width' : 'height';\n\t\tproposedSize.max = proposedSize[ proposedSize.dominant ];\n\n\t\t// Proposed size, respecting the aspect ratio.\n\t\tconst targetSize = {\n\t\t\twidth: proposedSize.width,\n\t\t\theight: proposedSize.height\n\t\t};\n\n\t\tif ( proposedSize.dominant == 'width' ) {\n\t\t\ttargetSize.height = targetSize.width / state.aspectRatio;\n\t\t} else {\n\t\t\ttargetSize.width = targetSize.height * state.aspectRatio;\n\t\t}\n\n\t\treturn {\n\t\t\twidth: Math.round( targetSize.width ),\n\t\t\theight: Math.round( targetSize.height ),\n\t\t\twidthPercents: Math.min( Math.round( state.originalWidthPercents / state.originalWidth * targetSize.width * 100 ) / 100, 100 )\n\t\t};\n\t}\n\n\t/**\n\t * Obtains the resize host.\n\t *\n\t * Resize host is an object that receives dimensions which are the result of resizing.\n\t *\n\t * @protected\n\t * @returns {HTMLElement}\n\t */\n\t_getResizeHost() {\n\t\tconst widgetWrapper = this._domResizerWrapper.parentElement;\n\n\t\treturn this._options.getResizeHost( widgetWrapper );\n\t}\n\n\t/**\n\t * Obtains the handle host.\n\t *\n\t * Handle host is an object that the handles are aligned to.\n\t *\n\t * Handle host will not always be an entire widget itself. Take an image as an example. The image widget\n\t * contains an image and a caption. Only the image should be surrounded with handles.\n\t *\n\t * @protected\n\t * @returns {HTMLElement}\n\t */\n\t_getHandleHost() {\n\t\tconst widgetWrapper = this._domResizerWrapper.parentElement;\n\n\t\treturn this._options.getHandleHost( widgetWrapper );\n\t}\n\n\t/**\n\t * DOM container of the entire resize UI.\n\t *\n\t * Note that this property will have a value only after the element bound with the resizer is rendered\n\t * (otherwise `null`).\n\t *\n\t * @private\n\t * @member {HTMLElement|null}\n\t */\n\tget _domResizerWrapper() {\n\t\treturn this._options.editor.editing.view.domConverter.mapViewToDom( this._viewResizerWrapper );\n\t}\n\n\t/**\n\t * Renders the resize handles in the DOM.\n\t *\n\t * @private\n\t * @param {HTMLElement} domElement The resizer wrapper.\n\t */\n\t_appendHandles( domElement ) {\n\t\tconst resizerPositions = [ 'top-left', 'top-right', 'bottom-right', 'bottom-left' ];\n\n\t\tfor ( const currentPosition of resizerPositions ) {\n\t\t\tdomElement.appendChild( ( new Template( {\n\t\t\t\ttag: 'div',\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: `ck-widget__resizer__handle ${ getResizerClass( currentPosition ) }`\n\t\t\t\t}\n\t\t\t} ).render() ) );\n\t\t}\n\t}\n\n\t/**\n\t * Sets up the {@link #_sizeView} property and adds it to the passed `domElement`.\n\t *\n\t * @private\n\t * @param {HTMLElement} domElement\n\t */\n\t_appendSizeUI( domElement ) {\n\t\tthis._sizeView = new SizeView();\n\n\t\t// Make sure icon#element is rendered before passing to appendChild().\n\t\tthis._sizeView.render();\n\n\t\tdomElement.appendChild( this._sizeView.element );\n\t}\n\n\t/**\n\t * @event begin\n\t */\n\n\t/**\n\t * @event updateSize\n\t */\n\n\t/**\n\t * @event commit\n\t */\n\n\t/**\n\t * @event cancel\n\t */\n}\n\nmix( Resizer, ObservableMixin );\n\n// @private\n// @param {String} resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n// @returns {String} A prefixed HTML class name for the resizer element\nfunction getResizerClass( resizerPosition ) {\n\treturn `ck-widget__resizer__handle-${ resizerPosition }`;\n}\n\nfunction extractCoordinates( event ) {\n\treturn {\n\t\tx: event.pageX,\n\t\ty: event.pageY\n\t};\n}\n\nfunction existsInDom( element ) {\n\treturn element && element.ownerDocument && element.ownerDocument.contains( element );\n}\n"]},"metadata":{},"sourceType":"module"}