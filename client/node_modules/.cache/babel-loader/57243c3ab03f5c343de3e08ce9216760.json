{"ast":null,"code":"import { ValueFormatter } from './value-formatter';\n/**\r\n * CsvHelper class\r\n * @private\r\n */\n\nvar CsvHelper =\n/** @class */\nfunction () {\n  /* tslint:disable:no-any */\n  function CsvHelper(json, separator) {\n    this.csvStr = '';\n\n    if (separator === null || separator === undefined) {\n      this.separator = ',';\n    } else {\n      this.separator = separator;\n    }\n\n    this.formatter = new ValueFormatter();\n    this.isMicrosoftBrowser = !!navigator.msSaveBlob;\n\n    if (json.isServerRendered !== null && json.isServerRendered !== undefined) {\n      this.isServerRendered = json.isServerRendered;\n    }\n\n    if (json.styles !== null && json.styles !== undefined) {\n      this.globalStyles = new Map();\n\n      for (var i = 0; i < json.styles.length; i++) {\n        if (json.styles[i].name !== undefined && json.styles[i].numberFormat !== undefined) {\n          this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);\n        }\n      }\n    } // Parses Worksheets data to DOM.        \n\n\n    if (json.worksheets !== null && json.worksheets !== undefined) {\n      this.parseWorksheet(json.worksheets[0]);\n    } //this.csvStr = 'a1,a2,a3\\nb1,b2,b3';\n\n  }\n\n  CsvHelper.prototype.parseWorksheet = function (json) {\n    //Rows\n    if (json.rows !== null && json.rows !== undefined) {\n      this.parseRows(json.rows);\n    }\n  };\n  /* tslint:disable:no-any */\n\n\n  CsvHelper.prototype.parseRows = function (rows) {\n    var count = 1;\n\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n      var row = rows_1[_i]; //Row index\n\n      if (row.index !== null && row.index !== undefined) {\n        while (count < row.index) {\n          this.csvStr += '\\n';\n          count++;\n        }\n\n        this.parseRow(row);\n      } else {\n        throw Error('Row index is missing.');\n      }\n    }\n  };\n  /* tslint:disable:no-any */\n\n\n  CsvHelper.prototype.parseRow = function (row) {\n    if (row.cells !== null && row.cells !== undefined) {\n      var count = 1;\n\n      for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {\n        var cell = _a[_i]; //cell index\n\n        if (cell.index !== null && cell.index !== undefined) {\n          while (count < cell.index) {\n            this.csvStr += this.separator;\n            count++;\n          }\n\n          this.parseCell(cell);\n        } else {\n          throw Error('Cell index is missing.');\n        }\n      }\n    }\n  };\n  /* tslint:disable:no-any */\n\n\n  CsvHelper.prototype.parseCell = function (cell) {\n    var csv = this.csvStr;\n\n    if (cell.value !== undefined) {\n      if (cell.value instanceof Date) {\n        if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n          /* tslint:disable-next-line:max-line-length */\n          try {\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              type: 'dateTime',\n              skeleton: cell.style.numberFormat\n            }, this.isServerRendered));\n          } catch (error) {\n            /* tslint:disable-next-line:max-line-length */\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              type: 'dateTime',\n              format: cell.style.numberFormat\n            }, this.isServerRendered));\n          }\n        } else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n          /* tslint:disable-next-line:max-line-length */\n          try {\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              type: 'dateTime',\n              skeleton: this.globalStyles.get(cell.style.name)\n            }, this.isServerRendered));\n          } catch (error) {\n            /* tslint:disable-next-line:max-line-length */\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              type: 'dateTime',\n              format: this.globalStyles.get(cell.style.name)\n            }, this.isServerRendered));\n          }\n        } else {\n          csv += cell.value;\n        }\n      } else if (typeof cell.value === 'boolean') {\n        csv += cell.value ? 'TRUE' : 'FALSE';\n      } else if (typeof cell.value === 'number') {\n        if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n          /* tslint:disable-next-line:max-line-length */\n          csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n            format: cell.style.numberFormat\n          }, this.isServerRendered));\n        } else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n          /* tslint:disable-next-line:max-line-length */\n          csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n            format: this.globalStyles.get(cell.style.name)\n          }, this.isServerRendered));\n        } else {\n          csv += cell.value;\n        }\n      } else {\n        csv += this.parseCellValue(cell.value);\n      }\n    }\n\n    this.csvStr = csv;\n  };\n\n  CsvHelper.prototype.parseCellValue = function (value) {\n    var val = '';\n    var length = value.length;\n\n    for (var start = 0; start < length; start++) {\n      if (value[start] === '\\\"') {\n        val += value[start].replace('\\\"', '\\\"\\\"');\n      } else {\n        val += value[start];\n      }\n    }\n\n    value = val;\n\n    if (value.indexOf(this.separator) !== -1 || value.indexOf('\\n') !== -1) {\n      return value = '\\\"' + value + '\\\"';\n    } else {\n      return value;\n    }\n  };\n  /**\r\n   * Saves the file with specified name and sends the file to client browser\r\n   * @param  {string} fileName- file name to save.\r\n   * @param  {Blob} buffer- the content to write in file\r\n   */\n\n\n  CsvHelper.prototype.save = function (fileName) {\n    this.buffer = new Blob(['\\ufeff' + this.csvStr], {\n      type: 'text/csv;charset=UTF-8'\n    });\n\n    if (this.isMicrosoftBrowser) {\n      navigator.msSaveBlob(this.buffer, fileName);\n    } else {\n      var dataUrl_1 = window.URL.createObjectURL(this.buffer);\n      var dwlLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n      dwlLink.download = fileName;\n      dwlLink.href = dataUrl_1;\n      var event_1 = document.createEvent('MouseEvent');\n      event_1.initEvent('click', true, true);\n      dwlLink.dispatchEvent(event_1);\n      setTimeout(function () {\n        window.URL.revokeObjectURL(dataUrl_1);\n      });\n    }\n  };\n\n  CsvHelper.prototype.saveAsBlob = function () {\n    return new Blob(['\\ufeff' + this.csvStr], {\n      type: 'text/csv;charset=UTF-8'\n    });\n  };\n\n  return CsvHelper;\n}();\n\nexport { CsvHelper };","map":{"version":3,"sources":["D:/4_PROJECTS/RubyGYM/client/node_modules/@syncfusion/ej2-excel-export/src/csv-helper.js"],"names":["ValueFormatter","CsvHelper","json","separator","csvStr","undefined","formatter","isMicrosoftBrowser","navigator","msSaveBlob","isServerRendered","styles","globalStyles","Map","i","length","name","numberFormat","set","worksheets","parseWorksheet","prototype","rows","parseRows","count","_i","rows_1","row","index","parseRow","Error","cells","_a","cell","parseCell","csv","value","Date","style","parseCellValue","displayText","type","skeleton","error","format","has","get","val","start","replace","indexOf","save","fileName","buffer","Blob","dataUrl_1","window","URL","createObjectURL","dwlLink","document","createElementNS","download","href","event_1","createEvent","initEvent","dispatchEvent","setTimeout","revokeObjectURL","saveAsBlob"],"mappings":"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","sourcesContent":["import { ValueFormatter } from './value-formatter';\r\n/**\r\n * CsvHelper class\r\n * @private\r\n */\r\nvar CsvHelper = /** @class */ (function () {\r\n    /* tslint:disable:no-any */\r\n    function CsvHelper(json, separator) {\r\n        this.csvStr = '';\r\n        if (separator === null || separator === undefined) {\r\n            this.separator = ',';\r\n        }\r\n        else {\r\n            this.separator = separator;\r\n        }\r\n        this.formatter = new ValueFormatter();\r\n        this.isMicrosoftBrowser = !(!navigator.msSaveBlob);\r\n        if (json.isServerRendered !== null && json.isServerRendered !== undefined) {\r\n            this.isServerRendered = json.isServerRendered;\r\n        }\r\n        if (json.styles !== null && json.styles !== undefined) {\r\n            this.globalStyles = new Map();\r\n            for (var i = 0; i < json.styles.length; i++) {\r\n                if (json.styles[i].name !== undefined && json.styles[i].numberFormat !== undefined) {\r\n                    this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);\r\n                }\r\n            }\r\n        }\r\n        // Parses Worksheets data to DOM.        \r\n        if (json.worksheets !== null && json.worksheets !== undefined) {\r\n            this.parseWorksheet(json.worksheets[0]);\r\n        }\r\n        //this.csvStr = 'a1,a2,a3\\nb1,b2,b3';\r\n    }\r\n    CsvHelper.prototype.parseWorksheet = function (json) {\r\n        //Rows\r\n        if (json.rows !== null && json.rows !== undefined) {\r\n            this.parseRows(json.rows);\r\n        }\r\n    };\r\n    /* tslint:disable:no-any */\r\n    CsvHelper.prototype.parseRows = function (rows) {\r\n        var count = 1;\r\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\r\n            var row = rows_1[_i];\r\n            //Row index\r\n            if (row.index !== null && row.index !== undefined) {\r\n                while (count < row.index) {\r\n                    this.csvStr += '\\n';\r\n                    count++;\r\n                }\r\n                this.parseRow(row);\r\n            }\r\n            else {\r\n                throw Error('Row index is missing.');\r\n            }\r\n        }\r\n    };\r\n    /* tslint:disable:no-any */\r\n    CsvHelper.prototype.parseRow = function (row) {\r\n        if (row.cells !== null && row.cells !== undefined) {\r\n            var count = 1;\r\n            for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {\r\n                var cell = _a[_i];\r\n                //cell index\r\n                if (cell.index !== null && cell.index !== undefined) {\r\n                    while (count < cell.index) {\r\n                        this.csvStr += this.separator;\r\n                        count++;\r\n                    }\r\n                    this.parseCell(cell);\r\n                }\r\n                else {\r\n                    throw Error('Cell index is missing.');\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /* tslint:disable:no-any */\r\n    CsvHelper.prototype.parseCell = function (cell) {\r\n        var csv = this.csvStr;\r\n        if (cell.value !== undefined) {\r\n            if (cell.value instanceof Date) {\r\n                if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    try {\r\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', skeleton: cell.style.numberFormat }, this.isServerRendered));\r\n                    }\r\n                    catch (error) {\r\n                        /* tslint:disable-next-line:max-line-length */\r\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', format: cell.style.numberFormat }, this.isServerRendered));\r\n                    }\r\n                }\r\n                else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    try {\r\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', skeleton: this.globalStyles.get(cell.style.name) }, this.isServerRendered));\r\n                    }\r\n                    catch (error) {\r\n                        /* tslint:disable-next-line:max-line-length */\r\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', format: this.globalStyles.get(cell.style.name) }, this.isServerRendered));\r\n                    }\r\n                }\r\n                else {\r\n                    csv += cell.value;\r\n                }\r\n            }\r\n            else if (typeof (cell.value) === 'boolean') {\r\n                csv += cell.value ? 'TRUE' : 'FALSE';\r\n            }\r\n            else if (typeof (cell.value) === 'number') {\r\n                if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: cell.style.numberFormat }, this.isServerRendered));\r\n                }\r\n                else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\r\n                    /* tslint:disable-next-line:max-line-length */\r\n                    csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: this.globalStyles.get(cell.style.name) }, this.isServerRendered));\r\n                }\r\n                else {\r\n                    csv += cell.value;\r\n                }\r\n            }\r\n            else {\r\n                csv += this.parseCellValue(cell.value);\r\n            }\r\n        }\r\n        this.csvStr = csv;\r\n    };\r\n    CsvHelper.prototype.parseCellValue = function (value) {\r\n        var val = '';\r\n        var length = value.length;\r\n        for (var start = 0; start < length; start++) {\r\n            if (value[start] === '\\\"') {\r\n                val += value[start].replace('\\\"', '\\\"\\\"');\r\n            }\r\n            else {\r\n                val += value[start];\r\n            }\r\n        }\r\n        value = val;\r\n        if (value.indexOf(this.separator) !== -1 || value.indexOf('\\n') !== -1) {\r\n            return value = '\\\"' + value + '\\\"';\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    };\r\n    /**\r\n     * Saves the file with specified name and sends the file to client browser\r\n     * @param  {string} fileName- file name to save.\r\n     * @param  {Blob} buffer- the content to write in file\r\n     */\r\n    CsvHelper.prototype.save = function (fileName) {\r\n        this.buffer = new Blob(['\\ufeff' + this.csvStr], { type: 'text/csv;charset=UTF-8' });\r\n        if (this.isMicrosoftBrowser) {\r\n            navigator.msSaveBlob(this.buffer, fileName);\r\n        }\r\n        else {\r\n            var dataUrl_1 = window.URL.createObjectURL(this.buffer);\r\n            var dwlLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\r\n            dwlLink.download = fileName;\r\n            dwlLink.href = dataUrl_1;\r\n            var event_1 = document.createEvent('MouseEvent');\r\n            event_1.initEvent('click', true, true);\r\n            dwlLink.dispatchEvent(event_1);\r\n            setTimeout(function () {\r\n                window.URL.revokeObjectURL(dataUrl_1);\r\n            });\r\n        }\r\n    };\r\n    CsvHelper.prototype.saveAsBlob = function () {\r\n        return new Blob(['\\ufeff' + this.csvStr], { type: 'text/csv;charset=UTF-8' });\r\n    };\r\n    return CsvHelper;\r\n}());\r\nexport { CsvHelper };\r\n"]},"metadata":{},"sourceType":"module"}