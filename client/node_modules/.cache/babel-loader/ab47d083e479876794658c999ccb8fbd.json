{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/balloon/balloontoolbar\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ContextualBalloon from '../../panel/balloon/contextualballoon';\nimport ToolbarView from '../toolbarview';\nimport BalloonPanelView from '../../panel/balloon/balloonpanelview.js';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig';\nimport { debounce } from 'lodash-es';\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nconst toPx = toUnit('px');\n/**\n * The contextual toolbar.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class BalloonToolbar extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'BalloonToolbar';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [ContextualBalloon];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    /**\n     * A cached and normalized `config.balloonToolbar` object.\n     *\n     * @type {module:core/editor/editorconfig~EditorConfig#balloonToolbar}\n     * @private\n     */\n\n    this._balloonConfig = normalizeToolbarConfig(editor.config.get('balloonToolbar'));\n    /**\n     * The toolbar view displayed in the balloon.\n     *\n     * @type {module:ui/toolbar/toolbarview~ToolbarView}\n     */\n\n    this.toolbarView = this._createToolbarView();\n    /**\n     * Tracks the focus of the {@link module:core/editor/editorui~EditorUI#getEditableElement editable element}\n     * and the {@link #toolbarView}. When both are blurred then the toolbar should hide.\n     *\n     * @readonly\n     * @type {module:utils:focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker(); // Wait for the EditorUI#init. EditableElement is not available before.\n\n    editor.ui.once('ready', () => {\n      this.focusTracker.add(editor.ui.getEditableElement());\n      this.focusTracker.add(this.toolbarView.element);\n    });\n    /**\n     * An instance of the resize observer that allows to respond to changes in editable's geometry\n     * so the toolbar can stay within its boundaries (and group toolbar items that do not fit).\n     *\n     * **Note**: Used only when `shouldNotGroupWhenFull` was **not** set in the\n     * {@link module:core/editor/editorconfig~EditorConfig#balloonToolbar configuration}.\n     *\n     * **Note:** Created in {@link #init}.\n     *\n     * @protected\n     * @member {module:utils/dom/resizeobserver~ResizeObserver}\n     */\n\n    this._resizeObserver = null;\n    /**\n     * The contextual balloon plugin instance.\n     *\n     * @private\n     * @type {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n     */\n\n    this._balloon = editor.plugins.get(ContextualBalloon);\n    /**\n     * Fires {@link #event:_selectionChangeDebounced} event using `lodash#debounce`.\n     *\n     * This function is stored as a plugin property to make possible to cancel\n     * trailing debounced invocation on destroy.\n     *\n     * @private\n     * @type {Function}\n     */\n\n    this._fireSelectionChangeDebounced = debounce(() => this.fire('_selectionChangeDebounced'), 200); // The appearance of the BalloonToolbar method is eventâ€“driven.\n    // It is possible to stop the #show event and this prevent the toolbar from showing up.\n\n    this.decorate('show');\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const selection = editor.model.document.selection; // Show/hide the toolbar on editable focus/blur.\n\n    this.listenTo(this.focusTracker, 'change:isFocused', (evt, name, isFocused) => {\n      const isToolbarVisible = this._balloon.visibleView === this.toolbarView;\n\n      if (!isFocused && isToolbarVisible) {\n        this.hide();\n      } else if (isFocused) {\n        this.show();\n      }\n    }); // Hide the toolbar when the selection is changed by a direct change or has changed to collapsed.\n\n    this.listenTo(selection, 'change:range', (evt, data) => {\n      if (data.directChange || selection.isCollapsed) {\n        this.hide();\n      } // Fire internal `_selectionChangeDebounced` event to use it for showing\n      // the toolbar after the selection stops changing.\n\n\n      this._fireSelectionChangeDebounced();\n    }); // Show the toolbar when the selection stops changing.\n\n    this.listenTo(this, '_selectionChangeDebounced', () => {\n      if (this.editor.editing.view.document.isFocused) {\n        this.show();\n      }\n    });\n\n    if (!this._balloonConfig.shouldNotGroupWhenFull) {\n      this.listenTo(editor, 'ready', () => {\n        const editableElement = editor.ui.view.editable.element; // Set #toolbarView's max-width on the initialization and update it on the editable resize.\n\n        this._resizeObserver = new ResizeObserver(editableElement, () => {\n          // The max-width equals 90% of the editable's width for the best user experience.\n          // The value keeps the balloon very close to the boundaries of the editable and limits the cases\n          // when the balloon juts out from the editable element it belongs to.\n          this.toolbarView.maxWidth = toPx(new Rect(editableElement).width * .9);\n        });\n      });\n    } // Listen to the toolbar view and whenever it changes its geometry due to some items being\n    // grouped or ungrouped, update the position of the balloon because a shorter/longer toolbar\n    // means the balloon could be pointing at the wrong place. Once updated, the balloon will point\n    // at the right selection in the content again.\n    // https://github.com/ckeditor/ckeditor5/issues/6444\n\n\n    this.listenTo(this.toolbarView, 'groupedItemsUpdate', () => {\n      this._updatePosition();\n    });\n  }\n  /**\n   * Creates toolbar components based on given configuration.\n   * This needs to be done when all plugins are ready.\n   *\n   * @inheritDoc\n   */\n\n\n  afterInit() {\n    const factory = this.editor.ui.componentFactory;\n    this.toolbarView.fillFromConfig(this._balloonConfig, factory);\n  }\n  /**\n   * Creates the toolbar view instance.\n   *\n   * @private\n   * @returns {module:ui/toolbar/toolbarview~ToolbarView}\n   */\n\n\n  _createToolbarView() {\n    const shouldGroupWhenFull = !this._balloonConfig.shouldNotGroupWhenFull;\n    const toolbarView = new ToolbarView(this.editor.locale, {\n      shouldGroupWhenFull,\n      isFloating: true\n    });\n    toolbarView.render();\n    return toolbarView;\n  }\n  /**\n   * Shows the toolbar and attaches it to the selection.\n   *\n   * Fires {@link #event:show} event which can be stopped to prevent the toolbar from showing up.\n   */\n\n\n  show() {\n    const editor = this.editor;\n    const selection = editor.model.document.selection;\n    const schema = editor.model.schema; // Do not add the toolbar to the balloon stack twice.\n\n    if (this._balloon.hasView(this.toolbarView)) {\n      return;\n    } // Do not show the toolbar when the selection is collapsed.\n\n\n    if (selection.isCollapsed) {\n      return;\n    } // Do not show the toolbar when there is more than one range in the selection and they fully contain selectable elements.\n    // See https://github.com/ckeditor/ckeditor5/issues/6443.\n\n\n    if (selectionContainsOnlyMultipleSelectables(selection, schema)) {\n      return;\n    } // Don not show the toolbar when all components inside are disabled\n    // see https://github.com/ckeditor/ckeditor5-ui/issues/269.\n\n\n    if (Array.from(this.toolbarView.items).every(item => item.isEnabled !== undefined && !item.isEnabled)) {\n      return;\n    } // Update the toolbar position when the editor ui should be refreshed.\n\n\n    this.listenTo(this.editor.ui, 'update', () => {\n      this._updatePosition();\n    }); // Add the toolbar to the common editor contextual balloon.\n\n    this._balloon.add({\n      view: this.toolbarView,\n      position: this._getBalloonPositionData(),\n      balloonClassName: 'ck-toolbar-container'\n    });\n  }\n  /**\n   * Hides the toolbar.\n   */\n\n\n  hide() {\n    if (this._balloon.hasView(this.toolbarView)) {\n      this.stopListening(this.editor.ui, 'update');\n\n      this._balloon.remove(this.toolbarView);\n    }\n  }\n  /**\n   * Returns positioning options for the {@link #_balloon}. They control the way balloon is attached\n   * to the selection.\n   *\n   * @private\n   * @returns {module:utils/dom/position~Options}\n   */\n\n\n  _getBalloonPositionData() {\n    const editor = this.editor;\n    const view = editor.editing.view;\n    const viewDocument = view.document;\n    const viewSelection = viewDocument.selection; // Get direction of the selection.\n\n    const isBackward = viewDocument.selection.isBackward;\n    return {\n      // Because the target for BalloonPanelView is a Rect (not DOMRange), it's geometry will stay fixed\n      // as the window scrolls. To let the BalloonPanelView follow such Rect, is must be continuously\n      // computed and hence, the target is defined as a function instead of a static value.\n      // https://github.com/ckeditor/ckeditor5-ui/issues/195\n      target: () => {\n        const range = isBackward ? viewSelection.getFirstRange() : viewSelection.getLastRange();\n        const rangeRects = Rect.getDomRangeRects(view.domConverter.viewRangeToDom(range)); // Select the proper range rect depending on the direction of the selection.\n\n        if (isBackward) {\n          return rangeRects[0];\n        } else {\n          // Ditch the zero-width \"orphan\" rect in the next line for the forward selection if there's\n          // another one preceding it. It is not rendered as a selection by the web browser anyway.\n          // https://github.com/ckeditor/ckeditor5-ui/issues/308\n          if (rangeRects.length > 1 && rangeRects[rangeRects.length - 1].width === 0) {\n            rangeRects.pop();\n          }\n\n          return rangeRects[rangeRects.length - 1];\n        }\n      },\n      positions: getBalloonPositions(isBackward)\n    };\n  }\n  /**\n   * Updates the position of the {@link #_balloon} to make up for changes:\n   *\n   * * in the geometry of the selection it is attached to (e.g. the selection moved in the viewport or expanded or shrunk),\n   * * or the geometry of the balloon toolbar itself (e.g. the toolbar has grouped or ungrouped some items and it is shorter or longer).\n   *\n   * @private\n   */\n\n\n  _updatePosition() {\n    this._balloon.updatePosition(this._getBalloonPositionData());\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n    this.stopListening();\n\n    this._fireSelectionChangeDebounced.cancel();\n\n    this.toolbarView.destroy();\n    this.focusTracker.destroy();\n\n    if (this._resizeObserver) {\n      this._resizeObserver.destroy();\n    }\n  }\n  /**\n   * This event is fired just before the toolbar shows up. Stopping this event will prevent this.\n   *\n   * @event show\n   */\n\n  /**\n   * This is internal plugin event which is fired 200 ms after model selection last change.\n   * This is to makes easy test debounced action without need to use `setTimeout`.\n   *\n   * @protected\n   * @event _selectionChangeDebounced\n   */\n\n\n} // Returns toolbar positions for the given direction of the selection.\n//\n// @private\n// @param {Boolean} isBackward\n// @returns {Array.<module:utils/dom/position~Position>}\n\nfunction getBalloonPositions(isBackward) {\n  const defaultPositions = BalloonPanelView.defaultPositions;\n  return isBackward ? [defaultPositions.northWestArrowSouth, defaultPositions.northWestArrowSouthWest, defaultPositions.northWestArrowSouthEast, defaultPositions.northWestArrowSouthMiddleEast, defaultPositions.northWestArrowSouthMiddleWest, defaultPositions.southWestArrowNorth, defaultPositions.southWestArrowNorthWest, defaultPositions.southWestArrowNorthEast, defaultPositions.southWestArrowNorthMiddleWest, defaultPositions.southWestArrowNorthMiddleEast] : [defaultPositions.southEastArrowNorth, defaultPositions.southEastArrowNorthEast, defaultPositions.southEastArrowNorthWest, defaultPositions.southEastArrowNorthMiddleEast, defaultPositions.southEastArrowNorthMiddleWest, defaultPositions.northEastArrowSouth, defaultPositions.northEastArrowSouthEast, defaultPositions.northEastArrowSouthWest, defaultPositions.northEastArrowSouthMiddleEast, defaultPositions.northEastArrowSouthMiddleWest];\n} // Returns \"true\" when the selection has multiple ranges and each range contains a selectable element\n// and nothing else.\n//\n// @private\n// @param {module:engine/model/selection~Selection} selection\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\n\n\nfunction selectionContainsOnlyMultipleSelectables(selection, schema) {\n  // It doesn't contain multiple objects if there is only one range.\n  if (selection.rangeCount === 1) {\n    return false;\n  }\n\n  return [...selection.getRanges()].every(range => {\n    const element = range.getContainedElement();\n    return element && schema.isSelectable(element);\n  });\n}\n/**\n * Contextual toolbar configuration. Used by the {@link module:ui/toolbar/balloon/balloontoolbar~BalloonToolbar}\n * feature.\n *\n * ## Configuring toolbar items\n *\n *\t\tconst config = {\n *\t\t\tballoonToolbar: [ 'bold', 'italic', 'undo', 'redo' ]\n *\t\t};\n *\n * You can also use `'|'` to create a separator between groups of items:\n *\n *\t\tconst config = {\n *\t\t\tballoonToolbar: [ 'bold', 'italic', | 'undo', 'redo' ]\n *\t\t};\n *\n * Read also about configuring the main editor toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * ## Configuring items grouping\n *\n * You can prevent automatic items grouping by setting the `shouldNotGroupWhenFull` option:\n *\n *\t\tconst config = {\n *\t\t\tballoonToolbar: {\n *\t\t\t\titems: [ 'bold', 'italic', 'undo', 'redo' ],\n *\t\t\t\tshouldNotGroupWhenFull: true\n *\t\t\t},\n *\t\t};\n *\n * @member {Array.<String>|Object} module:core/editor/editorconfig~EditorConfig#balloonToolbar\n */","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-ui/src/toolbar/balloon/balloontoolbar.js"],"names":["Plugin","ContextualBalloon","ToolbarView","BalloonPanelView","FocusTracker","Rect","normalizeToolbarConfig","debounce","ResizeObserver","toUnit","toPx","BalloonToolbar","pluginName","requires","constructor","editor","_balloonConfig","config","get","toolbarView","_createToolbarView","focusTracker","ui","once","add","getEditableElement","element","_resizeObserver","_balloon","plugins","_fireSelectionChangeDebounced","fire","decorate","init","selection","model","document","listenTo","evt","name","isFocused","isToolbarVisible","visibleView","hide","show","data","directChange","isCollapsed","editing","view","shouldNotGroupWhenFull","editableElement","editable","maxWidth","width","_updatePosition","afterInit","factory","componentFactory","fillFromConfig","shouldGroupWhenFull","locale","isFloating","render","schema","hasView","selectionContainsOnlyMultipleSelectables","Array","from","items","every","item","isEnabled","undefined","position","_getBalloonPositionData","balloonClassName","stopListening","remove","viewDocument","viewSelection","isBackward","target","range","getFirstRange","getLastRange","rangeRects","getDomRangeRects","domConverter","viewRangeToDom","length","pop","positions","getBalloonPositions","updatePosition","destroy","cancel","defaultPositions","northWestArrowSouth","northWestArrowSouthWest","northWestArrowSouthEast","northWestArrowSouthMiddleEast","northWestArrowSouthMiddleWest","southWestArrowNorth","southWestArrowNorthWest","southWestArrowNorthEast","southWestArrowNorthMiddleWest","southWestArrowNorthMiddleEast","southEastArrowNorth","southEastArrowNorthEast","southEastArrowNorthWest","southEastArrowNorthMiddleEast","southEastArrowNorthMiddleWest","northEastArrowSouth","northEastArrowSouthEast","northEastArrowSouthWest","northEastArrowSouthMiddleEast","northEastArrowSouthMiddleWest","rangeCount","getRanges","getContainedElement","isSelectable"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/balloon/balloontoolbar\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ContextualBalloon from '../../panel/balloon/contextualballoon';\nimport ToolbarView from '../toolbarview';\nimport BalloonPanelView from '../../panel/balloon/balloonpanelview.js';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig';\nimport { debounce } from 'lodash-es';\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\n\nconst toPx = toUnit( 'px' );\n\n/**\n * The contextual toolbar.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BalloonToolbar extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'BalloonToolbar';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ContextualBalloon ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * A cached and normalized `config.balloonToolbar` object.\n\t\t *\n\t\t * @type {module:core/editor/editorconfig~EditorConfig#balloonToolbar}\n\t\t * @private\n\t\t */\n\t\tthis._balloonConfig = normalizeToolbarConfig( editor.config.get( 'balloonToolbar' ) );\n\n\t\t/**\n\t\t * The toolbar view displayed in the balloon.\n\t\t *\n\t\t * @type {module:ui/toolbar/toolbarview~ToolbarView}\n\t\t */\n\t\tthis.toolbarView = this._createToolbarView();\n\n\t\t/**\n\t\t * Tracks the focus of the {@link module:core/editor/editorui~EditorUI#getEditableElement editable element}\n\t\t * and the {@link #toolbarView}. When both are blurred then the toolbar should hide.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:utils:focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t// Wait for the EditorUI#init. EditableElement is not available before.\n\t\teditor.ui.once( 'ready', () => {\n\t\t\tthis.focusTracker.add( editor.ui.getEditableElement() );\n\t\t\tthis.focusTracker.add( this.toolbarView.element );\n\t\t} );\n\n\t\t/**\n\t\t * An instance of the resize observer that allows to respond to changes in editable's geometry\n\t\t * so the toolbar can stay within its boundaries (and group toolbar items that do not fit).\n\t\t *\n\t\t * **Note**: Used only when `shouldNotGroupWhenFull` was **not** set in the\n\t\t * {@link module:core/editor/editorconfig~EditorConfig#balloonToolbar configuration}.\n\t\t *\n\t\t * **Note:** Created in {@link #init}.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/dom/resizeobserver~ResizeObserver}\n\t\t */\n\t\tthis._resizeObserver = null;\n\n\t\t/**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @type {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n\t\tthis._balloon = editor.plugins.get( ContextualBalloon );\n\n\t\t/**\n\t\t * Fires {@link #event:_selectionChangeDebounced} event using `lodash#debounce`.\n\t\t *\n\t\t * This function is stored as a plugin property to make possible to cancel\n\t\t * trailing debounced invocation on destroy.\n\t\t *\n\t\t * @private\n\t\t * @type {Function}\n\t\t */\n\t\tthis._fireSelectionChangeDebounced = debounce( () => this.fire( '_selectionChangeDebounced' ), 200 );\n\n\t\t// The appearance of the BalloonToolbar method is eventâ€“driven.\n\t\t// It is possible to stop the #show event and this prevent the toolbar from showing up.\n\t\tthis.decorate( 'show' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\n\t\t// Show/hide the toolbar on editable focus/blur.\n\t\tthis.listenTo( this.focusTracker, 'change:isFocused', ( evt, name, isFocused ) => {\n\t\t\tconst isToolbarVisible = this._balloon.visibleView === this.toolbarView;\n\n\t\t\tif ( !isFocused && isToolbarVisible ) {\n\t\t\t\tthis.hide();\n\t\t\t} else if ( isFocused ) {\n\t\t\t\tthis.show();\n\t\t\t}\n\t\t} );\n\n\t\t// Hide the toolbar when the selection is changed by a direct change or has changed to collapsed.\n\t\tthis.listenTo( selection, 'change:range', ( evt, data ) => {\n\t\t\tif ( data.directChange || selection.isCollapsed ) {\n\t\t\t\tthis.hide();\n\t\t\t}\n\n\t\t\t// Fire internal `_selectionChangeDebounced` event to use it for showing\n\t\t\t// the toolbar after the selection stops changing.\n\t\t\tthis._fireSelectionChangeDebounced();\n\t\t} );\n\n\t\t// Show the toolbar when the selection stops changing.\n\t\tthis.listenTo( this, '_selectionChangeDebounced', () => {\n\t\t\tif ( this.editor.editing.view.document.isFocused ) {\n\t\t\t\tthis.show();\n\t\t\t}\n\t\t} );\n\n\t\tif ( !this._balloonConfig.shouldNotGroupWhenFull ) {\n\t\t\tthis.listenTo( editor, 'ready', () => {\n\t\t\t\tconst editableElement = editor.ui.view.editable.element;\n\n\t\t\t\t// Set #toolbarView's max-width on the initialization and update it on the editable resize.\n\t\t\t\tthis._resizeObserver = new ResizeObserver( editableElement, () => {\n\t\t\t\t\t// The max-width equals 90% of the editable's width for the best user experience.\n\t\t\t\t\t// The value keeps the balloon very close to the boundaries of the editable and limits the cases\n\t\t\t\t\t// when the balloon juts out from the editable element it belongs to.\n\t\t\t\t\tthis.toolbarView.maxWidth = toPx( new Rect( editableElement ).width * .9 );\n\t\t\t\t} );\n\t\t\t} );\n\t\t}\n\n\t\t// Listen to the toolbar view and whenever it changes its geometry due to some items being\n\t\t// grouped or ungrouped, update the position of the balloon because a shorter/longer toolbar\n\t\t// means the balloon could be pointing at the wrong place. Once updated, the balloon will point\n\t\t// at the right selection in the content again.\n\t\t// https://github.com/ckeditor/ckeditor5/issues/6444\n\t\tthis.listenTo( this.toolbarView, 'groupedItemsUpdate', () => {\n\t\t\tthis._updatePosition();\n\t\t} );\n\t}\n\n\t/**\n\t * Creates toolbar components based on given configuration.\n\t * This needs to be done when all plugins are ready.\n\t *\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst factory = this.editor.ui.componentFactory;\n\n\t\tthis.toolbarView.fillFromConfig( this._balloonConfig, factory );\n\t}\n\n\t/**\n\t * Creates the toolbar view instance.\n\t *\n\t * @private\n\t * @returns {module:ui/toolbar/toolbarview~ToolbarView}\n\t */\n\t_createToolbarView() {\n\t\tconst shouldGroupWhenFull = !this._balloonConfig.shouldNotGroupWhenFull;\n\t\tconst toolbarView = new ToolbarView( this.editor.locale, {\n\t\t\tshouldGroupWhenFull,\n\t\t\tisFloating: true\n\t\t} );\n\n\t\ttoolbarView.render();\n\n\t\treturn toolbarView;\n\t}\n\n\t/**\n\t * Shows the toolbar and attaches it to the selection.\n\t *\n\t * Fires {@link #event:show} event which can be stopped to prevent the toolbar from showing up.\n\t */\n\tshow() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst schema = editor.model.schema;\n\n\t\t// Do not add the toolbar to the balloon stack twice.\n\t\tif ( this._balloon.hasView( this.toolbarView ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not show the toolbar when the selection is collapsed.\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not show the toolbar when there is more than one range in the selection and they fully contain selectable elements.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/6443.\n\t\tif ( selectionContainsOnlyMultipleSelectables( selection, schema ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Don not show the toolbar when all components inside are disabled\n\t\t// see https://github.com/ckeditor/ckeditor5-ui/issues/269.\n\t\tif ( Array.from( this.toolbarView.items ).every( item => item.isEnabled !== undefined && !item.isEnabled ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update the toolbar position when the editor ui should be refreshed.\n\t\tthis.listenTo( this.editor.ui, 'update', () => {\n\t\t\tthis._updatePosition();\n\t\t} );\n\n\t\t// Add the toolbar to the common editor contextual balloon.\n\t\tthis._balloon.add( {\n\t\t\tview: this.toolbarView,\n\t\t\tposition: this._getBalloonPositionData(),\n\t\t\tballoonClassName: 'ck-toolbar-container'\n\t\t} );\n\t}\n\n\t/**\n\t * Hides the toolbar.\n\t */\n\thide() {\n\t\tif ( this._balloon.hasView( this.toolbarView ) ) {\n\t\t\tthis.stopListening( this.editor.ui, 'update' );\n\t\t\tthis._balloon.remove( this.toolbarView );\n\t\t}\n\t}\n\n\t/**\n\t * Returns positioning options for the {@link #_balloon}. They control the way balloon is attached\n\t * to the selection.\n\t *\n\t * @private\n\t * @returns {module:utils/dom/position~Options}\n\t */\n\t_getBalloonPositionData() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst viewSelection = viewDocument.selection;\n\n\t\t// Get direction of the selection.\n\t\tconst isBackward = viewDocument.selection.isBackward;\n\n\t\treturn {\n\t\t\t// Because the target for BalloonPanelView is a Rect (not DOMRange), it's geometry will stay fixed\n\t\t\t// as the window scrolls. To let the BalloonPanelView follow such Rect, is must be continuously\n\t\t\t// computed and hence, the target is defined as a function instead of a static value.\n\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/195\n\t\t\ttarget: () => {\n\t\t\t\tconst range = isBackward ? viewSelection.getFirstRange() : viewSelection.getLastRange();\n\t\t\t\tconst rangeRects = Rect.getDomRangeRects( view.domConverter.viewRangeToDom( range ) );\n\n\t\t\t\t// Select the proper range rect depending on the direction of the selection.\n\t\t\t\tif ( isBackward ) {\n\t\t\t\t\treturn rangeRects[ 0 ];\n\t\t\t\t} else {\n\t\t\t\t\t// Ditch the zero-width \"orphan\" rect in the next line for the forward selection if there's\n\t\t\t\t\t// another one preceding it. It is not rendered as a selection by the web browser anyway.\n\t\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/308\n\t\t\t\t\tif ( rangeRects.length > 1 && rangeRects[ rangeRects.length - 1 ].width === 0 ) {\n\t\t\t\t\t\trangeRects.pop();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn rangeRects[ rangeRects.length - 1 ];\n\t\t\t\t}\n\t\t\t},\n\t\t\tpositions: getBalloonPositions( isBackward )\n\t\t};\n\t}\n\n\t/**\n\t * Updates the position of the {@link #_balloon} to make up for changes:\n\t *\n\t * * in the geometry of the selection it is attached to (e.g. the selection moved in the viewport or expanded or shrunk),\n\t * * or the geometry of the balloon toolbar itself (e.g. the toolbar has grouped or ungrouped some items and it is shorter or longer).\n\t *\n\t * @private\n\t */\n\t_updatePosition() {\n\t\tthis._balloon.updatePosition( this._getBalloonPositionData() );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis.stopListening();\n\t\tthis._fireSelectionChangeDebounced.cancel();\n\t\tthis.toolbarView.destroy();\n\t\tthis.focusTracker.destroy();\n\n\t\tif ( this._resizeObserver ) {\n\t\t\tthis._resizeObserver.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * This event is fired just before the toolbar shows up. Stopping this event will prevent this.\n\t *\n\t * @event show\n\t */\n\n\t/**\n\t * This is internal plugin event which is fired 200 ms after model selection last change.\n\t * This is to makes easy test debounced action without need to use `setTimeout`.\n\t *\n\t * @protected\n\t * @event _selectionChangeDebounced\n\t */\n}\n\n// Returns toolbar positions for the given direction of the selection.\n//\n// @private\n// @param {Boolean} isBackward\n// @returns {Array.<module:utils/dom/position~Position>}\nfunction getBalloonPositions( isBackward ) {\n\tconst defaultPositions = BalloonPanelView.defaultPositions;\n\n\treturn isBackward ? [\n\t\tdefaultPositions.northWestArrowSouth,\n\t\tdefaultPositions.northWestArrowSouthWest,\n\t\tdefaultPositions.northWestArrowSouthEast,\n\t\tdefaultPositions.northWestArrowSouthMiddleEast,\n\t\tdefaultPositions.northWestArrowSouthMiddleWest,\n\t\tdefaultPositions.southWestArrowNorth,\n\t\tdefaultPositions.southWestArrowNorthWest,\n\t\tdefaultPositions.southWestArrowNorthEast,\n\t\tdefaultPositions.southWestArrowNorthMiddleWest,\n\t\tdefaultPositions.southWestArrowNorthMiddleEast\n\t] : [\n\t\tdefaultPositions.southEastArrowNorth,\n\t\tdefaultPositions.southEastArrowNorthEast,\n\t\tdefaultPositions.southEastArrowNorthWest,\n\t\tdefaultPositions.southEastArrowNorthMiddleEast,\n\t\tdefaultPositions.southEastArrowNorthMiddleWest,\n\t\tdefaultPositions.northEastArrowSouth,\n\t\tdefaultPositions.northEastArrowSouthEast,\n\t\tdefaultPositions.northEastArrowSouthWest,\n\t\tdefaultPositions.northEastArrowSouthMiddleEast,\n\t\tdefaultPositions.northEastArrowSouthMiddleWest\n\t];\n}\n\n// Returns \"true\" when the selection has multiple ranges and each range contains a selectable element\n// and nothing else.\n//\n// @private\n// @param {module:engine/model/selection~Selection} selection\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction selectionContainsOnlyMultipleSelectables( selection, schema ) {\n\t// It doesn't contain multiple objects if there is only one range.\n\tif ( selection.rangeCount === 1 ) {\n\t\treturn false;\n\t}\n\n\treturn [ ...selection.getRanges() ].every( range => {\n\t\tconst element = range.getContainedElement();\n\n\t\treturn element && schema.isSelectable( element );\n\t} );\n}\n\n/**\n * Contextual toolbar configuration. Used by the {@link module:ui/toolbar/balloon/balloontoolbar~BalloonToolbar}\n * feature.\n *\n * ## Configuring toolbar items\n *\n *\t\tconst config = {\n *\t\t\tballoonToolbar: [ 'bold', 'italic', 'undo', 'redo' ]\n *\t\t};\n *\n * You can also use `'|'` to create a separator between groups of items:\n *\n *\t\tconst config = {\n *\t\t\tballoonToolbar: [ 'bold', 'italic', | 'undo', 'redo' ]\n *\t\t};\n *\n * Read also about configuring the main editor toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * ## Configuring items grouping\n *\n * You can prevent automatic items grouping by setting the `shouldNotGroupWhenFull` option:\n *\n *\t\tconst config = {\n *\t\t\tballoonToolbar: {\n *\t\t\t\titems: [ 'bold', 'italic', 'undo', 'redo' ],\n *\t\t\t\tshouldNotGroupWhenFull: true\n *\t\t\t},\n *\t\t};\n *\n * @member {Array.<String>|Object} module:core/editor/editorconfig~EditorConfig#balloonToolbar\n */\n"]},"metadata":{},"sourceType":"module"}