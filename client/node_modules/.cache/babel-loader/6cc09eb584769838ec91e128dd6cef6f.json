{"ast":null,"code":"/**\r\n * Copyright 2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactNoopUpdateQueue\r\n */\n'use strict';\n\nvar warning = require('fbjs/lib/warning');\n\nfunction warnTDZ(publicInstance, callerName) {\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;\n  }\n}\n/**\r\n * This is the abstract API for an update queue.\r\n */\n\n\nvar ReactNoopUpdateQueue = {\n  /**\r\n   * Checks whether or not this composite component is mounted.\r\n   * @param {ReactClass} publicInstance The instance we want to test.\r\n   * @return {boolean} True if mounted, false otherwise.\r\n   * @protected\r\n   * @final\r\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\r\n   * Enqueue a callback that will be executed after all the pending updates\r\n   * have processed.\r\n   *\r\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\r\n   * @param {?function} callback Called after state is updated.\r\n   * @internal\r\n   */\n  enqueueCallback: function (publicInstance, callback) {},\n\n  /**\r\n   * Forces an update. This should only be invoked when it is known with\r\n   * certainty that we are **not** in a DOM transaction.\r\n   *\r\n   * You may want to call this when you know that some deeper aspect of the\r\n   * component's state has changed but `setState` was not called.\r\n   *\r\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\r\n   * `componentWillUpdate` and `componentDidUpdate`.\r\n   *\r\n   * @param {ReactClass} publicInstance The instance that should rerender.\r\n   * @internal\r\n   */\n  enqueueForceUpdate: function (publicInstance) {\n    warnTDZ(publicInstance, 'forceUpdate');\n  },\n\n  /**\r\n   * Replaces all of the state. Always use this or `setState` to mutate state.\r\n   * You should treat `this.state` as immutable.\r\n   *\r\n   * There is no guarantee that `this.state` will be immediately updated, so\r\n   * accessing `this.state` after calling this method may return the old value.\r\n   *\r\n   * @param {ReactClass} publicInstance The instance that should rerender.\r\n   * @param {object} completeState Next state.\r\n   * @internal\r\n   */\n  enqueueReplaceState: function (publicInstance, completeState) {\n    warnTDZ(publicInstance, 'replaceState');\n  },\n\n  /**\r\n   * Sets a subset of the state. This only exists because _pendingState is\r\n   * internal. This provides a merging strategy that is not available to deep\r\n   * properties which is confusing. TODO: Expose pendingState or don't use it\r\n   * during the merge.\r\n   *\r\n   * @param {ReactClass} publicInstance The instance that should rerender.\r\n   * @param {object} partialState Next partial state to be merged with state.\r\n   * @internal\r\n   */\n  enqueueSetState: function (publicInstance, partialState) {\n    warnTDZ(publicInstance, 'setState');\n  },\n\n  /**\r\n   * Sets a subset of the props.\r\n   *\r\n   * @param {ReactClass} publicInstance The instance that should rerender.\r\n   * @param {object} partialProps Subset of the next props.\r\n   * @internal\r\n   */\n  enqueueSetProps: function (publicInstance, partialProps) {\n    warnTDZ(publicInstance, 'setProps');\n  },\n\n  /**\r\n   * Replaces all of the props.\r\n   *\r\n   * @param {ReactClass} publicInstance The instance that should rerender.\r\n   * @param {object} props New props.\r\n   * @internal\r\n   */\n  enqueueReplaceProps: function (publicInstance, props) {\n    warnTDZ(publicInstance, 'replaceProps');\n  }\n};\nmodule.exports = ReactNoopUpdateQueue;","map":{"version":3,"sources":["C:/Users/nvtung/Các project thực hiện/RubyGYM-master_test_2/client/node_modules/jsx-to-string/node_modules/react/lib/ReactNoopUpdateQueue.js"],"names":["warning","require","warnTDZ","publicInstance","callerName","process","env","NODE_ENV","constructor","displayName","undefined","ReactNoopUpdateQueue","isMounted","enqueueCallback","callback","enqueueForceUpdate","enqueueReplaceState","completeState","enqueueSetState","partialState","enqueueSetProps","partialProps","enqueueReplaceProps","props","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAArB;;AAEA,SAASC,OAAT,CAAiBC,cAAjB,EAAiCC,UAAjC,EAA6C;AAC3C,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCF,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCP,OAAO,CAAC,KAAD,EAAQ,+DAA+D,gEAA/D,GAAkI,8DAA1I,EAA0MI,UAA1M,EAAsNA,UAAtN,EAAkOD,cAAc,CAACK,WAAf,IAA8BL,cAAc,CAACK,WAAf,CAA2BC,WAAzD,IAAwE,EAA1S,CAA/C,GAA+VC,SAA/V;AACD;AACF;AAED;AACA;AACA;;;AACA,IAAIC,oBAAoB,GAAG;AAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAE,UAAUT,cAAV,EAA0B;AACnC,WAAO,KAAP;AACD,GAXwB;;AAazB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEU,EAAAA,eAAe,EAAE,UAAUV,cAAV,EAA0BW,QAA1B,EAAoC,CAAE,CArB9B;;AAuBzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,kBAAkB,EAAE,UAAUZ,cAAV,EAA0B;AAC5CD,IAAAA,OAAO,CAACC,cAAD,EAAiB,aAAjB,CAAP;AACD,GAtCwB;;AAwCzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEa,EAAAA,mBAAmB,EAAE,UAAUb,cAAV,EAA0Bc,aAA1B,EAAyC;AAC5Df,IAAAA,OAAO,CAACC,cAAD,EAAiB,cAAjB,CAAP;AACD,GArDwB;;AAuDzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEe,EAAAA,eAAe,EAAE,UAAUf,cAAV,EAA0BgB,YAA1B,EAAwC;AACvDjB,IAAAA,OAAO,CAACC,cAAD,EAAiB,UAAjB,CAAP;AACD,GAnEwB;;AAqEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACEiB,EAAAA,eAAe,EAAE,UAAUjB,cAAV,EAA0BkB,YAA1B,EAAwC;AACvDnB,IAAAA,OAAO,CAACC,cAAD,EAAiB,UAAjB,CAAP;AACD,GA9EwB;;AAgFzB;AACF;AACA;AACA;AACA;AACA;AACA;AACEmB,EAAAA,mBAAmB,EAAE,UAAUnB,cAAV,EAA0BoB,KAA1B,EAAiC;AACpDrB,IAAAA,OAAO,CAACC,cAAD,EAAiB,cAAjB,CAAP;AACD;AAzFwB,CAA3B;AA6FAqB,MAAM,CAACC,OAAP,GAAiBd,oBAAjB","sourcesContent":["/**\r\n * Copyright 2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactNoopUpdateQueue\r\n */\r\n\r\n'use strict';\r\n\r\nvar warning = require('fbjs/lib/warning');\r\n\r\nfunction warnTDZ(publicInstance, callerName) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * This is the abstract API for an update queue.\r\n */\r\nvar ReactNoopUpdateQueue = {\r\n\r\n  /**\r\n   * Checks whether or not this composite component is mounted.\r\n   * @param {ReactClass} publicInstance The instance we want to test.\r\n   * @return {boolean} True if mounted, false otherwise.\r\n   * @protected\r\n   * @final\r\n   */\r\n  isMounted: function (publicInstance) {\r\n    return false;\r\n  },\r\n\r\n  /**\r\n   * Enqueue a callback that will be executed after all the pending updates\r\n   * have processed.\r\n   *\r\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\r\n   * @param {?function} callback Called after state is updated.\r\n   * @internal\r\n   */\r\n  enqueueCallback: function (publicInstance, callback) {},\r\n\r\n  /**\r\n   * Forces an update. This should only be invoked when it is known with\r\n   * certainty that we are **not** in a DOM transaction.\r\n   *\r\n   * You may want to call this when you know that some deeper aspect of the\r\n   * component's state has changed but `setState` was not called.\r\n   *\r\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\r\n   * `componentWillUpdate` and `componentDidUpdate`.\r\n   *\r\n   * @param {ReactClass} publicInstance The instance that should rerender.\r\n   * @internal\r\n   */\r\n  enqueueForceUpdate: function (publicInstance) {\r\n    warnTDZ(publicInstance, 'forceUpdate');\r\n  },\r\n\r\n  /**\r\n   * Replaces all of the state. Always use this or `setState` to mutate state.\r\n   * You should treat `this.state` as immutable.\r\n   *\r\n   * There is no guarantee that `this.state` will be immediately updated, so\r\n   * accessing `this.state` after calling this method may return the old value.\r\n   *\r\n   * @param {ReactClass} publicInstance The instance that should rerender.\r\n   * @param {object} completeState Next state.\r\n   * @internal\r\n   */\r\n  enqueueReplaceState: function (publicInstance, completeState) {\r\n    warnTDZ(publicInstance, 'replaceState');\r\n  },\r\n\r\n  /**\r\n   * Sets a subset of the state. This only exists because _pendingState is\r\n   * internal. This provides a merging strategy that is not available to deep\r\n   * properties which is confusing. TODO: Expose pendingState or don't use it\r\n   * during the merge.\r\n   *\r\n   * @param {ReactClass} publicInstance The instance that should rerender.\r\n   * @param {object} partialState Next partial state to be merged with state.\r\n   * @internal\r\n   */\r\n  enqueueSetState: function (publicInstance, partialState) {\r\n    warnTDZ(publicInstance, 'setState');\r\n  },\r\n\r\n  /**\r\n   * Sets a subset of the props.\r\n   *\r\n   * @param {ReactClass} publicInstance The instance that should rerender.\r\n   * @param {object} partialProps Subset of the next props.\r\n   * @internal\r\n   */\r\n  enqueueSetProps: function (publicInstance, partialProps) {\r\n    warnTDZ(publicInstance, 'setProps');\r\n  },\r\n\r\n  /**\r\n   * Replaces all of the props.\r\n   *\r\n   * @param {ReactClass} publicInstance The instance that should rerender.\r\n   * @param {object} props New props.\r\n   * @internal\r\n   */\r\n  enqueueReplaceProps: function (publicInstance, props) {\r\n    warnTDZ(publicInstance, 'replaceProps');\r\n  }\r\n\r\n};\r\n\r\nmodule.exports = ReactNoopUpdateQueue;"]},"metadata":{},"sourceType":"script"}