{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageinsert/ui/imageinsertpanelview\n */\nimport { icons } from 'ckeditor5/src/core';\nimport { ButtonView, View, SplitButtonView, ViewCollection, submitHandler, createDropdown, FocusCycler } from 'ckeditor5/src/ui';\nimport { Collection, FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport ImageInsertFormRowView from './imageinsertformrowview';\nimport '../../../theme/imageinsert.css';\n/**\n * The insert an image via URL view controller class.\n *\n * See {@link module:image/imageinsert/ui/imageinsertpanelview~ImageInsertPanelView}.\n *\n * @extends module:ui/view~View\n */\n\nexport default class ImageInsertPanelView extends View {\n  /**\n   * Creates a view for the dropdown panel of {@link module:image/imageinsert/imageinsertui~ImageInsertUI}.\n   *\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   * @param {Object} [integrations] An integrations object that contains\n   * components (or tokens for components) to be shown in the panel view.\n   */\n  constructor(locale, integrations) {\n    super(locale);\n\n    const {\n      insertButtonView,\n      cancelButtonView\n    } = this._createActionButtons(locale);\n    /**\n     * The \"insert/update\" button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n\n    this.insertButtonView = insertButtonView;\n    /**\n     * The \"cancel\" button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.cancelButtonView = cancelButtonView;\n    /**\n     * The dropdown view.\n     *\n     * @member {module:ui/dropdown/dropdownview~DropdownView}\n     */\n\n    this.dropdownView = this._createDropdownView(locale);\n    /**\n     * The value of the URL input.\n     *\n     * @member {String} #imageURLInputValue\n     * @observable\n     */\n\n    this.set('imageURLInputValue', '');\n    /**\n     * Tracks information about DOM focus in the form.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * A collection of views that can be focused in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this._focusables = new ViewCollection();\n    /**\n     * Helps cycling over {@link #_focusables} in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate form fields backwards using the Shift + Tab keystroke.\n        focusPrevious: 'shift + tab',\n        // Navigate form fields forwards using the Tab key.\n        focusNext: 'tab'\n      }\n    });\n    /**\n     * A collection of the defined integrations for inserting the images.\n     *\n     * @private\n     * @member {module:utils/collection~Collection}\n     */\n\n    this.set('_integrations', new Collection());\n\n    if (integrations) {\n      for (const [integration, integrationView] of Object.entries(integrations)) {\n        if (integration === 'insertImageViaUrl') {\n          integrationView.fieldView.bind('value').to(this, 'imageURLInputValue', value => value || '');\n          integrationView.fieldView.on('input', () => {\n            this.imageURLInputValue = integrationView.fieldView.element.value.trim();\n          });\n        }\n\n        integrationView.name = integration;\n\n        this._integrations.add(integrationView);\n      }\n    }\n\n    this.setTemplate({\n      tag: 'form',\n      attributes: {\n        class: ['ck', 'ck-image-insert-form'],\n        tabindex: '-1'\n      },\n      children: [...this._integrations, new ImageInsertFormRowView(locale, {\n        children: [this.insertButtonView, this.cancelButtonView],\n        class: 'ck-image-insert-form__action-row'\n      })]\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    submitHandler({\n      view: this\n    });\n    const childViews = [...this._integrations, this.insertButtonView, this.cancelButtonView];\n    childViews.forEach(v => {\n      // Register the view as focusable.\n      this._focusables.add(v); // Register the view in the focus tracker.\n\n\n      this.focusTracker.add(v.element);\n    }); // Start listening for the keystrokes coming from #element.\n\n    this.keystrokes.listenTo(this.element);\n\n    const stopPropagation = data => data.stopPropagation(); // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n    // keystroke handler would take over the key management in the URL input. We need to prevent\n    // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n\n\n    this.keystrokes.set('arrowright', stopPropagation);\n    this.keystrokes.set('arrowleft', stopPropagation);\n    this.keystrokes.set('arrowup', stopPropagation);\n    this.keystrokes.set('arrowdown', stopPropagation); // Intercept the \"selectstart\" event, which is blocked by default because of the default behavior\n    // of the DropdownView#panelView.\n    // TODO: blocking \"selectstart\" in the #panelView should be configurable per–drop–down instance.\n\n    this.listenTo(childViews[0].element, 'selectstart', (evt, domEvt) => {\n      domEvt.stopPropagation();\n    }, {\n      priority: 'high'\n    });\n  }\n  /**\n   * Returns a view of the integration.\n   *\n   * @param {String} name The name of the integration.\n   * @returns {module:ui/view~View}\n   */\n\n\n  getIntegration(name) {\n    return this._integrations.find(integration => integration.name === name);\n  }\n  /**\n   * Creates the dropdown view.\n   *\n   * @param {module:utils/locale~Locale} locale The localization services instance.\n   *\n   * @private\n   * @returns {module:ui/dropdown/dropdownview~DropdownView}\n   */\n\n\n  _createDropdownView(locale) {\n    const t = locale.t;\n    const dropdownView = createDropdown(locale, SplitButtonView);\n    const splitButtonView = dropdownView.buttonView;\n    const panelView = dropdownView.panelView;\n    splitButtonView.set({\n      label: t('Insert image'),\n      icon: icons.image,\n      tooltip: true\n    });\n    panelView.extendTemplate({\n      attributes: {\n        class: 'ck-image-insert__panel'\n      }\n    });\n    return dropdownView;\n  }\n  /**\n   * Creates the following form controls:\n   *\n   * * {@link #insertButtonView},\n   * * {@link #cancelButtonView}.\n   *\n   * @param {module:utils/locale~Locale} locale The localization services instance.\n   *\n   * @private\n   * @returns {Object.<String,module:ui/view~View>}\n   */\n\n\n  _createActionButtons(locale) {\n    const t = locale.t;\n    const insertButtonView = new ButtonView(locale);\n    const cancelButtonView = new ButtonView(locale);\n    insertButtonView.set({\n      label: t('Insert'),\n      icon: icons.check,\n      class: 'ck-button-save',\n      type: 'submit',\n      withText: true,\n      isEnabled: this.imageURLInputValue\n    });\n    cancelButtonView.set({\n      label: t('Cancel'),\n      icon: icons.cancel,\n      class: 'ck-button-cancel',\n      withText: true\n    });\n    insertButtonView.bind('isEnabled').to(this, 'imageURLInputValue', value => !!value);\n    insertButtonView.delegate('execute').to(this, 'submit');\n    cancelButtonView.delegate('execute').to(this, 'cancel');\n    return {\n      insertButtonView,\n      cancelButtonView\n    };\n  }\n  /**\n   * Focuses the first {@link #_focusables focusable} in the form.\n   */\n\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n\n}\n/**\n * Fired when the form view is submitted (when one of the children triggered the submit event),\n * e.g. by a click on {@link #insertButtonView}.\n *\n * @event submit\n */\n\n/**\n * Fired when the form view is canceled, e.g. by a click on {@link #cancelButtonView}.\n *\n * @event cancel\n */","map":{"version":3,"sources":["D:/Project/nhap_mon_cnpm/my-app/node_modules/@ckeditor/ckeditor5-image/src/imageinsert/ui/imageinsertpanelview.js"],"names":["icons","ButtonView","View","SplitButtonView","ViewCollection","submitHandler","createDropdown","FocusCycler","Collection","FocusTracker","KeystrokeHandler","ImageInsertFormRowView","ImageInsertPanelView","constructor","locale","integrations","insertButtonView","cancelButtonView","_createActionButtons","dropdownView","_createDropdownView","set","focusTracker","keystrokes","_focusables","_focusCycler","focusables","keystrokeHandler","actions","focusPrevious","focusNext","integration","integrationView","Object","entries","fieldView","bind","to","value","on","imageURLInputValue","element","trim","name","_integrations","add","setTemplate","tag","attributes","class","tabindex","children","render","view","childViews","forEach","v","listenTo","stopPropagation","data","evt","domEvt","priority","getIntegration","find","t","splitButtonView","buttonView","panelView","label","icon","image","tooltip","extendTemplate","check","type","withText","isEnabled","cancel","delegate","focus","focusFirst"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageinsert/ui/imageinsertpanelview\n */\n\nimport { icons } from 'ckeditor5/src/core';\nimport { ButtonView, View, SplitButtonView, ViewCollection, submitHandler, createDropdown, FocusCycler } from 'ckeditor5/src/ui';\nimport { Collection, FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\n\nimport ImageInsertFormRowView from './imageinsertformrowview';\n\nimport '../../../theme/imageinsert.css';\n\n/**\n * The insert an image via URL view controller class.\n *\n * See {@link module:image/imageinsert/ui/imageinsertpanelview~ImageInsertPanelView}.\n *\n * @extends module:ui/view~View\n */\nexport default class ImageInsertPanelView extends View {\n\t/**\n\t * Creates a view for the dropdown panel of {@link module:image/imageinsert/imageinsertui~ImageInsertUI}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t * @param {Object} [integrations] An integrations object that contains\n\t * components (or tokens for components) to be shown in the panel view.\n\t */\n\tconstructor( locale, integrations ) {\n\t\tsuper( locale );\n\n\t\tconst { insertButtonView, cancelButtonView } = this._createActionButtons( locale );\n\n\t\t/**\n\t\t * The \"insert/update\" button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.insertButtonView = insertButtonView;\n\n\t\t/**\n\t\t * The \"cancel\" button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.cancelButtonView = cancelButtonView;\n\n\t\t/**\n\t\t * The dropdown view.\n\t\t *\n\t\t * @member {module:ui/dropdown/dropdownview~DropdownView}\n\t\t */\n\t\tthis.dropdownView = this._createDropdownView( locale );\n\n\t\t/**\n\t\t * The value of the URL input.\n\t\t *\n\t\t * @member {String} #imageURLInputValue\n\t\t * @observable\n\t\t */\n\t\tthis.set( 'imageURLInputValue', '' );\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * A collection of views that can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._focusables = new ViewCollection();\n\n\t\t/**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate form fields backwards using the Shift + Tab keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate form fields forwards using the Tab key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * A collection of the defined integrations for inserting the images.\n\t\t *\n\t\t * @private\n\t\t * @member {module:utils/collection~Collection}\n\t\t */\n\t\tthis.set( '_integrations', new Collection() );\n\n\t\tif ( integrations ) {\n\t\t\tfor ( const [ integration, integrationView ] of Object.entries( integrations ) ) {\n\t\t\t\tif ( integration === 'insertImageViaUrl' ) {\n\t\t\t\t\tintegrationView.fieldView.bind( 'value' ).to( this, 'imageURLInputValue', value => value || '' );\n\n\t\t\t\t\tintegrationView.fieldView.on( 'input', () => {\n\t\t\t\t\t\tthis.imageURLInputValue = integrationView.fieldView.element.value.trim();\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tintegrationView.name = integration;\n\n\t\t\t\tthis._integrations.add( integrationView );\n\t\t\t}\n\t\t}\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'form',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-image-insert-form'\n\t\t\t\t],\n\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t...this._integrations,\n\t\t\t\tnew ImageInsertFormRowView( locale, {\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\tthis.insertButtonView,\n\t\t\t\t\t\tthis.cancelButtonView\n\t\t\t\t\t],\n\t\t\t\t\tclass: 'ck-image-insert-form__action-row'\n\t\t\t\t} )\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tsubmitHandler( {\n\t\t\tview: this\n\t\t} );\n\n\t\tconst childViews = [\n\t\t\t...this._integrations,\n\t\t\tthis.insertButtonView,\n\t\t\tthis.cancelButtonView\n\t\t];\n\n\t\tchildViews.forEach( v => {\n\t\t\t// Register the view as focusable.\n\t\t\tthis._focusables.add( v );\n\n\t\t\t// Register the view in the focus tracker.\n\t\t\tthis.focusTracker.add( v.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\tconst stopPropagation = data => data.stopPropagation();\n\n\t\t// Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n\t\t// keystroke handler would take over the key management in the URL input. We need to prevent\n\t\t// this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n\t\tthis.keystrokes.set( 'arrowright', stopPropagation );\n\t\tthis.keystrokes.set( 'arrowleft', stopPropagation );\n\t\tthis.keystrokes.set( 'arrowup', stopPropagation );\n\t\tthis.keystrokes.set( 'arrowdown', stopPropagation );\n\n\t\t// Intercept the \"selectstart\" event, which is blocked by default because of the default behavior\n\t\t// of the DropdownView#panelView.\n\t\t// TODO: blocking \"selectstart\" in the #panelView should be configurable per–drop–down instance.\n\t\tthis.listenTo( childViews[ 0 ].element, 'selectstart', ( evt, domEvt ) => {\n\t\t\tdomEvt.stopPropagation();\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Returns a view of the integration.\n\t *\n\t * @param {String} name The name of the integration.\n\t * @returns {module:ui/view~View}\n\t */\n\tgetIntegration( name ) {\n\t\treturn this._integrations.find( integration => integration.name === name );\n\t}\n\n\t/**\n\t * Creates the dropdown view.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t *\n\t * @private\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n\t_createDropdownView( locale ) {\n\t\tconst t = locale.t;\n\t\tconst dropdownView = createDropdown( locale, SplitButtonView );\n\t\tconst splitButtonView = dropdownView.buttonView;\n\t\tconst panelView = dropdownView.panelView;\n\n\t\tsplitButtonView.set( {\n\t\t\tlabel: t( 'Insert image' ),\n\t\t\ticon: icons.image,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\tpanelView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-image-insert__panel'\n\t\t\t}\n\t\t} );\n\n\t\treturn dropdownView;\n\t}\n\n\t/**\n\t * Creates the following form controls:\n\t *\n\t * * {@link #insertButtonView},\n\t * * {@link #cancelButtonView}.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t *\n\t * @private\n\t * @returns {Object.<String,module:ui/view~View>}\n\t */\n\t_createActionButtons( locale ) {\n\t\tconst t = locale.t;\n\t\tconst insertButtonView = new ButtonView( locale );\n\t\tconst cancelButtonView = new ButtonView( locale );\n\n\t\tinsertButtonView.set( {\n\t\t\tlabel: t( 'Insert' ),\n\t\t\ticon: icons.check,\n\t\t\tclass: 'ck-button-save',\n\t\t\ttype: 'submit',\n\t\t\twithText: true,\n\t\t\tisEnabled: this.imageURLInputValue\n\t\t} );\n\n\t\tcancelButtonView.set( {\n\t\t\tlabel: t( 'Cancel' ),\n\t\t\ticon: icons.cancel,\n\t\t\tclass: 'ck-button-cancel',\n\t\t\twithText: true\n\t\t} );\n\n\t\tinsertButtonView.bind( 'isEnabled' ).to( this, 'imageURLInputValue', value => !!value );\n\t\tinsertButtonView.delegate( 'execute' ).to( this, 'submit' );\n\t\tcancelButtonView.delegate( 'execute' ).to( this, 'cancel' );\n\n\t\treturn { insertButtonView, cancelButtonView };\n\t}\n\n\t/**\n\t * Focuses the first {@link #_focusables focusable} in the form.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n}\n\n/**\n * Fired when the form view is submitted (when one of the children triggered the submit event),\n * e.g. by a click on {@link #insertButtonView}.\n *\n * @event submit\n */\n\n/**\n * Fired when the form view is canceled, e.g. by a click on {@link #cancelButtonView}.\n *\n * @event cancel\n */\n"]},"metadata":{},"sourceType":"module"}